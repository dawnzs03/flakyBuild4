<?xml version="1.0"?>

<project basedir="." name="portal-test-workspace" xmlns:antelope="antlib:ise.antelope.tasks">
	<import file="build-test.xml" />

	<macrodef name="deploy-workspace-client-extension">
		<attribute default="default" name="virtual.instance.id" />
		<attribute name="workspace.client.extension.name" />

		<sequential>
			<var name="client.extension.deployed.id" unset="true" />

			<propertyregex
				input="@{workspace.client.extension.name}"
				property="client.extension.deployed.id"
				regexp="[^a-zA-Z0-9\\s]"
				replace=""
			/>

			<var name="workspace.name" unset="true" />

			<propertyregex
				input="@{workspace.client.extension.name}"
				property="workspace.name"
				regexp="(liferay-[^-]+)-.*"
				replace="\1-workspace"
			/>

			<var name="workspace.client.extension.dir" unset="true" />

			<property name="workspace.client.extension.dir" value="${project.dir}/workspaces/${workspace.name}/client-extensions/@{workspace.client.extension.name}" />

			<delete file="${workspace.client.extension.dir}/client-extension.poshi.yaml" />

			<if>
				<not>
					<equals arg1="@{virtual.instance.id}" arg2="default" />
				</not>
				<then>
					<beanshell>
						<![CDATA[
							import com.liferay.jenkins.results.parser.JenkinsResultsParserUtil;

							public List getClientExtensionIds() {
								String fileContent = JenkinsResultsParserUtil.read(new File(project.getProperty("workspace.client.extension.dir"), "client-extension.yaml"));

								List clientExtentionIds = new ArrayList();

								String clientExtentionId = null;

								for (String line : fileContent.split("\\n")) {
									if (line.matches("([^:^\\s]+):")) {
										clientExtentionId = line.replaceAll("([^:^\\s]+):", "$1");
									}

									if (clientExtentionId == null) {
										continue;
									}

									if (line.matches("\\s{4}type: .+")) {
										clientExtentionIds.add(clientExtentionId);
									}
								}

								return clientExtentionIds;
							}

							StringBuilder sb = new StringBuilder();

							for (String clientExtentionId : getClientExtensionIds()) {
								sb.append(clientExtentionId);
								sb.append(":\n    dxp.lxc.liferay.com.virtualInstanceId: @{virtual.instance.id}\n");
							}

							JenkinsResultsParserUtil.write(new File(project.getProperty("workspace.client.extension.dir"), "client-extension.poshi.yaml"), sb.toString());
						]]>
					</beanshell>

					<print-file file.name="${workspace.client.extension.dir}/client-extension.poshi.yaml" />
				</then>
			</if>

			<if>
				<available file="${workspace.client.extension.dir}" />
				<then>
					<gradle-execute dir="${workspace.client.extension.dir}" task="clean">
						<arg value="-Pliferay.virtual.instance.id=@{virtual.instance.id}" />
						<arg value="-Pliferay.workspace.home.dir=${liferay.home}" />
					</gradle-execute>

					<if>
						<available file="${workspace.client.extension.dir}/client-extension.poshi.yaml" />
						<then>
							<gradle-execute dir="${project.dir}/workspaces/${workspace.name}" task=":client-extensions:@{workspace.client.extension.name}:deployPoshi">
								<arg value="-Pliferay.virtual.instance.id=@{virtual.instance.id}" />
								<arg value="-Pliferay.workspace.home.dir=${liferay.home}" />
							</gradle-execute>
						</then>
						<else>
							<gradle-execute dir="${project.dir}/workspaces/${workspace.name}" task=":client-extensions:@{workspace.client.extension.name}:deploy">
								<arg value="-Pliferay.virtual.instance.id=@{virtual.instance.id}" />
								<arg value="-Pliferay.workspace.home.dir=${liferay.home}" />
							</gradle-execute>
						</else>
					</if>

					<if>
						<not>
							<equals arg1="@{virtual.instance.id}" arg2="default" />
						</not>
						<then>
							<wait-for-client-extension-deployment
								client.extension.deploy.log="STARTED ${client.extension.deployed.id}_"
							/>
						</then>
					</if>
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="deploy-workspace-client-extensions">
		<sequential>
			<propertycopy from="workspaces.client.extension.names[${workspace.name}]" name="workspaces.client.extension.names" override="true" />

			<for list="${workspaces.client.extension.names}" param="workspace.client.extension.name">
				<sequential>
					<undeploy-workspace-client-extension workspace.client.extension.name="@{workspace.client.extension.name}" />

					<deploy-workspace-client-extension workspace.client.extension.name="@{workspace.client.extension.name}" />
				</sequential>
			</for>
		</sequential>
	</macrodef>

	<macrodef name="start-spring-boot-client-extension">
		<attribute name="spring.boot.application.name" />
		<attribute default="default" name="virtual.instance.id" />
		<attribute name="workspace.client.extension.name" />
		<attribute default="false" name="wait.for.ready" />

		<text default="" name="application.properties" />

		<sequential>
			<local name="workspace.name" />

			<propertyregex
				input="@{workspace.client.extension.name}"
				property="workspace.name"
				regexp="(liferay-[^-]+)-.*"
				replace="\1-workspace"
			/>

			<var name="workspace.client.extension.dir" unset="true" />

			<property name="workspace.client.extension.dir" value="${project.dir}/workspaces/${workspace.name}/client-extensions/@{workspace.client.extension.name}" />

			<delete file="${workspace.client.extension.dir}/application.properties" />

			<echo file="${workspace.client.extension.dir}/application.properties">
				@{application.properties}

				logging.file.path=${workspace.client.extension.dir}/logs
			</echo>

			<print-file file.name="${workspace.client.extension.dir}/application.properties" />

			<delete file="${workspace.client.extension.dir}/logs/spring.log" />

			<parallel>
				<daemons>
					<execute dir="${workspace.client.extension.dir}">
						(../../gradlew bootRun -Pliferay.workspace.home.dir=${liferay.home} -Pliferay.virtual.instance.id=@{virtual.instance.id})
					</execute>
				</daemons>

				<sequential>
					<beanshell>
						<![CDATA[
							import com.liferay.jenkins.results.parser.JenkinsResultsParserUtil;

							List propertiesFiles = new ArrayList();

							propertiesFiles.add(new File(project.getProperty("workspace.client.extension.dir"), "application.properties"));
							propertiesFiles.add(new File(project.getProperty("workspace.client.extension.dir"), "src/main/resources/application.properties"));
							propertiesFiles.add(new File(project.getProperty("workspace.client.extension.dir"), "src/main/resources/application-default.properties"));

							Properties applicationProperties = JenkinsResultsParserUtil.getProperties(propertiesFiles.toArray(new File[0]));

							project.setProperty("server.port", JenkinsResultsParserUtil.getProperty(applicationProperties, "server.port"));
						]]>
					</beanshell>

					<if>
						<isset property="server.port" />
						<then>
							<waitfor maxwait="120" maxwaitunit="second">
								<socket port="${server.port}" server="localhost" />
							</waitfor>
						</then>
					</if>

					<waitfor checkevery="1" checkeveryunit="second" maxwait="60" maxwaitunit="second" timeoutproperty="spring.boot.startup.timeout">
						<resourcecontains
							resource="${workspace.client.extension.dir}/logs/spring.log"
							substring="Started @{spring.boot.application.name} in"
						/>
					</waitfor>

					<print-file file.name="${workspace.client.extension.dir}/logs/spring.log" />

					<if>
						<isset property="spring.boot.startup.timeout" />
						<then>
							<fail message="Failed to startup '@{spring.boot.application.name}'" />
						</then>
					</if>

					<if>
						<equals arg1="@{wait.for.ready}" arg2="true" />
						<then>
							<beanshell>
								<![CDATA[
									import com.liferay.jenkins.results.parser.JenkinsResultsParserUtil;

									String readyURL = "http://localhost:" + project.getProperty("server.port") + "/ready";

									for (int i = 0; i < 30; i++) {
										try {
											String content = JenkinsResultsParserUtil.toString(readyURL, false);

											if (content.contains("READY")) {
												break;
											}
										}
										catch (Exception exception) {
											System.out.println("Waiting for READY to be available at " + url);

											Thread.sleep(1000);
										}
									}
								]]>
							</beanshell>
						</then>
					</if>
				</sequential>
			</parallel>
		</sequential>
	</macrodef>

	<macrodef name="start-workspace">
		<sequential>
			<deploy-workspace-client-extensions />
		</sequential>
	</macrodef>

	<macrodef name="stop-spring-boot-client-extension">
		<attribute name="spring.boot.application.name" />

		<sequential>
			<if>
				<not>
					<equals arg1="@{spring.boot.application.name}" arg2="" />
				</not>
				<then>
					<beanshell>
						<![CDATA[
							import com.liferay.jenkins.results.parser.JenkinsResultsParserUtil;

							Process jpsProcess = JenkinsResultsParserUtil.executeBashCommands(new String[] {"jps | grep @{spring.boot.application.name}"});

							String processOutput = JenkinsResultsParserUtil.readInputStream(jpsProcess.getInputStream());

							for (String line : processOutput.split("\\n")) {
								if (!line.matches("(\\d+) @{spring.boot.application.name}")) {
									continue;
								}

								String processId = line.replaceAll("(\\d+) @{spring.boot.application.name}", "$1");

								Process process = JenkinsResultsParserUtil.executeBashCommands(new String[] {"kill -9 " + processId});

								System.out.println(JenkinsResultsParserUtil.readInputStream(process.getInputStream()));
							}
						]]>
					</beanshell>
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="stop-workspace">
		<sequential>
			<undeploy-workspace-client-extensions />
		</sequential>
	</macrodef>

	<macrodef name="undeploy-workspace-client-extension">
		<attribute default="default" name="virtual.instance.id" />
		<attribute name="workspace.client.extension.name" />

		<sequential>
			<var name="client.extension.deployed.id" unset="true" />

			<propertyregex
				input="@{workspace.client.extension.name}"
				property="client.extension.deployed.id"
				regexp="[^a-zA-Z0-9\\s]"
				replace=""
			/>

			<var name="workspace.name" unset="true" />

			<propertyregex
				input="@{workspace.client.extension.name}"
				property="workspace.name"
				regexp="(liferay-[^-]+)-.*"
				replace="\1-workspace"
			/>

			<if>
				<available file="${liferay.home}/osgi/client-extensions/@{workspace.client.extension.name}.zip" />
				<then>
					<delete file="${liferay.home}/osgi/client-extensions/@{workspace.client.extension.name}.zip" />

					<if>
						<not>
							<equals arg1="@{virtual.instance.id}" arg2="default" />
						</not>
						<then>
							<wait-for-client-extension-deployment
								client.extension.deploy.log="STOPPED ${client.extension.deployed.id}_"
							/>
						</then>
					</if>
				</then>
			</if>
		</sequential>
	</macrodef>

	<macrodef name="undeploy-workspace-client-extensions">
		<sequential>
			<propertycopy from="workspaces.client.extension.names[${workspace.name}]" name="workspaces.client.extension.names" override="true" />

			<for list="${workspaces.client.extension.names}" param="workspace.client.extension.name">
				<sequential>
					<undeploy-workspace-client-extension workspace.client.extension.name="@{workspace.client.extension.name}" />
				</sequential>
			</for>
		</sequential>
	</macrodef>

	<macrodef name="wait-for-client-extension-deployment">
		<attribute name="client.extension.deploy.log" />

		<sequential>
			<property name="client.extension.log" value="${project.dir}/client-extension-log" />

			<delete file="${client.extension.log}" />

			<record action="start" name="${client.extension.log}" />

			<local name="deploy.client.extension.timeout" />

			<waitfor checkevery="1" checkeveryunit="second" maxwait="30" maxwaitunit="second" timeoutproperty="deploy.client.extension.timeout">
				<resourcecontains
					resource="${client.extension.log}"
					substring="@{client.extension.deploy.log}"
				/>
			</waitfor>

			<record action="stop" name="${client.extension.log}" />

			<delete file="${client.extension.log}" />

			<if>
				<isset property="deploy.client.extension.timeout" />
				<then>
					<echo>WARNING: Unable to confirm the client extension</echo>
				</then>
			</if>
		</sequential>
	</macrodef>

	<target name="deploy-workspace-client-extension">
		<fail message="Please set the property ${workspace.client.extension.name}." unless="workspace.client.extension.name" />

		<condition else="default" property="virtual.instance.id" value="${virtual.instance.id}">
			<isset property="virtual.instance.id" />
		</condition>

		<undeploy-workspace-client-extension virtual.instance.id="${virtual.instance.id}" workspace.client.extension.name="${workspace.client.extension.name}" />

		<deploy-workspace-client-extension virtual.instance.id="${virtual.instance.id}" workspace.client.extension.name="${workspace.client.extension.name}" />
	</target>

	<target name="start-spring-boot-client-extension">
		<fail message="Please set the property ${spring.boot.application.name}." unless="spring.boot.application.name" />
		<fail message="Please set the property ${workspace.client.extension.name}." unless="workspace.client.extension.name" />

		<start-spring-boot-client-extension
			spring.boot.application.name="${spring.boot.application.name}"
			workspace.client.extension.name="${workspace.client.extension.name}"
		/>
	</target>

	<target name="start-workspace">
		<fail message="Please set the property ${workspace.name}." unless="workspace.name" />

		<stop-workspace />

		<start-workspace />
	</target>

	<target name="stop-spring-boot-client-extension">
		<fail message="Please set the property ${spring.boot.application.name}." unless="spring.boot.application.name" />

		<stop-spring-boot-client-extension spring.boot.application.name="${spring.boot.application.name}" />
	</target>

	<target name="stop-workspace">
		<fail message="Please set the property ${workspace.name}." unless="workspace.name" />

		<stop-workspace />
	</target>

	<target name="undeploy-workspace-client-extension">
		<fail message="Please set the property ${workspace.client.extension.name}." unless="workspace.client.extension.name" />

		<condition else="default" property="virtual.instance.id" value="${virtual.instance.id}">
			<isset property="virtual.instance.id" />
		</condition>

		<undeploy-workspace-client-extension virtual.instance.id="${virtual.instance.id}" workspace.client.extension.name="${workspace.client.extension.name}" />
	</target>
</project>