<?xml version="1.0"?>

<project basedir="." name="portal-test-local" xmlns:antelope="antlib:ise.antelope.tasks">
	<import file="build-test.xml" />

	<macrodef name="clean-bundles-backup-properties">
		<sequential>
			<replaceregexp
				file="test.${user.name}.properties"
				match="(\n).*## Autogenerated Bundles Backup Properties(.*\n)+## Autogenerated Bundles Backup Properties.*\r?\n"
				replace=""
			/>
		</sequential>
	</macrodef>

	<macrodef name="get-backend-test-paths">
		<sequential>
			<if>
				<not>
					<contains string="${test.class}" substring="com.liferay." />
				</not>
				<then>
					<fail message="Please set -Dtest.class= to full test class package name. e.g. -Dtest.class=com.liferay.address.service.test.AddressLocalServiceTest" />
				</then>
			</if>

			<if>
				<contains string="${test.class}" substring="Test.test" />
				<then>
					<propertyregex
						input="${test.class}"
						property="test.method.name"
						regexp="([^\.]+$)"
						select="\1"
					/>

					<propertyregex
						input="${test.class}"
						override="true"
						property="test.class"
						regexp=".*(?=\.)"
						select="\0"
					/>
				</then>
			</if>

			<propertyregex
				global="true"
				input="${test.class}"
				property="test.package.dir"
				regexp="\."
				replace="/"
			/>

			<first id="first">
				<fileset
					dir="${project.dir}/modules"
					includes="**/${test.package.dir}*.java"
				/>
			</first>

			<var name="test.class.file.path" value="${toString:first}" />

			<propertyregex
				input="${test.class.file.path}"
				property="test.class.root.dir"
				regexp="(.+)(src\/test)(.+)"
				replace="\1"
			/>

			<propertyregex
				input="${test.class}"
				property="test.class.base.name"
				regexp="([^\.]+$)"
				select="\1"
			/>

			<if>
				<isset property="test.method.name" />
				<then>
					<property name="test.class.name" value="${test.class.base.name}.${test.method.name}" />
				</then>
				<else>
					<property name="test.class.name" value="${test.class.base.name}" />
				</else>
			</if>
		</sequential>
	</macrodef>

	<target name="build-dxp">
		<antcall inheritAll="false" target="setup-profile-dxp" />

		<antcall target="all" />

		<antcall target="create-bundles-backup" />
	</target>

	<target name="create-bundles-backup">
		<clean-bundles-backup-properties />

		<basename file="${app.server.parent.dir}" property="app.server.parent.dir.name" />

		<exec dir="${project.dir}" executable="git" outputproperty="git.commit.portal.rev.parse">
			<arg line="rev-parse HEAD" />
		</exec>

		<property location="${app.server.parent.dir}/../" name="liferay.home.parent.dir" />

		<echo>Creating backup of ${app.server.parent.dir.name} directory at ${liferay.home.parent.dir}/bundles-master-${git.commit.portal.rev.parse}.tar.gz.</echo>

		<exec dir="${liferay.home.parent.dir}" executable="tar" failonerror="true">
			<arg value="-czf" />
			<arg value="${liferay.home.parent.dir}/bundles-master-${git.commit.portal.rev.parse}.tar.gz" />
			<arg value="${app.server.parent.dir.name}" />
		</exec>

		<echo append="true" file="test.${user.name}.properties"><![CDATA[
## Autogenerated Bundles Backup Properties
local.bundles.backup.file=${liferay.home.parent.dir}/bundles-master-${git.commit.portal.rev.parse}.tar.gz
## Autogenerated Bundles Backup Properties
]]></echo>
	</target>

	<target name="database-reset">
		<propertycopy from="database.${database.type}.host" name="database.host.current" />

		<if>
			<contains string="${database.host.current}" substring="localhost_" />
			<then>
				<antcall target="rebuild-database">
					<param name="database.type" value="${database.type}" />
					<param name="sql.dir" value="sql/create-bare/" />
					<param name="sql.file" value="create-bare-${database.type}.sql" />
				</antcall>
			</then>
			<else>
				<antcall target="database-reset-container" />
			</else>
		</if>
	</target>

	<target name="database-reset-container">
		<antcall inheritAll="false" target="start-docker-database-${database.type}">
			<param name="skip.property.cleanup" value="true" />
		</antcall>
	</target>

	<target name="fetch-pull-request">
		<if>
			<not>
				<matches pattern="https?://" string="${pull.request.url}" />
			</not>
			<then>
				<fail message="Please set -Dpull.request.url= to URL of the Pull Request when calling this target." />
			</then>
		</if>

		<propertyregex
			input="${pull.request.url}"
			property="pull.request.number"
			regexp="(.+github\.com\/)(.*)(\/liferay\-portal\/pull\/)([0-9]+)"
			replace="\4"
		/>

		<propertyregex
			input="${pull.request.url}"
			property="pull.request.username"
			regexp="(.+github\.com\/)(.*)(\/liferay\-portal\/pull\/)([0-9]+)"
			replace="\2"
		/>

		<exec executable="git" failonerror="true">
			<arg value="fetch" />
			<arg value="https://github.com/${pull.request.username}/liferay-portal" />
			<arg value="pull/${pull.request.number}/head:master-${pull.request.username}-${pull.request.number}" />
		</exec>

		<exec executable="git" failonerror="true">
			<arg value="checkout" />
			<arg value="master-${pull.request.username}-${pull.request.number}" />
		</exec>
	</target>

	<target name="restore-bundles-backup">
		<if>
			<not>
				<isset property="local.bundles.backup.file" />
			</not>
			<then>
				<fail message="Please set local.bundles.backup.file property in test.${user.name}.properties to the full file path of the local tar.gz backup file." />
			</then>
		</if>

		<delete dir="${app.server.parent.dir}" />

		<dirname file="${local.bundles.backup.file}" property="bundles.backup.parent.dir" />

		<exec dir="${bundles.backup.parent.dir}" executable="tar" failonerror="true">
			<arg value="-xf" />
			<arg value="${local.bundles.backup.file}" />
		</exec>

		<if>
			<not>
				<available file="${app.server.parent.dir}" type="dir" />
			</not>
			<then>
				<fail message="Backup restored to ${bundles.backup.parent.dir} but app.server.parent.dir was not found. Please check that app.server.parent.dir matches the bundle location." />
			</then>
		</if>

		<antcall target="database-reset" />
	</target>

	<target name="run-integration-test">
		<get-backend-test-paths />

		<gradle-execute dir="${test.class.root.dir}" task="testIntegration">
			<arg value="testIntegration" />
			<arg value="--tests" />
			<arg value="${test.class.name}" />
		</gradle-execute>
	</target>

	<target name="run-poshi-test">
		<antcall target="run-selenium-test" />
	</target>

	<target name="run-poshi-tomcat">
		<antcall inheritAll="false" target="clean-up-java-processes" />

		<if>
			<equals arg1="${restore.local.bundles}" arg2="true" />
			<then>
				<antcall target="restore-bundles-backup" />
			</then>
		</if>

		<if>
			<available file="${app.server.parent.dir}/license" type="dir" />
			<then>
				<var name="test.bundle.type" value="portal-release" />
			</then>
			<else>
				<var name="test.bundle.type" value="default" />
			</else>
		</if>

		<ant antfile="build-test-tomcat-${database.type}.xml" target="run-selenium-tomcat-${database.type}">
			<property name="env.CI_TEST_SUITE" value="${test.bundle.type}" />
			<property name="test.class" value="${test.class}" />
		</ant>
	</target>

	<target name="run-unit-test">
		<get-backend-test-paths />

		<gradle-execute dir="${test.class.root.dir}" task="testIntegration">
			<arg value="test" />
			<arg value="--tests" />
			<arg value="${test.class.name}" />
		</gradle-execute>
	</target>

	<target name="setup-ci-bundle">
		<property location="${app.server.parent.dir}/../" name="liferay.home.parent.dir" />

		<if>
			<not>
				<available file="${liferay.home.parent.dir}/liferay-portal-bundle-tomcat.tar.gz" />
			</not>
			<then>
				<fail message="Please place liferay-portal-bundle-tomcat.tar.gz in ${liferay.home.parent.dir}." />
			</then>
		</if>

		<delete dir="${app.server.parent.dir}" />

		<exec dir="${liferay.home.parent.dir}" executable="tar" failonerror="true">
			<arg value="-xf" />
			<arg value="liferay-portal-bundle-tomcat.tar.gz" />
		</exec>

		<if>
			<not>
				<available file="${app.server.parent.dir}" type="dir" />
			</not>
			<then>
				<move
					file="${liferay.home.parent.dir}/bundles"
					tofile="${app.server.parent.dir}"
				/>
			</then>
		</if>

		<if>
			<not>
				<available file="${app.server.parent.dir}" type="dir" />
			</not>
			<then>
				<fail message="Backup restored to ${liferay.home.parent.dir} but app.server.parent.dir was not found. Please check that app.server.parent.dir matches the bundle location." />
			</then>
		</if>

		<antcall target="database-reset-container" />
	</target>

	<target name="setup-portal-cluster">
		<if>
			<isset property="node.count" />
			<then>
				<condition property="non.numeric">
					<matches pattern="[^0-9]" string="${node.count}" />
				</condition>

				<fail if="non.numeric" message="node.count property must be a number" />

				<math
					datatype="int"
					operand1="${node.count}"
					operand2="1"
					operation="-"
					result="app.server.bundles.size"
				/>

				<property name="app.server.bundles.size" value="${app.server.bundles.size}" />
			</then>
			<else>
				<property name="app.server.bundles.size" value="1" />
			</else>
		</if>

		<antcall target="database-reset" />

		<property name="cluster.enabled" value="true" />

		<antcall target="prepare-portal-ext-properties" />

		<if>
			<not>
				<equals arg1="${app.server.bundles.size}" arg2="0" />
			</not>
			<then>
				<ant antfile="build-test-elasticsearch7.xml" target="start-elasticsearch" />

				<prepare-additional-bundles />
			</then>
		</if>

		<prepare-test-cluster-properties />
	</target>

	<target name="setup-release-bundle">
		<if>
			<not>
				<isset property="local.bundles.release.file" />
			</not>
			<then>
				<fail message="Please set local.bundles.release.file property in test.${user.name}.properties file to the full file path of the local tar.gz release file." />
			</then>
			<elseif>
				<not>
					<isset property="local.bundles.release.dir.name" />
				</not>
				<then>
					<fail message="Please set local.bundles.release.dir.name property in test.${user.name}.properties to the directory name of the release." />
				</then>
			</elseif>
			<elseif>
				<not>
					<isset property="local.bundles.release.license.file" />
				</not>
				<then>
					<fail message="Please set local.bundles.release.license.file property in test.${user.name}.properties file to the full file path of the local license xml file." />
				</then>
			</elseif>
		</if>

		<delete dir="${app.server.parent.dir}" />

		<dirname file="${local.bundles.release.file}" property="bundles.release.parent.dir" />

		<delete dir="${bundles.release.parent.dir}/${local.bundles.release.dir.name}" />

		<exec dir="${bundles.release.parent.dir}" executable="tar" failonerror="true">
			<arg value="-xf" />
			<arg value="${local.bundles.release.file}" />
		</exec>

		<move
			file="${bundles.release.parent.dir}/${local.bundles.release.dir.name}"
			tofile="${app.server.parent.dir}"
		/>

		<mkdir dir="${app.server.parent.dir}/deploy" />

		<copy
			file="${local.bundles.release.license.file}"
			tofile="${app.server.parent.dir}/deploy/license.xml"
			verbose="true"
		/>

		<if>
			<not>
				<available file="${app.server.parent.dir}" type="dir" />
			</not>
			<then>
				<fail message="Backup restored to ${bundles.release.parent.dir} but app.server.parent.dir was not found. Please check that app.server.parent.dir matches the bundle location." />
			</then>
		</if>

		<antcall target="database-reset-container" />
	</target>

	<target name="start-docker-database-db2">
		<if>
			<or>
				<not>
					<isset property="database.version" />
				</not>
				<equals arg1="${database.version}" arg2="11.5" />
			</or>
			<then>
				<var name="database.version" value="11.5.7.0" />
			</then>
		</if>

		<if>
			<or>
				<equals arg1="${database.version}" arg2="11.1" />
				<equals arg1="${database.version}" arg2="11.1.3" />
			</or>
			<then>
				<var name="database.db2.docker.image" value="us-central1-docker.pkg.dev/liferay-artifact-registry/ci-environment/db2-11.1.3.3:1.0.0" />
				<var name="database.db2.docker.run.options" value="-p 25010:50000 --privileged=true" />
				<var name="database.db2.password" value="I7Oen70215bieRR" />
				<var name="database.db2.username" value="root" />
			</then>
			<else>
				<var name="database.db2.docker.image" value="ibmcom/db2:${database.version}" />
				<var name="database.db2.docker.run.options" value="-itd --privileged=true -p 25010:50000 --env=LICENSE=accept --env=DB2INST1_PASSWORD=liferay123 -v /tmp/database ibmcom/db2:${database.version}" />
				<var name="database.db2.password" value="liferay123" />
				<var name="database.db2.username" value="db2inst1" />
			</else>
		</if>

		<touch file="test.${user.name}.properties" />

		<antcall inheritAll="false" target="clean-up-database-properties" />

		<echo append="true" file="test.${user.name}.properties"><![CDATA[
## Autogenerated Database Properties
database.db2.docker.image=${database.db2.docker.image}
database.db2.host=localhost_db2
database.db2.password=${database.db2.password}
database.db2.schema=lportal
database.db2.url=jdbc:db2://localhost:25010/lportal:deferPrepares=false;fullyMaterializeInputStreams=true;fullyMaterializeLobData=true;progresssiveLocators=2;progressiveStreaming=2;
database.db2.username=${database.db2.username}
database.db2.version=${database.version}
database.type=db2
## Autogenerated Database Properties
]]></echo>

		<antcall inheritAll="false" target="stop-docker-database" />

		<antcall inheritAll="false" target="start-docker-database">
			<param name="database.db2.docker.run.options" value="${database.db2.docker.run.options}" />
			<param name="database.db2.name" value="DB2" />
		</antcall>

		<if>
			<not>
				<isset property="skip.prepare.portal.ext.properties" />
			</not>
			<then>
				<antcall inheritAll="false" target="prepare-portal-ext-properties" />
			</then>
		</if>

		<if>
			<not>
				<isset property="skip.rebuild.database" />
			</not>
			<then>
				<antcall inheritAll="false" target="rebuild-database">
					<param name="sql.dir" value="sql/create-bare/" />
					<param name="sql.file" value="create-bare-db2.sql" />
				</antcall>
			</then>
		</if>

		<if>
			<not>
				<isset property="skip.copy.optional.jars" />
			</not>
			<then>
				<get-test-app-server-lib-portal-dir />

				<antcall inheritAll="false" target="copy-optional-jars">
					<param name="test.jdbc.drivers.url" value="http://mirrors.lax.liferay.com/files.liferay.com/private/jdbc" />
					<param name="todir" value="${test.app.server.lib.portal.dir}" />
				</antcall>
			</then>
		</if>

		<if>
			<not>
				<isset property="skip.property.cleanup" />
			</not>
			<then>
				<antcall inheritAll="false" target="clean-up-database-properties" />
			</then>
		</if>
	</target>

	<target name="start-docker-database-mariadb">
		<if>
			<not>
				<isset property="database.version" />
			</not>
			<then>
				<var name="database.version" value="10.6" />
			</then>
		</if>

		<if>
			<equals arg1="${database.version}" arg2="10.2" />
			<then>
				<var name="database.version" value="10.2.25" />
			</then>
			<elseif>
				<equals arg1="${database.version}" arg2="10.4" />
				<then>
					<var name="database.version" value="10.4.14" />
				</then>
			</elseif>
		</if>

		<touch file="test.${user.name}.properties" />

		<antcall inheritAll="false" target="clean-up-database-properties" />

		<echo append="true" file="test.${user.name}.properties"><![CDATA[
## Autogenerated Database Properties
database.mariadb.docker.image=mariadb:${database.version}
database.mariadb.host=localhost_mariadb
database.mariadb.password=
database.mariadb.schema=lportal
database.mariadb.url=jdbc:mariadb://localhost:3308/lportal?useUnicode=true&characterEncoding=UTF-8&useFastDateParsing=false
database.mariadb.username=root
database.mariadb.version=${database.version}
database.type=mariadb
## Autogenerated Database Properties
]]></echo>

		<antcall inheritAll="false" target="stop-docker-database" />

		<antcall inheritAll="false" target="start-docker-database">
			<param name="database.mariadb.docker.run.options" value="--env=MYSQL_ALLOW_EMPTY_PASSWORD=yes -p 3308:3306" />
			<param name="database.mariadb.name" value="MariaDB" />
		</antcall>

		<if>
			<not>
				<isset property="skip.prepare.portal.ext.properties" />
			</not>
			<then>
				<antcall inheritAll="false" target="prepare-portal-ext-properties" />
			</then>
		</if>

		<if>
			<not>
				<isset property="skip.rebuild.database" />
			</not>
			<then>
				<antcall inheritAll="false" target="rebuild-database">
					<param name="sql.dir" value="sql/create-bare/" />
					<param name="sql.file" value="create-bare-mariadb.sql" />
				</antcall>
			</then>
		</if>

		<if>
			<not>
				<isset property="skip.property.cleanup" />
			</not>
			<then>
				<antcall inheritAll="false" target="clean-up-database-properties" />
			</then>
		</if>
	</target>

	<target name="start-docker-database-mysql">
		<if>
			<not>
				<isset property="database.version" />
			</not>
			<then>
				<var name="database.version" value="5.7" />
			</then>
		</if>

		<touch file="test.${user.name}.properties" />

		<antcall inheritAll="false" target="clean-up-database-properties" />

		<echo append="true" file="test.${user.name}.properties"><![CDATA[
## Autogenerated Database Properties
database.mysql.docker.image=mysql:${database.version}
database.mysql.host=localhost_mysql
database.mysql.password=
database.mysql.schema=lportal
database.mysql.url=jdbc:mysql://localhost:3307/lportal?characterEncoding=UTF-8&dontTrackOpenResources=true&holdResultsOpenOverStatementClose=true&serverTimezone=GMT&useFastDateParsing=false&useUnicode=true
database.mysql.username=root
database.mysql.version=${database.version}
database.type=mysql
## Autogenerated Database Properties
]]></echo>

		<antcall inheritAll="false" target="stop-docker-database" />

		<antcall inheritAll="false" target="start-docker-database">
			<param name="database.mysql.docker.run.options" value="--env=MYSQL_ALLOW_EMPTY_PASSWORD=yes -p 3307:3306" />
			<param name="database.mysql.name" value="MySQL" />
		</antcall>

		<if>
			<not>
				<isset property="skip.prepare.portal.ext.properties" />
			</not>
			<then>
				<antcall inheritAll="false" target="prepare-portal-ext-properties" />
			</then>
		</if>

		<if>
			<not>
				<isset property="skip.rebuild.database" />
			</not>
			<then>
				<antcall inheritAll="false" target="rebuild-database">
					<param name="sql.dir" value="sql/create-bare/" />
					<param name="sql.file" value="create-bare-mysql.sql" />
				</antcall>
			</then>
		</if>

		<if>
			<not>
				<isset property="skip.property.cleanup" />
			</not>
			<then>
				<antcall inheritAll="false" target="clean-up-database-properties" />
			</then>
		</if>
	</target>

	<target name="start-docker-database-oracle">
		<touch file="test.${user.name}.properties" />

		<touch file="sql/sql.${user.name}.properties" />

		<antcall inheritAll="false" target="clean-up-database-properties" />

		<echo append="true" file="test.${user.name}.properties"><![CDATA[
## Autogenerated Database Properties
database.oracle.docker.image=us-central1-docker.pkg.dev/liferay-artifact-registry/ci-environment/oracle-19.3.0.0.0:1.0.1
database.oracle.host=localhost_oracle
database.oracle.password=lportal
database.oracle.schema=lportal
database.oracle.url=jdbc:oracle:thin:@localhost:1522:oracl?oracle.net.disableOob=true
database.oracle.username=lportal
database.oracle.version=19.3.0.0.0
database.type=oracle
## Autogenerated Database Properties
]]></echo>

		<echo append="true" file="sql/sql.${user.name}.properties"><![CDATA[
## Autogenerated Database Properties
oracle.admin.password=liferay123
oracle.admin.user=system
## Autogenerated Database Properties
]]></echo>

		<antcall inheritAll="false" target="stop-docker-database" />

		<antcall inheritAll="false" target="start-docker-database">
			<param name="database.oracle.docker.run.options" value="-p 1522:1521" />
			<param name="database.oracle.name" value="Oracle" />
		</antcall>

		<if>
			<not>
				<isset property="skip.prepare.portal.ext.properties" />
			</not>
			<then>
				<antcall inheritAll="false" target="prepare-portal-ext-properties" />
			</then>
		</if>

		<if>
			<not>
				<isset property="skip.rebuild.database" />
			</not>
			<then>
				<antcall inheritAll="false" target="rebuild-database">
					<param name="sql.dir" value="sql/create-bare/" />
					<param name="sql.file" value="create-bare-oracle.sql" />
				</antcall>
			</then>
		</if>

		<if>
			<not>
				<isset property="skip.copy.optional.jars" />
			</not>
			<then>
				<get-test-app-server-lib-portal-dir />

				<antcall inheritAll="false" target="copy-optional-jars">
					<param name="test.jdbc.drivers.url" value="http://mirrors.lax.liferay.com/files.liferay.com/private/jdbc" />
					<param name="todir" value="${test.app.server.lib.portal.dir}" />
				</antcall>
			</then>
		</if>

		<if>
			<not>
				<isset property="skip.property.cleanup" />
			</not>
			<then>
				<antcall inheritAll="false" target="clean-up-database-properties" />
			</then>
		</if>
	</target>

	<target name="start-docker-database-postgresql">
		<if>
			<not>
				<isset property="database.version" />
			</not>
			<then>
				<var name="database.version" value="14.4" />
			</then>
		</if>

		<touch file="test.${user.name}.properties" />

		<antcall inheritAll="false" target="clean-up-database-properties" />

		<echo append="true" file="test.${user.name}.properties"><![CDATA[
## Autogenerated Database Properties
database.postgresql.docker.image=postgres:${database.version}
database.postgresql.host=localhost_postgresql
database.postgresql.password=
database.postgresql.schema=lportal
database.postgresql.url=jdbc:postgresql://localhost:5433/lportal
database.postgresql.username=root
database.postgresql.version=${database.version}
database.type=postgresql
## Autogenerated Database Properties
]]></echo>

		<antcall inheritAll="false" target="stop-docker-database" />

		<antcall inheritAll="false" target="start-docker-database">
			<param name="database.postgresql.docker.run.options" value="--env=POSTGRES_USER=root -p 5433:5432 --env=POSTGRES_HOST_AUTH_METHOD=trust" />
			<param name="database.postgresql.name" value="PostgreSQL" />
		</antcall>

		<if>
			<not>
				<isset property="skip.prepare.portal.ext.properties" />
			</not>
			<then>
				<antcall inheritAll="false" target="prepare-portal-ext-properties" />
			</then>
		</if>

		<if>
			<not>
				<isset property="skip.rebuild.database" />
			</not>
			<then>
				<antcall inheritAll="false" target="rebuild-database">
					<param name="sql.dir" value="sql/create-bare/" />
					<param name="sql.file" value="create-bare-postgresql.sql" />
				</antcall>
			</then>
		</if>

		<if>
			<not>
				<isset property="skip.property.cleanup" />
			</not>
			<then>
				<antcall inheritAll="false" target="clean-up-database-properties" />
			</then>
		</if>
	</target>

	<target name="start-docker-database-sqlserver">
		<if>
			<not>
				<isset property="database.version" />
			</not>
			<then>
				<var name="database.version" value="2019" />
			</then>
		</if>

		<if>
			<equals arg1="${database.version}" arg2="2017" />
			<then>
				<var name="database.sqlserver.docker.image" value="mcr.microsoft.com/mssql/server:2017-CU19-ubuntu-16.04" />
			</then>
			<elseif>
				<equals arg1="${database.version}" arg2="2019" />
				<then>
					<var name="database.sqlserver.docker.image" value="mcr.microsoft.com/mssql/server:2019-GA-ubuntu-16.04" />
				</then>
			</elseif>
			<elseif>
				<equals arg1="${database.version}" arg2="2022" />
				<then>
					<var name="database.sqlserver.docker.image" value="mcr.microsoft.com/mssql/server:2022-RTM-CU2-ubuntu-20.04" />
				</then>
			</elseif>
		</if>

		<touch file="test.${user.name}.properties" />

		<antcall inheritAll="false" target="clean-up-database-properties" />

		<echo append="true" file="test.${user.name}.properties"><![CDATA[
## Autogenerated Database Properties
database.sqlserver.docker.image=${database.sqlserver.docker.image}
database.sqlserver.host=localhost_sqlserver
database.sqlserver.password=Liferay123
database.sqlserver.schema=lportal
database.sqlserver.url=jdbc:sqlserver://localhost:1434;databaseName=lportal
database.sqlserver.username=sa
database.sqlserver.version=${database.version}
database.type=sqlserver
## Autogenerated Database Properties
]]></echo>

		<antcall inheritAll="false" target="stop-docker-database" />

		<antcall inheritAll="false" target="start-docker-database">
			<param name="database.sqlserver.docker.run.options" value="--env=ACCEPT_EULA=Y --env=SA_PASSWORD=Liferay123 -p 1434:1433" />
			<param name="database.sqlserver.name" value="SQL Server" />
		</antcall>

		<if>
			<not>
				<isset property="skip.prepare.portal.ext.properties" />
			</not>
			<then>
				<antcall inheritAll="false" target="prepare-portal-ext-properties" />
			</then>
		</if>

		<if>
			<not>
				<isset property="skip.rebuild.database" />
			</not>
			<then>
				<antcall inheritAll="false" target="rebuild-database">
					<param name="sql.dir" value="sql/create-bare/" />
					<param name="sql.file" value="create-bare-sql-server.sql" />
				</antcall>
			</then>
		</if>

		<if>
			<not>
				<isset property="skip.copy.optional.jars" />
			</not>
			<then>
				<get-test-app-server-lib-portal-dir />

				<antcall inheritAll="false" target="copy-optional-jars">
					<param name="test.jdbc.drivers.url" value="http://mirrors.lax.liferay.com/files.liferay.com/private/jdbc" />
					<param name="todir" value="${test.app.server.lib.portal.dir}" />
				</antcall>
			</then>
		</if>

		<if>
			<not>
				<isset property="skip.property.cleanup" />
			</not>
			<then>
				<antcall inheritAll="false" target="clean-up-database-properties" />
			</then>
		</if>
	</target>
</project>