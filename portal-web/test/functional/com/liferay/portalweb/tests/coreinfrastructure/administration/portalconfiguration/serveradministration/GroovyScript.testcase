@component-name = "portal-server-administration"
definition {

	property ci.retries.disabled = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Server Administration";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@priority = 3
	test ExecuteAssetLinkScriptDoesNotGenerateException {
		property portal.release = "false";
		property test.assert.warning.exceptions = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		HeadlessSite.addSite(siteName = "Test Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Site Page");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Test Site Name",
			layoutName = "Test Site Page",
			widgetName = "Asset Publisher");

		JSONBlog.addEntry(
			entryContent = "Test Content",
			entryTitle = "Test Title",
			groupName = "Test Site Name");

		ApplicationDisplayTemplates.openWidgetTemplatesAdmin(siteURLKey = "test-site-name");

		var templateScript = '''
<#if entries?has_content>
	<#list entries as curEntry>
		<#assign assetRenderer=curEntry.getAssetRenderer() 
			viewURL=assetPublisherHelper.getAssetViewURL(renderRequest, renderResponse, assetRenderer, curEntry,
			!stringUtil.equals(assetLinkBehavior, "showFullContent" ))
			curBlogEntry=assetRenderer.getAssetObject() /> ${curEntry.title}
			<@liferay_ratings["ratings"]
			className="com.liferay.blogs.model.BlogsEntry"
			classPK=curBlogEntry.getEntryId()
		/>
		''';

		ApplicationDisplayTemplates.addCP(
			adtType = "Asset Publisher",
			templateScript = ${templateScript});

		Navigator.gotoSitePage(
			pageName = "Test Site Page",
			siteName = "Test Site Name");

		Portlet.gotoPortletOptions(
			portletName = "Asset Publisher",
			portletOption = "Configuration");

		AssetPublisherPortlet.configureDisplayTemplatePG(displayTemplate = "Asset Publisher Test ADT");

		Navigator.gotoSitePage(
			pageName = "Test Site Page",
			siteName = "Test Site Name");

		var projectDir = PropsUtil.get("project.dir");
		var moduleBaseDir = "modules/apps/ratings/ratings-taglib/src/main/java/com/liferay/ratings/taglib/servlet/taglib/RatingsTag.java";

		var replaceFile = "${projectDir}/${moduleBaseDir}";

		FileUtil.replaceStringInFile(${replaceFile}, "@author", "@author Test ");

		AntCommands.runCommand("build-test.xml", "redeploy-osgi-module -Dmodule.base.dir=modules/apps/ratings/ratings-taglib");
	}

	@priority = 3
	test ExecuteScriptWithEmbeddedHTML {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		ServerAdministration.openServerAdmin();

		var script = '''
			out.println(
			"""
				<div class="embedded-html-test">
					Test Embedded HTML
				</div>
			""");
		''';

		ServerAdministration.executeScript(
			language = "Groovy",
			script = ${script});

		var outputContent = '''<div class="embedded-html-test"> Test Embedded HTML </div>''';

		AssertTextEquals.assertPartialText(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = ${outputContent});

		ServerAdministration.executeScript(
			htmlOutput = "true",
			language = "Groovy",
			script = ${script});

		AssertTextEquals(
			locator1 = "//div[@class='embedded-html-test']",
			value1 = "Test Embedded HTML");
	}

	@priority = 5
	test ExecuteScriptWithLiferayClasses {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		ServerAdministration.openServerAdmin();

		var script = '''
			import com.liferay.counter.kernel.service.CounterLocalServiceUtil;
			import com.liferay.fragment.service.FragmentCollectionLocalServiceUtil;

			fragmentCollectionId = CounterLocalServiceUtil.increment();

			fragmentCollection = FragmentCollectionLocalServiceUtil.createFragmentCollection(fragmentCollectionId);

			fragmentCollection.setName("Test Fragment Collection Name");

			out.println(fragmentCollection.getName());
		''';

		ServerAdministration.executeScript(
			language = "Groovy",
			script = ${script});

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "Test Fragment Collection Name");
	}

	@description = "This is a use case for LPS-102832. Check returns property value without leading spaces."
	@priority = 4
	test ExecuteScriptWithPredefinedProperty {
		property custom.properties = "partnerstamm-api-user = his_user";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		ServerAdministration.openServerAdmin();

		var script = '''
			import com.liferay.portal.kernel.configuration.Configuration;
			import com.liferay.portal.kernel.configuration.ConfigurationFactoryUtil;
			import com.liferay.portal.kernel.util.PortalClassLoaderUtil;
			import com.liferay.portal.kernel.util.PropsUtil;
			import com.liferay.portal.util.PropsUtil;

			println("com.liferay.portal.util.PropsUtil:" + com.liferay.portal.util.PropsUtil.get("partnerstamm-api-user"))

			println("com.liferay.portal.kernel.util.PropsUtil:" + com.liferay.portal.kernel.util.PropsUtil.get("partnerstamm-api-user"))

			Configuration configuration = ConfigurationFactoryUtil.getConfiguration(PortalClassLoaderUtil.getClassLoader(), "portal");
			println("ConfigurationFactoryUtil:" + configuration.get("partnerstamm-api-user"));
		''';

		ServerAdministration.executeScript(
			language = "Groovy",
			script = ${script});

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "com.liferay.portal.util.PropsUtil:his_user com.liferay.portal.kernel.util.PropsUtil:his_user ConfigurationFactoryUtil:his_user");
	}

	@priority = 4
	test ExecuteScriptWithPredefinedVariables {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		ServerAdministration.openServerAdmin();

		var script = '''
			import com.liferay.portal.kernel.util.PortalUtil;

			company = PortalUtil.getCompany(actionRequest);

			out.println("Current company: ${company.getName()}");
		''';

		ServerAdministration.executeScript(
			language = "Groovy",
			script = ${script});

		var siteName = TestCase.getSiteName();

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "Current company: ${siteName}");
	}

	@priority = 5
	test ExecuteSimpleScript {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		ServerAdministration.openServerAdmin();

		var script = '''
			out.println("Test groovy script");
		''';

		ServerAdministration.executeScript(
			language = "Groovy",
			script = ${script});

		AssertTextEquals(
			locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
			value1 = "Test groovy script");
	}

}