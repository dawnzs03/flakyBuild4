@component-name = "portal-search"
definition {

	property portal.release = "true";
	property portal.suite.search.engine = "elasticsearch7";
	property portal.upstream = "true";
	property testray.main.component.name = "Elasticsearch Impl";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@priority = 4
	test AssertIndexOnStartup {
		property search.environment.suite.exclude = "true";
		property test.assert.warning.exceptions = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Guest",
			title = "WC WebContent Title");

		JSONDocument.addFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Asset Publisher Page");

		var portalURL = PropsUtil.get("portal.url");

		Navigator.openSpecificURL(url = "${portalURL}/web/guest/asset-publisher-page");

		JSONLayout.addWidgetToPublicLayout(
			column = 1,
			groupName = "Guest",
			layoutName = "Asset Publisher Page",
			widgetName = "Asset Publisher");

		var companyId = JSONCompany.getCompanyId();
		var port = Elasticsearch.getServerPort();
		var portalHostname = PropsUtil.get("portal.hostname");

		var curl = '''
			http://${portalHostname}:${port}/liferay-${companyId}/_delete_by_query?pretty \
				-H 'Content-Type: application/json' \
				-d '{
					"query": {
						"match": {
							"_type": "_doc"
						}
					}
				}'
		''';

		com.liferay.poshi.runner.util.JSONCurlUtil.post(${curl});

		Portlet.shutdownServer();

		var newProperty = "index.on.startup=true";

		AntCommands.runCommand("build-test.xml", "portal-ext-properties-update -Dadd.new.properties=true -Dupdate.properties=${newProperty}");

		Portlet.startServer(deleteLiferayHome = "false");

		WaitForConsoleTextPresent(value1 = "Finished reindexing company ${companyId} for class name com.liferay.blogs.model.BlogsEntry");

		WaitForConsoleTextPresent(value1 = "Finished reindexing company ${companyId} for class name com.liferay.document.library.kernel.model.DLFileEntry");

		WaitForConsoleTextPresent(value1 = "Finished reindexing company ${companyId} for class name com.liferay.journal.model.JournalArticle");

		Navigator.openSpecificURL(url = "${portalURL}/web/guest/asset-publisher-page");

		AssertElementPresent(
			key_assetTitle = "Blogs Entry Title",
			locator1 = "AP#ASSET_ABSTRACT_TITLE");

		AssertElementPresent(
			key_assetTitle = "DM Document Title",
			locator1 = "AP#ASSET_ABSTRACT_TITLE");

		AssertElementPresent(
			key_assetTitle = "WC WebContent Title",
			locator1 = "AP#ASSET_ABSTRACT_TITLE");

		SearchPortlets.searchEmbedded(searchTerm = "test");

		AssertElementPresent(
			key_searchAssetTitle = "Blogs Entry Title",
			key_searchAssetType = "Blogs Entry",
			locator1 = "SearchResults#ASSET_ENTRY_TABLE_TITLE_SPECIFIC");

		AssertElementPresent(
			key_searchAssetTitle = "DM Document Title",
			key_searchAssetType = "Document",
			locator1 = "SearchResults#ASSET_ENTRY_TABLE_TITLE_SPECIFIC");

		AssertElementPresent(
			key_searchAssetTitle = "Test Test",
			key_searchAssetType = "User",
			locator1 = "SearchResults#ASSET_ENTRY_TABLE_TITLE_SPECIFIC");

		AssertElementPresent(
			key_searchAssetTitle = "WC WebContent Title",
			key_searchAssetType = "Web Content Article",
			locator1 = "SearchResults#ASSET_ENTRY_TABLE_TITLE_SPECIFIC");

		SearchPortlets.searchEmbedded(searchTerm = "Home");

		AssertElementPresent(
			key_searchAssetTitle = "Home",
			key_searchAssetType = "Page",
			locator1 = "SearchResults#ASSET_ENTRY_TABLE_TITLE_SPECIFIC");
	}

	@priority = 5
	test AssertSearchAdmin {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Search");

		var clientVersion = Elasticsearch.getClientVersion();
		var serverVersion = Elasticsearch.getServerVersion();

		SearchAdministration.assertEngineVendorAndVersions(
			clientVersion = ${clientVersion},
			engineVendor = "Elasticsearch",
			serverVersion = ${serverVersion});

		SearchAdministration.openFieldMappings();

		Click(
			key_navNested = "liferay-0",
			locator1 = "NavNested#NAV_NESTED_LINK");

		AssertTextEquals.assertPartialText(
			indexName = "liferay-0",
			locator1 = "Search#FIELD_MAPPINGS_EDITOR",
			value1 = "liferay-0");

		var companyId = JSONCompany.getCompanyId();

		var liferayIndexName = "liferay-${companyId}";

		Click(
			key_navNested = ${liferayIndexName},
			locator1 = "NavNested#NAV_NESTED_LINK");

		AssertTextEquals.assertPartialText(
			indexName = ${liferayIndexName},
			locator1 = "Search#FIELD_MAPPINGS_EDITOR",
			value1 = ${liferayIndexName});
	}

	@priority = 4
	test AssertSearchInsightsExplain {
		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Guest",
			title = "apple");

		SearchPortlets.addWidgets(searchPortletList = "Search Insights");

		Search.openSearchPage();

		Portlet.gotoPortletOptions(
			portletName = "Search Insights",
			portletOption = "Configuration");

		SelectFrame(locator1 = "IFrame#CONFIGURATION");

		AssertChecked(
			checkboxName = "Enable Score Explanation",
			locator1 = "Checkbox#ANY_CHECKBOX");

		IFrame.closeFrame();

		SearchPortlets.searchEmbedded(searchTerm = "apple");

		AssertElementPresent(
			key_text = "\"explain\"",
			locator1 = "SearchResults#SEARCH_INSIGHTS_WIDGET_REQUEST_QUERY");

		AssertElementPresent(
			key_text = "\"_explanation\"",
			locator1 = "SearchResults#SEARCH_INSIGHTS_WIDGET_RESPONSE_QUERY");

		Portlet.gotoPortletOptions(
			portletName = "Search Insights",
			portletOption = "Configuration");

		SelectFrame(locator1 = "IFrame#CONFIGURATION");

		Uncheck(
			checkboxName = "Enable Score Explanation",
			locator1 = "Checkbox#ANY_CHECKBOX");

		PortletEntry.save();

		IFrame.closeFrame();

		SearchPortlets.searchEmbedded(searchTerm = "apple");

		AssertElementPresent(
			key_text = "\"explain\"",
			locator1 = "SearchResults#SEARCH_INSIGHTS_WIDGET_REQUEST_QUERY");

		AssertElementNotPresent(
			key_text = "\"_explanation\"",
			locator1 = "SearchResults#SEARCH_INSIGHTS_WIDGET_RESPONSE_QUERY");
	}

	@priority = 5
	test AssertSidecarAutoInstall {
		property delete.sidecar.bundle = "true";
		property embedded.elasticsearch.only = "true";
		property environment.acceptance = "true";
		property operating.system.types = "alpine,amazonlinux,centos,debian,fedora,orcllinux,osx,redhat,rockylinux,solaris,suse,ubuntu,windows";
		property portal.acceptance = "true";
		property search.environment.suite.exclude = "true";
		property test.assert.warning.exceptions = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		AssertConsoleTextPresent(value1 = "Sidecar Elasticsearch liferay started at [\d\.]+:9201");

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Guest",
			title = "apple");

		SearchPortlets.searchEmbedded(searchTerm = "apple");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "apple",
			searchAssetType = "Web Content Article");
	}

	@priority = 3
	test BulkExecutionFailuresAreLoggedCorrectly {
		property search.environment.suite.exclude = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		SystemSettings.openToConfigInSystemSettings(portletId = "com.liferay.portal.search.elasticsearch7.configuration.ElasticsearchConfiguration");

		FormFields.editTextMultiline(
			fieldName = "additionalIndexConfigurations",
			fieldValue = "index.mapping.total_fields.limit: 100");

		SystemSettings.saveConfiguration();

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Search");

		Elasticsearch.assertElasticsearchIsReady();

		SearchAdministration.executeReindex();

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Guest",
			title = "WC Title");

		AssertConsoleTextPresent(value1 = "Limit of total fields \[100\] has been exceeded");
	}

	@priority = 5
	test ElasticsearchClusteringSmokeTest {
		property elasticsearch.cluster.size = "2";
		property minimum.slave.ram = "24";
		property portal.acceptance = "true";
		property remote.elasticsearch.enabled = "true";
		property search.environment.suite.exclude = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Elasticsearch.viewClusterStatusViaClusterHealthAPI(
			nodePort = 9200,
			numberOfNodes = 2);

		SearchAdministration.openSearchAdmin();

		AssertElementPresent(
			key_panel = "Nodes (2)",
			locator1 = "Panel#PANEL_EXPANDED");

		JSONMBMessage.addMessage(
			groupName = "Guest",
			threadBody = "Orange",
			threadSubject = "Apple");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "Orange",
			dmDocumentTitle = "Apple",
			groupName = "Guest",
			mimeType = "text/plain",
			sourceFileName = "Document_1.txt");

		Search.openSearchPage(searchTerm = "Apple");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Document");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Message Boards Message");

		Search.openSearchPage(searchTerm = "Orange");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Document");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Message Boards Message");
	}

	@priority = 5
	test MultipleConnectionsSmokeTest {
		property elasticsearch.multiple.connections = "true";
		property remote.elasticsearch.enabled = "true";
		property search.environment.suite.exclude = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		SearchAdministration.openSearchAdmin();

		AssertTextEquals(
			locator1 = "SearchAdmin#ACTIVE_CONNECTION_COUNT",
			value1 = 2);

		AssertTextEquals.assertPartialText(
			key_connectionId = "__REMOTE__",
			locator1 = "SearchAdmin#CLUSTER_NAME",
			value1 = "LiferayElasticsearchCluster");

		AssertTextEquals.assertPartialText(
			key_connectionId = "connection2",
			locator1 = "SearchAdmin#CLUSTER_NAME",
			value1 = "LiferayElasticsearchClusterTwo");

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Guest",
			title = "apple");

		var portalHostname = PropsUtil.get("portal.hostname");

		var curlSecondConnection = '''
			http://${portalHostname}:9202/connection2_index/_doc/1?pretty \
				-H 'Content-Type: application/json' \
				-d '{"connection2_field" : "multiple connections is cool"}'
		''';

		com.liferay.poshi.runner.util.JSONCurlUtil.post(${curlSecondConnection});

		var portalURL = PropsUtil.get("portal.url");

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Multiple Connections Page");

		JSONLayout.updateLayoutTemplateOfPublicLayout(
			groupName = "Guest",
			layoutName = "Multiple Connections Page",
			layoutTemplate = "3 Columns");

		SearchPortlets.addWidgets(
			layoutName = "Multiple Connections Page",
			searchPortletList = "Custom Filter");

		SearchPortlets.addWidgets(
			column = 2,
			layoutName = "Multiple Connections Page",
			searchPortletList = "Search Results");

		SearchPortlets.addWidgets(
			column = 3,
			layoutName = "Multiple Connections Page",
			searchPortletList = "Search Options");

		SearchPortlets.addWidgets(
			column = 3,
			layoutName = "Multiple Connections Page",
			searchPortletList = "Low Level Search Options");

		Navigator.openSpecificURL(url = "${portalURL}/web/guest/multiple-connections-page");

		SearchPortlets.configureSearchOptions(allowEmptySearches = "true");

		Refresh();

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "apple",
			searchAssetType = "Web Content Article");

		SearchPortlets.configureCustomFilter(
			filterField = "connection2_field",
			filterQueryType = "Match",
			filterValue = "cool",
			occur = "must");

		SearchResultPortlet.configureSearchResults(fieldsToDisplay = "connection2_field");

		SearchPortlets.configureLowLevelSearchOptions(
			connectionId = "connection2",
			indexes = "connection2_index");

		Refresh();

		AssertElementPresent(
			key_searchAssetTitle = "multiple connections is cool",
			locator1 = "SearchResults#ASSET_ENTRY_TABLE_TITLE");
	}

	@priority = 5
	test OSGiConfigSmokeTest {
		property embedded.elasticsearch.only = "true";
		property osgi.module.configuration.file.names = "com.liferay.portal.search.elasticsearch7.configuration.ElasticsearchConfiguration.config";
		property osgi.module.configurations = "clusterName=\"LiferayElasticsearchCluster1\"";
		property portal.acceptance = "true";
		property search.environment.suite.exclude = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		var portalHostname = PropsUtil.get("portal.hostname");

		Navigator.openSpecificURL(url = "http://${portalHostname}:9201");

		Elasticsearch.viewClusterStatus(clusterStatus = "\"cluster_name\" : \"LiferayElasticsearchCluster1\"");
	}

	@description = "This is a use case for LPS-188222."
	@priority = 4
	test PerformConcurrentReindexAndSwitchElasticsearchConnections {
		property custom.properties = "feature.flag.LPS-183661=true";
		property embedded.elasticsearch.only = "true";
		property search.environment.suite.exclude = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Execute concurrent reindex while using sidecar") {
			SearchAdministration.executeReindex(reindexMode = "Concurrent");
		}

		task ("Deploy remote Elasticsearch server and connect it to Portal") {
			AntCommands.runCommand("build-test-elasticsearch7.xml", "start-elasticsearch");
		}

		task ("Confirm Portal is connected to the remote Elasticsearch server before moving on") {
			Navigator.openURL();

			SearchAdministration.openSearchAdmin();

			WaitForElementPresent(
				locator1 = "Panel#PANEL",
				value1 = "NODES (1)");

			AssertTextEquals.assertPartialText(
				locator1 = "SearchAdmin#CONNECTION_ID",
				value1 = "__REMOTE__");
		}

		task ("Execute concurrent reindex while using remote Elasticsearch") {
			SearchAdministration.executeReindex(reindexMode = "Concurrent");
		}

		task ("Perform a search and assert that no errors are thrown") {
			Navigator.openURL();

			SearchPortlets.searchEmbedded(searchTerm = "test");

			AssertElementNotPresent(locator1 = "Portlet#ERROR");
		}

		task ("Assert that the indexNameCurrent field is still populated in the lportal.Company database table") {
			var companyId = JSONCompany.getCompanyId();

			SQL.assertTextInMySQLStatementResult(
				mysqlStatement = "SELECT indexNameCurrent FROM lportal.Company WHERE companyId LIKE '%${companyId}%'",
				text = "liferay-${companyId}");
		}
	}

	@description = "This is a use case for LPS-177665."
	@priority = 4
	test ReindexSearchTuningWithConcurrentExecutionMode {
		property custom.properties = "feature.flag.LPS-183661=true";
		property search.environment.suite.exclude = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Create a new result ranking") {
			SearchTuning.openResultRankingsAdmin();

			SearchTuning.addResultRanking(searchQuery = "Test Ranking");
		}

		task ("Create a new synonym set") {
			SearchTuning.openSynonymsAdmin();

			SearchTuning.addSynonymSet(synonyms = "Test Synonym Set");
		}

		task ("Perform a concurrent reindex") {
			SearchAdministration.executeReindex(reindexMode = "Concurrent");
		}

		task ("Assert that the result ranking and synonym set is still available after concurrent reindex") {
			SearchTuning.openResultRankingsAdmin();

			LexiconEntry.viewEntryName(rowEntry = "Test Ranking");

			SearchTuning.openSynonymsAdmin();

			LexiconEntry.viewEntryName(rowEntry = "Test Synonym Set");
		}
	}

	@description = "This is a use case for LPS-184999."
	@priority = 4
	test ReindexSearchTuningWithSyncExecutionMode {
		property custom.properties = "feature.flag.LPS-183661=true";
		property search.environment.suite.exclude = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Create a new result ranking") {
			SearchTuning.openResultRankingsAdmin();

			SearchTuning.addResultRanking(searchQuery = "Test Ranking");
		}

		task ("Create a new synonym set") {
			SearchTuning.openSynonymsAdmin();

			SearchTuning.addSynonymSet(synonyms = "Test Synonym Set");
		}

		task ("Grab the timestamp values for the result ranking and synonyms set indexed documents before a Sync reindex is executed") {
			var companyId = JSONCompany.getCompanyId();
			var port = Elasticsearch.getServerPort();
			var portalHostname = PropsUtil.get("portal.hostname");

			var rankingsCurl = '''
				http://${portalHostname}:${port}/liferay-${companyId}-search-tuning-rankings/_search?pretty \
					-H 'Content-Type: application/json' \
					-d '{
						"query":
						{
							"match_all":{}
						}
					}'
			''';

			var rankingsPreSyncReindexTimestamp = JSONCurlUtil.get(${rankingsCurl}, "$.hits.hits[0]._source.timestamp");
			var synonymsCurl = '''
				http://${portalHostname}:${port}/liferay-${companyId}-search-tuning-synonyms/_search?pretty \
					-H 'Content-Type: application/json' \
					-d '{
						"query":
						{
							"match_all":{}
						}
					}'
			''';

			var synonymsPreSyncReindexTimestamp = JSONCurlUtil.get(${synonymsCurl}, "$.hits.hits[0]._source.timestamp");
		}

		task ("Begin a reindex using sync execution mode") {
			SearchAdministration.openIndexActions();

			Click(locator1 = "SearchAdmin#REINDEX_MODE_DROPDOWN");

			Click(
				key_reindexMode = "Sync",
				locator1 = "SearchAdmin#REINDEX_MODE_DROPDOWN_ITEM");

			Click(
				key_action = "All Search Indexes",
				locator1 = "SearchAdmin#EXECUTE_REINDEX_BUTTON");

			Click(
				key_text = "Execute",
				locator1 = "Modal#MODAL_FOOTER_BUTTON");
		}

		task ("Assert that the result ranking and synonym set is still available in the UI during the reindex") {
			SearchTuning.openResultRankingsAdmin();

			AssertElementPresent(locator1 = "Search#REINDEX_IN_PROGRESS_INDICATOR");

			LexiconEntry.viewEntryName(rowEntry = "Test Ranking");

			SearchTuning.openSynonymsAdmin();

			AssertElementPresent(locator1 = "Search#REINDEX_IN_PROGRESS_INDICATOR");

			LexiconEntry.viewEntryName(rowEntry = "Test Synonym Set");
		}

		task ("After the reindex is complete, assert the timestamp values for both the result ranking and the synonym set are updated in the index") {
			SearchAdministration.openIndexActions();

			WaitForElementNotPresent(locator1 = "Search#REINDEX_IN_PROGRESS_INDICATOR");

			var rankingsPostSyncReindexTimestamp = JSONCurlUtil.get(${rankingsCurl}, "$.hits.hits[0]._source.timestamp");

			if (${rankingsPreSyncReindexTimestamp} != ${rankingsPostSyncReindexTimestamp}) {
				echo("The timestamp value for the result ranking document has been updated in the index");
			}
			else {
				fail("The timestamp value for the result ranking document has not been updated in the index");
			}

			var synonymsPostSyncReindexTimestamp = JSONCurlUtil.get(${synonymsCurl}, "$.hits.hits[0]._source.timestamp");

			if (${synonymsPreSyncReindexTimestamp} != ${synonymsPostSyncReindexTimestamp}) {
				echo("The timestamp value for the synonym set document has been updated in the index");
			}
			else {
				fail("The timestamp value for the synonym set document has not been updated in the index");
			}
		}

		task ("Assert the stale documents of both the result ranking and the synonym set has been deleted from the index by confirming there is only one copy of each") {
			var rankingDocumentsCount = JSONCurlUtil.get(${rankingsCurl}, "$.hits.total.value");
			var synonymsDocumentsCount = JSONCurlUtil.get(${synonymsCurl}, "$.hits.total.value");

			if (${rankingDocumentsCount} == 1) {
				echo("The stale document of result ranking has been deleted from the index");
			}
			else {
				fail("The stale document of result ranking has not been deleted from the index");
			}

			if (${synonymsDocumentsCount} == 1) {
				echo("The stale document of synonym set has been deleted from the index");
			}
			else {
				fail("The stale document of synonym set has not been deleted from the index");
			}
		}
	}

	@description = "This is a use case for LPS-130753."
	@priority = 4
	test ReindexSpecificPortalInstances {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		ServerAdministration.openServerAdmin();

		ServerAdministration.addCategoryLogLevels(
			categoryLevel = "DEBUG",
			categoryName = "com.liferay.portal.search.internal.background.task");

		SearchAdministration.executeReindex(executionScope = "System");

		var companyId = JSONCompany.getCompanyId();

		AssertConsoleTextNotPresent(value1 = "phase=portalStart, defaultLocale=en_US, companyId=${companyId}");

		AssertConsoleTextPresent(value1 = "phase=portalStart, defaultLocale=en_US, companyId=0");

		SearchAdministration.executeReindex(executionScope = "liferay.com");

		AssertConsoleTextPresent(value1 = "phase=portalStart, defaultLocale=en_US, companyId=${companyId}");

		SearchAdministration.executeReindex(executionScope = "All Instances");
	}

	@description = "This is a use case for LPS-177665."
	@priority = 4
	test ReindexWithConcurrentExecutionMode {
		property custom.properties = "feature.flag.LPS-183661=true";
		property portal.release = "false";
		property search.environment.suite.exclude = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Assert that indexNameCurrent and indexNameNext fields in the database table 'Company' are empty when a Concurrent reindex has not been executed yet") {
			var companyId = JSONCompany.getCompanyId();

			SQL.assertTextNotInMySQLStatementResult(
				mysqlStatement = "SELECT indexNameCurrent,indexNameNext FROM lportal.Company WHERE companyId LIKE '%${companyId}%'",
				text = "liferay-${companyId}");
		}

		task ("Begin a reindex of the primary Portal instance using concurrent execution mode") {
			SearchAdministration.openIndexActions();

			Click(locator1 = "SearchAdmin#REINDEX_MODE_DROPDOWN");

			Click(
				key_reindexMode = "Concurrent",
				locator1 = "SearchAdmin#REINDEX_MODE_DROPDOWN_ITEM");

			Check.checkNotVisible(
				locator1 = "Radio#ANY",
				radioLabel = "Selected Instances");

			Check.checkNotVisible(
				key_executionScope = "liferay.com",
				locator1 = "SearchAdmin#SELECTED_INSTANCE_INDEX_CHECKBOX");

			Click(
				key_action = "All Search Indexes",
				locator1 = "SearchAdmin#EXECUTE_REINDEX_BUTTON");

			Click(
				key_text = "Execute",
				locator1 = "Modal#MODAL_FOOTER_BUTTON");
		}

		task ("Assert that the indexNameNext field is now populated in the database table 'Company'") {
			var companyId = JSONCompany.getCompanyId();

			SQL.assertTextInMySQLStatementResult(
				mysqlStatement = "SELECT indexNameNext FROM lportal.Company WHERE companyId LIKE '%${companyId}%'",
				text = "liferay-${companyId}");
		}

		task ("Assert that search results are still returned during a reindex") {
			Search.openSearchPage(searchTerm = "test");

			AssertElementPresent(locator1 = "Search#REINDEX_IN_PROGRESS_INDICATOR");

			SearchResultPortlet.viewSearchResults(
				searchAssetTitle = "Test Test",
				searchAssetType = "User");
		}

		task ("Assert that there are 2 Portal instance indices while a concurrent reindex is running") {
			SearchAdministration.openFieldMappings();

			VerifyElementPresent(locator1 = "//a[text()='liferay-${companyId}']");

			AssertElementPresent(locator1 = "//a[contains(text(),'liferay-${companyId}-2')]");
		}

		task ("Assert that there is only 1 Portal instance index after a concurrent reindex completes") {
			WaitForConsoleTextPresent(value1 = "Finished reindexing company ${companyId}");

			Refresh();

			AssertElementNotPresent(locator1 = "//a[text()='liferay-${companyId}']");

			AssertElementPresent(locator1 = "//a[contains(text(),'liferay-${companyId}-2')]");
		}

		task ("Assert that the indexNameCurrent field is now populated in the database table 'Company'") {
			var companyId = JSONCompany.getCompanyId();

			SQL.assertTextInMySQLStatementResult(
				mysqlStatement = "SELECT indexNameCurrent FROM lportal.Company WHERE companyId LIKE '%${companyId}%'",
				text = "liferay-${companyId}");
		}
	}

	@description = "This is a use case for LPS-177670."
	@priority = 4
	test ReindexWithSyncExecutionMode {
		property custom.properties = "feature.flag.LPS-183661=true";
		property search.environment.suite.exclude = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Create a stale document in the default company index") {
			var companyId = JSONCompany.getCompanyId();
			var port = Elasticsearch.getServerPort();
			var portalHostname = PropsUtil.get("portal.hostname");

			var curl = '''
				http://${portalHostname}:${port}/liferay-${companyId}/_doc \
					-H 'Content-Type: application/json' \
					-d '{
						"companyId" : "${companyId}",
						"userName" : "alpha bravo",
						"entryClassName" : "com.liferay.portal.kernel.model.User"
					}'
			''';

			com.liferay.poshi.runner.util.JSONCurlUtil.post(${curl});
		}

		task ("Grab the timestamp value for the 'Test Test' user document from the index before a Sync reindex is executed") {
			var curl = '''
				http://${portalHostname}:${port}/liferay-${companyId}/_search?pretty \
					-H 'Content-Type: application/json' \
					-d '{
						"query":
						{
							"bool":
							{
								"must":
								[
									{
										"match":
										{
											"userName": "test test"
										}
									},
									{
										"match":
										{
											"entryClassName": "com.liferay.portal.kernel.model.User"
										}
									}
								]
							}
						}
					}'
			''';

			var preSyncReindexTimestamp = JSONCurlUtil.get(${curl}, "$.hits.hits[0]._source.timestamp");
		}

		task ("Begin a reindex using sync execution mode") {
			SearchAdministration.openIndexActions();

			Click(locator1 = "SearchAdmin#REINDEX_MODE_DROPDOWN");

			Click(
				key_reindexMode = "Sync",
				locator1 = "SearchAdmin#REINDEX_MODE_DROPDOWN_ITEM");

			Click(
				key_action = "All Search Indexes",
				locator1 = "SearchAdmin#EXECUTE_REINDEX_BUTTON");

			Click(
				key_text = "Execute",
				locator1 = "Modal#MODAL_FOOTER_BUTTON");
		}

		task ("Assert that search results are still returned during the reindex") {
			Search.openSearchPage(searchTerm = "test");

			AssertElementPresent(locator1 = "Search#REINDEX_IN_PROGRESS_INDICATOR");

			SearchResultPortlet.viewSearchResults(
				searchAssetTitle = "Test Test",
				searchAssetType = "User");
		}

		task ("After the reindex is complete, assert the timestamp value for the 'Test Test' user document has updated in the index") {
			SearchAdministration.openIndexActions();

			WaitForElementNotPresent(locator1 = "Search#REINDEX_IN_PROGRESS_INDICATOR");

			var postSyncReindexTimestamp = JSONCurlUtil.get(${curl}, "$.hits.hits[0]._source.timestamp");

			if (${preSyncReindexTimestamp} != ${postSyncReindexTimestamp}) {
				echo("The timestamp value for the 'Test Test' user document has been updated in the index");
			}
			else {
				fail("The timestamp value for the 'Test Test' user document has not been updated in the index");
			}
		}

		task ("Assert the stale document created earlier has been deleted from the index") {
			var curl = '''
				http://${portalHostname}:${port}/liferay-${companyId}/_search?pretty \
					-H 'Content-Type: application/json' \
					-d '{
						"query":
						{
							"bool":
							{
								"must":
								[
									{
										"match":
										{
											"userName": "alpha bravo"
										}
									}
								]
							}
						}
					}'
			''';

			var staleDocumentHitCount = JSONCurlUtil.get(${curl}, "$.hits.total.value");

			if (${staleDocumentHitCount} == 0) {
				echo("The stale document has been deleted from the index");
			}
			else {
				fail("The stale document was not deleted from the index");
			}
		}
	}

	@description = "Assert search is functional after Elasticsearch connector is redeployed from GogoShell"
	@priority = 3
	test SearchAfterRedeployingElasticsearchConnector {
		property operating.system.types = "centos";
		property remote.elasticsearch.enabled = "true";
		property test.assert.warning.exceptions = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		GogoShell.openGogoShellAdmin();

		var moduleId = GogoShell.getModuleID(moduleName = "com.liferay.portal.search.elasticsearch7.impl");

		GogoShell.stopModule(moduleId = ${moduleId});

		GogoShell.viewModuleStatus(
			moduleName = "com.liferay.portal.search.elasticsearch7.impl",
			moduleStatus = "Resolved");

		GogoShell.startModule(moduleId = ${moduleId});

		GogoShell.viewModuleStatus(
			moduleName = "com.liferay.portal.search.elasticsearch7.impl",
			moduleStatus = "Active");

		SearchAdministration.executeReindex();

		Navigator.gotoPage(pageName = "Home");

		SearchPortlets.searchEmbedded(searchTerm = "test");

		AssertElementPresent(
			key_searchAssetTitle = "Test Test",
			locator1 = "SearchResults#ASSET_ENTRY_TABLE_TITLE");
	}

	@priority = 5
	test SearchWithNonLiferayIndex {
		property embedded.elasticsearch.only = "true";
		property search.environment.suite.exclude = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		var portalHostname = PropsUtil.get("portal.hostname");

		Navigator.openSpecificURL(url = "http://${portalHostname}:9201");

		AntCommands.runCommand("build-test-elasticsearch7.xml", "add-boston-dataset-index -Dbackup.index=boston311 -Delasticsearch.port=9201");

		Navigator.openURL();

		SearchAdministration.executeReindex();

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Search Page");

		SearchPortlets.addWidgets(
			layoutName = "Search Page",
			searchPortletList = "Custom Filter,Low Level Search Options,Search Results,Search Bar");

		var portalURL = PropsUtil.get("portal.url");

		Navigator.openSpecificURL(url = "${portalURL}/web/guest/search-page");

		SearchPortlets.configureCustomFilter(
			customParameterName = "q",
			federatedSearchKey = "s1",
			filterField = "case_title,closure_reason",
			filterQueryType = "Multi Match");

		SearchPortlets.configureLowLevelSearchOptions(
			federatedSearchKey = "s1",
			indexes = "boston311");

		SearchResultPortlet.configureSearchResults(
			federatedSearchKey = "s1",
			fieldsToDisplay = "case_title,closure_reason,case_enquiry_id");

		SearchPortlets.configureSearchBarWidget(federatedSearchKey = "s1");

		SearchPortlets.searchWidget(searchTerm = "bicycle");

		AssertTextEquals.assertPartialText(
			key_searchAssetTitle = "Abandoned Bicycle",
			locator1 = "SearchResults#ASSET_ENTRY_TABLE_TITLE",
			value1 = "Abandoned Bicycle");

		AssertTextEquals.assertPartialText(
			locator1 = "SearchResults#RESULTS_PORTLET_SEARCH_QUERY",
			value1 = "1 result for bicycle");
	}

	@priority = 4
	test SwitchSidecarToRemote {
		property embedded.elasticsearch.only = "true";
		property search.environment.suite.exclude = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Guest",
			title = "WC WebContent Title");

		var baseURL = PropsUtil.get("portal.url");

		ServerAdministration.openServerAdmin();

		ServerAdministration.addCategoryLogLevels(
			categoryLevel = "INFO",
			categoryName = "com.liferay.portal.search.elasticsearch7.internal.connection");

		AntCommands.runCommand("build-test-elasticsearch7.xml", "start-elasticsearch");

		WaitForConsoleTextPresent(value1 = "Stopping sidecar Elasticsearch");

		WaitForConsoleTextPresent(value1 = "Returning connection with ID: __REMOTE__");

		var javaProcesses = ExecUtil.executeCommand("jps -v");
		var sidecarCurlResponse = ExecUtil.executeCommand("curl -X GET http://localhost:9201");

		if (contains(${javaProcesses}, "sidecar") || contains(${sidecarCurlResponse}, "cluster_name")) {
			fail("Failed: Sidecar is still running.");
		}

		Navigator.openURL();

		SearchAdministration.openSearchAdmin();

		WaitForElementPresent(
			locator1 = "Panel#PANEL",
			value1 = "NODES (1)");

		var clientVersion = Elasticsearch.getClientVersion();
		var serverVersion = Elasticsearch.getServerVersion();

		SearchAdministration.assertEngineVendorAndVersions(
			clientVersion = ${clientVersion},
			engineVendor = "Elasticsearch",
			serverVersion = ${serverVersion});

		AssertTextEquals.assertPartialText(
			locator1 = "SearchAdmin#CONNECTION_ID",
			value1 = "__REMOTE__");

		AssertTextNotEquals.assertNotPartialText(
			locator1 = "SearchAdmin#SEARCH_ENGINE_VENDOR",
			value1 = "(Sidecar)");

		AssertTextNotEquals.assertNotPartialText(
			locator1 = "SearchAdmin#CONNECTION_ID",
			value1 = "__SIDECAR__");

		SearchAdministration.executeReindex();

		Navigator.openURL();

		SearchPortlets.searchEmbedded(searchTerm = "WebContent");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "WC WebContent Title",
			searchAssetType = "Web Content Article");

		AntCommands.runCommand("build-test-elasticsearch7.xml", "stop-elasticsearch");
	}

	@description = "This is a use case for LPS-57894."
	@priority = 3
	test UpdateSystemSettingsWithoutPortalRestart {
		property embedded.elasticsearch.only = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Guest",
			title = "apple");

		Navigator.openURL();

		SearchPortlets.searchEmbedded(searchTerm = "apple");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "apple",
			searchAssetType = "Web Content Article");

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Search",
			configurationName = "Elasticsearch 7",
			configurationScope = "System Scope");

		FormFields.editTextMultiline(
			fieldName = "clusterName",
			fieldValue = "LiferayElasticsearchCluster1");

		SystemSettings.saveConfiguration();

		WaitForConsoleTextPresent(value1 = "Stopping sidecar Elasticsearch");

		// LRCI-2401

		Pause(locator1 = 30000);

		var portalHostname = PropsUtil.get("portal.hostname");

		Navigator.openSpecificURL(url = "http://${portalHostname}:9201");

		Elasticsearch.viewClusterStatus(clusterStatus = "\"cluster_name\" : \"LiferayElasticsearchCluster1\"");

		Navigator.openURL();

		SearchAdministration.openSearchAdmin();

		AssertTextEquals.assertPartialText(
			key_connectionId = "__SIDECAR__",
			locator1 = "SearchAdmin#CLUSTER_NAME",
			value1 = "LiferayElasticsearchCluster1");

		Navigator.openURL();

		SearchPortlets.searchEmbedded(searchTerm = "apple");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "apple",
			searchAssetType = "Web Content Article");
	}

	@description = "This is a use case for LPS-161063."
	@priority = 4
	test WarnTracePresentWithDataInconsistency {
		property search.environment.suite.exclude = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "DM Document",
			groupName = "Guest",
			mimeType = "text/txt",
			sourceFileName = "Document_1.txt");

		SQL.executeMySQLStatement(mysqlStatement = "SELECT * FROM DLFileEntry WHERE filename='Document_1.txt';");

		var fileEntryId = JSONDocument.getFileEntryId(
			dmDocumentTitle = "DM Document",
			groupName = "Guest");

		SQL.executeMySQLStatement(mysqlStatement = "delete from DLFileEntry where fileEntryId = ${fileEntryId};");

		ApplicationsMenu.gotoPortlet(
			category = "System",
			panel = "Control Panel",
			portlet = "Server Administration");

		ServerAdministration.executeServerResourcesActions(actionsDescription = "Clear the database cache.");

		Navigator.openURL();

		SearchPortlets.searchEmbedded(searchTerm = "txt");

		AssertConsoleTextPresent(value1 = "Unable to get asset renderer for class com.liferay.document.library.kernel.model.DLFileEntry with primary key ${fileEntryId}");

		SearchResultPortlet.configureSearchResults(displayTemplate = "Card Layout");

		AssertConsoleTextNotPresent(value1 = "Error executing FreeMarker template");
	}

}