@component-name = "portal-deployment-hypersonic"
definition {

	property ci.retries.disabled = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property test.prepare.bundle.properties = "false";
	property testray.main.component.name = "Setup Wizard";

	@description = "This is a use case for LPS-107347. It asserts that an admin is still required to change password with Setup Wizard disabled."
	@priority = 4
	test AdminIsRequiredToChangePasswordWithSetupWizardDisabled {
		property custom.properties = "setup.wizard.enabled=false${line.separator}passwords.default.policy.change.required=true";
		property database.types = "mysql";
		property test.prepare.bundle.properties = "true";
		property testray.main.component.name = "Users and Organizations";

		task ("When an admin logs in with Setup Wizard disabled") {
			Navigator.openURL();

			User._clickSignInLink();

			Type.typePause(
				locator1 = "TextInput#EMAIL_ADDRESS",
				value1 = "test@liferay.com");

			Type.typePause(
				locator1 = "TextInput#PASSWORD",
				value1 = "test");

			User._clickSignInButton();

			SignIn.agreeToTermsOfUse();

			User.answerPasswordReminder();
		}

		task ("Then the admin is still required to reset its password") {
			Type(
				locator1 = "TextInput#PASSWORD_1",
				value1 = "test2");

			Type(
				locator1 = "TextInput#PASSWORD_2",
				value1 = "test2");

			Button.clickSubmitButton();

			User.answerPasswordReminder();

			AssertElementPresent(locator1 = "UserBar#USER_AVATAR_IMAGE");
		}
	}

	@priority = 4
	test BasicConfigurationVisualLook {
		property database.types = "mysql";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		SetupWizard.viewDefaultPortalNamePG();

		WaitForElementPresent(locator1 = "SetupWizard#BASIC_CONFIGURATION");

		takeScreenshot();

		// Temporarily remove sikuli assertion until fix in LRQA-65984

		//SikuliAssertElementPresent(locator1 = "SetupWizard#SETUP_WIZARD_BASIC_CONFIGURATION_PNG");

	}

	@description = "This is a use case for LPS-187661. Verify the admin user can be configured to a non liferay domain via setup wizard."
	@priority = 5
	test ConfigureNonLiferayDomain {
		property database.types = "mysql";
		property test.assert.warning.exceptions = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		SetupWizard.configurePG(
			administratorEmail = "test@test.com",
			administratorFirstName = "Test",
			administratorLastName = "Test",
			databasePassword = PropsUtil.get("database.mysql.password"),
			databaseType = "MySQL",
			databaseUserName = PropsUtil.get("database.mysql.username"),
			jdbcDriverClassName = PropsUtil.get("database.mysql.driver"),
			jdbcURL = PropsUtil.get("database.mysql.url"));

		Smoke.viewWelcomeContentPage();

		Smoke.runSmoke();
	}

	@description = "This is a use case for LPS-187661. Verify there are no errors after configuring a non liferay domain via editing the admin email."
	@priority = 5
	test ConfigureNonLiferayDomainViaUserEdit {
		property custom.properties = "setup.wizard.enabled=false${line.separator}company.security.strangers.verify=false";
		property test.assert.warning.exceptions = "true";
		property test.liferay.virtual.instance = "false";
		property test.prepare.bundle.properties = "true";
		property test.run.type = "single";

		User.firstLoginPG();

		User.openUsersAdmin();

		User.editEmailAddressCP(
			password = "test",
			userEmailAddress = "test@test.com",
			userScreenName = "test");

		User.logoutPG();

		User.firstLoginUI(
			password = "test",
			userEmailAddress = "test@test.com");

		Portlet.shutdownServer();

		Portlet.startServer(deleteLiferayHome = "false");

		User.logoutPG();

		User.firstLoginUI(
			password = "test",
			userEmailAddress = "test@test.com");
	}

	@priority = 4
	test HypersonicToMySQL {
		property database.types = "mysql";
		property test.assert.warning.exceptions = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		SetupWizard.configurePG(
			administratorEmail = "test@liferay.com",
			administratorFirstName = "Test",
			administratorLastName = "Test",
			databasePassword = PropsUtil.get("database.mysql.password"),
			databaseType = "MySQL",
			databaseUserName = PropsUtil.get("database.mysql.username"),
			jdbcDriverClassName = PropsUtil.get("database.mysql.driver"),
			jdbcURL = PropsUtil.get("database.mysql.url"));

		Smoke.viewWelcomeContentPage();

		Smoke.runSmoke();
	}

	@priority = 3
	test HypersonicWithSpecialContent {
		property database.types = "hypersonic";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		SetupWizard.configurePortalNamePG(portalName = "");

		SetupWizard.configureAdministratorUserPG(
			administratorEmail = "",
			administratorFirstName = "",
			administratorLastName = "");

		Click(locator1 = "TextInput#PORTAL_NAME");

		SetupWizard.configureDatabasePG(
			databasePassword = "",
			databaseType = "Hypersonic",
			databaseUserName = "",
			jdbcDriverClassName = "",
			jdbcURL = "");

		SetupWizard.finishConfigurationPG();

		for (var fieldName : list "Portal Name,First Name,Last Name,Email,JDBC URL,JDBC Driver Class Name") {
			var key_fieldName = ${fieldName};

			AssertTextEquals.assertPartialText(
				locator1 = "TextInput#SPECIFIC_REQUIRED_ALERT",
				value1 = "field is required.");
		}

		AssertTextEquals(
			locator1 = "SetupWizard#DATABASE_CHANGE_USER_NAME_FIELD",
			value1 = "");

		AssertTextEquals(
			locator1 = "SetupWizard#DATABASE_CHANGE_PASSWORD_FIELD",
			value1 = "");

		Refresh();

		SetupWizard.configurePortalNamePG(portalName = "1234567890!@#$%^&*()~`");

		SetupWizard.configureAdministratorUserPG(
			administratorEmail = "1234567890!@#$%^&*()~`",
			administratorFirstName = "1234567890!@#$%^&*()~`",
			administratorLastName = "1234567890!@#$%^&*()~`");

		Click(locator1 = "TextInput#PORTAL_NAME");

		AssertTextEquals.assertValue(
			locator1 = "TextInput#FIRST_NAME",
			value1 = "1234567890!@#$%^&*()~`");

		AssertTextEquals.assertValue(
			locator1 = "TextInput#LAST_NAME",
			value1 = "1234567890!@#$%^&*()~`");

		AssertTextEquals.assertValue(
			locator1 = "TextInput#PORTAL_NAME",
			value1 = "1234567890!@#$%^&*()~`");

		AssertTextEquals.assertPartialText(
			locator1 = "Message#ERROR_ENTER_A_VALID_EMAIL_ADDRESS",
			value1 = "Please enter a valid email address.");
	}

	@description = "This is a use case for LPS-187661. Verify a user created with default liferay admin credentials is not given admin rights by default if created by an admin with a non liferay domain."
	@priority = 5
	test NonLiferayDomainDoesNotGiveAdminRightsByDefault {
		property database.types = "mysql";
		property test.assert.warning.exceptions = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		AntCommands.runCommand("build-test.xml", "portal-ext-properties-update -Dadd.new.properties=true -Dupdate.properties=company.security.strangers.verify=false");

		SetupWizard.configurePG(
			administratorEmail = "test@test.com",
			administratorFirstName = "Test1",
			administratorLastName = "Test1",
			databasePassword = PropsUtil.get("database.mysql.password"),
			databaseType = "MySQL",
			databaseUserName = PropsUtil.get("database.mysql.username"),
			jdbcDriverClassName = PropsUtil.get("database.mysql.driver"),
			jdbcURL = PropsUtil.get("database.mysql.url"));

		User.openUsersAdmin();

		UserNavigator.gotoUser(userScreenName = "test");

		User.editUserInformation(userScreenNameEdit = "test1");

		User.openUsersAdmin();

		User.addCP(
			userEmailAddress = "test@liferay.com",
			userFirstName = "test",
			userLastName = "test",
			userScreenName = "test");

		User.openUsersAdmin();

		UserNavigator.gotoUser(userScreenName = "test");

		User.editPassword(
			newPassword = "tester",
			requirePasswordReset = "true");

		User.logoutPG();

		User.firstLoginUI(
			password = "tester",
			userEmailAddress = "test@liferay.com");

		AssertElementNotPresent(locator1 = "ProductMenu#TOGGLE");
	}

	@priority = 5
	test ViewConfiguredSetupWizardValue {
		property database.types = "mysql";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		SetupWizard.viewDefaultPortalNamePG();

		SetupWizard.configureAdministratorUserPG(
			administratorEmail = "user@liferay.com",
			administratorFirstName = "User",
			administratorLastName = "User");

		SetupWizard.configurePortalNamePG(portalName = "Custom");

		SetupWizard.configureDefaultLanguagePG(defaultLanguage = "español (España)");

		SetupWizard.configureDatabasePG(
			databasePassword = PropsUtil.get("database.mysql.password"),
			databaseType = "MySQL",
			databaseUserName = PropsUtil.get("database.mysql.username"),
			jdbcDriverClassName = PropsUtil.get("database.mysql.driver"),
			jdbcURL = PropsUtil.get("database.mysql.url"));

		SetupWizard.finishConfigurationPG();

		SetupWizard.viewConfigurationSavedPG(localization = "ES");

		Portlet.shutdownServer();

		Portlet.startServer(
			base_branch = ${base_branch},
			deleteLiferayHome = "false");

		SetupWizard.viewConfiguredDatabaseInConsole(databaseType = ${databaseType});

		Navigator.openURL();

		User.acceptEndUserLicenseAgreementLocalized(localizedAgree = "Acepto");

		User.resetPassword(
			localizedSaveButton = "Guardar",
			newPassword = "test1");

		User.answerPasswordReminderLocalized(
			localizedAnswer = "Respuesta",
			localizedSaveButton = "Guardar");

		if (IsElementPresent(key_text = "Finalizado", locator1 = "Button#ANY")) {
			Button.click(button = "Finalizado");
		}

		AssertTextEquals(
			locator1 = "Home#SITE_NAME",
			value1 = "Custom");

		var liferayHome = PropsUtil.get("liferay.home.dir.name");

		var fileContent = FileUtil.read("${liferayHome}/portal-setup-wizard.properties");

		if (contains(${fileContent}, "admin.email.from.address=user@liferay.com") && contains(${fileContent}, "admin.email.from.name=User User") && contains(${fileContent}, "default.admin.email.address.prefix=user") && contains(${fileContent}, "default.admin.first.name=User") && contains(${fileContent}, "default.admin.last.name=User") && contains(${fileContent}, "company.default.locale=es_ES") && contains(${fileContent}, "company.default.name=Custom")) {
			echo("The configuration was saved successfully in portal-setup-wizard.properties!");
		}
		else {
			fail("Fail to save the configuration in portal file portal-setup-wizard.properties.");
		}
	}

}