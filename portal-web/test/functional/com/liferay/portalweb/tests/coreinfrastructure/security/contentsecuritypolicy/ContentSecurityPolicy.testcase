@component-name = "portal-security"
definition {

	property ci.retries.disabled = "true";
	property custom.properties = "feature.flag.LPS-134060=true";
	property portal.release = "false";
	property portal.upstream = "true";
	property testray.main.component.name = "Content Security Policy";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			PortalSettings.tearDownAuthenticationCP();

			PagesAdmin.tearDownCP();
		}
	}

	@description = "This is a use case for LPS-184518. TC-1. Verify Site-level CSP configuration could be set and work for the site with SiteURL and overwrites instance level."
	@priority = 4
	test CanSetSiteLevelCSPAndOverwritesInstanceLevelCSP {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given: Add new site with SiteURL CSP enabled at site level and enable CSP at Instance level.") {
			ContentSecurityPolicy.goToContentSecurityPolicyInstanceSettings();

			ContentSecurityPolicy.configureCSP(
				csp = "Instance-Level",
				enableCSP = "true");

			AssertTextEquals(
				locator1 = "ContentSecurityPolicy#CONTENT_SECURITY_POLICY_TEXT",
				value1 = "Instance-Level");

			HeadlessSite.addSite(siteName = "Site Name");

			JSONLayout.addPublicLayout(
				groupName = "Site Name",
				layoutName = "Test Page");

			Site.openSiteSettingsAdmin(siteURLKey = "site-name");

			Site.addVirtualHostsURLCP(
				pageVirtualHosts = "true",
				pageVirtualHostURL = "www.able.com");

			UserBar.signOut();

			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@liferay.com");

			var baseSiteURL = "http://www.able.com:8080/test-page";

			var curl = '''${baseSiteURL} -X HEAD -I''';

			var response = JSONCurlUtil.post(${curl});

			TestUtils.assertPartialEquals(
				actual = ${response},
				expected = "Content-Security-Policy: Instance-Level");
		}

		task ("When: Set Site-level CSP configuration and navigate to www.able.com:8080.") {
			UserBar.signOut();

			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@liferay.com");

			ContentSecurityPolicy.goToContentSecurityPolicySiteSettings(
				baseURL = "http://www.able.com:8080",
				siteURLKey = "site-name");

			ContentSecurityPolicy.configureCSP(
				csp = "Site-Level",
				enableCSP = "true");

			UserBar.signOut();

			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@liferay.com");

			Navigator.openSpecificURL(url = "http://www.able.com:8080/test-page");
		}

		task ("Then: Site-level CSP configuration is present in request header.") {
			var baseSiteURL = "http://www.able.com:8080/test-page";

			var curl = '''${baseSiteURL} -X HEAD -I''';

			var response = JSONCurlUtil.post(${curl});

			TestUtils.assertPartialEquals(
				actual = ${response},
				expected = "Content-Security-Policy: Site-Level");
		}
	}

	@description = "This is a use case for LPS-184518. TC-2. Verify Site-level CSP disabled CSP could overwrite Instance-level CSP."
	@priority = 4
	test DisableSiteLevelCSPOverwritesInstanceLevelCSP {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given: Add new site with SiteURL CSP enabled at site level and enable CSP at Instance level.") {
			ContentSecurityPolicy.goToContentSecurityPolicyInstanceSettings();

			ContentSecurityPolicy.configureCSP(
				csp = "Instance-Level",
				enableCSP = "true");

			HeadlessSite.addSite(siteName = "Site Name");

			JSONLayout.addPublicLayout(
				groupName = "Site Name",
				layoutName = "Test Page");

			Site.openSiteSettingsAdmin(siteURLKey = "site-name");

			Site.addVirtualHostsURLCP(
				pageVirtualHosts = "true",
				pageVirtualHostURL = "www.able.com");

			UserBar.signOut();

			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@liferay.com");

			ContentSecurityPolicy.goToContentSecurityPolicySiteSettings(
				baseURL = "http://www.able.com:8080",
				siteURLKey = "site-name");

			ContentSecurityPolicy.configureCSP(
				csp = "Site-Level",
				enableCSP = "true");
		}

		task ("And: Navigate to www.able.com:8080 Site-level CSP configuration is present in request header.") {
			Navigator.openSpecificURL(url = "http://www.able.com:8080/test-page");

			var baseSiteURL = "http://www.able.com:8080/test-page";

			var curl = '''${baseSiteURL} -X HEAD -I''';

			var response = JSONCurlUtil.post(${curl});

			TestUtils.assertPartialEquals(
				actual = ${response},
				expected = "Content-Security-Policy: Site-Level");
		}

		task ("When: Disable the CSP configuration on site level.") {
			ContentSecurityPolicy.goToContentSecurityPolicySiteSettings(
				baseURL = "http://www.able.com:8080",
				siteURLKey = "site-name");

			ContentSecurityPolicy.configureCSP(enableCSP = "false");
		}

		task ("Then: There is NO CSP present in the request headers.") {
			UserBar.signOut();

			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@liferay.com");

			var baseSiteURL = "http://www.able.com:8080/test-page";

			var curl = '''${baseSiteURL} -X HEAD -I''';

			var response = JSONCurlUtil.post(${curl});

			TestUtils.assertNotContain(
				actual = ${response},
				expected = "Content-Security-Policy");
		}
	}

	@description = "This is a use case for LPS-184518. TC-3. Verify After the Site-level CSP reset, the site will display Instance level CSP if configured."
	@priority = 4
	test SiteDisplayInstanceLevelCSPAfterResetSiteLevelCSP {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given: Add new site with SiteURL CSP enabled at site level and enable CSP at Instance level.") {
			ContentSecurityPolicy.goToContentSecurityPolicyInstanceSettings();

			ContentSecurityPolicy.configureCSP(
				csp = "Instance-Level",
				enableCSP = "true");

			HeadlessSite.addSite(siteName = "Site Name");

			JSONLayout.addPublicLayout(
				groupName = "Site Name",
				layoutName = "Test Page");

			Site.openSiteSettingsAdmin(siteURLKey = "site-name");

			Site.addVirtualHostsURLCP(
				pageVirtualHosts = "true",
				pageVirtualHostURL = "www.able.com");

			UserBar.signOut();

			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@liferay.com");

			ContentSecurityPolicy.goToContentSecurityPolicySiteSettings(
				baseURL = "http://www.able.com:8080",
				siteURLKey = "site-name");

			ContentSecurityPolicy.configureCSP(
				csp = "Site-Level",
				enableCSP = "true");
		}

		task ("When: Reset the CSP configuration on site level.") {
			ContentSecurityPolicy.goToContentSecurityPolicySiteSettings(
				baseURL = "http://www.able.com:8080",
				siteURLKey = "site-name");

			ContentSecurityPolicy.resetConfigureCSP(reset = "true");

			FormFields.viewCheckboxChecked(fieldName = "Enabled");

			AssertTextEquals(
				locator1 = "ContentSecurityPolicy#CONTENT_SECURITY_POLICY_TEXT",
				value1 = "Instance-Level");
		}

		task ("Then: There is the instance-level CSP present in the request headers.") {
			UserBar.signOut();

			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@liferay.com");

			var baseSiteURL = "http://www.able.com:8080/test-page";

			var curl = '''${baseSiteURL} -X HEAD -I''';

			var response = JSONCurlUtil.post(${curl});

			TestUtils.assertPartialEquals(
				actual = ${response},
				expected = "Content-Security-Policy: Instance-Level");
		}
	}

	@description = "This is a use case for LPS-179552. TC-2. Verify the CSP configuration could be loaded from OSGi configuration file."
	@priority = 5
	test VerifyCSPConfigurationCanBeLoadedFromOSGiFile {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given Add virtual instance and enable CSP at Instance level") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");

			UserBar.signOut();

			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("When add the OSGI configuration file") {
			ContentSecurityPolicy.deployInstanceConfigFile(
				osgiConfigFileName = "com.liferay.portal.security.content.security.policy.internal.configuration.ContentSecurityPolicyConfiguration.scoped~instance~level.config",
				portalInstanceName = "www.able.com");

			OSGiConfig.waitForOSGiConfig();
		}

		task ("Then: The preconfigured value is present at Instance Settings.") {
			PortalSettings.openInstanceSettingsAdmin(baseURL = "http://www.able.com:8080");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Content Security Policy",
				configurationName = "Content Security Policy Configuration",
				configurationScope = "Site Scope");

			AssertTextPresent(
				locator1 = "ContentSecurityPolicy#CONTENT_SECURITY_POLICY_TEXT",
				value1 = "img-src http://www.able.com");

			AssertTextPresent(
				locator1 = "ContentSecurityPolicy#EXCLUDED_PATHS_TEXT",
				value1 = "/c/portal/layout");
		}
	}

	@description = "This is a use case for LPS-182349. TC-3. Verify the prespecified Content Security Policy settings could be configured at Instance level using Web ID."
	@priority = 4
	test VerifyCSPCouldConfiguredByWebId {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Add the OSGI configuration file") {
			ContentSecurityPolicy.deployInstanceConfigFile(osgiConfigFileName = "com.liferay.portal.security.content.security.policy.internal.configuration.ContentSecurityPolicyConfiguration.scoped~custom-image-source-webid.config");

			OSGiConfig.waitForOSGiConfig();
		}

		task ("When: The Instance Administrator opens the Content Security Policy settings at Instance level.") {
			ContentSecurityPolicy.goToContentSecurityPolicyInstanceSettings();
		}

		task ("Then: The preconfigured value is present at Instance Settings.") {
			while (IsElementNotPresent(key_title = "img-src domain.liferay.com", locator1 = "ContentSecurityPolicy#CONTENT_SECURITY_POLICY_TOOLTIP_TITLE")) {
				Refresh();
			}
		}

		task ("And: The header is added to any Portal requests.") {
			var baseURL = PropsUtil.get("portal.url");

			var curl = '''${baseURL}/web/guest/home -I''';

			var response = JSONCurlUtil.head(${curl});

			TestUtils.assertPartialEquals(
				actual = ${response},
				expected = "Content-Security-Policy: img-src domain.liferay.com");
		}
	}

	@description = "This is a use case for LPS-182349. TC-1, TC-2 and TC-4. Verify the prespecified Content Security Policy settings is present at Instance level and present in the Request headers."
	@priority = 4
	test VerifyCSPCouldConfiguredToBlockImageSource {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Add the OSGI configuration file") {
			ContentSecurityPolicy.deployInstanceConfigFile(osgiConfigFileName = "com.liferay.portal.security.content.security.policy.internal.configuration.ContentSecurityPolicyConfiguration.scoped~custom-image-source.config");

			OSGiConfig.waitForOSGiConfig();
		}

		task ("When: The Instance Administrator opens the Content Security Policy settings at Instance level.") {
			ContentSecurityPolicy.goToContentSecurityPolicyInstanceSettings();
		}

		task ("Then: The preconfigured value is present at Instance Settings.") {
			while (IsElementNotPresent(key_title = "img-src domain.example.com", locator1 = "ContentSecurityPolicy#CONTENT_SECURITY_POLICY_TOOLTIP_TITLE")) {
				Refresh();
			}
		}

		task ("And: The header is added to any Portal requests.") {
			var baseURL = PropsUtil.get("portal.url");

			var curl = '''${baseURL}/web/guest/home -I''';

			var response = JSONCurlUtil.head(${curl});

			TestUtils.assertPartialEquals(
				actual = ${response},
				expected = "Content-Security-Policy: img-src domain.example.com");
		}
	}

	@description = "This is a use case for LPS-179901. TC-2. Verify the CSP configuration could be loaded from OSGi configuration file."
	@priority = 5
	test VerifyCSPSiteSettingsCanBeLoadedFromOSGiFile {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given Add new site and add a new virtual host as SiteURL") {
			HeadlessSite.addSite(siteName = "Site Name");

			JSONLayout.addPublicLayout(
				groupName = "Site Name",
				layoutName = "Test Page");

			Site.openSiteSettingsAdmin(siteURLKey = "site-name");

			Site.addVirtualHostsURLCP(
				pageVirtualHosts = "true",
				pageVirtualHostURL = "www.able.com");
		}

		task ("When add the OSGI configuration file") {
			ContentSecurityPolicy.deploySiteConfigFile(
				groupName = "Site Name",
				osgiConfigFileName = "com.liferay.portal.security.content.security.policy.internal.configuration.ContentSecurityPolicyConfiguration.scoped~site~level.config");

			UserBar.signOut();

			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@liferay.com");
		}

		task ("Then: The preconfigured value is present at Site Settings.") {
			ContentSecurityPolicy.goToContentSecurityPolicySiteSettings(
				baseURL = "http://www.able.com:8080",
				siteURLKey = "site-name");

			AssertTextPresent(
				locator1 = "ContentSecurityPolicy#CONTENT_SECURITY_POLICY_TEXT",
				value1 = "img-src http://www.able.com");

			AssertTextPresent(
				locator1 = "ContentSecurityPolicy#EXCLUDED_PATHS_TEXT",
				value1 = "/c/portal/layout");
		}
	}

	@description = "This is a use case for LPS-179552. TC-1. Verify if 'nonce' value is added to all script and link HTML elements of the page."
	@priority = 5
	test VerifyNonceIsAddedWhenCSPIsEnabled {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given Add virtual instance and enable CSP at Instance level") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");

			UserBar.signOut();

			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");

			ContentSecurityPolicy.goToContentSecurityPolicyInstanceSettings(baseURL = "http://www.able.com:8080");

			ContentSecurityPolicy.configureCSP(
				csp = "img-src http://www.able.com",
				enableCSP = "true");
		}

		task ("When: Navigate to default site page and check HTML page source.") {
			Navigator.openSpecificURL(url = "http://www.able.com:8080");
		}

		task ("Then: Verify 'nonce' value is added to script and link HTML elements of the page.") {
			var pageSource = selenium.getHtmlSource();

			TestUtils.assertPartialEquals(
				actual = ${pageSource},
				expected = "script nonce");

			TestUtils.assertPartialEquals(
				actual = ${pageSource},
				expected = "link nonce");
		}

		task ("When: Add '/web/guest' as Excluded URI Path.") {
			ContentSecurityPolicy.goToContentSecurityPolicyInstanceSettings(baseURL = "http://www.able.com:8080");

			ContentSecurityPolicy.configureCSP(excludedPaths = "/c/portal/layout");
		}

		task ("Then: Verify 'nonce' value isn't added to script and link HTML elements of the page.") {
			Navigator.openSpecificURL(url = "http://www.able.com:8080");

			var pageSource = selenium.getHtmlSource();

			TestUtils.assertNotContain(
				actual = ${pageSource},
				expected = "script nonce");

			TestUtils.assertNotContain(
				actual = ${pageSource},
				expected = "link nonce");
		}
	}

	@description = "This is a use case for LPS-179901. TC-1. Verify if 'nonce' value is added to all script and link HTML elements of the site page."
	@priority = 5
	test VerifyNonceIsAddedWhenCSPIsEnabledAtSiteLevel {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given Add new site and add a new virtual host as SiteURL") {
			HeadlessSite.addSite(siteName = "Site Name");

			JSONLayout.addPublicLayout(
				groupName = "Site Name",
				layoutName = "Test Page");

			Site.openSiteSettingsAdmin(siteURLKey = "site-name");

			Site.addVirtualHostsURLCP(
				pageVirtualHosts = "true",
				pageVirtualHostURL = "www.able.com");

			UserBar.signOut();

			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@liferay.com");
		}

		task ("And: Enable CSP at Site level.") {
			ContentSecurityPolicy.goToContentSecurityPolicySiteSettings(
				baseURL = "http://www.able.com:8080",
				siteURLKey = "site-name");

			ContentSecurityPolicy.configureCSP(
				csp = "img-src http://www.able.com",
				enableCSP = "true");
		}

		task ("When: Navigate to default site page and check HTML page source.") {
			Navigator.openSpecificURL(url = "http://www.able.com:8080");
		}

		task ("Then: Verify 'nonce' value is added to script and link HTML elements of the page.") {
			var pageSource = selenium.getHtmlSource();

			TestUtils.assertPartialEquals(
				actual = ${pageSource},
				expected = "script nonce");

			TestUtils.assertPartialEquals(
				actual = ${pageSource},
				expected = "link nonce");
		}

		task ("When: Add '/web/guest' as Excluded URI Path.") {
			ContentSecurityPolicy.goToContentSecurityPolicySiteSettings(
				baseURL = "http://www.able.com:8080",
				siteURLKey = "site-name");

			ContentSecurityPolicy.configureCSP(excludedPaths = "/c/portal/layout");
		}

		task ("Then: Verify 'nonce' value isn't added to script and link HTML elements of the page.") {
			Navigator.openSpecificURL(url = "http://www.able.com:8080");

			var pageSource = selenium.getHtmlSource();

			TestUtils.assertNotContain(
				actual = ${pageSource},
				expected = "script nonce");

			TestUtils.assertNotContain(
				actual = ${pageSource},
				expected = "link nonce");
		}
	}

}