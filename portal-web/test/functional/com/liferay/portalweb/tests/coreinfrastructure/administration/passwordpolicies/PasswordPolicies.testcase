@component-name = "portal-security"
definition {

	property ci.retries.disabled = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Password Policies";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			JSONUser.tearDownNonAdminUsers();

			PasswordPolicies.tearDownCP();
		}
	}

	@description = "This test enables lockout and sets maximum failure to 3. It asserts that a user is locked after reaching maximum log in failures."
	@priority = 5
	test AdminCanUnlockUserAfterExcessiveFailedLoginAttempts {
		property environment.acceptance = "false";
		property portal.acceptance = "true";

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		User.openUsersAdmin();

		User.editPasswordCP(
			userEmailAddress = "userea@liferay.com",
			userScreenName = "usersn");

		PasswordPolicies.openPasswordPoliciesAdmin();

		PasswordPolicies.enableLockout(passwordPolicyName = "Default Password Policy");

		PasswordPolicies.openPasswordPoliciesAdmin();

		PasswordPoliciesNavigator.gotoPolicy(passwordPolicyName = "Default Password Policy");

		PasswordPolicies.viewPasswordPolicyLockout(passwordPolicyName = "Default Password Policy");

		User.logoutPG();

		User.loginUserInvalidPG(
			loginAttempts = 3,
			password = "incorrectpassword",
			userEmailAddress = "userea@liferay.com");

		User.loginUserPG();

		User.openUsersAdmin();

		User.unlockUserAccount(userScreenName = "usersn");

		User.logoutPG();

		User.loginUserPG(userEmailAddress = "userea@liferay.com");
	}

	@description = "This test asserts a user can remove an assignee to the policy."
	@priority = 5
	test CanAddAndRemoveAssignee {
		JSONUser.addUser(
			userEmailAddress = "userea5@liferay.com",
			userFirstName = "userfn5",
			userLastName = "userln5",
			userScreenName = "usersn5");

		PasswordPolicies.openPasswordPoliciesAdmin();

		PasswordPolicies.addCP(passwordPolicyName = "Password Policy Name");

		PasswordPolicies.assignMembers(
			assigneeName = "userfn5 userln5",
			assigneeType = "Users",
			passwordPolicyName = "Password Policy Name");

		PasswordPolicies.removeAssignee(assigneeName = "userfn5 userln5");
	}

	@description = "This test assigns multiple members to a policy and bulk removes them."
	@priority = 4
	test CanBulkAssignAndRemoveAssignees {
		for (var userNum : list "1,2,3") {
			JSONUser.addUser(
				userEmailAddress = "userea${userNum}@liferay.com",
				userFirstName = "userfn${userNum}",
				userLastName = "userln${userNum}",
				userScreenName = "usersn${userNum}");
		}

		PasswordPolicies.openPasswordPoliciesAdmin();

		PasswordPolicies.addCP(passwordPolicyName = "Password Policy Name");

		PasswordPolicies.assignMembers(
			assigneeNames = "userfn1 userln1,userfn2 userln2,userfn3 userln3",
			assigneeType = "Users",
			bulkAssign = "true",
			passwordPolicyName = "Password Policy Name");

		PasswordPolicies.openPasswordPoliciesAdmin();

		PasswordPolicies.viewAssignees(
			assigneeNames = "userfn1 userln1,userfn2 userln2,userfn3 userln3",
			assigneeType = "Users",
			passwordPolicyName = "Password Policy Name");

		PasswordPolicies.removeAssignee(
			assigneeNames = "userfn1 userln1,userfn2 userln2,userfn3 userln3",
			bulkRemove = "true");

		AssertTextEquals.assertPartialText(
			locator1 = "Message#EMPTY_INFO",
			value1 = "No users were found.");
	}

	@description = "This test deletes a multiple policies at once through the management toolbar."
	@priority = 4
	test CanBulkDeletePolicies {
		for (var passwordPolicyName : list "Policy One,Policy Two,Policy Three") {
			PasswordPolicies.openPasswordPoliciesAdmin();

			PasswordPolicies.addCP(passwordPolicyName = ${passwordPolicyName});
		}

		PasswordPolicies.bulkDeleteCP(passwordPolicyName = "Policy One,Policy Two,Policy Three");
	}

	@description = "This test deletes a Password Policy."
	@priority = 5
	test CanDeleteAPolicy {
		ApplicationsMenu.gotoPortlet(
			category = "Security",
			panel = "Control Panel",
			portlet = "Password Policies");

		PasswordPolicies.addCP(passwordPolicyName = "Password Policy Name");

		PasswordPolicies.deleteCP(passwordPolicyName = "Password Policy Name");
	}

	@description = "This is a use case for LPS-179688 TC-4: Verify invited user to an Account cannot change his password during account creation."
	@priority = 5
	test CannotChangePasswordForAccountInvitedUserDuringAccountCreation {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property custom.properties = "mail.send.blacklist=noreply@liferay.com,noreply@domain.invalid,test@domain.invalid";
		property test.smtp.server.enabled = "true";

		task ("Given Disable Allow Custom Password At Account Creation in Users of instance settings configure email") {
			Navigator.openURL();

			PortalSettings.gotoConfiguration(
				configurationCategory = "Email",
				configurationName = "Email Sender",
				configurationScope = "Virtual Instance Scope");

			PortalSettings.configureEmailSender(
				emailAddress = "test@liferay.com",
				emailSenderName = "Joe Bloggs");

			User.configureCustomPasswordField();

			AccountConfiguration.enableAccountEmailDomain();

			Account.openAccountsAdmin();

			Account.addAccountWithDomain(
				accountName = "Account Name",
				domainNames = "liferay.com");
		}

		task ("When Invite user to an Account") {
			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Name");

			Account.inviteUser(
				accountName = "Account Name",
				userEmailAddress = "userea@liferay.com");

			Alert.viewSuccessMessage();

			User.logoutPG();

			MockMock.viewMail(
				asset = "Test Test has invited you to join Account Name",
				content = "Test Test has invited you to join Account Name",
				recipient = "userea@liferay.com",
				sender = "Test Test",
				subject = "Test Test has invited you to join Account Name");

			MockMock.openMockMock();

			MockMock.clickBodyLink(
				asset = "Test Test has invited you to join Account Name",
				bodyLink = "Create Account",
				recipient = "userea@liferay.com");
		}

		task ("Then Verify there is no password input section through email's create account link") {
			Account.createAccount(
				disablePassword = "true",
				userEmailAddress = "userea@liferay.com",
				userEmailAddressMessage = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");
		}
	}

	@description = "This is a use case for LPS-179688 TC-1: Verify User cannot set his password during the User Account Creation process (Sign In / Create Account)."
	@priority = 5
	test CannotSetPasswordDuringAccountCreation {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		task ("Given Disable Allow Custom Password At Account Creation in Users of instance settings") {
			User.configureCustomPasswordField();
		}

		task ("When Create a new Account there is not password input") {
			User.logoutPG();

			SignInNavigator.gotoCreateAccount();

			Account.createAccount(
				disablePassword = "true",
				newuserEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");
		}

		task ("Then Verify the new User is created at the Portal after submit new user details") {
			Navigator.openURL();

			User.loginPG();

			User.openUsersAdmin();

			UserNavigator.gotoUser(userScreenName = "usersn");

			User.viewUserInformation(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");
		}
	}

	@description = "This is a use case for LPS-179688 TC-10: Verify Allow Custom Password At Account Creation parameter can be set by portal-ext.properties."
	@priority = 3
	test CanPasswordCreationParameterBeSetInExt {
		property custom.properties = "login.create.account.allow.custom.password=false";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Verify Allow Custom Password At Account Creation is unchecked") {
			PortalSettings.gotoConfiguration(
				configurationCategory = "Users",
				configurationName = "Fields",
				configurationScope = "Virtual Instance Scope");

			FormFields.viewCheckboxNotChecked(fieldName = "login.create.account.allow.custom.password");
		}

		task ("Verify there is no password input section") {
			User.viewNoPasswordSection();
		}
	}

	@description = "This is a use case for LPS-60180. This test enables Password Syntax Checking. It also asserts that the specific error message displays when user attempts to enter a short password."
	@priority = 4
	test ErrorMessageDisplaysWhenPasswordIsShorterThanMinimumLength {
		property custom.properties = "mail.send.blacklist=noreply@liferay.com,noreply@domain.invalid,test@domain.invalid";
		property test.smtp.server.enabled = "true";

		var portalURL = PropsUtil.get("portal.url");

		PortalSettings.gotoConfiguration(
			configurationCategory = "Email",
			configurationName = "Email Sender",
			configurationScope = "Virtual Instance Scope");

		PortalSettings.configureEmailSender(
			emailAddress = "test@liferay.com",
			emailSenderName = "Joe Bloggs");

		PasswordPolicies.openPasswordPoliciesAdmin();

		// Enabling Syntax Checking will set minimum length to 6 by default

		PasswordPolicies.enableSyntaxChecking(passwordPolicyName = "Default Password Policy");

		User.openUsersAdmin();

		User.addCP(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		User.logoutPG();

		User.forgotPasswordSendResetLink(userEmailAddress = "userea@liferay.com");

		MockMock.openBodyLink(
			asset = "${portalURL}: Reset Your Password",
			content = "You can reset your password for ${portalURL}",
			subject = "${portalURL}: Reset Your Password");

		Type(
			locator1 = "UsersAndOrganizationsEditUser#PASSWORD_NEW_PASSWORD_FIELD",
			value1 = "test");

		Type(
			locator1 = "UsersAndOrganizationsEditUser#PASSWORD_ENTER_AGAIN_FIELD",
			value1 = "test");

		Button.clickSave();

		AssertTextEquals.assertPartialText(
			locator1 = "Message#ERROR",
			value1 = "That password is too short. Please make sure your password is at least 6 characters long.");

		// Asserts user's password did not change

		User.loginPG(
			newPassword = "Password2",
			syntaxCheckingEnabled = "true",
			userEmailAddress = "userea@liferay.com");
	}

	@description = "This is a test for LPS-179689. TC-3: Verify an instance administrator is able to modify the password via Users and Organizations for a user whose password policy allows it."
	@priority = 4
	test InstanceAdminUserIsAbleToModifyPasswordForAnUserWithAllowedPolicy {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		task ("Given a new user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("And a new custom password policy is added") {
			PasswordPolicies.openPasswordPoliciesAdmin();

			PasswordPolicies.addCP(passwordPolicyName = "New Password Policy Name");
		}

		task ("And assign the newly user to the custom password policy ") {
			PasswordPolicies.openPasswordPoliciesAdmin();

			PasswordPolicies.assignMembers(
				assigneeName = "userfn userln",
				assigneeType = "Users",
				passwordPolicyName = "New Password Policy Name");
		}

		task ("And the admin user updates custom password policy to enable Changeable") {
			PasswordPolicies.openPasswordPoliciesAdmin();

			PasswordPolicies.enableChangeable(
				passwordPolicyName = "New Password Policy Name",
				passwordPolicyPanel = "Password Changes");
		}

		task ("When the admin user navigates to the newly user's account page via Users and Organizations") {
			User.openUsersAdmin();

			Search.searchCP(searchTerm = "usersn");

			UserNavigator.gotoUser(userScreenName = "usersn");

			UserNavigator.gotoGeneral();
		}

		task ("Then the Password item displays") {
			AssertVisible(
				key_navNested = "Password",
				locator1 = "NavNested#NAV_NESTED_LINK");
		}
	}

	@description = "This is a test for LPS-179689. TC-4: Verify an instance administrator is not able to modify the password via Users and Organizations for a user whose password policy blocks it."
	@priority = 4
	test InstanceAdminUserIsNotAbleToModifyPasswordForAnUserWithBlockedPolicy {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		task ("Given a new user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("And add a custom password policy where password change is OFF") {
			PasswordPolicies.openPasswordPoliciesAdmin();

			PasswordPolicies.addCP(passwordPolicyName = "New Password Policy Name");
		}

		task ("And assign the newly user to the custom password policy ") {
			PasswordPolicies.openPasswordPoliciesAdmin();

			PasswordPolicies.assignMembers(
				assigneeName = "userfn userln",
				assigneeType = "Users",
				passwordPolicyName = "New Password Policy Name");
		}

		task ("When the admin user navigates to his account page via Users and Organizations") {
			User.openUsersAdmin();

			Search.searchCP(searchTerm = "test");

			UserNavigator.gotoUser(userScreenName = "test");

			UserNavigator.gotoGeneral();
		}

		task ("Then the Password item displays") {
			AssertVisible(
				key_navNested = "Password",
				locator1 = "NavNested#NAV_NESTED_LINK");
		}

		task ("When the admin user navigates to the newly user's account page via Users and Organizations") {
			User.openUsersAdmin();

			Search.searchCP(searchTerm = "usersn");

			UserNavigator.gotoUser(userScreenName = "usersn");

			UserNavigator.gotoGeneral();
		}

		task ("Then the Password item not displays") {
			AssertElementNotPresent(
				key_navNested = "Password",
				locator1 = "NavNested#NAV_NESTED_LINK");
		}
	}

	@description = "This is a use case for LPS-118342. Log in should not fail after a password policy is updated."
	@priority = 3
	test LoginUserAfterPasswordPolicyChanged {
		PasswordPolicies.openPasswordPoliciesAdmin();

		PasswordPolicies.enableChangeable(
			passwordPolicyName = "Default Password Policy",
			passwordPolicyPanel = "Password Changes");

		PasswordPolicies.openPasswordPoliciesAdmin();

		PasswordPolicies.enableChangeable(
			enableChangeRequired = "false",
			passwordPolicyName = "Default Password Policy",
			passwordPolicyPanel = "Password Changes");

		PasswordPolicies.openPasswordPoliciesAdmin();

		PasswordPolicies.togglePasswordExpiration(
			enablePasswordExpiration = "true",
			graceLimit = 0,
			minimumAge = "52 Weeks",
			passwordPolicyName = "Default Password Policy",
			warningTime = "2 Weeks");

		User.logoutPG();

		User.createAccount(
			newPassword = "Password1",
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		User.loginPG(
			password = "Password1",
			userEmailAddress = "userea@liferay.com");
	}

	@description = "This is a use case for LPS-179688 TC-8: Verify Allow Custom Password At Account Creation parameter is unique by instance."
	@priority = 4
	test PasswordCreationParameterIsUniqueByInstance {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given Disable Allow Custom Password At Account Creation in the default instance the password will still be present in the newly created virtual instance") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");

			User.configureCustomPasswordField();

			User.viewNoPasswordSection();

			User.viewPasswordSection(specificURL = "http://www.able.com:8080");
		}

		task ("When Disable Allow Custom Password At Account Creation in new instance") {
			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");

			User.configureCustomPasswordField(baseURL = "http://www.able.com:8080");
		}

		task ("Then Verify password field is not present www.able.com virtual instance") {
			User.viewNoPasswordSection(specificURL = "http://www.able.com:8080");
		}
	}

	@description = "This is a use case for LPS-179688 TC-9: Verify Allow Custom Password At Account Creation parameter is unique by instance when database partitioning is enabled."
	@priority = 3
	test PasswordCreationParameterIsUniqueByInstanceWithEnableDatabasePartitioning {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property database.partition.enabled = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given Disable Allow Custom Password At Account Creation in the default instance the password will still be present in the newly created virtual instance") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");

			User.configureCustomPasswordField();

			User.viewNoPasswordSection();

			User.viewPasswordSection(specificURL = "http://www.able.com:8080");
		}

		task ("When Disable Allow Custom Password At Account Creation in new instance") {
			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");

			User.configureCustomPasswordField(baseURL = "http://www.able.com:8080");
		}

		task ("Then Verify password field is not present www.able.com virtual instance") {
			User.viewNoPasswordSection(specificURL = "http://www.able.com:8080");
		}
	}

	@description = "This is a test for LPS-179689. TC-2: Verify password item is hidden on the user's My Account page after disabling the change password option from the custom password policy."
	@priority = 5
	test PasswordItemIsHiddenAfterDisablingChangeableFromCustomPolicy {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		task ("Given a new user") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("And a new custom password policy is added") {
			PasswordPolicies.openPasswordPoliciesAdmin();

			PasswordPolicies.addCP(passwordPolicyName = "New Password Policy Name");
		}

		task ("And assign the newly user to the custom password policy ") {
			PasswordPolicies.openPasswordPoliciesAdmin();

			PasswordPolicies.assignMembers(
				assigneeName = "userfn userln",
				assigneeType = "Users",
				passwordPolicyName = "Password Policy Name");
		}

		task ("And the admin user updates custom password policy to disable Changeable") {
			PasswordPolicies.openPasswordPoliciesAdmin();

			PasswordPolicies.disableChangeable(
				passwordPolicyName = "Default Password Policy",
				passwordPolicyPanel = "Password Changes");
		}

		task ("When the newly user logs in and navigates to his Account Page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			UserBar.gotoDropdownItem(dropdownItem = "Account Settings");

			UserNavigator.gotoGeneral();
		}

		task ("Then the Password item not displays") {
			AssertElementNotPresent(
				key_navNested = "Password",
				locator1 = "NavNested#NAV_NESTED_LINK");
		}
	}

	@description = "This is a test for LPS-179689. TC-1: Verify password item is hidden on the user's My Account page after disabling the change password option from the default password policy."
	@priority = 5
	test PasswordItemIsHiddenAfterDisablingChangeableFromDefaultPolicy {
		task ("Given an admin user updates default password policy to disable Changeable") {
			PasswordPolicies.openPasswordPoliciesAdmin();

			PasswordPolicies.disableChangeable(
				passwordPolicyName = "Default Password Policy",
				passwordPolicyPanel = "Password Changes");
		}

		task ("When the admin user navigates to his Account Page") {
			UserBar.gotoDropdownItem(dropdownItem = "Account Settings");

			UserNavigator.gotoGeneral();
		}

		task ("Then the Password item not displays") {
			AssertElementNotPresent(
				key_navNested = "Password",
				locator1 = "NavNested#NAV_NESTED_LINK");
		}
	}

	@description = "This test enables syntax checking and asserts passwords being added by admin and user must contain at least one number"
	@priority = 4
	test PasswordNeedsToHaveAtLeastOneNumericCharacterIfSyntaxCheckingIsEnabled {
		task ("Given the default password policy has Syntax Checking enabled") {
			PasswordPolicies.openPasswordPoliciesAdmin();

			PasswordPolicies.enableSyntaxChecking(passwordPolicyName = "Default Password Policy");

			User.openUsersAdmin();

			User.addCP(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");
		}

		task ("When an admin updates a user password and inputs a password with no numbers") {
			User.openUsersAdmin();

			UserNavigator.gotoUser(userScreenName = "usersn");

			UserNavigator.gotoPassword();

			Type(
				locator1 = "UsersAndOrganizationsEditUser#PASSWORD_NEW_PASSWORD_FIELD",
				value1 = "password");

			Type(
				locator1 = "UsersAndOrganizationsEditUser#PASSWORD_ENTER_AGAIN_FIELD",
				value1 = "password");

			Button.clickSave();
		}

		task ("Then an error message displays and password is not saved") {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR_1",
				value1 = "That password must contain at least 1 numbers.");
		}

		task ("When password is updated to include at least one number") {
			Type(
				locator1 = "UsersAndOrganizationsEditUser#PASSWORD_NEW_PASSWORD_FIELD",
				value1 = "Password1");

			Type(
				locator1 = "UsersAndOrganizationsEditUser#PASSWORD_ENTER_AGAIN_FIELD",
				value1 = "Password1");

			Check(
				checkboxName = "Require Password Reset",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}

		task ("Then the password is saved and user can log in with that password") {
			PortletEntry.save();
		}

		task ("Given that the user will be required to change his password upon first login") {
			User.logoutPG();

			Navigator.openURL();

			Navigator.gotoLoginPage();

			Type(
				locator1 = "TextInput#EMAIL_ADDRESS",
				value1 = "userea@liferay.com");

			Type(
				locator1 = "TextInput#PASSWORD",
				value1 = "Password1");

			Click(
				locator1 = "Button#SIGN_IN",
				value1 = "Sign In");

			AssertElementNotPresent(locator1 = "Button#SIGN_IN");

			User.acceptEndUserLicenseAgreement();
		}

		task ("When the new user inputs a password with no numeric character in the Change Password page") {
			Type(
				locator1 = "TextInput#PASSWORD",
				value1 = "password");

			Type(
				locator1 = "TextInput#REENTER_PASSWORD",
				value1 = "password");

			Button.clickSave();
		}

		task ("Then the password is not saved and user is still required to input a new password") {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR",
				value1 = "That password must contain at least 1 numbers.");
		}

		task ("When the user inputs a password with at least one numberic character") {
			Type(
				locator1 = "TextInput#PASSWORD",
				value1 = "Password2");

			Type(
				locator1 = "TextInput#REENTER_PASSWORD",
				value1 = "Password2");

			Button.clickSave();
		}

		task ("Then the password is saved and user is logged in") {
			User.answerPasswordReminder();

			AssertElementPresent(locator1 = "UserBar#USER_AVATAR_IMAGE");
		}
	}

	@description = "This test enables syntax checking and asserts passwords being added by admin and user must have at least six characters"
	@priority = 4
	test PasswordNeedsToHaveAtLeastSixCharactersIfSyntaxCheckingIsEnabled {
		task ("Given the default password policy has Syntax Checking enabled") {
			PasswordPolicies.openPasswordPoliciesAdmin();

			PasswordPolicies.enableSyntaxChecking(passwordPolicyName = "Default Password Policy");

			User.openUsersAdmin();

			User.addCP(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");
		}

		task ("When an admin updates a user password and inputs a password shorter than six characters") {
			User.openUsersAdmin();

			UserNavigator.gotoUser(userScreenName = "usersn");

			UserNavigator.gotoPassword();

			Type(
				locator1 = "UsersAndOrganizationsEditUser#PASSWORD_NEW_PASSWORD_FIELD",
				value1 = "pass");

			Type(
				locator1 = "UsersAndOrganizationsEditUser#PASSWORD_ENTER_AGAIN_FIELD",
				value1 = "pass");

			Button.clickSave();
		}

		task ("Then an error message displays and password is not saved") {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR_1",
				value1 = "That password is too short. Please make sure your password is at least 6 characters long.");
		}

		task ("When password is updated to have at least six characters") {
			Type(
				locator1 = "UsersAndOrganizationsEditUser#PASSWORD_NEW_PASSWORD_FIELD",
				value1 = "Password1");

			Type(
				locator1 = "UsersAndOrganizationsEditUser#PASSWORD_ENTER_AGAIN_FIELD",
				value1 = "Password1");

			Check(
				checkboxName = "Require Password Reset",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}

		task ("Then the password is saved and user can log in with that password") {
			PortletEntry.save();
		}

		task ("Given that the user will be required to change his password upon first login") {
			User.logoutPG();

			Navigator.openURL();

			Navigator.gotoLoginPage();

			Type(
				locator1 = "TextInput#EMAIL_ADDRESS",
				value1 = "userea@liferay.com");

			Type(
				locator1 = "TextInput#PASSWORD",
				value1 = "Password1");

			Click(
				locator1 = "Button#SIGN_IN",
				value1 = "Sign In");

			AssertElementNotPresent(locator1 = "Button#SIGN_IN");

			User.acceptEndUserLicenseAgreement();
		}

		task ("When the new user inputs a password with less than six characters in the Change Password page") {
			Type(
				locator1 = "TextInput#PASSWORD",
				value1 = "Pass0");

			Type(
				locator1 = "TextInput#REENTER_PASSWORD",
				value1 = "Pass0");

			Button.clickSave();
		}

		task ("Then the password is not saved and user is still required to input a new password") {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#ERROR_1",
				value1 = "That password is too short. Please make sure your password is at least 6 characters long.");
		}

		task ("When the user inputs a password with at least six characters") {
			Type(
				locator1 = "TextInput#PASSWORD",
				value1 = "Password2");

			Type(
				locator1 = "TextInput#REENTER_PASSWORD",
				value1 = "Password2");

			Button.clickSave();
		}

		task ("Then the password is saved and user is logged in") {
			User.answerPasswordReminder();

			AssertElementPresent(locator1 = "UserBar#USER_AVATAR_IMAGE");
		}
	}

	@description = "This test sets the Reset Ticket Max Age which defines how long a password reset link is valid."
	@priority = 3
	test PasswordResetLinkGoesInvalidAfterResetTicketMaxAge {
		property custom.properties = "mail.send.blacklist=noreply@liferay.com,noreply@domain.invalid,test@domain.invalid";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";
		property test.smtp.server.enabled = "true";

		var portalURL = PropsUtil.get("portal.url");

		PortalSettings.gotoConfiguration(
			configurationCategory = "Email",
			configurationName = "Email Sender",
			configurationScope = "Virtual Instance Scope");

		PortalSettings.configureEmailSender(
			emailAddress = "test@liferay.com",
			emailSenderName = "Joe Bloggs");

		PasswordPolicies.openPasswordPoliciesAdmin();

		PasswordPolicies.enableChangeable(
			enableChangeRequired = "false",
			passwordPolicyName = "Default Password Policy",
			passwordPolicyPanel = "Password Changes",
			resetTicketMaxAge = "5 Minutes");

		User.openUsersAdmin();

		User.addCP(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		User.logoutPG();

		User.forgotPasswordSendResetLink(userEmailAddress = "userea@liferay.com");

		// Wait for the reset link is expired in order to verify the reset link is disabled. 5-minute is the shortest value we can set.

		Pause(locator1 = 330000);

		MockMock.openBodyLink(
			asset = "${portalURL}: Reset Your Password",
			content = "You can reset your password for ${portalURL}",
			subject = "${portalURL}: Reset Your Password");

		AssertTextEquals(
			locator1 = "Message#ERROR_3_ALT",
			value1 = "Your password reset link is no longer valid Request a new password reset link.");
	}

	@description = "This test asserts that a user cannot be added to another policy if he is already assigned to a policy."
	@priority = 4
	test UserCannotBeAddedToTwoPolicies {
		JSONUser.addUser(
			userEmailAddress = "userea6@liferay.com",
			userFirstName = "userfn6",
			userLastName = "userln6",
			userScreenName = "usersn6");

		PasswordPolicies.openPasswordPoliciesAdmin();

		PasswordPolicies.addCP(passwordPolicyName = "Password Policy Name");

		PasswordPolicies.assignMembers(
			assigneeName = "userfn6 userln6",
			assigneeType = "Users",
			passwordPolicyName = "Password Policy Name");

		PasswordPolicies.openPasswordPoliciesAdmin();

		PasswordPolicies.addCP(passwordPolicyName = "Password Policy Name 2");

		LexiconEntry.gotoEntryMenuItem(
			menuItem = "Assign Members",
			rowEntry = "Password Policy Name 2");

		Navigator.gotoNavItem(navItem = "Users");

		LexiconEntry.gotoAdd();

		SelectFrame(locator1 = "IFrame#MODAL_BODY");

		AssertNotEditable(
			key_rowEntry = "userfn6 userln6",
			locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_CHECKBOX");
	}

	@description = "This test updates password policy to disable password change and asserts admin and new user are not allowed to change existing password"
	@priority = 4
	test UserCannotChangePasswordAfterPasswordPolicyChange {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		task ("Given that a new user is added") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("When an admin updates default password policy to disable Changeable or password change") {
			PasswordPolicies.openPasswordPoliciesAdmin();

			PasswordPolicies.disableChangeable(
				passwordPolicyName = "Default Password Policy",
				passwordPolicyPanel = "Password Changes");
		}

		task ("Then the password section is hidden so the user cannot change the password") {
			User.openUsersAdmin();

			UserNavigator.gotoUser(userScreenName = "usersn");

			UserNavigator.gotoGeneral();

			AssertElementNotPresent(
				key_navNested = "Password",
				locator1 = "NavNested#NAV_NESTED_LINK");
		}

		task ("When the user logs in and attempts to edit his own password via My Account") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "userea@liferay.com",
				userLoginFullName = "userfn userln");

			UserBar.gotoDropdownItem(dropdownItem = "Account Settings");

			UserNavigator.gotoGeneral();
		}

		task ("Then the password section is hidden so the user cannot change the password") {
			AssertElementNotPresent(
				key_navNested = "Password",
				locator1 = "NavNested#NAV_NESTED_LINK");
		}
	}

	@description = "This test sets the Password Changes Minimum Age to 30 minutes to assert the error message when a user attempts to change password right away."
	@priority = 4
	test UserIsNotAbleToChangePasswordWithinThePasswordMinimumAge {
		JSONUser.addUser(
			userEmailAddress = "userea2@liferay.com",
			userFirstName = "userfn2",
			userLastName = "userln2",
			userScreenName = "usersn2");

		PasswordPolicies.openPasswordPoliciesAdmin();

		PasswordPolicies.enableChangeable(
			enableChangeRequired = "false",
			minimumAge = "30 Minutes",
			passwordPolicyName = "Default Password Policy",
			passwordPolicyPanel = "Password Changes");

		User.openUsersAdmin();

		UserNavigator.gotoUser(userScreenName = "usersn2");

		User.editPassword(newPassword = "pass");

		Type(
			key_text = "New Password",
			locator1 = "TextInput#ANY",
			value1 = "test");

		Type(
			locator1 = "TextInput#REENTER_PASSWORD",
			value1 = "test");

		Button.clickSave();

		AssertTextEquals.assertPartialText(
			locator1 = "Message#ERROR_1",
			value1 = "You cannot change your password yet. Please wait");
	}

	@description = "This test turns on Enable Password History. It attempts to reuse a password and asserts that a user cannot do so."
	@priority = 4
	test UserIsNotAbleToReuseAPasswordIfHistoryIsEnabled {
		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		PasswordPolicies.openPasswordPoliciesAdmin();

		PasswordPolicies.enableHistory(
			historyCount = 2,
			passwordPolicyName = "Default Password Policy",
			passwordPolicyPanel = "Password History");

		User.openUsersAdmin();

		UserNavigator.gotoUser(userScreenName = "usersn");

		UserNavigator.gotoPassword();

		// First password

		Type(
			key_text = "New Password",
			locator1 = "TextInput#ANY",
			value1 = "pass");

		Type(
			locator1 = "TextInput#REENTER_PASSWORD",
			value1 = "pass");

		Button.clickSave();

		Alert.viewSuccessMessage();

		// Second password

		Type(
			key_text = "New Password",
			locator1 = "TextInput#ANY",
			value1 = "password");

		Type(
			locator1 = "TextInput#REENTER_PASSWORD",
			value1 = "password");

		Button.clickSave();

		Alert.viewSuccessMessage();

		// Attempt to input first password

		Type(
			key_text = "New Password",
			locator1 = "TextInput#ANY",
			value1 = "pass");

		Type(
			locator1 = "TextInput#REENTER_PASSWORD",
			value1 = "pass");

		Button.clickSave();

		AssertTextEquals.assertPartialText(
			locator1 = "Message#ERROR_1",
			value1 = "That password has already been used. Please enter a different password.");

		// Enter a different password so we can reach history count of 2

		Type(
			key_text = "New Password",
			locator1 = "TextInput#ANY",
			value1 = "pass2");

		Type(
			locator1 = "TextInput#REENTER_PASSWORD",
			value1 = "pass2");

		Button.clickSave();

		Alert.viewSuccessMessage();

		// Assert entering first password works after reaching history count

		Type(
			key_text = "New Password",
			locator1 = "TextInput#ANY",
			value1 = "pass");

		Type(
			locator1 = "TextInput#REENTER_PASSWORD",
			value1 = "pass");

		Button.clickSave();

		Alert.viewSuccessMessage();

		// Disabling Password History

		PasswordPolicies.openPasswordPoliciesAdmin();

		PasswordPolicies.disableHistory(
			passwordPolicyName = "Default Password Policy",
			passwordPolicyPanel = "Password History");

		// After disabling history, we will assert that password history doesn't save

		User.openUsersAdmin();

		UserNavigator.gotoUser(userScreenName = "usersn");

		UserNavigator.gotoPassword();

		for (var password : list "pass3,password") {
			Type(
				key_text = "New Password",
				locator1 = "TextInput#ANY",
				value1 = ${password});

			Type(
				locator1 = "TextInput#REENTER_PASSWORD",
				value1 = ${password});

			Button.clickSave();

			Alert.viewSuccessMessage();
		}
	}

	@description = "This test updates password policy to make password reset required and asserts new user is asked to require password reset."
	@priority = 4
	test UserIsRequiredToResetPasswordAfterPasswordPolicyChange {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		task ("Given that a new user is added, password policy allows changing password, and password change is not required") {
			JSONUser.addUser(
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "userea@liferay.com");
		}

		task ("When an admin goes to the Edit Password page of the new user") {
			User.openUsersAdmin();

			UserNavigator.gotoUser(userScreenName = "usersn");

			UserNavigator.gotoPassword();
		}

		task ("Then the checkbox for Require Password Reset is enabled and unchecked") {
			AssertElementNotPresent(
				key_checkboxName = "Require Password Reset",
				locator1 = "Checkbox#CHECKBOX_DISABLED");

			AssertNotChecked.assertNotCheckedNotVisible(
				checkboxName = "Require Password Reset",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}

		task ("When an admin updates the default password policy to make password change required") {
			PasswordPolicies.openPasswordPoliciesAdmin();

			PasswordPolicies.enableChangeable(
				enableChangeRequired = "true",
				passwordPolicyName = "Default Password Policy",
				passwordPolicyPanel = "Password Changes");
		}

		task ("Then the checkbox for Require Password Reset is checked and disabled") {
			User.openUsersAdmin();

			UserNavigator.gotoUser(userScreenName = "usersn");

			UserNavigator.gotoPassword();

			AssertChecked(
				checkboxName = "Require Password Reset",
				locator1 = "Checkbox#ANY_CHECKBOX");

			AssertElementPresent(
				key_checkboxName = "Require Password Reset",
				locator1 = "Checkbox#CHECKBOX_DISABLED");
		}

		task ("and the new user is required to reset its password upon first login") {
			User.logoutPG();

			User.loginPG(
				newPassword = "Password2",
				userEmailAddress = "userea@liferay.com");

			User.answerPasswordReminder();

			AssertElementPresent(locator1 = "UserBar#USER_AVATAR_IMAGE");
		}
	}

	@description = "This test sets the Reset Failure Count for lockout which defines how long the number of attempts is stored."
	@priority = 4
	test UserWillNotBeLockedOutIfHeAttemptsToLoginAfterTheDefinedMaximumFailure {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		JSONUser.addUser(
			userEmailAddress = "userea3@liferay.com",
			userFirstName = "userfn3",
			userLastName = "userln3",
			userScreenName = "usersn3");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			newPassword = "test",
			requireReset = "false",
			userEmailAddress = "userea3@liferay.com");

		PasswordPolicies.openPasswordPoliciesAdmin();

		PasswordPolicies.enableLockout(
			lockoutDuration = "Until unlocked by an administrator",
			maximumFailure = 2,
			passwordPolicyName = "Default Password Policy",
			resetFailureCount = "5 Minutes");

		PasswordPolicies.openPasswordPoliciesAdmin();

		User.logoutPG();

		Navigator.gotoLoginPage();

		Type.typePause(
			locator1 = "TextInput#EMAIL_ADDRESS",
			value1 = "userea3@liferay.com");

		Type.typePause(
			locator1 = "TextInput#PASSWORD",
			value1 = "test2");

		Click(locator1 = "Button#SIGN_IN");

		AssertTextEquals.assertPartialText(
			locator1 = "Message#ERROR_DISMISSIBLE",
			value1 = "Authentication failed. Please try again.");

		// Wait for 5 minutes to reset failure count. 5-minute is the shortest value we can set.

		Pause(locator1 = 300000);

		Type.typePause(
			locator1 = "TextInput#EMAIL_ADDRESS",
			value1 = "userea3@liferay.com");

		Type.typePause(
			locator1 = "TextInput#PASSWORD",
			value1 = "test2");

		Click(locator1 = "Button#SIGN_IN");

		AssertTextEquals.assertPartialText(
			locator1 = "Message#ERROR_DISMISSIBLE",
			value1 = "Authentication failed. Please try again.");
	}

	@description = "This is a use case for LPS-119650. It tests regex in password policy."
	@priority = 3
	test ViewInvalidRegularExpressionMessage {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		var regex = '''^((?=.*?[a-z])(?=.*?\d)(?=.*?[;~!@ #$%^&*_\-+=`|\\(){}\[\]:;\"'<>,.?/])|(?=.*?[A-Z])(?=.*?\d)(?=.*?[;~!@ #$%^&*_\-+=`|\\(){}\[\]:;\"'<>,.?/])|(?=.*?[A-Z])(?=.*?[a-z])(?=.*?[;~!@ #$%^&*_\-+=`|\\(){}\[\]:;\"'<>,.?/])|(?=.*?[A-Z])(?=.*?[a-z])(?=.*?\d)).{12,24}$''';

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		PasswordPolicies.openPasswordPoliciesAdmin();

		PasswordPolicies.enableSyntaxChecking(passwordPolicyName = "Default Password Policy");

		PasswordPolicies.openPasswordPoliciesAdmin();

		PasswordPolicies.enableSyntaxChecking(
			passwordPolicyName = "Default Password Policy",
			regularExpression = ${regex});

		User.openUsersAdmin();

		User.editPasswordInvalidCP(
			newPassword = "Habanero0*#",
			regex = ${regex},
			userEmailAddress = "test1@liferay.com",
			userScreenName = "usersn");

		PasswordPolicies.openPasswordPoliciesAdmin();

		PasswordPolicies.enableSyntaxChecking(
			passwordPolicyName = "Default Password Policy",
			regularExpression = "(?=.{4})(?:[a-zA-Z0-9]*)");
	}

	@description = "This is a use case for LPS-112260."
	@priority = 4
	test ViewSuccessMessageAfterInputInvalidMailAddress {
		property custom.properties = "login.secure.forgot.password=true${line.separator}users.reminder.queries.enabled=false${line.separator}users.reminder.queries.custom.question.enabled=false";

		User.logoutPG();

		SignInNavigator.gotoForgotPassword();

		Type(
			locator1 = "TextInput#EMAIL_ADDRESS",
			value1 = "userea@liferay.com");

		AssertClick(
			locator1 = "Button#SEND_NEW_PASSWORD",
			value1 = "Send New Password");

		Alert.viewSuccessMessageText(successMessage = "Your request completed successfully.");
	}

	@description = "This is a use case for LPS-92178, checking password expiration"
	@priority = 5
	test ViewUserAccountExpired {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property environment.acceptance = "false";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		PasswordPolicies.openPasswordPoliciesAdmin();

		PasswordPolicies.addCP(passwordPolicyName = "Password Policy Name");

		PasswordPolicies.openPasswordPoliciesAdmin();

		PasswordPolicies.enableChangeable(
			passwordPolicyName = "Password Policy Name",
			passwordPolicyPanel = "Password Changes");

		PasswordPolicies.openPasswordPoliciesAdmin();

		PasswordPolicies.togglePasswordExpiration(
			enablePasswordExpiration = "true",
			graceLimit = 1,
			minimumAge = "2 Weeks",
			passwordPolicyName = "Password Policy Name",
			warningTime = "1 Week");

		PasswordPolicies.openPasswordPoliciesAdmin();

		PasswordPolicies.assignMembers(
			assigneeName = "userfn userln",
			assigneeType = "Users",
			passwordPolicyName = "Password Policy Name");

		var script = '''
			import com.liferay.portal.kernel.model.User;
			import com.liferay.portal.kernel.service.ServiceContext;
			import com.liferay.portal.kernel.service.ServiceContextFactory;
			import com.liferay.portal.kernel.service.UserLocalServiceUtil;

			import java.util.Date;

			ServiceContext serviceContext = ServiceContextFactory.getInstance(
				actionRequest);

			long creatorUserId = serviceContext.getUserId();
			User creatorUser = UserLocalServiceUtil.getUser(creatorUserId);
			long companyId = creatorUser.getCompanyId();
			String screenName = "usersn";
			String password = "test";

			use(groovy.time.TimeCategory) {
				def passwordModifiedDate = new Date() - 1.months

				long userId = UserLocalServiceUtil.getUserIdByScreenName(companyId, screenName);
				UserLocalServiceUtil.updatePasswordManually(
					userId, password, false, false,
					passwordModifiedDate);
				println passwordModifiedDate;
			}
		''';

		ServerAdministration.openServerAdmin();

		ServerAdministration.executeScript(
			language = "Groovy",
			script = ${script});

		User.logoutPG();

		User.firstLoginUI(userEmailAddress = "userea@liferay.com");

		Alert.viewErrorMessage(errorMessage = "Your password is expired. You have 0 grace login(s) remaining.");
	}

	@description = "This test adds an organization to a password policy and asserts password policy is applied to users in the organization."
	@priority = 4
	test ViewUserAccountLockoutviaOrganizationPasswordPolicy {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONOrganization.addOrganization(organizationName = "Organization Name");

		JSONOrganization.assignUserToOrganization(
			organizationName = "Organization Name",
			userEmailAddress = "userea@liferay.com");

		PasswordPolicies.openPasswordPoliciesAdmin();

		PasswordPolicies.addCP(passwordPolicyName = "Password Policy Name");

		PasswordPolicies.openPasswordPoliciesAdmin();

		PasswordPolicies.enableLockout(
			maximumFailure = 3,
			passwordPolicyName = "Password Policy Name",
			passwordPolicyPanel = "Lockout");

		JSONOrganization.assignPasswordPolicyToOrganization(
			organizationName = "Organization Name",
			passwordPolicyName = "Password Policy Name");

		PasswordPolicies.openPasswordPoliciesAdmin();

		PasswordPoliciesNavigator.gotoPolicy(passwordPolicyName = "Password Policy Name");

		PasswordPolicies.viewPasswordPolicyLockout(
			maximumFailure = 3,
			passwordPolicyName = "Password Policy Name");

		User.logoutPG();

		User.loginUserInvalidPG(
			loginAttempts = 3,
			password = "incorrectpassword",
			userEmailAddress = "userea@liferay.com");

		User.loginUserPG();

		User.openUsersAdmin();

		User.unlockUserAccount(userScreenName = "usersn");

		User.logoutPG();

		User.loginUserPG(userEmailAddress = "userea@liferay.com");

		User.logoutPG();

		User.loginUserPG();
	}

}