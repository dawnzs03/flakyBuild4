@component-name = "portal-file-install"
definition {

	property ci.retries.disabled = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "File Install";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}

		FileInstall.deleteConfigFile(configFile = "com.liferay.commerce.product.definitions.web.internal.configuration.CPInstanceConfiguration.config");

		for (var config : list "default,original,test1,test2,") {
			FileInstall.deleteConfigFile(configFile = "com.liferay.portal.security.auth.verifier.internal.tunnel.configuration.TunnelAuthVerifierConfiguration~${config}.config");
		}
	}

	@description = "This is a test for LPS-173655. Verify if virtual instances can be created via OSGI config file."
	@priority = 4
	test CanCreateVirtualInstanceViaConfig {
		property osgi.module.configuration.file.names = "com.liferay.portal.instances.internal.configuration.PortalInstancesConfiguration~www.able.com.config";
		property osgi.module.configurations = "mx=\"www.able.com\"${line.separator}virtualHostname=\"www.able.com\"";
		property test.assert.warning.exceptions = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		PortalInstances.openVirtualInstancesAdmin();

		PortalInstances.viewCP(virtualHost = "www.able.com");

		User.firstLoginUI(
			password = "test",
			specificURL = "http://www.able.com:8080",
			userEmailAddress = "test@www.able.com");
	}

	@description = "This is a usecase for LPS-172690. Verify an UploadServletRequestConfiguration config can be deployed without explicit max size."
	@priority = 2
	test CanDeployUploadServletRequestConfigWithoutMaxSize {
		property database.types = "mysql";
		property osgi.module.configuration.file.names = "com.liferay.portal.upload.internal.configuration.UploadServletRequestConfiguration.config";
		property osgi.module.configurations = "maxTries=\"50\"${line.separator}tempDir=\"\"";
		property test.assert.warning.exceptions = "true";
		property test.liferay.virtual.instance = "false";

		User.firstLoginPG();

		SQL.assertTextInMySQLStatementResult(
			mysqlStatement = "SELECT * FROM lportal.Configuration_ WHERE configurationId LIKE '%com.liferay.portal.upload.internal.configuration.UploadServletRequestConfiguration%'",
			text = "maxTries=\"50\"");
	}

	@description = "Verify if no osgi config file exists, when a config is updated via UI, then the config is added to the database and a config file is not created."
	@priority = 3
	test ConfigAddedViaUIDoesNotCreateNewConfigFile {
		property database.types = "mysql";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given no osgi config file exists for a specific config") {
			var configName = "com.liferay.commerce.product.definitions.web.internal.configuration.CPInstanceConfiguration";

			OSGiConfig.assertOSGiConfigDoesNotExist(osgiConfigFileName = "${configName}.config");
		}

		task ("When the config is updated via UI") {
			SystemSettings.openSystemSettingsAdmin();

			SystemSettings.gotoConfiguration(
				configurationCategory = "Catalog",
				configurationName = "SKUs",
				configurationScope = "System Scope");

			Type(
				key_text = "Check Interval",
				locator1 = "TextInput#ANY",
				value1 = 44);

			Button.clickSave();

			OSGiConfig.waitForOSGiConfig();
		}

		task ("Then the config is added to the database") {
			SQL.assertTextInMySQLStatementResult(
				mysqlStatement = "SELECT * FROM lportal.Configuration_ WHERE configurationId LIKE '%${configName}%'",
				text = "checkInterval=I\"44\"");
		}

		task ("And a new config file is not created") {
			OSGiConfig.assertOSGiConfigDoesNotExist(osgiConfigFileName = "${configName}.config");
		}
	}

	@description = "Verify if an osgi config file exists, when a config is updated via UI, then the config file is updated with the new values."
	@priority = 3
	test ConfigAddedViaUIUpdatesExistingOSGIConfigFile {
		property database.types = "mysql";
		property osgi.module.configuration.file.names = "com.liferay.commerce.product.definitions.web.internal.configuration.CPInstanceConfiguration.config";
		property osgi.module.configurations = "checkInterval=I\"33\"";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given an osgi config file exists for a specific config") {
			var configName = "com.liferay.commerce.product.definitions.web.internal.configuration.CPInstanceConfiguration";

			OSGiConfig.assertTextInOSGiConfig(
				osgiConfigFileName = "${configName}.config",
				text = "checkInterval=I\"33\"");
		}

		task ("When the config is updated via UI") {
			SystemSettings.openSystemSettingsAdmin();

			SystemSettings.gotoConfiguration(
				configurationCategory = "Catalog",
				configurationName = "SKUs",
				configurationScope = "System Scope");

			Type(
				key_text = "Check Interval",
				locator1 = "TextInput#ANY",
				value1 = 44);

			Button.clickUpdate();

			OSGiConfig.waitForOSGiConfig();
		}

		task ("Then the config is updated in the database") {
			SQL.assertTextInMySQLStatementResult(
				mysqlStatement = "SELECT * FROM lportal.Configuration_ WHERE configurationId LIKE '%${configName}%'",
				text = "checkInterval=I\"44\"");
		}

		task ("And a second config entry is not added to the database") {
			SQL.assertTextInMySQLStatementResult(
				mysqlStatement = "SELECT COUNT(*) FROM lportal.Configuration_ WHERE configurationId LIKE '%${configName}%'",
				text = 1);
		}

		task ("And the OSGI config file is updated to match the database entry") {
			OSGiConfig.assertTextInOSGiConfig(
				osgiConfigFileName = "${configName}.config",
				text = "checkInterval=I\"44\"");
		}
	}

	@description = "Verify OSGI config files added to auto deploy directories other than osgi/configs are not read."
	@priority = 3
	test ConfigFilesReadOnlyFromOSGIConfigs {
		property database.types = "mysql";

		task ("When an OSGI config file is added to an auto deploy directory other than osgi/configs") {
			var config = "checkInterval=I\"44\"";

			var config = '''${config}''';
			var configName = "com.liferay.commerce.product.definitions.web.internal.configuration.CPInstanceConfiguration";
			var liferayHome = PropsUtil.get("liferay.home.dir.name");

			FileUtil.write("${liferayHome}/osgi/modules/${configName}.config", ${config});

			OSGiConfig.waitForOSGiConfig();
		}

		task ("Then the config should not be added to the database") {
			SQL.assertTextInMySQLStatementResult(
				mysqlStatement = "SELECT COUNT(*) FROM lportal.Configuration_ WHERE configurationId LIKE '%${configName}%'",
				text = 0);
		}
	}

	@description = "Verify multiple factory configurations can be created."
	@priority = 3
	test DeployFactoryConfigs {
		property database.types = "mysql";
		property osgi.module.configuration.file.names = "com.liferay.portal.security.auth.verifier.internal.tunnel.configuration.TunnelAuthVerifierConfiguration~test1.config:com.liferay.portal.security.auth.verifier.internal.tunnel.configuration.TunnelAuthVerifierConfiguration~test2.config";
		property osgi.module.configurations = "urlsIncludes=\"/api/liferay/test1\":urlsIncludes=\"/api/liferay/test2\"";

		var configName = "com.liferay.portal.security.auth.verifier.internal.tunnel.configuration.TunnelAuthVerifierConfiguration";

		SQL.assertTextInMySQLStatementResult(
			mysqlStatement = "SELECT * FROM lportal.Configuration_ WHERE configurationId LIKE '%${configName}~test1%'",
			text = "urlsIncludes=\"/api/liferay/test1\"");

		SQL.assertTextInMySQLStatementResult(
			mysqlStatement = "SELECT * FROM lportal.Configuration_ WHERE configurationId LIKE '%${configName}~test2%'",
			text = "urlsIncludes=\"/api/liferay/test2\"");
	}

	@description = "Verify an existing factory config can be modified."
	@priority = 3
	test ModifyFactoryConfig {
		property database.types = "mysql";
		property osgi.module.configuration.file.names = "com.liferay.portal.security.auth.verifier.internal.tunnel.configuration.TunnelAuthVerifierConfiguration~test1.config";
		property osgi.module.configurations = "urlsIncludes=\"/api/liferay/original\"";

		task ("Given an existing factory config") {
			var configName = "com.liferay.portal.security.auth.verifier.internal.tunnel.configuration.TunnelAuthVerifierConfiguration~test1";

			SQL.assertTextInMySQLStatementResult(
				mysqlStatement = "SELECT * FROM lportal.Configuration_ WHERE configurationId LIKE '%${configName}%'",
				text = "urlsIncludes=\"/api/liferay/original\"");
		}

		task ("When the factory config is modified") {
			OSGiConfig.deployOSGiConfigFile(
				osgiConfigFileName = "${configName}.config",
				osgiConfigs = "urlsIncludes=\"/api/liferay/new\"");
		}

		task ("Then the factory config should be successfully updated") {
			OSGiConfig.waitForOSGiConfig();

			SQL.assertTextInMySQLStatementResult(
				mysqlStatement = "SELECT * FROM lportal.Configuration_ WHERE configurationId LIKE '%${configName}%'",
				text = "urlsIncludes=\"/api/liferay/new\"");
		}
	}

	@description = "Verify if a config exists only in the database, when a OSGI config file is added, the databse entry is updated."
	@priority = 3
	test OSGIConfigFileUpdatesExistingConfigInDatabase {
		property database.types = "mysql";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given no osgi config file exists for a specific config") {
			var configName = "com.liferay.commerce.product.definitions.web.internal.configuration.CPInstanceConfiguration";

			OSGiConfig.assertOSGiConfigDoesNotExist(osgiConfigFileName = "${configName}.config");
		}

		task ("And given a config is added to the database via UI") {
			SystemSettings.openSystemSettingsAdmin();

			SystemSettings.gotoConfiguration(
				configurationCategory = "Catalog",
				configurationName = "SKUs",
				configurationScope = "System Scope");

			Type(
				key_text = "Check Interval",
				locator1 = "TextInput#ANY",
				value1 = 33);

			Button.clickSave();

			SQL.assertTextInMySQLStatementResult(
				mysqlStatement = "SELECT * FROM lportal.Configuration_ WHERE configurationId LIKE '%${configName}%'",
				text = "checkInterval=I\"33\"");
		}

		task ("When an OSGI config file is added") {
			OSGiConfig.deployOSGiConfigFile(
				osgiConfigFileName = "${configName}.config",
				osgiConfigs = "checkInterval=I\"44\"");

			OSGiConfig.waitForOSGiConfig();
		}

		task ("Then the config is updated in the database") {
			SQL.assertTextInMySQLStatementResult(
				mysqlStatement = "SELECT * FROM lportal.Configuration_ WHERE configurationId LIKE '%${configName}%'",
				text = "checkInterval=I\"44\"");
		}

		task ("And a second config entry is not added to the database") {
			SQL.assertTextInMySQLStatementResult(
				mysqlStatement = "SELECT COUNT(*) FROM lportal.Configuration_ WHERE configurationId LIKE '%${configName}%'",
				text = 1);
		}
	}

	@description = "LPS-132645 Verify the default factory config created by the OSGI configurator can be overriden by an OSGI config file."
	@priority = 3
	test OverrideDefaultFactoryConfig {
		property database.types = "mysql";
		property osgi.module.configuration.file.names = "com.liferay.portal.security.auth.verifier.internal.tunnel.configuration.TunnelAuthVerifierConfiguration~default.config";
		property osgi.module.configurations = "urlsIncludes=\"/api/liferay/new\"";

		var configName = "com.liferay.portal.security.auth.verifier.internal.tunnel.configuration.TunnelAuthVerifierConfiguration~default";

		SQL.assertTextInMySQLStatementResult(
			mysqlStatement = "SELECT * FROM lportal.Configuration_ WHERE configurationId LIKE '%${configName}%'",
			text = "urlsIncludes=\"/api/liferay/new\"");

		SQL.assertTextInMySQLStatementResult(
			mysqlStatement = "SELECT COUNT(*) FROM lportal.Configuration_ WHERE configurationId LIKE '%${configName}%'",
			text = 1);
	}

	@description = "LPS-132645 Verify the default factory config created by the OSGI configurator can be recreated using an OSGI config file if it is deleted."
	@priority = 3
	test RecreateDefaultFactoryConfig {
		property database.types = "mysql";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given the default factory config created by the OSGI configurator is deleted") {
			SystemSettings.openSystemSettingsAdmin();

			SystemSettings.gotoConfiguration(
				configurationCategory = "API Authentication",
				configurationName = "Tunnel Authentication",
				configurationScope = "System Scope");

			LexiconEntry.gotoEntryMenuItemNoError(
				menuItem = "Delete",
				rowEntry = "/api/liferay/do");

			AssertTextNotPresent(
				locator1 = "//body",
				value1 = "/api/liferay/do");
		}

		task ("When the default factory config is recreated via an OSGI config file") {
			var configName = "com.liferay.portal.security.auth.verifier.internal.tunnel.configuration.TunnelAuthVerifierConfiguration~default";

			OSGiConfig.deployOSGiConfigFile(
				osgiConfigFileName = "${configName}.config",
				osgiConfigs = "urlsIncludes=\"/api/liferay/do\"");
		}

		task ("Then the default factory configuration should be successfully re-added") {
			OSGiConfig.waitForOSGiConfig();

			SQL.assertTextInMySQLStatementResult(
				mysqlStatement = "SELECT * FROM lportal.Configuration_ WHERE configurationId LIKE '%${configName}%'",
				text = "urlsIncludes=\"/api/liferay/do\"");
		}

		task ("And a second default config entry is not added to the database") {
			SQL.assertTextInMySQLStatementResult(
				mysqlStatement = "SELECT COUNT(*) FROM lportal.Configuration_ WHERE configurationId LIKE '%${configName}%'",
				text = 1);
		}
	}

	@description = "Verify when an existing factory config is renamed, the old entry is removed and the new one is added."
	@priority = 3
	test RenameFactoryConfig {
		property database.types = "mysql";
		property osgi.module.configuration.file.names = "com.liferay.portal.security.auth.verifier.internal.tunnel.configuration.TunnelAuthVerifierConfiguration~original.config";
		property osgi.module.configurations = "enabled=\"true\"";

		task ("Given an existing factory config") {
			var configName = "com.liferay.portal.security.auth.verifier.internal.tunnel.configuration.TunnelAuthVerifierConfiguration";

			SQL.assertTextInMySQLStatementResult(
				mysqlStatement = "SELECT * FROM lportal.Configuration_ WHERE configurationId LIKE '%${configName}~original%'",
				text = "enabled=\"true\"");
		}

		task ("When the factory config is renamed") {
			var liferayHome = PropsUtil.get("liferay.home.dir.name");

			var configDir = "${liferayHome}/osgi/configs/${configName}";

			AntCommands.runCommand("build-test.xml", "move-file -Dfile=${configDir}~original.config -Dtofile=${configDir}~new.config");
		}

		task ("Then the old entry is removed from the database") {
			OSGiConfig.waitForOSGiConfig();

			SQL.assertTextInMySQLStatementResult(
				mysqlStatement = "SELECT COUNT(*) FROM lportal.Configuration_ WHERE configurationId LIKE '%${configName}~original%'",
				text = 0);
		}

		task ("And the new one is added") {
			SQL.assertTextInMySQLStatementResult(
				mysqlStatement = "SELECT * FROM lportal.Configuration_ WHERE configurationId LIKE '%${configName}~new%'",
				text = "enabled=\"true\"");
		}
	}

	@description = "This is a test for LPS-169760. Verify the tika configurations in custom tika.xml file can be loaded."
	@priority = 3
	test TikaConfigurationWithCustomTikaXML {
		property app.server.types = "tomcat";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		var projectDir = PropsUtil.get("project.dir");

		var resourceTikaFilePath = "${projectDir}/modules/apps/portal/portal-tika/src/main/resources/com/liferay/portal/tika/internal/configuration/helper/dependencies/tika.xml";

		var fileContent = FileUtil.read(${resourceTikaFilePath});
		var appServerDir = PropsUtil.get("app.server.dir");

		var targetTikaFilePath = "${appServerDir}/webapps/ROOT/WEB-INF/classes/tika.xml";

		FileUtil.write(${targetTikaFilePath}, ${fileContent});

		var replaceToken = '''<parser class="org.apache.tika.parser.odf.OpenDocumentParser" />''';

		FileUtil.replaceStringInFile(${targetTikaFilePath}, ${replaceToken}, "");

		SystemSettings.openSystemSettingsAdmin();

		SystemSettings.gotoConfiguration(
			configurationCategory = "Infrastructure",
			configurationName = "Tika Configuration",
			configurationScope = "System Scope");

		SystemSettings.editTextAreaSetting(
			settingName = "Tika Configuration XML",
			settingValue = "tika.xml");

		SystemSettings.saveConfiguration();

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.addCP(
			dmDocumentFile = "Document_1.odt",
			dmDocumentTitle = "DM Document Title");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title");

		DMDocument.expandInfo();

		DMDocument.viewDocumentMetadataCP(
			metadataData = "application/vnd.oasis.opendocument.text",
			metadataLabel = "Content Type");

		DMDocument.cannotViewDocumentMetadataCP(
			metadataData = "2012-05-09T16:22:55.33",
			metadataLabel = "Creation Date");

		DMDocument.cannotViewDocumentMetadataCP(
			metadataData = "2012-05-09T16:29:14.53",
			metadataLabel = "Last Modification");
	}

}