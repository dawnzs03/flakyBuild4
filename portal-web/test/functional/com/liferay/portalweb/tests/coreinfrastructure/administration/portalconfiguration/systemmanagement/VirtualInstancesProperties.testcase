@component-name = "portal-portal-configuration"
definition {

	property app.server.types = "tomcat";
	property ci.retries.disabled = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Virtual Instances";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "This is a usecase for LPS-168123. Verify properties which are supported for overriding via hook can be overriden by environment variable."
	@priority = 3
	test CanOverrideHookProperties {
		property custom.system.properties = "company-id-properties=true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given the default theme is set to Classic") {
			PagesAdmin.openPagesAdmin(siteURLKey = "guest");

			Click.waitForMenuToggleJSClick(locator1 = "Icon#HEADER_VERTICAL_ELLIPSIS");

			DropdownMenuItem.click(menuItem = "Configuration");

			AssertElementPresent(
				key_card = "Classic",
				locator1 = "Card#CARD");
		}

		task ("When the default theme is set to the Minimum theme via environment variable") {
			Tomcat.addCompanyProperties(properties = "default.regular.theme.id=minium_WAR_miniumtheme");
		}

		task ("And the portal is restarted") {
			Portlet.shutdownServer();

			Portlet.startServer(deleteLiferayHome = "false");
		}

		task ("Then the default theme for a new site should be Minium theme") {
			HeadlessSite.addSite(siteName = "Test Site");

			PagesAdmin.openPagesAdmin(siteURLKey = "test-site");

			Click.waitForMenuToggleJSClick(locator1 = "Icon#HEADER_VERTICAL_ELLIPSIS");

			DropdownMenuItem.click(menuItem = "Configuration");

			AssertElementPresent(
				key_card = "Minium",
				locator1 = "Card#CARD");
		}
	}

	@description = "Verify portal-ext properties can be set with environment variables after setting company-id-properties=true via system-ext.properties"
	@priority = 5
	test CanSetPortalPropertyViaEnvironmentVariable {
		property custom.system.properties = "company-id-properties=true";
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given a feature flag is disabled") {
			ApplicationsMenuHelper.openApplicationsMenu();

			AssertElementNotPresent(
				key_category = "Import / Export",
				key_portlet = "Import/Export Center",
				locator1 = "ApplicationsMenu#PORTLET");

			Refresh();
		}

		task ("When the feature flag is enabled via environment variable") {
			Tomcat.addCompanyProperties(properties = "feature.flag.COMMERCE-8087=true");
		}

		task ("And the portal is restarted") {
			Portlet.shutdownServer();

			Portlet.startServer(deleteLiferayHome = "false");
		}

		task ("Then the feature flag is enabled") {
			ApplicationsMenu.gotoPortlet(
				category = "Import / Export",
				panel = "Applications",
				portlet = "Import/Export Center");

			ImportExport.gotoImport();
		}
	}

	@description = "Verify portal-ext properties can be set with environment variables after setting company-id-properties=true via jvm argument."
	@priority = 5
	test CanSetPortalPropertyViaJVM {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given a feature flag is disabled") {
			ApplicationsMenuHelper.openApplicationsMenu();

			AssertElementNotPresent(
				key_category = "Import / Export",
				key_portlet = "Import/Export Center",
				locator1 = "ApplicationsMenu#PORTLET");

			Refresh();
		}

		task ("When the feature flag is enabled via environment variable") {
			Tomcat.addCompanyProperties(properties = "feature.flag.COMMERCE-8087=true");
		}

		task ("And company-id-properties=true is set via jvm argument") {
			Tomcat.addJVMArguments(arguments = "company-id-properties=true");
		}

		task ("And the portal is restarted") {
			Portlet.shutdownServer();

			Portlet.startServer(deleteLiferayHome = "false");
		}

		task ("Then the feature flag is enabled") {
			ApplicationsMenu.gotoPortlet(
				category = "Import / Export",
				panel = "Applications",
				portlet = "Import/Export Center");

			ImportExport.gotoImport();
		}
	}

	@description = "Verify the default company can be set to a virtual instance via property."
	@priority = 3
	test ChangeDefaultCompanyToDifferentInstance {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given a virtual instance") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");
		}

		task ("And given the virtual instance is not the default company") {
			User.firstLoginPG(
				password = "test",
				userEmailAddress = "test@www.able.com",
				virtualHostsURL = "http://www.able.com:8080");

			ApplicationsMenuHelper.openApplicationsMenu();

			ApplicationsMenu.gotoPanel(panel = "Control Panel");

			AssertElementNotPresent(
				key_category = "Configuration",
				key_portlet = "System Settings",
				locator1 = "ApplicationsMenu#PORTLET");
		}

		task ("When the portal is shutdown") {
			Portlet.shutdownServer();
		}

		task ("And the portal is restarted with the virtual instance set as the default company via property company.default.web.id") {
			AntCommands.runCommand("build-test.xml", "portal-ext-properties-update -Dadd.new.properties=true -Dupdate.properties=company.default.web.id=www.able.com");

			Portlet.startServer(deleteLiferayHome = "false");
		}

		task ("Then system settings can now be accessed from the instance") {
			User.logoutPG(specificURL = "http://www.able.com:8080");

			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");

			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "System Settings");
		}

		task ("And the original default instance can be removed") {
			PortalInstances.openVirtualInstancesAdmin(baseURL = "http://www.able.com:8080");

			PortalInstances.deleteCP(virtualHost = "liferay.com");
		}
	}

}