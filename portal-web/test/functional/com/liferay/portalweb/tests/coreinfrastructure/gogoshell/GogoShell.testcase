@component-name = "portal-gogo-shell"
definition {

	property ci.retries.disabled = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Gogo Shell";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONUser.tearDownNonAdminUsers();

			PortalInstances.tearDownCP();
		}
	}

	@priority = 5
	test AccessGogoShellCommandViaPortlet {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		ApplicationsMenu.gotoPortlet(
			category = "System",
			panel = "Control Panel",
			portlet = "Gogo Shell");

		GogoShell.executeCommand(commandName = "scr:list");

		GogoShell.viewOutput(outputContent = "State:ACTIVE");

		GogoShell.executeCommand(commandName = "system:check");

		for (var outputContent : list "Declarative Service Soft Circular Dependency Checker check result: No issues were found,Declarative Service Unsatisfied Component Checker check result: No issues were found,Spring Extender Unavailable Component Checker check result: No issues were found") {
			GogoShell.viewOutput(outputContent = ${outputContent});
		}
	}

	@description = "This is a use case for LPS-83660."
	@priority = 3
	test GogoShellCommandDisconnectNotSupported {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		GogoShell.openGogoShellAdmin();

		GogoShell.executeCommand(commandName = "disconnect");

		Alert.viewErrorMessage(errorMessage = "Error: The command \"Disconnect\" is not supported.");

		AssertConsoleTextNotPresent(value1 = "is not serializable and will prevent this session from being replicated");
	}

	@priority = 4
	test GogoShellPortletOnlyOnMainInstance {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		HeadlessPortalInstanceAPI.addPortalInstance(
			domain = "www.able.com",
			portalInstanceId = "www.able.com",
			virtualHost = "www.able.com");

		PortalInstances.openVirtualInstancesAdmin();

		PortalInstances.viewCP(virtualHost = "www.able.com");

		GogoShell.openGogoShellAdmin();

		AssertElementPresent(locator1 = "GogoShell#COMMAND_FIELD");

		User.firstLoginPG(
			password = "test",
			userEmailAddress = "test@www.able.com",
			virtualHostsURL = "http://www.able.com:8080");

		Navigator.openSpecificURL(url = "http://www.able.com:8080");

		Portlet.viewNoPortletsPresentCP(
			category = "System",
			panel = "Control Panel",
			portlet = "Gogo Shell");
	}

	@priority = 4
	test OmniAdminCanAccessGogoShellCommandViaPortlet {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONRole.assignRoleToUser(
			roleTitle = "Administrator",
			userEmailAddress = "userea@liferay.com");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		GogoShell.openGogoShellAdmin();

		GogoShell.executeCommand(commandName = "lb | grep Liferay");

		GogoShell.viewOutput(outputContent = "Liferay Portal");
	}

	@priority = 4
	test SiteAdminCannotAccessGogoShellPortlet {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		User.openUsersAdmin();

		var siteName = TestCase.getSiteName(siteName = ${siteName});

		User.editUserSiteCP(
			siteName = ${siteName},
			userScreenName = "usersn");

		Site.openSiteMembershipsAdmin(siteURLKey = "guest");

		Site.assignSiteRoleCP(
			resourceName = "userfn userln",
			roleTitle = "Site Administrator");

		GogoShell.openGogoShellAdmin();

		AssertElementPresent(locator1 = "GogoShell#COMMAND_FIELD");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		GogoShell.openGogoShellAdmin();

		Alert.viewErrorMessage(errorMessage = "You do not have the roles required to access this portlet.");
	}

}