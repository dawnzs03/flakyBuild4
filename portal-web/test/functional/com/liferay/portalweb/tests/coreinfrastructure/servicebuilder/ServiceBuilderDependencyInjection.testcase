@component-name = "portal-service-builder"
definition {

	property ci.retries.disabled = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property test.assert.warning.exceptions = "true";
	property testray.main.component.name = "Service Builder";

	setUp {
		TestCase.setUpPortalInstance();
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Upgrades a Service Builder module using Spring to use Declarative Services instead"
	@priority = 4
	test UpgradeSpringModuleToDeclarativeServices {
		property test.assert.warning.exceptions = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		AntCommands.runCommand("build-test.xml", "update-service-builder-spring-sample-to-ds");

		AntCommands.runCommand("build-test.xml", "build-service -Dgradle.file.path=/modules/util/portal-tools-service-builder-spring-sample-service");

		var liferayHome = PropsUtil.get("liferay.home.dir.name");

		AntCommands.runCommand("build-test.xml", "deploy-osgi-module-to-specific-bundle -DliferayHome=${liferayHome} -Dmodule.base.dir=/modules/util/portal-tools-service-builder-spring-sample-api");

		AntCommands.runCommand("build-test.xml", "deploy-osgi-module-to-specific-bundle -DliferayHome=${liferayHome} -Dmodule.base.dir=/modules/util/portal-tools-service-builder-spring-sample-service");

		WaitForConsoleTextPresent(value1 = "STARTED com.liferay.portal.tools.service.builder.spring.sample.service_");
	}

}