@component-name = "portal-search-ee"
definition {

	property portal.release = "true";
	property portal.suite.search.engine = "elasticsearch7";
	property portal.upstream = "true";
	property test.run.environment = "EE";
	property testray.main.component.name = "Elasticsearch Impl";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@priority = 5
	test LearningToRankSmoke {
		property elastic.override.version = "7.17.10";
		property elasticsearch.ltr.enabled = "true";
		property minimum.slave.ram = "24";
		property osgi.module.configuration.file.names = "com.liferay.portal.search.rest.configuration.SearchSuggestionsCompanyConfiguration.config";
		property osgi.module.configurations = "enableSuggestionsEndpoint=B\"false\"";
		property remote.elasticsearch.enabled = "true";
		property search.environment.suite.exclude = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		AntCommands.runCommand("build-test-elasticsearch7.xml", "add-ltr-linear-regression-model -Dbackup.index=.ltrstore -Delasticsearch.port=9200");

		ApplicationsMenu.gotoPortlet(
			category = "System",
			panel = "Control Panel",
			portlet = "Server Administration");

		var script = TestCase.getFileContent(fileName = "blogs-ltr-subset.groovy");

		ServerAdministration.executeScript(
			language = "Groovy",
			script = ${script});

		Navigator.openURL();

		SearchPortlets.searchEmbedded(searchTerm = "alien");

		var assetEntryTitleListNoLtr = "";
		var iterator = 1;

		while ((${iterator} != 21) && (maxIterations = "20")) {
			var assetEntryTitle = selenium.getText("//div[contains(@id,'SearchResultsPortlet')]//li[${iterator}]/div//a");

			var assetEntryTitleListNoLtr = StringUtil.add(${assetEntryTitleListNoLtr}, ${assetEntryTitle});
			var iterator = ${iterator} + 1;
		}

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "System Settings");

		SystemSettings.gotoConfiguration(
			configurationCategory = "Search",
			configurationName = "Learning to Rank",
			configurationScope = "System Scope");

		FormFields.enableCheckbox(fieldName = "enabled");

		FormFields.editTextMultiline(
			fieldName = "model",
			fieldValue = "linearregression");

		SystemSettings.saveConfiguration();

		Navigator.openURL();

		SearchPortlets.searchEmbedded(searchTerm = "alien");

		var assetEntryTitleListLtr = "";
		var iterator = 1;

		while ((${iterator} != 21) && (maxIterations = "20")) {
			var assetEntryTitle = selenium.getText("//div[contains(@id,'SearchResultsPortlet')]//li[${iterator}]/div//a");

			var assetEntryTitleListLtr = StringUtil.add(${assetEntryTitleListLtr}, ${assetEntryTitle});
			var iterator = ${iterator} + 1;
		}

		if (${assetEntryTitleListNoLtr} != ${assetEntryTitleListLtr}) {
			echo("Assertion succeeded: Search result rankings were different with and without LTR");

			echo("Rankings without LTR: ${assetEntryTitleListNoLtr}");

			echo("Rankings with LTR: ${assetEntryTitleListLtr}");
		}
		else {
			fail("Assertion failed: Search result rankings were the same with and without LTR");
		}
	}

	@priority = 5
	test PortalClusterSmokeTest {
		property app.server.bundles.size = "1";
		property cluster.enabled = "true";
		property minimum.slave.ram = "24";
		property remote.elasticsearch.enabled = "true";
		property search.environment.suite.exclude = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Elasticsearch.viewClusterStatusViaClusterHealthAPI(
			nodePort = 9200,
			numberOfNodes = 1);

		Navigator.openURL();

		JSONMBMessage.addMessage(
			groupName = "Guest",
			threadBody = "Orange",
			threadSubject = "Apple");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "Orange",
			dmDocumentTitle = "Apple",
			groupName = "Guest",
			mimeType = "text/plain",
			sourceFileName = "Document_1.txt");

		Navigator.openURL();

		SearchPortlets.searchEmbedded(searchTerm = "Apple");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Document");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Message Boards Message");

		Navigator.openURL();

		SearchPortlets.searchEmbedded(searchTerm = "Orange");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Document");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Message Boards Message");

		User.logoutPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		User.firstLoginUI(
			password = "test",
			specificURL = "http://localhost:9080",
			userEmailAddress = "test@liferay.com");

		Clustering.shutdownSpecificServer(nodePort = 8080);

		SearchPortlets.searchEmbedded(searchTerm = "Apple");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Document");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Message Boards Message");

		Navigator.openSpecificURL(url = "http://localhost:9080");

		SearchPortlets.searchEmbedded(searchTerm = "Orange");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Document");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "Apple",
			searchAssetType = "Message Boards Message");
	}

	@priority = 5
	test XPackPkiAuthenticationSmokeTest {
		property elastic.pki.authentication.enabled = "true";
		property elastic.xpack.enabled = "true";
		property remote.elasticsearch.enabled = "true";
		property search.environment.suite.exclude = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Elasticsearch Monitoring Page");

		JSONLayout.updateLayoutTemplateOfPublicLayout(
			groupName = "Guest",
			layoutName = "Elasticsearch Monitoring Page",
			layoutTemplate = "1 Column");

		SearchPortlets.addWidgets(
			layoutName = "Elasticsearch Monitoring Page",
			searchPortletList = "Elasticsearch Monitoring");

		Navigator.gotoPage(pageName = "Elasticsearch Monitoring Page");

		ElasticsearchMonitoring.viewPG();
	}

	@priority = 5
	test XPackPkiAuthenticationWithJDK11 {
		property elastic.pki.authentication.enabled = "true";
		property elastic.xpack.enabled = "true";
		property elasticsearch.jdk11.enabled = "true";
		property environment.acceptance = "openjdk11";
		property portal.release = "openjdk11";
		property portal.suite.search.engine = "openjdk11";
		property portal.upstream = "openjdk11";
		property remote.elasticsearch.enabled = "true";
		property search.environment.suite.exclude = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Elasticsearch Monitoring Page");

		JSONLayout.updateLayoutTemplateOfPublicLayout(
			groupName = "Guest",
			layoutName = "Elasticsearch Monitoring Page",
			layoutTemplate = "1 Column");

		SearchPortlets.addWidgets(
			layoutName = "Elasticsearch Monitoring Page",
			searchPortletList = "Elasticsearch Monitoring");

		Navigator.gotoPage(pageName = "Elasticsearch Monitoring Page");

		ElasticsearchMonitoring.viewPG();
	}

	@priority = 5
	test XPackSmokeTest {
		property elastic.xpack.enabled = "true";
		property remote.elasticsearch.enabled = "true";
		property search.environment.suite.exclude = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Guest",
			title = "WC Title");

		SearchPortlets.searchEmbedded(searchTerm = "WC Title");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "WC Title",
			searchAssetType = "Web Content Article");

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Elasticsearch Monitoring Page");

		JSONLayout.updateLayoutTemplateOfPublicLayout(
			groupName = "Guest",
			layoutName = "Elasticsearch Monitoring Page",
			layoutTemplate = "1 Column");

		SearchPortlets.addWidgets(
			layoutName = "Elasticsearch Monitoring Page",
			searchPortletList = "Elasticsearch Monitoring");

		Navigator.gotoPage(pageName = "Elasticsearch Monitoring Page");

		ElasticsearchMonitoring.viewPG();

		User.logoutPG();

		Navigator.gotoPage(pageName = "Elasticsearch Monitoring Page");

		ElasticsearchMonitoring.viewAsGuestPG();
	}

	@priority = 5
	test XPackWithJDK11 {
		property elastic.xpack.enabled = "true";
		property elasticsearch.jdk11.enabled = "true";
		property environment.acceptance = "openjdk11";
		property portal.release = "openjdk11";
		property portal.suite.search.engine = "openjdk11";
		property portal.upstream = "openjdk11";
		property remote.elasticsearch.enabled = "true";
		property search.environment.suite.exclude = "true";
		property test.assert.warning.exceptions = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		JSONWebcontent.addWebContent(
			content = "WC Content",
			groupName = "Guest",
			title = "WC Title");

		SearchPortlets.searchEmbedded(searchTerm = "WC Title");

		SearchResultPortlet.viewSearchResults(
			searchAssetTitle = "WC Title",
			searchAssetType = "Web Content Article");

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Elasticsearch Monitoring Page");

		JSONLayout.updateLayoutTemplateOfPublicLayout(
			groupName = "Guest",
			layoutName = "Elasticsearch Monitoring Page",
			layoutTemplate = "1 Column");

		SearchPortlets.addWidgets(
			layoutName = "Elasticsearch Monitoring Page",
			searchPortletList = "Elasticsearch Monitoring");

		Navigator.gotoPage(pageName = "Elasticsearch Monitoring Page");

		ElasticsearchMonitoring.viewPG();

		User.logoutPG();

		Navigator.gotoPage(pageName = "Elasticsearch Monitoring Page");

		ElasticsearchMonitoring.viewAsGuestPG();
	}

	@description = "This is a use case for LPS-151205."
	@priority = 5
	test XPackWithRestrictedCipherSuitesAndTLSVersions {
		property elastic.xpack.configure.tls.cipher.suites = "true";
		property elastic.xpack.enabled = "true";
		property remote.elasticsearch.enabled = "true";
		property search.environment.suite.exclude = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Elasticsearch Monitoring Page");

		JSONLayout.updateLayoutTemplateOfPublicLayout(
			groupName = "Guest",
			layoutName = "Elasticsearch Monitoring Page",
			layoutTemplate = "1 Column");

		SearchPortlets.addWidgets(
			layoutName = "Elasticsearch Monitoring Page",
			searchPortletList = "Elasticsearch Monitoring");

		Navigator.gotoPage(pageName = "Elasticsearch Monitoring Page");

		ElasticsearchMonitoring.viewPG();
	}

}