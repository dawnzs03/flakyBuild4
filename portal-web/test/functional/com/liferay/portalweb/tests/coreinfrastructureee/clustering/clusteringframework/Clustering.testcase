@component-name = "portal-clustering"
definition {

	property app.server.bundles.size = "1";
	property cluster.enabled = "true";
	property minimum.slave.ram = "24";
	property portal.release = "true";
	property portal.upstream = "true";
	property remote.elasticsearch.enabled = "true";
	property test.assert.warning.exceptions = "true";
	property testray.main.component.name = "Clustering";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			PagesAdmin.tearDownCP();

			BlogsEntry.tearDownCP();
		}
	}

	@priority = 4
	test AddAndDeleteBlogEntriesOnSeparateNodes {
		property portal.upstream = "quarantine";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Clustering.viewClusterStatusInConsole();

		Page.assertNodePortPG(nodePort = 8080);

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PagesAdmin.addPage(pageName = "Test Page1");

		Navigator.gotoPage(pageName = "Test Page1");

		Portlet.addPG(portletName = "Blogs");

		Navigator.gotoPage(pageName = "Test Page1");

		Blogs.addEntry(
			entryContent = "Blogs Entry1 Content",
			entryTitle = "Blogs Entry1 Title");

		User.logoutPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		User.loginPG(
			nodePort = 9080,
			password = "test",
			userEmailAddress = "test@liferay.com");

		Page.assertNodePortPG(nodePort = 9080);

		Navigator.gotoSpecificURLPage(
			pageName = "Test Page1",
			url = "http://localhost:9080");

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry1 Content",
			entryTitle = "Blogs Entry1 Title");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry1 Content",
			entryTitle = "Blogs Entry1 Title");

		Navigator.openNodePort(nodePort = 9080);

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PagesAdmin.addPage(pageName = "Test Page2");

		Navigator.gotoSpecificURLPage(
			pageName = "Test Page2",
			url = "http://localhost:9080");

		Portlet.addPG(portletName = "Blogs");

		Navigator.gotoSpecificURLPage(
			pageName = "Test Page2",
			url = "http://localhost:9080");

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry1 Content",
			entryTitle = "Blogs Entry1 Title");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry1 Content",
			entryTitle = "Blogs Entry1 Title");

		Navigator.gotoSpecificURLPage(
			pageName = "Test Page2",
			url = "http://localhost:9080");

		Blogs.addEntry(
			entryContent = "Blogs Entry2 Content",
			entryTitle = "Blogs Entry2 Title");

		Navigator.gotoSpecificURLPage(
			pageName = "Test Page2",
			url = "http://localhost:9080");

		BlogsEntry.moveToRecycleBinPG(
			entryContent = "Blogs Entry2 Content",
			entryTitle = "Blogs Entry2 Title");

		Navigator.openSpecificURL(url = "http://localhost:9080");

		ProductMenu.gotoPortlet(
			category = "Recycle Bin",
			portlet = "Recycle Bin");

		RecycleBin.emptyCP();

		User.logoutPG(
			nodePort = 9080,
			password = "test",
			userEmailAddress = "test@liferay.com");

		User.loginPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		Navigator.gotoPage(pageName = "Test Page2");

		BlogsEntry.viewNoPG(entryTitle = "Blogs Entry2 Title");

		BlogsNavigator.gotoEntryPG(
			entryContent = "Blogs Entry1 Content",
			entryTitle = "Blogs Entry1 Title");

		BlogsEntry.viewEntryPG(
			entryContent = "Blogs Entry1 Content",
			entryTitle = "Blogs Entry1 Title");

		SearchPortlets.searchEmbedded(searchTerm = "Entry2");

		SearchResultPortlet.viewSearchResultNotPresent(
			searchAssetTitle = "Blogs Entry2 Title",
			searchAssetType = "Blogs Entry");
	}

	@priority = 3
	test CanAccessGogoShellOnAnyClusteredNode {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		GogoShell.openGogoShellAdmin();

		GogoShell.executeCommand(commandName = "lb | grep Liferay");

		GogoShell.viewOutput(outputContent = "Liferay Portal");

		User.logoutPG();

		User.loginPG(
			nodePort = 9080,
			password = "test",
			userEmailAddress = "test@liferay.com");

		GogoShell.openGogoShellAdmin(baseURL = "http://localhost:9080");

		GogoShell.executeCommand(commandName = "lb | grep Liferay");

		GogoShell.viewOutput(outputContent = "Liferay Portal");
	}

	@description = "This is a use case for LPS-170924."
	@priority = 5
	test CanCreateVirtualInstanceWithClusterDBPartitioningAndLOLProperties {
		property custom.properties = "virtual.hosts.valid.hosts=localhost,127.0.0.1,www.baker.com";
		property database.partition.enabled = "true";
		property liferay.online.properties = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Clustering.viewClusterStatusInConsole();

		Page.assertNodePortPG(nodePort = 8080);

		Navigator.openURL();

		ApplicationsMenu.gotoPortlet(
			category = "System",
			panel = "Control Panel",
			portlet = "Virtual Instances");

		PortalInstances.addCP(
			mailDomain = "www.baker.com",
			virtualHost = "www.baker.com",
			webId = "www.baker.com");

		Navigator.openSpecificURL(url = "http://www.baker.com:8080");

		User.firstLoginPG(
			password = "test",
			userEmailAddress = "test@www.baker.com",
			virtualHostsURL = "http://www.baker.com:8080");

		Navigator.openSpecificURL(url = "http://www.baker.com:9080");

		User.firstLoginUI(
			password = "test",
			specificURL = "http://www.baker.com:9080",
			userEmailAddress = "test@www.baker.com");

		Clustering.viewTextNotPresentOnSpecificNode(
			exceptionText = "No default user was found for company",
			nodePort = 8080);

		Clustering.viewTextNotPresentOnSpecificNode(
			exceptionText = "No default user was found for company",
			nodePort = 9080);
	}

	@description = "This is a use case for LPS-171011."
	@priority = 5
	test CanCreateVirtualInstanceWithClustering {
		property custom.properties = "virtual.hosts.valid.hosts=localhost,127.0.0.1,www.able.com";
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Clustering.viewClusterStatusInConsole();

		Page.assertNodePortPG(nodePort = 8080);

		Navigator.openURL();

		ApplicationsMenu.gotoPortlet(
			category = "System",
			panel = "Control Panel",
			portlet = "Virtual Instances");

		PortalInstances.addCP(
			mailDomain = "www.able.com",
			virtualHost = "www.able.com",
			webId = "www.able.com");

		Navigator.openSpecificURL(url = "http://www.able.com:8080");

		User.firstLoginPG(
			password = "test",
			userEmailAddress = "test@www.able.com",
			virtualHostsURL = "http://www.able.com:8080");

		Navigator.openSpecificURL(url = "http://www.able.com:9080");

		User.firstLoginUI(
			password = "test",
			specificURL = "http://www.able.com:9080",
			userEmailAddress = "test@www.able.com");

		Clustering.viewTextNotPresentOnSpecificNode(
			exceptionText = "No default user was found for company",
			nodePort = 8080);

		Clustering.viewTextNotPresentOnSpecificNode(
			exceptionText = "No default user was found for company",
			nodePort = 9080);
	}

	@priority = 5
	test CanCreateVirtualInstanceWithClusteringSecondNode {
		property custom.properties = "virtual.hosts.valid.hosts=localhost,127.0.0.1,www.able.com";
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Clustering.viewClusterStatusInConsole();

		Page.assertNodePortPG(nodePort = 8080);

		User.logoutPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		User.loginPG(
			nodePort = 9080,
			password = "test",
			userEmailAddress = "test@liferay.com");

		Page.assertNodePortPG(nodePort = 9080);

		PortalInstances.openVirtualInstancesAdmin(baseURL = "http://localhost:9080");

		PortalInstances.addCP(
			mailDomain = "www.able.com",
			virtualHost = "www.able.com",
			webId = "www.able.com");

		Navigator.openSpecificURL(url = "http://www.able.com:8080");

		User.firstLoginPG(
			password = "test",
			userEmailAddress = "test@www.able.com",
			virtualHostsURL = "http://www.able.com:8080");

		Navigator.openSpecificURL(url = "http://www.able.com:9080");

		User.firstLoginUI(
			password = "test",
			specificURL = "http://www.able.com:9080",
			userEmailAddress = "test@www.able.com");

		Clustering.viewTextNotPresentOnSpecificNode(
			exceptionText = "No default user was found for company",
			nodePort = 8080);

		Clustering.viewTextNotPresentOnSpecificNode(
			exceptionText = "No default user was found for company",
			nodePort = 9080);
	}

	@priority = 4
	test CanInvokeMethods {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Groovy.runScriptViaGogoShell(
			expectedOutput = "Result of invoke-method-portal: 9080",
			scriptFile = "groovy-script-invoke-method.groovy");

		Groovy.runScriptViaGogoShell(
			expectedOutput = "Result of invoke-method-portal: 8080",
			nodePort = 9080,
			scriptFile = "groovy-script-invoke-method.groovy");

		for (var serverPort : list "8080,9080") {
			Groovy.runScriptViaGogoShell(
				expectedOutput = "Result of invoke-method-portal-on-master: 8080",
				nodePort = ${serverPort},
				scriptFile = "groovy-script-invoke-method-on-master.groovy");
		}

		for (var serverPort : list "8080,9080") {
			Clustering.deployClusteringModule(nodePort = ${serverPort});
		}

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "STARTED com.liferay.portal.cluster.multiple.sample.web",
			nodePort = 8080);

		Clustering.viewTextPresentOnSpecificNode(
			expectedText = "STARTED com.liferay.portal.cluster.multiple.sample.web",
			nodePort = 9080);

		for (var method : list "invoke-method-module,invoke-method-portal") {
			AntCommands.runCommand("build-test.xml", "cluster-invoke-method -Dcluster.invoke.method=${method}");

			WaitForConsoleTextPresent(value1 = "Result of ${method}");

			Clustering.viewTextPresentOnSpecificNode(
				expectedText = "Result of ${method}: 9080",
				nodePort = 8080);

			Clustering.viewTextPresentOnSpecificNode(
				expectedText = "Result of ${method}: 8080",
				nodePort = 9080);
		}

		for (var method : list "invoke-method-module-on-master,invoke-method-portal-on-master") {
			AntCommands.runCommand("build-test.xml", "cluster-invoke-method -Dcluster.invoke.method=${method}");

			WaitForConsoleTextPresent(value1 = "STARTED com.liferay.portal.cluster.multiple.sample.web_1.0.0");

			Clustering.viewTextPresentOnSpecificNode(
				expectedText = "Result of ${method}: 8080",
				nodePort = 8080);

			Clustering.viewTextPresentOnSpecificNode(
				expectedText = "Result of ${method}: 8080",
				nodePort = 9080);
		}
	}

	@priority = 4
	test CanUpdateLogLevelsForAllNodesFromMaster {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		ApplicationsMenu.gotoPortlet(
			category = "System",
			panel = "Control Panel",
			portlet = "Server Administration");

		ServerAdministration.addCategoryLogLevels(
			categoryLevel = "DEBUG",
			categoryName = "com.liferay.portal.servlet.filters.autologin.AutoLoginFilter");

		ServerAdministration.viewCategoryLogLevels(
			categoryLevel = "DEBUG",
			categoryName = "com.liferay.portal.servlet.filters.autologin.AutoLoginFilter");

		for (var serverPort : list "8080,9080") {
			User.loginPG(
				nodePort = ${serverPort},
				password = "test",
				userEmailAddress = "test@liferay.com");

			Clustering.viewTextPresentOnSpecificNode(
				expectedText = "com.liferay.portal.servlet.filters.autologin.AutoLoginFilter /web/guest",
				nodePort = ${serverPort});
		}
	}

	@priority = 4
	test CanUpdateLogLevelsForAllNodesFromSlave {
		property app.server.bundles.size = "2";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		User.logoutPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		User.loginPG(
			nodePort = 9080,
			password = "test",
			userEmailAddress = "test@liferay.com");

		ServerAdministration.openServerAdmin(baseURL = "http://localhost:9080");

		ServerAdministration.addCategoryLogLevels(
			categoryLevel = "DEBUG",
			categoryName = "com.liferay.portal.servlet.filters.autologin.AutoLoginFilter");

		ServerAdministration.viewCategoryLogLevels(
			categoryLevel = "DEBUG",
			categoryName = "com.liferay.portal.servlet.filters.autologin.AutoLoginFilter");

		for (var serverPort : list "8080,9080,10080") {
			User.loginPG(
				nodePort = ${serverPort},
				password = "test",
				userEmailAddress = "test@liferay.com");

			Clustering.viewTextPresentOnSpecificNode(
				expectedText = "com.liferay.portal.servlet.filters.autologin.AutoLoginFilter /web/guest",
				nodePort = ${serverPort});
		}
	}

	@priority = 5
	test CanUpdatePortalPropertiesWithMultipleClusters {
		property app.server.bundles.size = "1";
		property custom.properties = "company.security.auth.type=emailAddress";
		property portal.release = "true";
		property portal.upstream = "quarantine";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Clustering.viewClusterStatusInConsole();

		Page.assertNodePortPG(nodePort = 8080);

		User.logoutPG();

		User.loginPG(
			nodePort = 9080,
			password = "test",
			userEmailAddress = "test@liferay.com");

		Page.assertNodePortPG(nodePort = 9080);

		User.logoutPG(specificURL = "http://localhost:9080");

		// Take down cluster2, update portal-ext.properties

		Clustering.shutdownSpecificServer(nodePort = 9080);

		Clustering.updatePortalPropertiesOnSpecificServer(
			nodePort = 9080,
			propertiesOriginal = "company.security.auth.type=emailAddress",
			propertiesUpdate = "company.security.auth.type=screenName");

		Clustering.startSpecificServer(
			deleteLiferayHome = "false",
			nodePort = 9080);

		User.firstLoginUI(
			authenticationMethod = "By Screen Name",
			password = "test",
			specificURL = "http://localhost:9080",
			userScreenName = "test");

		Page.assertNodePortPG(nodePort = 9080);

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent Content Cluster2",
			webContentTitle = "WC WebContent Title Cluster2");

		PortletEntry.publish();

		WebContent.viewTitle(webContentTitle = "WC WebContent Title Cluster2");

		User.logoutPG(specificURL = "http://localhost:9080");

		User.firstLoginUI(
			password = "test",
			specificURL = "http://localhost:8080",
			userEmailAddress = "test@liferay.com");

		Page.assertNodePortPG(nodePort = 8080);

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		WebContent.viewTitle(webContentTitle = "WC WebContent Title Cluster2");

		User.logoutPG(specificURL = "http://localhost:8080");

		// Take down cluster1, update portal-ext.properties

		Clustering.shutdownSpecificServer(nodePort = 8080);

		Clustering.updatePortalPropertiesOnSpecificServer(
			nodePort = 8080,
			propertiesOriginal = "company.security.auth.type=emailAddress",
			propertiesUpdate = "company.security.auth.type=screenName");

		Clustering.startSpecificServer(
			deleteLiferayHome = "false",
			nodePort = 8080);

		User.firstLoginUI(
			authenticationMethod = "By Screen Name",
			nodePort = 8080,
			password = "test",
			userScreenName = "test");

		Page.assertNodePortPG(nodePort = 8080);

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PagesAdmin.addPage(
			pageName = "Documents and Media Page",
			sitePageType = "Widget Page");

		PagesAdmin.configurePage(
			columnName = "1 Column",
			pageName = "Documents and Media Page",
			sitePageType = "Widget Page");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		Portlet.addPG(portletName = "Documents and Media");

		DMDocument.enableActionsMenuOnPortlet();

		User.logoutPG();

		User.firstLoginUI(
			authenticationMethod = "By Screen Name",
			password = "test",
			specificURL = "http://localhost:9080",
			userScreenName = "test");

		Page.assertNodePortPG(nodePort = 9080);

		Navigator.gotoSpecificURLPage(
			pageName = "Documents and Media Page",
			url = "http://localhost:9080");

		Portlet.viewPG(portletName = "Documents and Media");
	}

	@priority = 3
	test EnableAndDisableFeatureFlagOnMasterNode {
		property custom.properties = "feature.flag.ui.visible[dev]=true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given a feature is disabled on both nodes") {
			for (var nodePort : list "9080,8080") {
				WaitForElementPresent(locator1 = "ApplicationsMenu#TOGGLE");

				ApplicationsMenuHelper.openApplicationsMenu();

				AssertElementNotPresent(
					key_category = "Import / Export",
					key_portlet = "Import/Export Center",
					locator1 = "ApplicationsMenu#PORTLET");

				User.loginPG(
					nodePort = ${nodePort},
					password = "test",
					userEmailAddress = "test@liferay.com");
			}
		}

		task ("When the feature flag toggle is enabled via UI on the master node") {
			PortalSettings.gotoConfiguration(
				configurationCategory = "Feature Flags",
				configurationName = "Developer",
				configurationScope = "Virtual Instance Scope");

			FeatureFlag.enableFeatureFlag(
				featureFlag = "COMMERCE-8087",
				scope = "Developer");
		}

		task ("Then the feature is enabled on both nodes") {
			for (var nodePort : list "9080,8080") {
				ApplicationsMenu.gotoPortlet(
					category = "Import / Export",
					panel = "Applications",
					portlet = "Import/Export Center");

				ImportExport.gotoImport();

				User.loginPG(
					nodePort = ${nodePort},
					password = "test",
					userEmailAddress = "test@liferay.com");
			}
		}

		task ("When the feature flag toggle is disabled via UI on the master node") {
			PortalSettings.gotoConfiguration(
				configurationCategory = "Feature Flags",
				configurationName = "Developer",
				configurationScope = "Virtual Instance Scope");

			FeatureFlag.disableFeatureFlag(
				featureFlag = "COMMERCE-8087",
				scope = "Developer");
		}

		task ("Then the feature is disabled on both nodes") {
			for (var nodePort : list "9080,8080") {
				WaitForElementPresent(locator1 = "ApplicationsMenu#TOGGLE");

				ApplicationsMenuHelper.openApplicationsMenu();

				AssertElementNotPresent(
					key_category = "Import / Export",
					key_portlet = "Import/Export Center",
					locator1 = "ApplicationsMenu#PORTLET");

				if (${nodePort} == 9080) {
					User.loginPG(
						nodePort = ${nodePort},
						password = "test",
						userEmailAddress = "test@liferay.com");
				}
			}
		}
	}

	@priority = 3
	test EnableAndDisableFeatureFlagOnSlaveNode {
		property custom.properties = "feature.flag.ui.visible[dev]=true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given a feature is disabled on both nodes") {
			for (var nodePort : list "9080,8080") {
				WaitForElementPresent(locator1 = "ApplicationsMenu#TOGGLE");

				ApplicationsMenuHelper.openApplicationsMenu();

				AssertElementNotPresent(
					key_category = "Import / Export",
					key_portlet = "Import/Export Center",
					locator1 = "ApplicationsMenu#PORTLET");

				if (${nodePort} == 9080) {
					User.loginPG(
						nodePort = ${nodePort},
						password = "test",
						userEmailAddress = "test@liferay.com");
				}
			}
		}

		task ("When the feature flag toggle is enabled via UI on the slave node") {
			PortalSettings.gotoConfiguration(
				baseURL = "http://localhost:9080",
				configurationCategory = "Feature Flags",
				configurationName = "Developer",
				configurationScope = "Virtual Instance Scope");

			FeatureFlag.enableFeatureFlag(
				featureFlag = "COMMERCE-8087",
				scope = "Developer");
		}

		task ("Then the feature is enabled on both nodes") {
			for (var nodePort : list "8080,9080") {
				ApplicationsMenu.gotoPortlet(
					category = "Import / Export",
					panel = "Applications",
					portlet = "Import/Export Center");

				ImportExport.gotoImport();

				User.loginPG(
					nodePort = ${nodePort},
					password = "test",
					userEmailAddress = "test@liferay.com");
			}
		}

		task ("When the feature flag toggle is disabled via UI on the slave node") {
			PortalSettings.gotoConfiguration(
				baseURL = "http://localhost:9080",
				configurationCategory = "Feature Flags",
				configurationName = "Developer",
				configurationScope = "Virtual Instance Scope");

			FeatureFlag.disableFeatureFlag(
				featureFlag = "COMMERCE-8087",
				scope = "Developer");
		}

		task ("Then the feature is disabled on both nodes") {
			for (var nodePort : list "8080,9080") {
				WaitForElementPresent(locator1 = "ApplicationsMenu#TOGGLE");

				ApplicationsMenuHelper.openApplicationsMenu();

				AssertElementNotPresent(
					key_category = "Import / Export",
					key_portlet = "Import/Export Center",
					locator1 = "ApplicationsMenu#PORTLET");

				if (${nodePort} == 8080) {
					User.loginPG(
						nodePort = ${nodePort},
						password = "test",
						userEmailAddress = "test@liferay.com");
				}
			}
		}
	}

	@description = "This is a usecase for LPS-185988. Verify language overrides sync between cluster nodes."
	@priority = 3
	test LanguageOverrideSyncsBetweenNodes {
		property test.liferay.virtual.instance = "false";

		task ("Given a language override is added to one node") {
			LanguageOverride.openLanguageOverridePortlet();

			LanguageOverride.addLanguageKey(
				languageKey = "text-contains-error",
				translationOverrideList = "en-US,fr-FR,pt-BR,es-ES",
				translationOverrideValueList = "Text contains error,Le texte contient une erreur,O texto contÃƒÂ©m erro,El texto contiene error");
		}

		task ("Then the language override is added to all nodes") {
			for (var nodePort : list "8080,9080") {
				if (${nodePort} == 9080) {
					User.loginPG(
						nodePort = ${nodePort},
						password = "test",
						userEmailAddress = "test@liferay.com");
				}

				LanguageOverride.openLanguageOverridePortlet(baseURL = "http://localhost:${nodePort}");

				Search.searchCP(searchTerm = "text-contains-error");

				LanguageOverride.assertSelectedLanguageInListView(
					currentTranslationOverride = "Text contains error",
					languageKey = "text-contains-error",
					languagesWithOverride = "en_US, es_ES, fr_FR, pt_BR",
					selectedLanguage = "en_US");
			}
		}
	}

	@priority = 5
	test ShutdownAndStartupNodes {
		property portal.upstream = "quarantine";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Clustering.viewClusterStatusInConsole();

		Page.assertNodePortPG(nodePort = 8080);

		User.logoutPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		User.loginPG(
			nodePort = 9080,
			password = "test",
			userEmailAddress = "test@liferay.com");

		Page.assertNodePortPG(nodePort = 9080);

		Clustering.shutdownSpecificServer(nodePort = 8080);

		Page.assertNodePortPG(nodePort = 9080);

		Clustering.startSpecificServer(
			deleteLiferayHome = "true",
			keepCachedAppServerData = "true",
			nodePort = 8080);

		Page.assertNodePortPG(nodePort = 9080);

		User.logoutPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		User.loginPG(
			nodePort = 8080,
			password = "test",
			userEmailAddress = "test@liferay.com");

		Page.assertNodePortPG(nodePort = 8080);

		Clustering.shutdownSpecificServer(nodePort = 9080);

		Clustering.startSpecificServer(
			deleteLiferayHome = "true",
			keepCachedAppServerData = "true",
			nodePort = 9080);

		Page.assertNodePortPG(nodePort = 8080);

		User.logoutPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		User.loginPG(
			nodePort = 9080,
			password = "test",
			userEmailAddress = "test@liferay.com");

		Page.assertNodePortPG(nodePort = 9080);
	}

	@priority = 4
	test SlaveNodeCanBecomeMasterNode {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Groovy.runScriptViaGogoShell(
			expectedOutput = "This node is master node",
			scriptFile = "groovy-script-master-slave.groovy");

		Groovy.runScriptViaGogoShell(
			expectedOutput = "This node is slave node",
			nodePort = 9080,
			scriptFile = "groovy-script-master-slave.groovy");

		Clustering.shutdownSpecificServer(nodePort = 8080);

		Groovy.runScriptViaGogoShell(
			expectedOutput = "This node is master node",
			nodePort = 9080,
			scriptFile = "groovy-script-master-slave.groovy");

		Clustering.startSpecificServer(
			deleteLiferayHome = "true",
			keepCachedAppServerData = "true",
			nodePort = 8080);

		User.logoutPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		User.loginPG(
			nodePort = 8080,
			password = "test",
			userEmailAddress = "test@liferay.com");

		Groovy.runScriptViaGogoShell(
			expectedOutput = "This node is slave node",
			scriptFile = "groovy-script-master-slave.groovy");
	}

	@priority = 4
	test TCPControlChannelProperties {
		property custom.properties = "cluster.link.channel.properties.control=tcp.xml";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		for (var serverPort : list "8080,9080") {
			Clustering.viewTextPresentOnSpecificNode(
				expectedText = "Create a new JGroups channel",
				nodePort = ${serverPort});

			Clustering.viewTextPresentOnSpecificNode(
				expectedText = "properties: TCP",
				nodePort = ${serverPort});
		}

		User.loginPG(
			nodePort = 9080,
			password = "test",
			userEmailAddress = "test@liferay.com");
	}

	@priority = 4
	test UDPControlChannelProperties {
		property custom.properties = "cluster.link.channel.properties.control=udp.xml${line.separator}cluster.link.channel.properties.transport.0=udp.xml";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		for (var serverPort : list "8080,9080") {
			Clustering.viewTextPresentOnSpecificNode(
				expectedText = "Create a new JGroups channel",
				nodePort = ${serverPort});

			Clustering.viewTextPresentOnSpecificNode(
				expectedText = "properties: UDP",
				nodePort = ${serverPort});
		}

		User.loginPG(
			nodePort = 9080,
			password = "test",
			userEmailAddress = "test@liferay.com");
	}

	@priority = 4
	test ValidateDocumentOnSeparateNodes {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Clustering.viewClusterStatusInConsole();

		Page.assertNodePortPG(nodePort = 8080);

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PagesAdmin.addPage(pageName = "Documents and Media Page");

		Navigator.gotoPage(pageName = "Documents and Media Page");

		Portlet.addPG(portletName = "Documents and Media");

		DMDocument.enableActionsMenuOnPortlet();

		Navigator.gotoPage(pageName = "Documents and Media Page");

		DMDocument.addPG(
			dmDocumentFile = "Document_1.doc",
			dmDocumentTitle = "DM Document Title");

		DMDocument.viewAllPG(dmDocumentTitle = "DM Document Title");

		User.logoutPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		User.loginPG(
			nodePort = 9080,
			password = "test",
			userEmailAddress = "test@liferay.com");

		Page.assertNodePortPG(nodePort = 9080);

		Navigator.gotoSpecificURLPage(
			pageName = "Documents and Media Page",
			url = "http://localhost:9080");

		DMDocument.viewAllPG(dmDocumentTitle = "DM Document Title");

		User.logoutPG(
			nodePort = 9080,
			password = "test",
			userEmailAddress = "test@liferay.com");

		User.loginPG(
			password = "test",
			userEmailAddress = "test@liferay.com");
	}

	@priority = 4
	test ValidateLiveUsers {
		property custom.properties = "live.users.enabled=true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Clustering.viewClusterStatusInConsole();

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Monitoring");

		Clustering.viewLiveSessionCount(count = 1);

		User.loginPG(
			nodePort = 9080,
			password = "test",
			userEmailAddress = "test@liferay.com");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Monitoring");

		Clustering.viewLiveSessionCount(count = 2);

		User.loginPG(
			nodePort = 8080,
			password = "test",
			userEmailAddress = "test@liferay.com");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Monitoring");

		Clustering.viewLiveSessionCount(count = 3);

		User.logoutPG();

		User.loginPG(
			nodePort = 9080,
			password = "test",
			userEmailAddress = "test@liferay.com");

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Monitoring");

		Clustering.viewLiveSessionCount(count = 3);
	}

	@description = "This is a use case for LPS-142472."
	@priority = 4
	test ValidatePublishOnTwoNodes {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Clustering.viewClusterStatusInConsole();

		Page.assertNodePortPG(nodePort = 8080);

		HeadlessSite.addSite(siteName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Staging Test Page");

		Navigator.openSiteURL(siteName = "Site Name");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			portlet = "Staging");

		Staging.activateStagingCP(siteName = "Site Name");

		Navigator.gotoStagedSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name");

		Portlet.addPG(portletName = "Blogs");

		Blogs.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		BlogsEntry.viewPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		User.logoutPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		User.loginPG(
			nodePort = 9080,
			password = "test",
			userEmailAddress = "test@liferay.com");

		Page.assertNodePortPG(nodePort = 9080);

		Navigator.gotoSitePage(
			baseURL = "http://localhost:9080",
			pageName = "Staging Test Page",
			siteName = "Site Name");

		BlogsEntry.viewPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Navigator.gotoStagedView();

		Portlet.addPG(portletName = "Web Content Display");

		WebContentDisplayPortlet.add(
			webContentContent = "WebContent Content",
			webContentTitle = "WebContent Title");

		WebContentDisplayPortlet.viewContent(
			webContentContent = "WebContent Content",
			webContentTitle = "WebContent Title");

		Staging.gotoPublishToLive();

		Staging.publishToLive();

		User.logoutPG(
			nodePort = 9080,
			password = "test",
			userEmailAddress = "test@liferay.com");

		User.loginPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		Navigator.gotoSitePage(
			pageName = "Staging Test Page",
			siteName = "Site Name");

		BlogsEntry.viewPG(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		WebContentDisplayPortlet.viewContent(
			webContentContent = "WebContent Content",
			webContentTitle = "WebContent Title");
	}

	@priority = 4
	test ValidateSchedulerOnSeparateNodes {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		var siteName = TestCase.getSiteName();

		Clustering.viewClusterStatusInConsole();

		var pageName = "Home";

		Page.assertNodePortPG(nodePort = 8080);

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Publishing",
			portlet = "Staging");

		Staging.activateStagingCP(siteName = ${siteName});

		Navigator.openURL();

		Navigator.gotoStagedView();

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PagesAdmin.addPage(pageName = "New Page Name");

		Navigator.openURL();

		Navigator.gotoStagedView();

		Navigator._gotoPage(pageName = "New Page Name");

		Staging.schedulePublishToLivePG(scheduleTitleName = "Staging Schedule Title");

		Navigator.openURL();

		AssertTextNotPresent(
			locator1 = "Home#PAGE_2_GUEST_VIEW",
			value1 = "New Page Name");

		User.logoutPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		User.loginPG(
			nodePort = 9080,
			password = "test",
			userEmailAddress = "test@liferay.com");

		Page.assertNodePortPG(nodePort = 9080);

		Navigator.gotoSpecificURLPage(
			pageName = "Home",
			url = "http://localhost:9080");

		AssertTextNotPresent(
			locator1 = "Home#PAGE_2_GUEST_VIEW",
			value1 = "New Page Name");

		// Pausing 300 seconds due to LRQA-75909

		Pause(locator1 = 300000);

		Navigator.gotoSpecificURLPage(
			pageName = "Home",
			url = "http://localhost:9080");

		AssertTextEquals(
			locator1 = "Home#PAGE_2_GUEST_VIEW",
			value1 = "New Page Name");

		Navigator.openSpecificURL(url = "http://localhost:9080/web/guest-staging");

		ProductMenu.gotoPortlet(
			category = "Publishing",
			portlet = "Staging");

		Staging.deactivateStagingCP(siteName = ${siteName});

		User.logoutPG(
			nodePort = 9080,
			password = "test",
			userEmailAddress = "test@liferay.com");

		User.loginPG(
			password = "test",
			userEmailAddress = "test@liferay.com");
	}

}