@component-name = "portal-wcm"
definition {

	property ci.retries.disabled = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Display Page Templates";

	static var randomSiteName = StringUtil.randomString(8);

	var siteURLKey = StringUtil.toLowerCase(${randomSiteName});
	static var randomLabelName = StringUtil.randomString(8);

	static var randomObjectName = "A${randomLabelName}";

	setUp {
		task ("Set up virtual instance") {
			TestCase.setUpPortalInstance();
		}

		task ("Sign in") {
			User.firstLoginPG();
		}

		task ("Add a site") {
			HeadlessSite.addSite(siteName = ${randomSiteName});
		}

		task ("Add an object") {
			ObjectAdmin.addObjectViaAPI(
				labelName = ${randomLabelName},
				objectName = ${randomObjectName},
				pluralLabelName = "${randomLabelName}s");
		}
	}

	@description = "This is a test for LPS-191357. The administrator cannot clear object entryâ€™s mandatory attached file via associated display page."
	@priority = 3
	test CannotClearMandatoryAttachmentOnAssociatedDisplayPage {
		property custom.properties = "feature.flag.LPS-195205=true${line.separator}feature.flag.LPS-183727=true";

		task ("Given a site administrater has a display page template for Object with mandatory attachment") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Attachment",
				fieldLabelName = "Upload",
				fieldName = "upload",
				fieldType = "Long",
				fileSource = "documentsAndMedia",
				isRequired = "true",
				objectName = ${randomObjectName});

			ObjectAdmin.publishObjectViaAPI(objectName = ${randomObjectName});

			ObjectAdmin.addAttachmentFileFromDMInObjectEntryViaUI(
				fileName = "Document_1.jpg",
				objectName = ${randomObjectName});

			Navigator.gotoBack();

			ObjectPortlet.viewEntry(entry = "Document_1.jpg");

			var objectEntryId = selenium.getText("ObjectPortlet#ENTRY_ID");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = ${siteURLKey});

			DisplayPageTemplatesAdmin.addDisplayPage(
				contentType = ${randomLabelName},
				displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Form Components",
				fragmentName = "Form Container");

			PageEditor.mapFormContainerToObject(contentType = "${randomLabelName} (Default)");

			PageEditor.publish();

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");

			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoListProviderName = "${randomLabelName}s");

			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Sample Collection Item",
				fragmentName = "Button");

			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Button",
				id = "link");

			PageEditorEditableLink.mapURLToAsset(field = "Default");

			PageEditor.publish();
		}

		task ("When the site administrater accesses to the associated display page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			Button.click(button = "Go Somewhere");

			ControlMenu.viewHeaderTitle(headerTitle = ${objectEntryId});
		}

		task ("Then the site administrater cannot clear the mandatory attached file") {
			Click(locator1 = "ObjectAutoGenerated#DELETE_ATTACHMENT_ICON");

			Button.clickSubmitButton();

			AssertTextNotPresent(value1 = "Thank you. Your information was successfully received.");

			AssertAttributeValue(
				attribute1 = "validationMessage",
				fieldLabel = "Upload",
				index = 2,
				locator1 = "Fragment#INPUT_FIELD_WITH_LABEL",
				type = "file-upload",
				value1 = "Please fill out this field.");
		}
	}

	@description = "This is a test for LPS-191554. The administrator could display related object entries inside of form on associated display page."
	@priority = 4
	test DisplayRelatedObjectEntiresInsideFormOnAssociatedDisplayPage {
		property custom.properties = "feature.flag.LPS-195205=true${line.separator}feature.flag.LPS-183727=true";

		task ("Given a site administrator has two objects with one to many relationship") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Epic Name",
				fieldName = "epicName",
				fieldType = "String",
				isRequired = "false",
				objectName = ${randomObjectName});

			ObjectAdmin.publishObjectViaAPI(objectName = ${randomObjectName});

			var objectEntryId = ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "epicName",
				objectName = ${randomObjectName},
				value = "Update/View Object entries using Page Builder");
			var labelName = StringUtil.randomString(8);

			var objectName = "A${labelName}";

			ObjectAdmin.addObjectViaAPI(
				labelName = ${labelName},
				objectName = ${objectName},
				pluralLabelName = "${labelName}s");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Story Name",
				fieldName = "storyName",
				fieldType = "String",
				isRequired = "false",
				objectName = ${objectName});

			ObjectAdmin.publishObjectViaAPI(objectName = ${objectName});

			ObjectAdmin.addObjectRelationshipViaAPI(
				objectName_1 = ${randomObjectName},
				objectName_2 = ${objectName},
				relationshipLabel = "Related Stories",
				relationshipName = "relatedStories",
				relationshipType = "oneToMany");

			for (var storyName : list "Picklist fields to be editable from Edit DPT,Multiple Picklist fields to be editable from Edit DPT,Boolean fields to be editable from Edit DPT") {
				ObjectAdmin.addObjectEntryViaAPI(
					fieldNameList = "storyName,r_relatedStories_c_a${randomLabelName}Id",
					objectName = ${objectName},
					valueList = "${storyName},${objectEntryId}");
			}
		}

		task ("When the site administrator adds a Form Container to a display page template for the first object") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = ${siteURLKey});

			DisplayPageTemplatesAdmin.addDisplayPage(
				contentType = ${randomLabelName},
				displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Form Components",
				fragmentName = "Form Container");

			PageEditor.mapFormContainerToObject(contentType = "${randomLabelName} (Default)");
		}

		task ("Then the site administrator could display related object entires inside Form") {
			PageEditor.addFragmentToFormContainer(
				collectionName = "Content Display",
				fragmentName = "Collection Display",
				targetFragmentName = "Text Input");

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoItemRelatedListProviderName = "Related Stories");

			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Sample Collection Item",
				fragmentName = "Heading");

			PageEditorMapping.mapEditableFieldToCollectionItems(
				field = "Story Name",
				fragmentName = "Heading",
				id = "element-text");

			PageEditor.publish();

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");

			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoListProviderName = "${randomLabelName}s");

			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Sample Collection Item",
				fragmentName = "Button");

			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Button",
				id = "link");

			PageEditorEditableLink.mapURLToAsset(field = "Default");

			PageEditor.publish();

			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			Button.click(button = "Go Somewhere");

			ControlMenu.viewHeaderTitle(headerTitle = ${objectEntryId});

			for (var storyName : list "Picklist fields to be editable from Edit DPT,Multiple Picklist fields to be editable from Edit DPT,Boolean fields to be editable from Edit DPT") {
				AssertVisible(
					key_text = ${storyName},
					locator1 = "Fragment#EDITABLE_FIELD_CONTENT");
			}
		}
	}

	@description = "This is a test for LPS-191554. The administrator could display related object entries outside of form on associated display page."
	@priority = 4
	test DisplayRelatedObjectEntiresOutsideFormOnAssociatedDisplayPage {
		property custom.properties = "feature.flag.LPS-195205=true${line.separator}feature.flag.LPS-183727=true";

		task ("Given a site administrator has two objects with one to many relationship") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Epic Name",
				fieldName = "epicName",
				fieldType = "String",
				isRequired = "false",
				objectName = ${randomObjectName});

			ObjectAdmin.publishObjectViaAPI(objectName = ${randomObjectName});

			var objectEntryId = ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "epicName",
				objectName = ${randomObjectName},
				value = "Update/View Object entries using Page Builder");
			var labelName = StringUtil.randomString(8);

			var objectName = "A${labelName}";

			ObjectAdmin.addObjectViaAPI(
				labelName = ${labelName},
				objectName = ${objectName},
				pluralLabelName = "${labelName}s");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Story Name",
				fieldName = "storyName",
				fieldType = "String",
				isRequired = "false",
				objectName = ${objectName});

			ObjectAdmin.publishObjectViaAPI(objectName = ${objectName});

			ObjectAdmin.addObjectRelationshipViaAPI(
				objectName_1 = ${randomObjectName},
				objectName_2 = ${objectName},
				relationshipLabel = "Related Stories",
				relationshipName = "relatedStories",
				relationshipType = "oneToMany");

			for (var storyName : list "Picklist fields to be editable from Edit DPT,Multiple Picklist fields to be editable from Edit DPT,Boolean fields to be editable from Edit DPT") {
				ObjectAdmin.addObjectEntryViaAPI(
					fieldNameList = "storyName,r_relatedStories_c_a${randomLabelName}Id",
					objectName = ${objectName},
					valueList = "${storyName},${objectEntryId}");
			}
		}

		task ("When the site administrator adds a Form Container to a display page template for the first object") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = ${siteURLKey});

			DisplayPageTemplatesAdmin.addDisplayPage(
				contentType = ${randomLabelName},
				displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Form Components",
				fragmentName = "Form Container");

			PageEditor.mapFormContainerToObject(contentType = "${randomLabelName} (Default)");
		}

		task ("Then the site administrator could display related object entires outside Form") {
			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display",
				targetFragmentName = "Form Container");

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoItemRelatedListProviderName = "Related Stories");

			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Sample Collection Item",
				fragmentName = "Heading");

			PageEditorMapping.mapEditableFieldToCollectionItems(
				field = "Story Name",
				fragmentName = "Heading",
				id = "element-text");

			PageEditor.publish();

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");

			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoListProviderName = "${randomLabelName}s");

			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Sample Collection Item",
				fragmentName = "Button");

			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Button",
				id = "link");

			PageEditorEditableLink.mapURLToAsset(field = "Default");

			PageEditor.publish();

			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			Button.click(button = "Go Somewhere");

			ControlMenu.viewHeaderTitle(headerTitle = ${objectEntryId});

			for (var storyName : list "Picklist fields to be editable from Edit DPT,Multiple Picklist fields to be editable from Edit DPT,Boolean fields to be editable from Edit DPT") {
				AssertVisible(
					key_text = ${storyName},
					locator1 = "Fragment#EDITABLE_FIELD_CONTENT");
			}
		}
	}

	@description = "This is a test for LPS-191312. The administrator could edit date and time field of object entry via associated display page."
	@priority = 4
	test EditDateAndTimeFieldOnAssociatedDisplayPage {
		property custom.properties = "feature.flag.LPS-195205=true${line.separator}feature.flag.LPS-183727=true";

		task ("Given a site administrater has a display page template for Object with date and time field") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "DateTime",
				fieldLabelName = "Clock",
				fieldName = "clock",
				fieldType = "DateTime",
				isRequired = "false",
				objectName = ${randomObjectName},
				timeStorageOption = "useInputAsEntered");

			ObjectAdmin.publishObjectViaAPI(objectName = ${randomObjectName});

			var objectEntryId = ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "clock",
				objectName = ${randomObjectName},
				value = "2022-10-10T10:10:00.000");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = ${siteURLKey});

			DisplayPageTemplatesAdmin.addDisplayPage(
				contentType = ${randomLabelName},
				displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Form Components",
				fragmentName = "Form Container");

			PageEditor.mapFormContainerToObject(contentType = "${randomLabelName} (Default)");

			PageEditor.publish();

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");

			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoListProviderName = "${randomLabelName}s");

			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Sample Collection Item",
				fragmentName = "Button");

			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Button",
				id = "link");

			PageEditorEditableLink.mapURLToAsset(field = "Default");

			PageEditor.publish();
		}

		task ("When the site administrater accesses to the associated display page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			Button.click(button = "Go Somewhere");

			ControlMenu.viewHeaderTitle(headerTitle = ${objectEntryId});

			WaitForPageLoad();
		}

		task ("Then the site administrater should see the value of date and time field from object entry shown on Date and Time fragment") {
			InputField.viewText(
				fieldLabel = "Clock",
				text = "2022-10-10T10:10");
		}

		task ("When the site administrater types a different value in date and time field then submit") {
			Type.typeKeys(
				key_text = "Clock",
				locator1 = "TextInput#ANY",
				value1 = "08/18/2023");

			Type.typeKeys(
				key_text = "Clock",
				locator1 = "TextInput#ANY",
				value1 = "keys=ARROW_RIGHT");

			Type.typeKeys(
				key_text = "Clock",
				locator1 = "TextInput#ANY",
				value1 = "03:10PM");

			Button.clickSubmitButton();

			AssertTextPresent(value1 = "Thank you. Your information was successfully received.");
		}

		task ("Then the value of date and time field from object entry should be updated") {
			ObjectAdmin.goToCustomObject(objectName = ${randomObjectName});

			ObjectPortlet.viewEntry(entry = "Aug 18, 2023, 3:10 PM");
		}
	}

	@description = "This is a test for LPS-191362. The administrator could edit multiple picklist field of object entry via associated display page."
	@priority = 4
	test EditMultipleselectPicklistFieldOnAssociatedDisplayPage {
		property custom.properties = "feature.flag.LPS-195205=true${line.separator}feature.flag.LPS-183727=true";

		task ("Given a site administrater has a display page template for Object with multipleselect picklist field") {
			Picklist.addPicklistViaAPI(picklistName = "Fruits");

			for (var fruit : list "Apple,Banana,Peach,Lemon,Pineapple,Watermelon") {
				Picklist.addPicklistItemViaAPI(
					itemKey = ${fruit},
					itemName = ${fruit},
					picklistName = "Fruits");
			}

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "MultiselectPicklist",
				fieldLabelName = "Favorite",
				fieldName = "favorite",
				fieldType = "String",
				isRequired = "false",
				objectName = ${randomObjectName},
				picklistName = "Fruits");

			ObjectAdmin.publishObjectViaAPI(objectName = ${randomObjectName});

			ObjectAdmin.goToCustomObject(objectName = ${randomObjectName});

			ObjectAdmin.addObjectMultiPicklistFieldEntryViaUI(picklistOptionList = "Apple,Peach");

			PortletEntry.save();

			Navigator.gotoBack();

			ObjectPortlet.viewEntry(entry = "Apple, Peach");

			var objectEntryId = selenium.getText("ObjectPortlet#ENTRY_ID");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = ${siteURLKey});

			DisplayPageTemplatesAdmin.addDisplayPage(
				contentType = ${randomLabelName},
				displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Form Components",
				fragmentName = "Form Container");

			PageEditor.mapFormContainerToObject(contentType = "${randomLabelName} (Default)");

			PageEditor.publish();

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");

			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoListProviderName = "${randomLabelName}s");

			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Sample Collection Item",
				fragmentName = "Button");

			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Button",
				id = "link");

			PageEditorEditableLink.mapURLToAsset(field = "Default");

			PageEditor.publish();
		}

		task ("When the site administrater accesses to the associated display page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			Button.click(button = "Go Somewhere");

			ControlMenu.viewHeaderTitle(headerTitle = ${objectEntryId});

			WaitForPageLoad();
		}

		task ("Then the site administrater should see the value of multipleselect picklist field from object entry shown on Multiselect List fragment") {
			Button.click(button = "Show All");

			for (var fruit : list "Apple,Peach") {
				AssertChecked.assertCheckedNotVisible(
					checkboxId = ${fruit},
					locator1 = "Checkbox#CHECKBOX_ID");
			}

			for (var fruit : list "Banana,Lemon,Pineapple,Watermelon") {
				AssertNotChecked.assertNotCheckedNotVisible(
					checkboxId = ${fruit},
					locator1 = "Checkbox#CHECKBOX_ID");
			}
		}

		task ("When the site administrater select different options in multipleselect picklist field then submit") {
			for (var fruit : list "Apple,Peach") {
				Uncheck.uncheckNotVisible(
					checkboxId = ${fruit},
					locator1 = "Checkbox#CHECKBOX_ID");
			}

			for (var fruit : list "Banana,Watermelon") {
				Check.checkNotVisible(
					checkboxId = ${fruit},
					locator1 = "Checkbox#CHECKBOX_ID");
			}

			Button.clickSubmitButton();

			AssertTextPresent(value1 = "Thank you. Your information was successfully received.");
		}

		task ("Then the value of multipleselect picklist field from object entry should be updated") {
			ObjectAdmin.goToCustomObject(objectName = ${randomObjectName});

			ObjectPortlet.viewEntry(entry = "Banana, Watermelon");
		}
	}

	@description = "This is a test for LPS-191275. The administrator could edit picklist field of object entry via associated display page."
	@priority = 4
	test EditPicklistFieldOnAssociatedDisplayPage {
		property custom.properties = "feature.flag.LPS-195205=true${line.separator}feature.flag.LPS-183727=true";

		task ("Given a site administrater has a display page template for Object with picklist field") {
			Picklist.addPicklistViaAPI(picklistName = "Fruits");

			for (var fruit : list "Apple,Banana,Peach,Lemon,Pineapple,Watermelon") {
				Picklist.addPicklistItemViaAPI(
					itemKey = ${fruit},
					itemName = ${fruit},
					picklistName = "Fruits");
			}

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Picklist",
				fieldLabelName = "Type",
				fieldName = "type",
				fieldType = "String",
				isRequired = "false",
				objectName = ${randomObjectName},
				picklistName = "Fruits");

			ObjectAdmin.publishObjectViaAPI(objectName = ${randomObjectName});

			ObjectAdmin.goToCustomObject(objectName = ${randomObjectName});

			ObjectAdmin.addObjectPicklistFieldEntryViaUI(picklistOption = "Apple");

			PortletEntry.save();

			Navigator.gotoBack();

			ObjectPortlet.viewEntry(entry = "Apple");

			var objectEntryId = selenium.getText("ObjectPortlet#ENTRY_ID");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = ${siteURLKey});

			DisplayPageTemplatesAdmin.addDisplayPage(
				contentType = ${randomLabelName},
				displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Form Components",
				fragmentName = "Form Container");

			PageEditor.mapFormContainerToObject(contentType = "${randomLabelName} (Default)");

			PageEditor.publish();

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");

			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoListProviderName = "${randomLabelName}s");

			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Sample Collection Item",
				fragmentName = "Button");

			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Button",
				id = "link");

			PageEditorEditableLink.mapURLToAsset(field = "Default");

			PageEditor.publish();
		}

		task ("When the site administrater accesses to the associated display page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			Button.click(button = "Go Somewhere");

			ControlMenu.viewHeaderTitle(headerTitle = ${objectEntryId});

			WaitForPageLoad();
		}

		task ("Then the site administrater should see the value of picklist field from object entry shown on Multiselect List fragment") {
			AssertTextEquals(
				index = 1,
				locator1 = "Fragment#INPUT_FIELD",
				type = "select-from-list",
				value1 = "Apple");
		}

		task ("When the site administrater select different options in picklist field then submit") {
			Click(
				index = 1,
				locator1 = "Fragment#INPUT_TOGGLE",
				type = "select-from-list");

			MenuItem.click(menuItem = "Pineapple");

			Button.clickSubmitButton();

			AssertTextPresent(value1 = "Thank you. Your information was successfully received.");
		}

		task ("Then the value of picklist field from object entry should be updated") {
			ObjectAdmin.goToCustomObject(objectName = ${randomObjectName});

			ObjectPortlet.viewEntry(entry = "Pineapple");
		}
	}

	@description = "This is a test for LPS-184193. Allow selecting specific display page in the page editor for object entry."
	@priority = 4
	test MapSpecificDisplayPageForObject {
		property custom.properties = "feature.flag.LPS-195205=true${line.separator}feature.flag.LPS-183727=true";

		task ("Given a page designer has a display page template for Object") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Name",
				fieldName = "name",
				fieldType = "String",
				isRequired = "false",
				objectName = ${randomObjectName});

			ObjectAdmin.publishObjectViaAPI(objectName = ${randomObjectName});

			var objectEntryId = ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "name",
				objectName = ${randomObjectName},
				value = "Liferay");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = ${siteURLKey});

			DisplayPageTemplatesAdmin.addDisplayPage(
				contentType = ${randomLabelName},
				displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditorMapping.mapEditableTextToField(
				field = "Name",
				fragmentName = "Heading",
				id = "element-text");

			PageEditor.publish();
		}

		task ("When the page designer adds a Button fragment to a content page") {
			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");
		}

		task ("Then the page designer could map the specific display page for object entry to the Button fragment") {
			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Button",
				id = "link");

			PageEditorEditableLink.mapURLToAsset(
				entryTitle = ${objectEntryId},
				field = "Display Page Name",
				navItem = "${randomLabelName}s");

			PageEditor.publish();

			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			Button.click(button = "Go Somewhere");

			ControlMenu.viewHeaderTitle(headerTitle = "Liferay");

			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = "Liferay");
		}
	}

	@description = "This is a test for LPS-191532. The administrator could submit form on associated display page of another object."
	@priority = 4
	test SubmitFormOnAssociatedDisplayPageOfAnotherObject {
		property custom.properties = "feature.flag.LPS-195205=true${line.separator}feature.flag.LPS-183727=true";

		task ("Given a site administrater has a display page template for Object with two forms") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Address",
				fieldName = "address",
				fieldType = "String",
				isRequired = "false",
				objectName = ${randomObjectName});

			ObjectAdmin.publishObjectViaAPI(objectName = ${randomObjectName});

			var objectEntryId = ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "address",
				objectName = ${randomObjectName},
				value = "Dalian, China");
			var labelName = StringUtil.randomString(8);

			var objectName = "A${labelName}";

			ObjectAdmin.addObjectViaAPI(
				labelName = ${labelName},
				objectName = ${objectName},
				pluralLabelName = "${labelName}s");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "LongText",
				fieldLabelName = "Feature Request",
				fieldName = "featurerequest",
				fieldType = "Clob",
				isRequired = "false",
				objectName = ${objectName});

			ObjectAdmin.publishObjectViaAPI(objectName = ${objectName});

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = ${siteURLKey});

			DisplayPageTemplatesAdmin.addDisplayPage(
				contentType = ${randomLabelName},
				displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Form Components",
				fragmentName = "Form Container");

			PageEditor.mapFormContainerToObject(contentType = "${randomLabelName} (Default)");

			PageEditor.addFragment(
				collectionName = "Form Components",
				fragmentName = "Form Container",
				targetFragmentName = "Form Container");

			PageEditor.mapFormContainerToObject(
				contentType = ${labelName},
				index = 2);

			PageEditor.publish();

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");

			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoListProviderName = "${randomLabelName}s");

			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Sample Collection Item",
				fragmentName = "Button");

			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Button",
				id = "link");

			PageEditorEditableLink.mapURLToAsset(field = "Default");

			PageEditor.publish();
		}

		task ("When the site administrater accesses to the associated display page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			Button.click(button = "Go Somewhere");

			ControlMenu.viewHeaderTitle(headerTitle = ${objectEntryId});
		}

		task ("Then the site administrater could submit form of another object") {
			FormFields.editTextArea(
				fieldName = "featurerequest",
				fieldValue = "Possibility to add two form containers inside the same DPT.");

			Click(
				key_indexNumber = 2,
				key_text = "Submit",
				locator1 = "Button#ANY_N");

			AssertTextPresent(value1 = "Thank you. Your information was successfully received.");

			ObjectAdmin.goToCustomObject(objectName = ${objectName});

			ObjectPortlet.viewEntry(entry = "Possibility to add two form containers inside the same DPT.");
		}
	}

}