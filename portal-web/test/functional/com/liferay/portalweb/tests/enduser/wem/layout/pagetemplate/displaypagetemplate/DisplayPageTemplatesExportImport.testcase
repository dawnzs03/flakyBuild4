@component-name = "portal-wcm"
definition {

	property ci.retries.disabled = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Display Page Templates";

	static var randomSiteName = StringUtil.randomString(8);

	static var randomSiteURLKey = StringUtil.toLowerCase(${randomSiteName});

	setUp {
		task ("Set up virtual instance") {
			TestCase.setUpPortalInstance();
		}

		task ("Sign in") {
			User.firstLoginPG();
		}

		task ("Add a site") {
			HeadlessSite.addSite(siteName = ${randomSiteName});
		}
	}

	@description = "This is a use case for LPS-86193. Can export display page template based on custom master and import."
	@priority = 3
	test ExportImportDisplayPageTemplateBasedOnCustomMaster {
		var siteName = StringUtil.randomString(8);

		var siteURLKey = StringUtil.toLowerCase(${siteName});

		task ("Add a custom master with Header and Footer element") {
			JSONLayoutpagetemplate.addMasterPageTemplateEntry(
				groupName = ${randomSiteName},
				masterPageTemplateEntryName = "Custom Masters Page Template");

			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = ${randomSiteURLKey});

			MastersPageTemplatesAdmin.gotoMasters(masterLayoutName = "Custom Masters Page Template");

			PageEditor.addFragment(
				collectionName = "Navigation Bars",
				dropTarget = "Header",
				fragmentName = "Header Dark",
				scope = "Master");

			PageEditor.addFragment(
				collectionName = "Footers",
				dropTarget = "Footer",
				fragmentName = "Footer Nav Dark",
				scope = "Master");

			MastersPageTemplates.publishMaster();
		}

		task ("Add a display page template based on custom master") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = ${randomSiteName},
				masterLayoutEntryName = "Custom Masters Page Template",
				subType = "Basic Web Content");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = ${randomSiteURLKey});

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			AssertVisible(
				key_type = "dark",
				locator1 = "PageEditor#NAVIGATION_BARS");

			AssertVisible(
				key_type = "dark",
				locator1 = "PageEditor#FOOTERS");

			PageEditor.publish();
		}

		task ("Export display page template") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = ${randomSiteURLKey});

			DisplayPageTemplatesAdmin.gotoDisplayPageEllipsisItem(
				displayPageName = "Display Page Name",
				item = "Export");

			DownloadTempFile();
		}

		task ("Export custom master") {
			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = ${randomSiteURLKey});

			MastersPageTemplatesAdmin.gotoMastersEllipsisItem(
				item = "Export",
				masterLayoutName = "Custom Masters Page Template");

			DownloadTempFile();
		}

		task ("Import masters page template in new site") {
			HeadlessSite.addSite(siteName = ${siteName});

			MastersPageTemplatesAdmin.openMastersAdmin(siteURLKey = ${siteURLKey});

			MastersPageTemplatesAdmin.importMastersFromTempFolder();

			MastersPageTemplatesAdmin.viewMastersPresent(masterLayoutName = "Custom Masters Page Template");
		}

		task ("Import display page template in a new site") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = ${siteURLKey});

			DisplayPageTemplatesAdmin.importDisplayPageTemplateFromTempFolder();

			DisplayPageTemplatesAdmin.viewDisplayPagePresent(displayPageName = "Display Page Name");
		}

		task ("Assert display page template is based on custom master") {
			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			AssertVisible(
				key_type = "dark",
				locator1 = "PageEditor#NAVIGATION_BARS");

			AssertVisible(
				key_type = "dark",
				locator1 = "PageEditor#FOOTERS");

			PageEditor.gotoTab(tabName = "Page Design Options");

			Click(locator1 = "PageEditor#MORE_LINK");

			AssertTextEquals(
				locator1 = "PagesAdmin#MASTER_LAYOUT_NAME",
				value1 = "Custom Masters Page Template");
		}
	}

	@description = "This is a use case for LPS-86193. The Collection Display with mapping content should be exported and imported with display page template."
	@priority = 4
	test ExportImportDisplayPageTemplateWithCollectionDisplayContainingMappingContent {
		var siteName = StringUtil.randomString(8);

		var siteURLKey = StringUtil.toLowerCase(${siteName});

		task ("Add three Web Content Articles based on Basic Web Content") {
			for (var entryTitle : list "First Web Content,Second Web Content,Third Web Content") {
				JSONWebcontent.addWebContent(
					content = "Web Content Content",
					groupName = ${randomSiteName},
					title = ${entryTitle});
			}
		}

		task ("Add a dynamic Collections and select Web Content Article as Asset Entry Type") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = ${randomSiteName},
				itemSubtype = "Basic Web Content",
				itemType = "Web Content Article",
				title = "Dynamic Collection");
		}

		task ("Add a display page template with Web Content Article type and Basic Web Content subtype") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Web Content Article",
				displayPageTemplateEntryName = "Display Page Name",
				groupName = ${randomSiteName},
				subType = "Basic Web Content");
		}

		task ("Add a Collection Display to display page template") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = ${randomSiteURLKey});

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");
		}

		task ("Select the dynamic collection") {
			PageEditor.editCollectionDisplay(
				assetListName = "Dynamic Collection",
				fragmentName = "Collection Display");
		}

		task ("Assert the title of three Web Content Articles are respectively shown in each cell") {
			var n = 1;

			for (var title : list "Third,Second,First") {
				AssertVisible(
					key_colPosition = 1,
					key_entryTitle = "${title} Web Content",
					key_fragmentName = "Collection Display",
					key_rowPosition = ${n},
					locator1 = "PageEditor#COLLECTION_ITEM_TITLE");

				var n = ${n} + 1;
			}

			PageEditor.publish();
		}

		task ("Export display page template") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = ${randomSiteURLKey});

			DisplayPageTemplatesAdmin.gotoDisplayPageEllipsisItem(
				displayPageName = "Display Page Name",
				item = "Export");

			DownloadTempFile();
		}

		task ("Import display page template in a new site") {
			HeadlessSite.addSite(siteName = ${siteName});

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = ${siteURLKey});

			DisplayPageTemplatesAdmin.importDisplayPageTemplateFromTempFolder();

			DisplayPageTemplatesAdmin.viewDisplayPagePresent(displayPageName = "Display Page Name");
		}

		task ("Assert the Collection Display containing mapping content is imported") {
			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Display Page Name");

			PageEditor.clickConfigurableField(fragmentName = "Collection Display");

			var n = 1;

			for (var title : list "Third,Second,First") {
				AssertVisible(
					key_colPosition = 1,
					key_entryTitle = "${title} Web Content",
					key_fragmentName = "Collection Display",
					key_rowPosition = ${n},
					locator1 = "PageEditor#COLLECTION_ITEM_TITLE");

				var n = ${n} + 1;
			}
		}
	}

	@description = "This is a test for LPS-165556. The page designer should keep mapped standalone action from current object to Button fragment after import the display page template."
	@priority = 4
	test ExportImportDisplayPageTemplateWithMappedStandaloneActionFromCurrentObjectToFragment {
		var labelName = StringUtil.randomString(8);

		var objectName = "A${labelName}";

		task ("Given a page creator exports a display page template with a Button fragment mapped to a standalone action") {
			for (var i : list "1,2") {
				ObjectAdmin.addObjectViaAPI(
					labelName = "${labelName}${i}",
					objectName = "${objectName}${i}",
					pluralLabelName = "${labelName}${i}s");

				ObjectAdmin.addObjectFieldViaAPI(
					fieldBusinessType = "Text",
					fieldLabelName = "Name",
					fieldName = "name",
					fieldType = "String",
					isRequired = "false",
					objectName = "${objectName}${i}");

				ObjectAdmin.publishObjectViaAPI(objectName = "${objectName}${i}");
			}

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "${labelName}2");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Vote",
				active = "true",
				errorMessage = "You don't have permissions.",
				fieldName = "Name",
				inputExpressionValue = "name",
				inputMethod = "false",
				objectLabel = "${labelName}1",
				thenAction = "Add an Object Entry",
				whenAction = "Standalone");

			var objectEntryId = ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "name",
				objectName = "${objectName}2",
				value = "Liferay");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = ${randomSiteURLKey});

			DisplayPageTemplatesAdmin.addDisplayPage(
				contentType = "${labelName}2",
				displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");

			PageEditorAction.gotoEditableFieldAction(
				className = "btn",
				fragmentName = "Button",
				id = "action");

			PageEditor.configureFragment(
				action = "Vote",
				successInteraction = "Show Notification");

			PageEditor.publish();

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");

			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Heading",
				id = "element-text");

			PageEditorEditableLink.mapURLToAsset(
				entryTitle = ${objectEntryId},
				field = "Display Page URL",
				navItem = "${labelName}2s");

			PageEditor.publish();

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = ${randomSiteURLKey});

			DisplayPageTemplatesAdmin.gotoDisplayPageEllipsisItem(
				displayPageName = "Display Page Name",
				item = "Export");

			DownloadTempFile();

			DisplayPageTemplatesAdmin.deleteDisplayPage(
				defaultDisplayPageTemplate = "true",
				displayPageName = "Display Page Name");
		}

		task ("When the page creator import the display page template") {
			DisplayPageTemplatesAdmin.importDisplayPageTemplateFromTempFolder();

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Then the page creator could trigger the mapped standalone action") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			Click(
				key_text = "Heading Example",
				locator1 = "Link#ANY");

			ControlMenu.viewHeaderTitle(headerTitle = "Liferay");

			Button.click(button = "Go Somewhere");

			Alert.viewSuccessMessage();

			ObjectAdmin.goToCustomObject(objectName = "${objectName}1");

			ObjectPortlet.viewEntry(entry = "Liferay");
		}
	}

	@description = "This is a test for LPS-165556. The page designer should keep mapped standalone action from current object to Button fragment inside Collection Display after import the display page template."
	@priority = 4
	test ExportImportDisplayPageTemplateWithMappedStandaloneActionFromCurrentObjectToFragmentInsideCollectionDisplay {
		var labelName = StringUtil.randomString(8);

		var objectName = "A${labelName}";

		task ("Given a page creator exports a display page template with a Button fragment mapped to a standalone action inside Collection Display") {
			for (var i : list "1,2") {
				ObjectAdmin.addObjectViaAPI(
					labelName = "${labelName}${i}",
					objectName = "${objectName}${i}",
					pluralLabelName = "${labelName}${i}s");

				ObjectAdmin.addObjectFieldViaAPI(
					fieldBusinessType = "Text",
					fieldLabelName = "Name",
					fieldName = "name",
					fieldType = "String",
					isRequired = "false",
					objectName = "${objectName}${i}");

				ObjectAdmin.publishObjectViaAPI(objectName = "${objectName}${i}");
			}

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "${labelName}2");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Vote",
				active = "true",
				errorMessage = "You don't have permissions.",
				fieldName = "Name",
				inputExpressionValue = "name",
				inputMethod = "false",
				objectLabel = "${labelName}1",
				thenAction = "Add an Object Entry",
				whenAction = "Standalone");

			var objectEntryId = ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "name",
				objectName = "${objectName}2",
				value = "Liferay");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = ${randomSiteURLKey});

			DisplayPageTemplatesAdmin.addDisplayPage(
				contentType = "${labelName}2",
				displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoListProviderName = "${labelName}2s");

			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Liferay",
				fragmentName = "Button");

			PageEditorAction.gotoEditableFieldAction(
				className = "btn",
				fragmentName = "Button",
				id = "action");

			PageEditor.configureFragment(
				action = "Vote",
				successInteraction = "Show Notification");

			PageEditor.publish();

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");

			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Heading",
				id = "element-text");

			PageEditorEditableLink.mapURLToAsset(
				entryTitle = ${objectEntryId},
				field = "Display Page URL",
				navItem = "${labelName}2s");

			PageEditor.publish();

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = ${randomSiteURLKey});

			DisplayPageTemplatesAdmin.gotoDisplayPageEllipsisItem(
				displayPageName = "Display Page Name",
				item = "Export");

			DownloadTempFile();

			DisplayPageTemplatesAdmin.deleteDisplayPage(
				defaultDisplayPageTemplate = "true",
				displayPageName = "Display Page Name");
		}

		task ("When the page creator import the display page template") {
			DisplayPageTemplatesAdmin.importDisplayPageTemplateFromTempFolder();

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Then the page creator could trigger the mapped standalone action") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			Click(
				key_text = "Heading Example",
				locator1 = "Link#ANY");

			ControlMenu.viewHeaderTitle(headerTitle = "Liferay");

			Button.click(button = "Go Somewhere");

			Alert.viewSuccessMessage();

			ObjectAdmin.goToCustomObject(objectName = "${objectName}1");

			ObjectPortlet.viewEntry(entry = "Liferay");
		}
	}

	@description = "This is a test for LPS-165556. The page designer should keep mapped standalone action from a specific object entry to Button fragment after import the display page template."
	@priority = 4
	test ExportImportDisplayPageTemplateWithMappedStandaloneActionFromSpecificObjectEntryToFragment {
		var labelName = StringUtil.randomString(8);

		var objectName = "A${labelName}";

		task ("Given a page creator exports a display page template with a Button fragment mapped to a standalone action from a specific object entry") {
			for (var i : list "1,2") {
				ObjectAdmin.addObjectViaAPI(
					labelName = "${labelName}${i}",
					objectName = "${objectName}${i}",
					pluralLabelName = "${labelName}${i}s");

				ObjectAdmin.addObjectFieldViaAPI(
					fieldBusinessType = "Text",
					fieldLabelName = "Name",
					fieldName = "name",
					fieldType = "String",
					isRequired = "false",
					objectName = "${objectName}${i}");

				ObjectAdmin.publishObjectViaAPI(objectName = "${objectName}${i}");
			}

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "${labelName}2");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Vote",
				active = "true",
				errorMessage = "You don't have permissions.",
				fieldName = "Name",
				inputExpressionValue = "name",
				inputMethod = "false",
				objectLabel = "${labelName}1",
				thenAction = "Add an Object Entry",
				whenAction = "Standalone");

			var objectEntryId = ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "name",
				objectName = "${objectName}2",
				value = "Liferay");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = ${randomSiteURLKey});

			DisplayPageTemplatesAdmin.addDisplayPage(
				contentType = "${labelName}2",
				displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");

			PageEditorAction.gotoEditableFieldAction(
				className = "btn",
				fragmentName = "Button",
				id = "action");

			Select(
				key_fieldLabel = "Source",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Specific Content");

			PageEditorMapping.mapEditableFieldToAsset(
				entryTitle = ${objectEntryId},
				navItem = "${labelName}2s",
				rowItem = "//*[@data-qa-id='row'][contains(.,'${objectEntryId}')]");

			PageEditor.configureFragment(
				action = "Vote",
				successInteraction = "Show Notification");

			PageEditor.publish();

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");

			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Heading",
				id = "element-text");

			PageEditorEditableLink.mapURLToAsset(
				entryTitle = ${objectEntryId},
				field = "Display Page URL",
				navItem = "${labelName}2s");

			PageEditor.publish();

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = ${randomSiteURLKey});

			DisplayPageTemplatesAdmin.gotoDisplayPageEllipsisItem(
				displayPageName = "Display Page Name",
				item = "Export");

			DownloadTempFile();

			DisplayPageTemplatesAdmin.deleteDisplayPage(
				defaultDisplayPageTemplate = "true",
				displayPageName = "Display Page Name");
		}

		task ("When the page creator import the display page template") {
			DisplayPageTemplatesAdmin.importDisplayPageTemplateFromTempFolder();

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");
		}

		task ("Then the page creator could trigger the mapped standalone action") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			Click(
				key_text = "Heading Example",
				locator1 = "Link#ANY");

			ControlMenu.viewHeaderTitle(headerTitle = "Liferay");

			Button.click(button = "Go Somewhere");

			Alert.viewSuccessMessage();

			ObjectAdmin.goToCustomObject(objectName = "${objectName}1");

			ObjectPortlet.viewEntry(entry = "Liferay");
		}
	}

}