@component-name = "portal-wcm"
definition {

	property ci.retries.disabled = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Echo Accessibility";
	property testray.main.component.name = "AI-Creator";

	static var randomSiteName = StringUtil.randomString(8);

	var siteURLKey = StringUtil.toLowerCase(${randomSiteName});

	setUp {
		task ("Set up virtual instance") {
			TestCase.setUpPortalInstance();
		}

		task ("Sign in") {
			User.firstLoginPG();
		}
	}

	@description = "This is a test for LPS-181285 and LPS-188490. The screen reader should announce the popover message when OpenAI is not configured."
	@priority = 4
	test AnnouncePopoverMessageWhenOpenAINotConfigured {
		task ("Given a site administrater doesn't configure the OpenAI") {
			HeadlessSite.addSite(siteName = ${randomSiteName});
		}

		task ("When the site administrater clicks the AI Creator button in web content editor") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = ${siteURLKey});

			WebContentNavigator.gotoAddCP();

			Click.javaScriptClick(locator1 = "CKEditor#TOOLBAR_AI_CREATOR_BUTTON");
		}

		task ("Then the screen reader should announce the popover message") {
			AssertAttributeValue(
				attribute1 = "role",
				locator1 = "//div[contains(@class,'popover-top')]",
				value1 = "alert");

			AssertElementFocused(locator1 = "//div[contains(@class,'popover-top')]");

			AssertVisible(
				key_header = "Configure OpenAI",
				locator1 = "Tooltip#POPOVER_HEADER");

			AssertVisible(
				key_content = "Authentication is needed to use this feature. Contact your administrator to add an API key in instance or site settings.",
				locator1 = "Tooltip#POPOVER_BODY_CONTENT");
		}
	}

	@description = "This is a test for LPS-179485. The AI Creator modal should comply with WCAG 2.1 AA standards."
	@priority = 3
	test ViewAccessibilityOfAICreatorModal {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given a content creator configures the API key") {
			GogoShell.openGogoShellAdmin();

			GogoShell.executeCommand(commandName = "scr:enable com.liferay.ai.creator.openai.web.internal.client.MockAICreatorOpenAIClient");

			GogoShell.viewOutput(outputContent = "true");

			PortalSettings.gotoConfiguration(
				configurationCategory = "AI Creator",
				configurationName = "OpenAI",
				configurationScope = "Virtual Instance Scope");

			InputField.editText(
				fieldLabel = "API Key",
				text = "VALID_API_KEY");

			PortletEntry.save();
		}

		task ("When the content creator opens the AI Creator modal in web content editor") {
			HeadlessSite.addSite(siteName = ${randomSiteName});

			WebContentNavigator.openWebContentAdmin(siteURLKey = ${siteURLKey});

			WebContentNavigator.gotoAddCP();

			Click.javaScriptClick(locator1 = "CKEditor#TOOLBAR_AI_CREATOR_BUTTON");
		}

		task ("Then should be no accessibility problem on modal") {
			AssertElementAccessible(
				key_title = "AI Creator",
				locator1 = "IFrame#MODAL_ANY");
		}

		task ("When the content creator generates content") {
			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			InputField.editText(
				fieldLabel = "Description",
				text = "USER_CONTENT");

			Button.clickCreate();
		}

		task ("Then should be no accessibility problem on modal") {
			SelectFrameTop();

			WaitForFrameLoad();

			AssertElementAccessible(
				key_title = "AI Creator",
				locator1 = "IFrame#MODAL_ANY");
		}
	}

	@description = "This is a test for LPS-179485. The focus should be on the AI Creator modal when the modal is open."
	@priority = 3
	test ViewFocusOnModalWhenAICreatorModalIsOpen {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given a content creator configures the API key") {
			GogoShell.openGogoShellAdmin();

			GogoShell.executeCommand(commandName = "scr:enable com.liferay.ai.creator.openai.web.internal.client.MockAICreatorOpenAIClient");

			GogoShell.viewOutput(outputContent = "true");

			PortalSettings.gotoConfiguration(
				configurationCategory = "AI Creator",
				configurationName = "OpenAI",
				configurationScope = "Virtual Instance Scope");

			InputField.editText(
				fieldLabel = "API Key",
				text = "VALID_API_KEY");

			PortletEntry.save();
		}

		task ("When the content creator opens the AI Creator modal in web content editor") {
			HeadlessSite.addSite(siteName = ${randomSiteName});

			WebContentNavigator.openWebContentAdmin(siteURLKey = ${siteURLKey});

			WebContentNavigator.gotoAddCP();

			Click.javaScriptClick(locator1 = "CKEditor#TOOLBAR_AI_CREATOR_BUTTON");
		}

		task ("Then the focus should be on modal when go through via Tab key") {
			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			WaitForEditable(
				key_text = "Description",
				locator1 = "TextInput#ANY");

			SelectFrameTop();

			AssertElementFocused(
				key_title = "AI Creator",
				locator1 = "IFrame#MODAL_ANY");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			Type.typeKeys(
				locator1 = "//body",
				value1 = "keys=TAB");

			AssertElementFocused(
				key_text = "Description",
				locator1 = "TextInput#ANY");

			Type.typeKeys(
				locator1 = "//body",
				value1 = "keys=TAB");

			AssertElementFocused(
				key_fieldLabel = "Tone",
				locator1 = "Select#GENERIC_SELECT_FIELD");

			Type.typeKeys(
				locator1 = "//body",
				value1 = "keys=TAB");

			AssertElementFocused(
				key_text = "Word Count",
				locator1 = "TextInput#ANY");

			Type.typeKeys(
				locator1 = "//body",
				value1 = "keys=TAB");

			AssertElementFocused(
				key_text = "Cancel",
				locator1 = "Button#ANY");

			Type.typeKeys(
				locator1 = "//body",
				value1 = "keys=TAB");

			AssertElementFocused(
				key_text = "Create",
				locator1 = "Button#ANY");
		}

		task ("When the content creator creates the content") {
			InputField.editText(
				fieldLabel = "Description",
				text = "USER_CONTENT");

			Button.clickCreate();
		}

		task ("Then the focus is back to modal body") {
			SelectFrameTop();

			WaitForFrameLoad();

			AssertElementFocused(
				key_title = "AI Creator",
				locator1 = "IFrame#MODAL_ANY");
		}

		task ("When the content creator click the Try Again") {
			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			Button.click(button = "Try Again");
		}

		task ("Then the focus is back to modal body") {
			SelectFrameTop();

			WaitForFrameLoad();

			AssertElementFocused(
				key_title = "AI Creator",
				locator1 = "IFrame#MODAL_ANY");
		}
	}

}