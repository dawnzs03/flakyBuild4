@component-name = "portal-frontend-infrastructure"
definition {

	property custom.properties = "feature.flag.LPS-164563=true${line.separator}feature.flag.LPS-167253=true${line.separator}feature.flag.LPS-172017=true";
	property portal.acceptance = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Frontend Data Set";
	property testray.main.component.name = "Frontend Data Set";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		task ("Given creating a Data Set via API") {
			DataSetAdmin.goToDataSetAdminPage();

			DataSetAdmin.createDataSetEntryViaAPI(
				dataSetName = "Data Set Fields Test",
				restApplication = "/data-set-manager/fields",
				restEndpoint = "/",
				restSchema = "FDSField");
		}

		task ("And a data set view created via api") {
			DataSetAdmin.createFDSViewViaAPI(
				dataSetName = "Data Set Fields Test",
				dataSetViewDescription = "FDSViewDescription",
				key_dataSetViewNameList = "View Fields Test");
		}

		task ("When go to the View page of the data set created.") {
			DataSetAdmin.goToSpecificViewPage(
				dataSetName = "Data Set Fields Test",
				key_viewName = "View Fields Test");
		}

		task ("When goes to Fields Tab.") {
			DataSetAdmin.goToTab(tabName = "Fields");
		}
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		DataSetAdmin.deleteAllDataSetEntries();

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "LPS-179282. Confirm that metadata fields are not present for the user "
	@priority = 3
	test AssertNotPresentMetadataFields {
		task ("And Clicking to Add a new field") {
			LexiconEntry.gotoAdd();
		}

		task ("Then Confirm the fields are visible and present: creator,name,id") {
			AssertElementPresent(
				key_name = "name",
				locator1 = "DataSet#FIELDS_ITEM");

			AssertElementPresent(
				key_name = "creator",
				locator1 = "DataSet#FIELDS_ITEM");

			AssertElementPresent(
				key_name = "id",
				locator1 = "DataSet#FIELDS_ITEM");
		}

		task ("And is not present metadata fields:x-class-name, x-schema-name and scopeKey") {
			AssertElementNotPresent(
				key_name = "x-class-name",
				locator1 = "DataSet#FIELDS_ITEM");

			AssertElementNotPresent(
				key_name = "x-schema-name",
				locator1 = "DataSet#FIELDS_ITEM");

			AssertElementNotPresent(
				key_name = "scopeKey",
				locator1 = "DataSet#FIELDS_ITEM");
		}
	}

	@description = "LPS-185226. Confirm that the user can add a field"
	@priority = 5
	test CanAddField {
		task ("And clicks on Add Fields button/And checks id field/And clicks on Save button") {
			DataSetAdmin.addFields(key_fieldList = "id");
		}

		task ("Then the added fields are shown on Fields tab page") {
			DataSetAdmin.assertFieldsOnTable(
				key_position = 1,
				keyName = "id");
		}
	}

	@description = "LPS-179151. Confirm the change in the field label field."
	@priority = 5
	test CanAssertChangeInTheLabelField {
		task ("And adds two or more fields") {
			DataSetAdmin.addFields(key_fieldList = "id,label");
		}

		task ("And clicks on ellipsis button on one of these fields") {
			Click(
				key_fieldName = "id",
				locator1 = "DataSet#VERTICAL_ELLIPSIS_BY_FIELDS_NAME");
		}

		task ("And clicks on Edit option") {
			MenuItem.click(menuItem = "Edit");
		}

		task ("And the user changes the label field to "test"") {
			Type(
				key_text = "Label",
				locator1 = "TextInput#ANY",
				value1 = "test");
		}

		task ("And clicks on Save button") {
			Click(
				key_text = "Save",
				locator1 = "CP2ActivationKeys#KEY_DEACTIVATION_TERMS");
		}

		task ("Then the field label is changed the field should have “test” as its label") {
			AssertElementPresent(
				chosenFilter = "test",
				key_tableColumn = 1,
				key_tableRow = 1,
				locator1 = "DataSet#FILTER_TABLE_CELL");
		}
	}

	@description = "LPS-185498. Confirm that when trying to delete field, modal appears."
	@priority = 4
	test CanAssertModalWhenDeleteField {
		task ("And adds two or more fields") {
			DataSetAdmin.addFields(key_fieldList = "id,label");
		}

		task ("When the user selects the Delete option in the 3 dots menu") {
			Click(
				key_fieldName = "id",
				locator1 = "DataSet#VERTICAL_ELLIPSIS_BY_FIELDS_NAME");

			ClickNoError(locator1 = "ObjectPortlet#DELETE_ENTRY_BUTTON");
		}

		task ("Then confirmation message is displayed") {
			AssertElementPresent(
				key_modalText = "Are you sure you want to delete this field? It will be removed immediately. Fragments using it will be affected. This action cannot be undone.",
				locator1 = "DataSet#DELETE_DATA_SET_MODAL_BODY");
		}
	}

	@description = "LPS-179151. Confirm that the Checkbox in the Field edit modal is displayed."
	@priority = 5
	test CanAssertTheSortableCheckbox {
		task ("And adds two or more fields") {
			DataSetAdmin.addFields(key_fieldList = "id,label");
		}

		task ("And clicks on ellipsis button on one of these fields") {
			Click(
				key_fieldName = "id",
				locator1 = "DataSet#VERTICAL_ELLIPSIS_BY_FIELDS_NAME");
		}

		task ("And clicks on Edit option") {
			MenuItem.click(menuItem = "Edit");
		}

		task ("Then Edit field modal is displayed") {
			AssertVisible(
				locator1 = "Portlet#MODAL_TITLE",
				value1 = "Edit id");
		}

		task ("And contains Sortable checkbox") {
			AssertElementPresent(
				key_checkboxOption = "Sortable",
				locator1 = "AppBuilder#CHECKBOX_OPTION_LABEL");
		}
	}

	@description = "LPS-185230. Confirm that the user can cancel adding a field by clicking on cancel button."
	@priority = 4
	test CanCancelAddingOnCancelButton {
		task ("And clicks on Add Fields button") {
			LexiconEntry.gotoAdd();
		}

		task ("And checks id field") {
			DataSetAdmin.checkFields(key_fieldList = "id");
		}

		task ("And clicks on Cancel button") {
			Button.clickCancel();
		}

		task ("Then there's no fields on Fields tab page") {
			AssertElementPresent(
				key_text = "Add Fields",
				locator1 = "Button#ANY");
		}
	}

	@description = "LPS-185232. Confirm that the user can cancel adding a field by clicking on modal's close (X) button."
	@priority = 4
	test CanCancelAddingOnCloseButton {
		task ("And clicks on plus button") {
			LexiconEntry.gotoAdd();
		}

		task ("And checks creator field") {
			DataSetAdmin.checkFields(key_fieldList = "creator");
		}

		task ("And clicks on X icon of the modal") {
			Click(
				key_modalTitle = "Add Fields",
				locator1 = "Button#CLOSE_MODAL");
		}

		task ("Then the modal is closed / And the changes are not saved") {
			AssertElementPresent(
				key_text = "Add Fields",
				locator1 = "Button#ANY");
		}
	}

	@description = "LPS-176051. Confirm that the user can cancel changes when clicks on Cancel button"
	@priority = 4
	test CanCancelChangesOnCancelButton {
		task ("And add new fields") {
			DataSetAdmin.addFields(key_fieldList = "id,label");
		}

		task ("And clicks on Edit option") {
			Click(
				key_fieldName = "id",
				locator1 = "DataSet#VERTICAL_ELLIPSIS_BY_FIELDS_NAME");

			MenuItem.click(menuItem = "Edit");
		}

		task ("And choose another client extension option") {
			Click(
				dropdownLabel = "Renderer",
				locator1 = "ObjectField#ANY_DROPDOWN_LABEL");
		}

		task ("And clicks on Cancel button") {
			Button.click(button = "Cancel");
		}

		task ("Then the Edit field modal is closed") {
			AssertElementNotPresent(
				locator1 = "Portlet#MODAL_TITLE",
				value1 = "Edit id");
		}

		task ("And the changes are not applied") {
			DataSetAdmin.assertFieldsOnTable(
				key_position = 1,
				keyName = "id");

			DataSetAdmin.assertFieldsOnTable(
				key_position = 1,
				keyName = "Default");
		}
	}

	@description = "LPS-178736. Confirm that the user can cancel changes when clicks on Cancel button"
	@priority = 3
	test CanCancelChangesOnEdit {
		task ("And add an id Field") {
			DataSetAdmin.addFields(key_fieldList = "id");
		}

		task ("When the user clicks on the edit option from the id Field") {
			Click(
				key_fieldName = "id",
				locator1 = "DataSet#VERTICAL_ELLIPSIS_BY_FIELDS_NAME");

			MenuItem.click(menuItem = "Edit");
		}

		task ("And change the label to "Id Edited"") {
			Type(
				key_text = "Label",
				locator1 = "TextInput#ANY",
				value1 = "Id Edited");
		}

		task ("And clicks on the cancel button") {
			Button.clickCancel();
		}

		task ("Then assert the "Id" is present from the column label") {
			AssertElementPresent(
				key_tableColumn = "Label",
				key_tableRow = "id",
				locator1 = "DataSet#FIELDS_TABLE_AND_ROW");
		}
	}

	@description = "LPS-179151. Confirm the cancellation of the field edit by clicking on the Cancel button."
	@priority = 5
	test CanCancelEditOnCancelButton {
		task ("And adds two or more fields") {
			DataSetAdmin.addFields(key_fieldList = "id,label");
		}

		task ("And clicks on ellipsis button on one of these fields") {
			Click(
				key_fieldName = "id",
				locator1 = "DataSet#VERTICAL_ELLIPSIS_BY_FIELDS_NAME");
		}

		task ("And clicks on Edit option") {
			MenuItem.click(menuItem = "Edit");
		}

		task ("And the user changes the label field value to "test"") {
			Type(
				key_text = "Label",
				locator1 = "TextInput#ANY",
				value1 = "test");
		}

		task ("And clicks on Cancel button") {
			Button.clickCancel();
		}

		task ("Then Edit field modal is closed") {
			AssertElementNotPresent(
				locator1 = "Portlet#MODAL_TITLE",
				value1 = "Edit id");
		}

		task ("And the changes are not applied") {
			AssertElementNotPresent(
				chosenFilter = "test",
				key_tableColumn = 1,
				key_tableRow = 1,
				locator1 = "DataSet#FILTER_TABLE_CELL");
		}
	}

	@description = "LPS-179151. Confirm the cancellation of the field edit by clicking on the Close button."
	@priority = 5
	test CanCancelEditOnCloseButton {
		task ("And adds two or more fields") {
			DataSetAdmin.addFields(key_fieldList = "id,label");
		}

		task ("And clicks on ellipsis button on one of these fields") {
			Click(
				key_fieldName = "id",
				locator1 = "DataSet#VERTICAL_ELLIPSIS_BY_FIELDS_NAME");
		}

		task ("And clicks on Edit option") {
			MenuItem.click(menuItem = "Edit");
		}

		task ("And the user changes the label field to "test"") {
			Type(
				key_text = "Label",
				locator1 = "TextInput#ANY",
				value1 = "test");
		}

		task ("And clicks on Close button") {
			Click(
				key_modalTitle = "Edit id",
				locator1 = "Button#CLOSE_MODAL");
		}

		task ("Then Edit field modal is closed") {
			AssertElementNotPresent(
				locator1 = "Portlet#MODAL_TITLE",
				value1 = "Edit id");
		}

		task ("And the changes are not applied") {
			AssertElementNotPresent(
				chosenFilter = "test",
				key_tableColumn = 1,
				key_tableRow = 1,
				locator1 = "DataSet#FILTER_TABLE_CELL");
		}
	}

	@description = "LPS-185500. Confirm that can cancel field deletion on cancel button."
	@priority = 4
	test CanCancelFieldDeletion {
		task ("And adds 'id' field") {
			DataSetAdmin.addFields(key_fieldList = "id");
		}

		task ("When the user selects the Delete option in the 3 dots menu") {
			Click(
				key_fieldName = "id",
				locator1 = "DataSet#VERTICAL_ELLIPSIS_BY_FIELDS_NAME");

			ClickNoError(locator1 = "ObjectPortlet#DELETE_ENTRY_BUTTON");
		}

		task ("Then the confirmation message is displayed") {
			AssertElementPresent(
				key_modalText = "Are you sure you want to delete this field? It will be removed immediately. Fragments using it will be affected. This action cannot be undone.",
				locator1 = "DataSet#DELETE_DATA_SET_MODAL_BODY");
		}

		task ("And the user cancels the confirmation message") {
			Button.clickCancel();
		}

		task ("Then the field is not deleted / And assert the field still appears in the Fields tab table") {
			DataSetAdmin.assertFieldsOnTable(
				key_position = 1,
				keyName = "id");
		}
	}

	@description = "LPS-178736. Confirm that the user can change the Cell Renderer type on Edit"
	@priority = 5
	test CanChangeCellRenderer {
		task ("And add an id Field") {
			DataSetAdmin.addFields(key_fieldList = "id");
		}

		task ("Then assert the "Default" is present from the column Cell Renderer") {
			AssertElementPresent(
				key_tableColumn = "Renderer",
				key_tableRow = "Default",
				locator1 = "DataSet#FIELDS_TABLE_AND_ROW");
		}

		task ("When the user clicks on the edit option from the id Field") {
			Click(
				key_fieldName = "id",
				locator1 = "DataSet#VERTICAL_ELLIPSIS_BY_FIELDS_NAME");

			MenuItem.click(menuItem = "Edit");
		}

		task ("And change the Cell Renderer to "Label"") {
			Click(
				dropdownLabel = "Cell Renderer",
				locator1 = "ObjectField#ANY_DROPDOWN_LABEL");

			MenuItem.click(menuItem = "Label");

			Click(
				key_text = "Save",
				locator1 = "CP2ActivationKeys#KEY_DEACTIVATION_TERMS");
		}

		task ("Then assert the "Label" is present from the column Cell Renderer") {
			AssertElementPresent(
				key_tableColumn = "Cell Renderer",
				key_tableRow = "Label",
				locator1 = "DataSet#FIELDS_TABLE_AND_ROW");
		}
	}

	@description = "LPS-185229. Confirm that the user can change the field's order on Fields tab page."
	@priority = 4
	test CanChangeFieldOrder {
		task ("And clicks on plus button/And checks id and label fields/And clicks on Save button") {
			DataSetAdmin.addFields(key_fieldList = "id,label");
		}

		task ("And clicks on a field drag dots icon related id field ") {
			Click.clickAt(
				key_nameField = "id",
				locator1 = "DataSet#FIELDS_DRAG_DOTS_ICON");
		}

		task ("Then the user can move the id field below the label field") {
			DragAndDrop.javaScriptDragAndDropToBottom(
				key_nameField = "id",
				key_position = 2,
				keyName = "label",
				locator1 = "DataSet#FIELDS_DRAG_DOTS_ICON",
				locator2 = "DataSet#FIELDS_TABLE");

			DataSetAdmin.assertFieldsOnTable(
				key_position = 1,
				keyName = "label");

			DataSetAdmin.assertFieldsOnTable(
				key_position = 2,
				keyName = "id");
		}
	}

	@description = "LPS-179282. Confirm that the user can check and uncheck all the fields"
	@priority = 4
	test CanCheckAndUncheckAllFields {
		task ("And Clicking to Add a new field") {
			LexiconEntry.gotoAdd();
		}

		task ("And select all the fields.") {
			DataSetAdmin.checkFields(key_fieldList = "");
		}

		task ("Then Confirm all fields are checked ") {
			DataSetAdmin.assertFieldsChecked(key_fieldList = "creator,dateCreated,dateModified,externalReferenceCode,id,status,label,name,renderer,rendererType,r_fdsViewFDSFieldRelationship_c_fdsViewId,r_fdsViewFDSFieldRelationship_c_fdsViewERC,sortable,type");
		}

		task ("When Uncheck all the fields.") {
			DataSetAdmin.uncheckFields(key_fieldList = "");
		}

		task ("Then Confirm that all fields are unchecked ") {
			DataSetAdmin.assertFieldsNotChecked(key_fieldList = "creator,dateCreated,dateModified,externalReferenceCode,id,status,label,name,renderer,rendererType,r_fdsViewFDSFieldRelationship_c_fdsViewId,r_fdsViewFDSFieldRelationship_c_fdsViewERC,sortable,type");
		}
	}

	@description = "LPS-179151. Confirm that the checkbox in the field edit modal is checked."
	@priority = 5
	test CanConfirmCheckedSortableCheckbox {
		task ("And adds two or more fields") {
			DataSetAdmin.addFields(key_fieldList = "id,label");
		}

		task ("And clicks on ellipsis button on one of these fields") {
			Click(
				key_fieldName = "id",
				locator1 = "DataSet#VERTICAL_ELLIPSIS_BY_FIELDS_NAME");
		}

		task ("And clicks on Edit option") {
			MenuItem.click(menuItem = "Edit");
		}

		task ("Then Edit field modal is displayed") {
			AssertVisible(
				locator1 = "Portlet#MODAL_TITLE",
				value1 = "Edit id");
		}

		task ("When the user unchecks and check on Sortable checkbox") {
			Click(
				key_checkboxOption = "Sortable",
				locator1 = "AppBuilder#CHECKBOX_OPTION_LABEL");

			Click(
				key_checkboxOption = "Sortable",
				locator1 = "AppBuilder#CHECKBOX_OPTION_LABEL");
		}

		task ("And clicks on Save button") {
			Click(
				key_text = "Save",
				locator1 = "CP2ActivationKeys#KEY_DEACTIVATION_TERMS");
		}

		task ("Then the sortable field value is "yes" or "true"") {
			AssertElementPresent(
				chosenFilter = "true",
				key_tableColumn = 1,
				key_tableRow = 1,
				locator1 = "DataSet#FILTER_TABLE_CELL");
		}
	}

	@description = "LPS-179151. Confirm that the checkbox in the field edit modal is unchecked."
	@priority = 5
	test CanConfirmUncheckedSortableCheckbox {
		task ("And adds two or more fields") {
			DataSetAdmin.addFields(key_fieldList = "id,label");
		}

		task ("And clicks on ellipsis button on one of these fields") {
			Click(
				key_fieldName = "id",
				locator1 = "DataSet#VERTICAL_ELLIPSIS_BY_FIELDS_NAME");
		}

		task ("And clicks on Edit option") {
			MenuItem.click(menuItem = "Edit");
		}

		task ("Then Edit field modal is displayed") {
			AssertVisible(
				locator1 = "Portlet#MODAL_TITLE",
				value1 = "Edit id");
		}

		task ("When the user unchecks on Sortable checkbox") {
			Click(
				key_checkboxOption = "Sortable",
				locator1 = "AppBuilder#CHECKBOX_OPTION_LABEL");
		}

		task ("And clicks on Save button") {
			Click(
				key_text = "Save",
				locator1 = "CP2ActivationKeys#KEY_DEACTIVATION_TERMS");
		}

		task ("Then the sortable field value is "no" or "false"") {
			AssertElementPresent(
				chosenFilter = "false",
				key_tableColumn = 1,
				key_tableRow = 1,
				locator1 = "DataSet#FILTER_TABLE_CELL");
		}
	}

	@description = "LPS-185499. Confirm that field can be deleted."
	@priority = 4
	test CanDeleteField {
		task ("And adds 'id' field") {
			DataSetAdmin.addFields(key_fieldList = "id");
		}

		task ("When the user selects the Delete option in the 3 dots menu / And the user confirms the deletion / Then the field is deleted") {
			DataSetAdmin.deleteDataSetViewsFields(fieldName = "id");
		}

		task ("And assert the field is not present in the fields tab table") {
			AssertElementPresent(
				key_text = "Add Fields",
				locator1 = "Button#ANY");
		}
	}

	@description = "LPS-178736. Confirm that the user can edit Label field on Edit"
	@priority = 5
	test CanEditLabelFieldOnEdit {
		task ("And add an id Field") {
			DataSetAdmin.addFields(key_fieldList = "id");
		}

		task ("When the user clicks on the edit option from the id Field") {
			Click(
				key_fieldName = "id",
				locator1 = "DataSet#VERTICAL_ELLIPSIS_BY_FIELDS_NAME");

			MenuItem.click(menuItem = "Edit");
		}

		task ("And change the label to "Id Edited"") {
			Type(
				key_text = "Label",
				locator1 = "TextInput#ANY",
				value1 = "Id Edited");

			Click(
				key_text = "Save",
				locator1 = "CP2ActivationKeys#KEY_DEACTIVATION_TERMS");
		}

		task ("Then assert the "Id Edited" is present from the column label") {
			AssertElementPresent(
				key_tableColumn = "Label",
				key_tableRow = "Id Edited",
				locator1 = "DataSet#FIELDS_TABLE_AND_ROW");
		}
	}

	@description = "LPS-185228. Confirm that a field is not added after checking and unchecking it."
	@priority = 5
	test CannotAddFieldAfterUncheckingIt {
		task ("And clicks on plus button") {
			LexiconEntry.gotoAdd();
		}

		task ("And checks id and label fields") {
			DataSetAdmin.checkFields(key_fieldList = "id,label");
		}

		task ("And unchecks id field") {
			DataSetAdmin.uncheckFields(key_fieldList = "id");
		}

		task ("And clicks on Save button") {
			Button.clickSave();
		}

		task ("Then label field should appear on Fields tab page") {
			DataSetAdmin.assertFieldsOnTable(
				key_position = 1,
				keyName = "label");
		}

		task ("And id should not appear on Fields tab page") {
			AssertElementNotPresent(
				key_position = 1,
				keyName = "id",
				locator1 = "DataSet#FIELDS_TABLE");
		}
	}

	@description = "LPS-178736. Confirm that the Name field on Edit is not editable"
	@priority = 4
	test CannotEditNameFieldOnEdit {
		task ("And add an id Field") {
			DataSetAdmin.addFields(key_fieldList = "id");
		}

		task ("When the user clicks on the edit option from the id Field") {
			Click(
				key_fieldName = "id",
				locator1 = "DataSet#VERTICAL_ELLIPSIS_BY_FIELDS_NAME");

			MenuItem.click(menuItem = "Edit");
		}

		task ("Then the Edit Field modal is displayed") {
			AssertElementPresent(
				locator1 = "Portlet#MODAL_TITLE",
				value1 = "Edit id");
		}

		task ("And asserts the name field is not editable") {
			AssertElementPresent(
				key_fieldLabel = "Name",
				locator1 = "FormFields#FIELD_DISABLED");
		}
	}

	@description = "LPS-185501. Confirm that fields are not updated if proccess is canceled on cancel button."
	@priority = 4
	test CannotUpdateFieldsIfCancelOnCancelButton {
		task ("And adds two or more fields") {
			DataSetAdmin.addFields(key_fieldList = "id,label");
		}

		task ("When the user selects the 'Plus' Button") {
			LexiconEntry.gotoAdd();
		}

		task ("And uncheck a selected option") {
			DataSetAdmin.uncheckFields(key_fieldList = "id");
		}

		task ("Then the user clicks on the Cancel option") {
			Button.clickCancel();
		}

		task ("And the Add field modal is closed") {
			AssertElementNotPresent(
				key_modalText = "Deleting a data set is an action that cannot be reversed. The content will be deleted and some data set fragments may not be displayed.",
				locator1 = "DataSet#DELETE_DATA_SET_MODAL_BODY");
		}

		task ("And the changes are not applied") {
			DataSetAdmin.assertFieldsOnTable(
				key_position = 1,
				keyName = "id");

			DataSetAdmin.assertFieldsOnTable(
				key_position = 2,
				keyName = "label");
		}
	}

	@description = "LPS-185502. Confirm that fields are not updated if proccess is canceled on close (X) button."
	@priority = 4
	test CannotUpdateFieldsIfCancelOnCloseButton {
		task ("And adds two or more fields") {
			DataSetAdmin.addFields(key_fieldList = "id,label");
		}

		task ("When the user selects the 'Plus' Button") {
			LexiconEntry.gotoAdd();
		}

		task ("And uncheck a selected option") {
			DataSetAdmin.uncheckFields(key_fieldList = "id");
		}

		task ("Then the user clicks on the Close button") {
			Click(
				key_modalTitle = "Add Fields",
				locator1 = "Button#CLOSE_MODAL");
		}

		task ("And the Add field modal is closed") {
			AssertElementNotPresent(
				key_modalText = "Deleting a data set is an action that cannot be reversed. The content will be deleted and some data set fragments may not be displayed.",
				locator1 = "DataSet#DELETE_DATA_SET_MODAL_BODY");
		}

		task ("And the changes are not applied") {
			DataSetAdmin.assertFieldsOnTable(
				key_position = 1,
				keyName = "id");

			DataSetAdmin.assertFieldsOnTable(
				key_position = 2,
				keyName = "label");
		}
	}

	@description = "LPS-176051. Confirm that the user can save changes when clicks on Save button"
	@priority = 5
	test CanSaveChangesOnSaveButton {
		task ("And add new fields") {
			DataSetAdmin.addFields(key_fieldList = "id,label");
		}

		task ("And clicks on Edit option") {
			Click(
				key_fieldName = "id",
				locator1 = "DataSet#VERTICAL_ELLIPSIS_BY_FIELDS_NAME");

			MenuItem.click(menuItem = "Edit");
		}

		task ("And choose another client extension option") {
			Click(
				dropdownLabel = "Renderer",
				locator1 = "ObjectField#ANY_DROPDOWN_LABEL");

			MenuItem.click(menuItem = "Date and Time");
		}

		task ("And clicks on Save button") {
			Click(
				key_text = "Save",
				locator1 = "CP2ActivationKeys#KEY_DEACTIVATION_TERMS");
		}

		task ("Then the Edit field modal is closed") {
			AssertElementNotPresent(
				locator1 = "Portlet#MODAL_TITLE",
				value1 = "Edit id");
		}

		task ("And a successful message appears") {
			Alert.viewSuccessMessage();
		}

		task ("And the changes are applied") {
			DataSetAdmin.assertFieldsOnTable(
				key_position = 1,
				keyName = "id");

			DataSetAdmin.assertFieldsOnTable(
				key_position = 1,
				keyName = "Date and Time");
		}
	}

	@description = "LPS-179282. Confirm that the search bar returns works as expected"
	@priority = 4
	test CanSearchField {
		task ("And Clicking to Add a new field") {
			LexiconEntry.gotoAdd();
		}

		task ("And type Account in the search bar and click enter") {
			DataSetAdmin.searchFieldInModal(searchTerm = "name");
		}

		task ("Then the corresponding option is the just displayed") {
			AssertElementPresent(
				key_name = "name",
				locator1 = "DataSet#FIELDS_ITEM");
		}
	}

	@description = "LPS-185227. Confirm that the user can search a specific field when adding fields."
	@priority = 4
	test CanSearchFieldOnAddFieldsModal {
		task ("And clicks on Add Fields button") {
			LexiconEntry.gotoAdd();
		}

		task ("And types 'label' on modal search bar") {
			DataSetAdmin.searchFieldInModal(searchTerm = "label");
		}

		task ("Then 'label' field should appear on Add Fields modal") {
			AssertElementPresent(
				key_name = "label",
				locator1 = "DataSet#FIELDS_ITEM");
		}
	}

	@description = "LPS-185231. Confirm that the user can search a specific field on field's search bar."
	@priority = 4
	test CanSearchFieldOnFieldsSearchBar {
		task ("And clicks on plus button/And checks id and label fields/And clicks on Save button") {
			DataSetAdmin.addFields(key_fieldList = "id,label");
		}

		task ("And types id on Fields search bar") {
			DataSetAdmin.searchField(searchTerm = "id");
		}

		task ("And clicks on search icon") {
			Click(locator1 = "AppBuilder#SEARCH_BUTTON");
		}

		task ("Then only id field should appear on Fields page") {
			DataSetAdmin.assertFieldsOnTable(
				key_position = 1,
				keyName = "id");
		}
	}

	@description = "LPS-176051. Blocked by :LPS-186987. Confirm that Cell Renderer option can be selected on Cell Renderer Field."
	@ignore = "true"
	@priority = 3
	test CanSelectCellRendererOption {

		// TODO LPS-185794 CanSelectCellRendererOption pending implementation

	}

	@description = "LPS-176051. Confirm that the user can select options of dropdown on Edit"
	@priority = 5
	test CanSelectDropdownOptions {
		task ("And add new fields") {
			DataSetAdmin.addFields(key_fieldList = "id,label");
		}

		task ("And clicks on Edit option") {
			Click(
				key_fieldName = "id",
				locator1 = "DataSet#VERTICAL_ELLIPSIS_BY_FIELDS_NAME");

			MenuItem.click(menuItem = "Edit");
		}

		task ("When the user clicks on Cell Renderer field") {
			Click(
				dropdownLabel = "Renderer",
				locator1 = "ObjectField#ANY_DROPDOWN_LABEL");
		}

		task ("Then a dropdown is displayed") {
			AssertVisible(locator1 = "ObjectCustomViews#VIEW_DROPDOWN_MENU_ON_MODAL_DEFAULT_SORT");
		}

		task ("And the options present in the dropdown can be selected") {
			MenuItem.click(menuItem = "Date and Time");
		}
	}

	@description = "LPS-185503. Confirm that fields are not updated when saving changes."
	@priority = 4
	test CanUpdateFieldsWhenSave {
		task ("And adds two or more fields") {
			DataSetAdmin.addFields(key_fieldList = "id,label");
		}

		task ("When the user selects the 'Plus' Button") {
			LexiconEntry.gotoAdd();
		}

		task ("And uncheck a selected option") {
			DataSetAdmin.uncheckFields(key_fieldList = "id");
		}

		task ("When the user clicks on the Save button") {
			Click(
				key_text = "Save",
				locator1 = "CP2ActivationKeys#KEY_DEACTIVATION_TERMS");
		}

		task ("Then the Add field modal is closed") {
			AssertElementNotPresent(
				key_modalText = "Deleting a data set is an action that cannot be reversed. The content will be deleted and some data set fragments may not be displayed.",
				locator1 = "DataSet#DELETE_DATA_SET_MODAL_BODY");
		}

		task ("And the changes are applied") {
			DataSetAdmin.assertFieldsOnTable(
				key_position = 1,
				keyName = "label");
		}
	}

	@description = "LPS-176051. Confirm that the user can view Edit icon modal"
	@priority = 5
	test CanViewEditModal {
		task ("And add new fields") {
			DataSetAdmin.addFields(key_fieldList = "id,label");
		}

		task ("And clicks on Edit option") {
			Click(
				key_fieldName = "id",
				locator1 = "DataSet#VERTICAL_ELLIPSIS_BY_FIELDS_NAME");

			MenuItem.click(menuItem = "Edit");
		}

		task ("Then the Edit field modal is displayed") {
			AssertVisible(
				locator1 = "Portlet#MODAL_TITLE",
				value1 = "Edit id");
		}
	}

	@description = "LPS-176051. Confirm that the user can view Edit icon of fields"
	@priority = 5
	test CanViewEditOption {
		task ("And add new fields") {
			DataSetAdmin.addFields(key_fieldList = "id,label");
		}

		task ("When the user clicks on 3 dots icon") {
			Click(
				key_fieldName = "id",
				locator1 = "DataSet#VERTICAL_ELLIPSIS_BY_FIELDS_NAME");
		}

		task ("Then the Edit option appears") {
			MenuItem.viewVisible(menuItem = "Edit");
		}
	}

	@description = "LPS-179282. Confirm that the user can check and uncheck the fields"
	@priority = 5
	test CheckandUncheckFields {
		task ("And Clicking to Add a new field") {
			LexiconEntry.gotoAdd();
		}

		task ("And Check three options (creator,id ,name)") {
			DataSetAdmin.checkFields(key_fieldList = "creator,id,name");
		}

		task ("Then Confirm that the fields are checked ") {
			DataSetAdmin.assertFieldsChecked(key_fieldList = "creator,id,name");
		}

		task ("When Check three options (Phone, User Account, and WebURL)") {
			DataSetAdmin.uncheckFields(key_fieldList = "creator,id,name");
		}

		task ("Then Confirm that the fields are unchecked ") {
			DataSetAdmin.assertFieldsNotChecked(key_fieldList = "creator,id,name");
		}
	}

	@description = "LPS-179151. Confirm that the Field Edit modal is displayed."
	@priority = 5
	test TheEditFieldModalIsDisplayed {
		task ("And adds two or more fields") {
			DataSetAdmin.addFields(key_fieldList = "id,label");
		}

		task ("And clicks on ellipsis button on one of these fields") {
			Click(
				key_fieldName = "id",
				locator1 = "DataSet#VERTICAL_ELLIPSIS_BY_FIELDS_NAME");
		}

		task ("Then a dropdown is displayed that contains Edit option") {
			MenuItem.viewVisible(menuItem = "Edit");
		}
	}

}