@component-name = "portal-frontend-infrastructure"
@ignore = "true"
definition {

	property custom.properties = "feature.flag.LPS-164563=true${line.separator}feature.flag.LPS-188645=true${line.separator}feature.flag.LPS-167253=true";
	property portal.acceptance = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Frontend Data Set";
	property testray.main.component.name = "Frontend Data Set";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		task ("Given the creation of a new data set") {
			DataSetAdmin.goToDataSetAdminPage();

			JSONDataSet._createDataSetEntry(
				dataSetName = "Data Set Test",
				restApplication = "/data-set-manager/date-filters",
				restEndpoint = "/",
				restSchema = "FDSDateFilter");
		}

		task ("And adding a data set view") {
			JSONDataSet._createFDSViewViaAPI(
				dataSetName = "Data Set Test",
				dataSetViewDescription = "FDSViewDescription",
				dataSetViewName = "View Test");
		}

		task ("When go to the View page of the data set created.") {
			DataSetAdmin.goToSpecificViewPage(
				dataSetName = "Data Set Test",
				key_viewName = "View Test");
		}

		task ("When the user accesses the Filters tab") {
			DataSetAdmin.goToTab(tabName = "Filters");
		}
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		DataSetAdmin.deleteAllDataSetEntries();

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "LPS-176184. Confirm that all fields in the schema are displayed"
	@priority = 5
	test AssertAllFieldsAreDisplayedInSchema {
		task ("And clicks to add a new filter") {
			LexiconEntry.gotoAdd();
		}

		task ("asserts all fields in the schema are displayed") {
			Click(locator1 = "DataSet#FILTER_BY_SELECT");

			DataSetAdmin.assertSearchFilters(key_filterList = "creator,externalReferenceCode,id,status,createDate,fieldName,from,modifiedDate,name,r_fdsViewFDSDateFilterRelationship_c_fdsViewId,rendererType,r_fdsViewFDSDateFilterRelationship_c_fdsViewERC,to,type");
		}
	}

	@description = "LPS-176184. Confirm that when 'Name Field' is not provided, it is filled with the same name as field name."
	@priority = 3
	test AssertNameIsFilledByDefault {
		task ("And adds a new filter") {
			LexiconEntry.gotoAdd();
		}

		task ("And Choose an ID in the Filter By field") {
			DataSetAdmin.selectFilters(filterType = "id");
		}

		task ("And Clicks Save") {
			Button.clickSave();
		}

		task ("Then Confirm that the name of the saved filter is the same name as the chosen field") {
			AssertElementPresent(
				chosenFilter = "id",
				key_tableColumn = 1,
				key_tableRow = 1,
				locator1 = "DataSet#FILTER_TABLE_CELL");
		}
	}

	@description = "LPS-183621. Confirm that the Selection and Preselect value options are present."
	@priority = 2
	test AssertSelectedAndPreselected {
		task ("And creating a picklist") {
			Picklist.addPicklistViaAPI(picklistName = "Transport");
		}

		task ("And Add items to the created picklist") {
			Picklist.addPicklistItemViaAPI(
				itemKey = "bike",
				itemName = "bike",
				picklistName = "Transport");

			Picklist.addPicklistItemViaAPI(
				itemKey = "car",
				itemName = "car",
				picklistName = "Transport");

			Picklist.addPicklistItemViaAPI(
				itemKey = "bus",
				itemName = "bus",
				picklistName = "Transport");
		}

		task ("And go to the filters tab inside the View test") {
			for (var key_filterType : list "creator") {
				LexiconEntry.gotoAdd();

				Type(
					locator1 = "DataSet#NEW_FILTER_NAME",
					value1 = "Test Filter");

				Select(
					locator1 = "DataSet#FILTER_BY_SELECT",
					value1 = ${key_filterType});
			}
		}

		task ("And selects the Transport option in the Source Option drop-down") {
			Select(
				locator1 = "DataSet#SOURCE_OPTIONS_SELECT",
				value1 = "Transport");
		}

		task ("Then the Selection and Preselected Values option are displayed") {
			AssertElementPresent(
				key_type = "Selection",
				locator1 = "DataSet#FILTER_SELECTION");

			AssertElementPresent(
				key_type = "Preselected Values",
				locator1 = "DataSet#FILTER_SELECTION");
		}
	}

	@description = "LPS-183621. When there are two items, and we check the single radio button, an error message is displayed, the filter cannot be saved."
	@priority = 5
	test AssertTheErrorMessageInPreselect {
		task ("And creating a picklist") {
			Picklist.addPicklistViaAPI(picklistName = "Transport");
		}

		task ("And Add items to the created picklist") {
			Picklist.addPicklistItemViaAPI(
				itemKey = "bike",
				itemName = "bike",
				picklistName = "Transport");

			Picklist.addPicklistItemViaAPI(
				itemKey = "car",
				itemName = "car",
				picklistName = "Transport");

			Picklist.addPicklistItemViaAPI(
				itemKey = "bus",
				itemName = "bus",
				picklistName = "Transport");
		}

		task ("And go to the filters tab inside the View test") {
			for (var key_filterType : list "creator") {
				LexiconEntry.gotoAdd();

				Type(
					locator1 = "DataSet#NEW_FILTER_NAME",
					value1 = "Test Filter");

				Select(
					locator1 = "DataSet#FILTER_BY_SELECT",
					value1 = ${key_filterType});
			}
		}

		task ("And selects the Transport option in the Source Option drop-down") {
			Select(
				locator1 = "DataSet#SOURCE_OPTIONS_SELECT",
				value1 = "Transport");
		}

		task ("And Preselected Values: car and bike") {
			Type(
				key_fieldName = "Select a default value for your filter.",
				locator1 = "ObjectCustomViews#FROM_DATE_INPUT",
				value1 = "car");

			Click(
				key_sortOption = "car",
				locator1 = "ObjectCustomViews#SORT_OPTION");

			Type(
				key_label = "Preselected Values",
				locator1 = "DataSet#SELECT_VALUE",
				value1 = "bike");

			Click(
				key_sortOption = "bike",
				locator1 = "ObjectCustomViews#SORT_OPTION");

			Click(
				key_text = "Save",
				locator1 = "CP2ActivationKeys#KEY_DEACTIVATION_TERMS");
		}

		task ("When the user try to edit filter") {
			Click(
				key_fieldName = "Test Filter",
				locator1 = "DataSet#VERTICAL_ELLIPSIS_BY_FIELDS_NAME");

			MenuItem.click(menuItem = "Edit");
		}

		task ("And checks the Single option in Selection field ") {
			Click.clickAtNotVisible(
				key_radioOption = "Single",
				locator1 = "CommerceEntry#RADIO_BUTTON");
		}

		task ("Then an error message is displayed") {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#WARNING_FEEDBACK",
				value1 = "Only one value is allowed");
		}

		task ("And the user cant save the change") {
			AssertElementPresent(locator1 = "CreateObject#SAVE_BUTTON_DISABLED");
		}
	}

	@description = "LPS-176188. Confirm that the Delete option is present."
	@priority = 3
	test CanAssertDeleteIsPresent {
		task ("And adds a filter") {
			DataSetAdmin.createFilters(
				filterName = "Test Filter",
				key_filterList = "id");
		}

		task ("When the user clicks the ellipsis //3 dots menu") {
			Click(
				key_fieldName = "id",
				locator1 = "DataSet#VERTICAL_ELLIPSIS_BY_FIELDS_NAME");

			ClickNoError(locator1 = "ObjectPortlet#DELETE_ENTRY_BUTTON");
		}

		task ("Then assert the Delete option is present") {
			AssertElementPresent(
				key_text = "Delete",
				locator1 = "Button#ANY");
		}
	}

	@description = "LPS-183056. Confirm that the filter edit modal is displayed."
	@priority = 3
	test CanAssertEditFilterModal {
		task ("And creating a picklist") {
			Picklist.addPicklistViaAPI(picklistName = "Custom Picklist");

			Picklist.addPicklistItemViaAPI(
				itemKey = "bike",
				itemName = "bike",
				picklistName = "Custom Picklist");
		}

		task ("And go to the filters tab inside the View test") {
			for (var key_filterType : list "creator") {
				LexiconEntry.gotoAdd();

				Type(
					locator1 = "DataSet#NEW_FILTER_NAME",
					value1 = "Test Filter");

				Select(
					locator1 = "DataSet#FILTER_BY_SELECT",
					value1 = ${key_filterType});
			}
		}

		task ("And Preselected Values: bike") {
			DataSetAdmin.selectPreselectedValue(
				key_sortOption = "bike",
				picklist = "Custom Picklist",
				preselectType = "bike");
		}

		task ("When the user try to edit filter") {
			Click(
				key_fieldName = "creator",
				locator1 = "DataSet#VERTICAL_ELLIPSIS_BY_FIELDS_NAME");

			MenuItem.click(menuItem = "Edit");
		}

		task ("Then the title of the modal is "Edit creator Filter"") {
			AssertElementPresent(
				locator1 = "Portlet#MODAL_TITLE",
				value1 = "Edit creator Filter");
		}
	}

	@description = "LPS-176187. Confirm that the fields Name and Filter by are present in the New Filter modal."
	@priority = 5
	test CanAssertFieldsIsPresent {
		task ("And Clicks Save") {
			LexiconEntry.gotoAdd();
		}

		task ("When the new filter modal is displayed") {
			AssertElementPresent(
				locator1 = "Portlet#MODAL_TITLE",
				value1 = "New Filter");
		}

		task ("Then asserts the "Name" and "Filter By" fields are present") {
			AssertElementPresent(
				key_label = "Name",
				locator1 = "DataSet#LABEL");

			AssertElementPresent(
				key_label = "Filter By",
				locator1 = "DataSet#LABEL");
		}

		task ("And Asserts the Source options field is not present") {
			AssertElementNotPresent(
				key_label = "Source Options",
				locator1 = "DataSet#LABEL");
		}
	}

	@description = "LPS-183056. Confirm that the "Filter by" field is not editable after the filter is created."
	@priority = 4
	test CanAssertFilterByIsNotEditable {
		task ("And creating a picklist") {
			Picklist.addPicklistViaAPI(picklistName = "Custom Picklist");

			Picklist.addPicklistItemViaAPI(
				itemKey = "bike",
				itemName = "bike",
				picklistName = "Custom Picklist");
		}

		task ("And go to the filters tab inside the View test and create a new filter") {
			for (var key_filterType : list "creator") {
				LexiconEntry.gotoAdd();

				Type(
					locator1 = "DataSet#NEW_FILTER_NAME",
					value1 = "TestFilter");

				Select(
					locator1 = "DataSet#FILTER_BY_SELECT",
					value1 = ${key_filterType});
			}
		}

		task ("And Preselected Values: bike") {
			DataSetAdmin.selectPreselectedValue(
				key_sortOption = "bike",
				picklist = "Custom Picklist",
				preselectType = "bike");
		}

		task ("When the user tries to edit the filter") {
			Click(
				key_fieldName = "creator",
				locator1 = "DataSet#VERTICAL_ELLIPSIS_BY_FIELDS_NAME");

			MenuItem.click(menuItem = "Edit");
		}

		task ("Then Assert the Filter by field is not editable") {
			AssertNotEditable(locator1 = "DataSet#FILTER_BY_SELECT");
		}
	}

	@description = "LPS-176188. Confirm that the field is deleted and a successful message is displayed."
	@priority = 3
	test CanAssertFilterIsDeleted {
		task ("And adds a filter") {
			DataSetAdmin.createFilters(
				filterName = "Test Filter",
				key_filterList = "creator");
		}

		task ("When the user selects the Delete option in the 3 dots menu") {
			Click(
				key_fieldName = "creator",
				locator1 = "DataSet#VERTICAL_ELLIPSIS_BY_FIELDS_NAME");

			ClickNoError(locator1 = "ObjectPortlet#DELETE_ENTRY_BUTTON");
		}

		task ("Then the modal with a confirmation message is displayed") {
			AssertElementPresent(
				key_modalText = "Are you sure you want to delete this filter? It will be removed immediately. Fragments using it will be affected. This action cannot be undone.",
				locator1 = "DataSet#DELETE_DATA_SET_MODAL_BODY");
		}

		task ("And confirms the deletion") {
			Button.clickDelete();
		}

		task ("Then assert the field is deleted") {
			AssertElementNotPresent(
				key_nameField = "creator",
				key_position = 1,
				locator1 = "DataSet#FIELDS_TABLE");
		}

		task ("And a successful message is displayed") {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#SUCCESS",
				value1 = "Your request completed successfully.");
		}
	}

	@description = "LPS-176184. Confirm that 'No default filters were created.' and 'Start creating a filter to display specific data' messages are displayed"
	@priority = 3
	test CanAssertNoDefaultFilters {
		task ("Then asserts the message: 'No default filters were created. Start creating a filter to display specific data' is displayed") {
			AssertTextEquals.assertText(
				locator1 = "Message#EMPTY_STATE_INFO",
				value1 = "No default filters were created.");

			AssertTextEquals.assertText(
				locator1 = "Message#EMPTY_STATE_TEXT",
				value1 = "Start creating a Filter to display specific Data.");
		}
	}

	@description = "LPS-183056. Confirm that the preselect option shows Ana as the value."
	@priority = 5
	test CanAssertPreselectShowsAna {
		task ("And creating two picklist Cars and Names, with two items Civic and Ana") {
			Picklist.addPicklistViaAPI(picklistName = "Cars");

			Picklist.addPicklistItemViaAPI(
				itemKey = "Civic",
				itemName = "Civic",
				picklistName = "Cars");

			Picklist.addPicklistViaAPI(picklistName = "Names");

			Picklist.addPicklistItemViaAPI(
				itemKey = "Ana",
				itemName = "Ana",
				picklistName = "Names");
		}

		task ("And go to the filters tab inside the View test") {
			for (var key_filterType : list "creator") {
				LexiconEntry.gotoAdd();

				Type(
					locator1 = "DataSet#NEW_FILTER_NAME",
					value1 = "Test Filter");

				Select(
					locator1 = "DataSet#FILTER_BY_SELECT",
					value1 = ${key_filterType});
			}
		}

		task ("And Preselected Values Civic") {
			DataSetAdmin.selectPreselectedValue(
				key_sortOption = "Civic",
				picklist = "Cars",
				preselectType = "Civic");
		}

		task ("And go to filter edit page") {
			Click(
				key_fieldName = "creator",
				locator1 = "DataSet#VERTICAL_ELLIPSIS_BY_FIELDS_NAME");

			MenuItem.click(menuItem = "Edit");
		}

		task ("And Change the Source Options for Names, Preselected Values to Ana") {
			DataSetAdmin.selectPreselectedValue(
				key_sortOption = "Ana",
				picklist = "Names",
				preselectType = "Ana");
		}

		task ("And go to filter edit page again") {
			Click(
				key_fieldName = "creator",
				locator1 = "DataSet#VERTICAL_ELLIPSIS_BY_FIELDS_NAME");

			MenuItem.click(menuItem = "Edit");
		}

		task ("Then Confirm that the Preselected Values field shows Ana, and not Civic") {
			AssertElementPresent(
				key_type = "Ana",
				locator1 = "DataSet#FILTER_SELECTION");

			AssertElementNotPresent(
				key_type = "Civic",
				locator1 = "DataSet#FILTER_SELECTION");
		}
	}

	@description = "LPS-183056. Confirm that the "Multiple" and "Include" radio buttons are deselected."
	@priority = 5
	test CanAssertRadioButtonsIsDeselected {
		task ("And creating a picklist") {
			Picklist.addPicklistViaAPI(picklistName = "Custom Picklist");

			Picklist.addPicklistItemViaAPI(
				itemKey = "bike",
				itemName = "bike",
				picklistName = "Custom Picklist");
		}

		task ("And go to the filters tab inside the View test and create a new filter") {
			for (var key_filterType : list "creator") {
				LexiconEntry.gotoAdd();

				Type(
					locator1 = "DataSet#NEW_FILTER_NAME",
					value1 = "TestFilter");

				Select(
					locator1 = "DataSet#FILTER_BY_SELECT",
					value1 = ${key_filterType});
			}
		}

		task ("And Preselected Values: bike") {
			DataSetAdmin.selectPreselectedValue(
				key_sortOption = "bike",
				picklist = "Custom Picklist",
				preselectType = "bike");
		}

		task ("When the user tries to edit the filter") {
			Click(
				key_fieldName = "creator",
				locator1 = "DataSet#VERTICAL_ELLIPSIS_BY_FIELDS_NAME");

			MenuItem.click(menuItem = "Edit");
		}

		task ("And Select the option single and Select the option Filter Mode exclude") {
			Click.clickAtNotVisible(
				key_radioOption = "Single",
				locator1 = "CommerceEntry#RADIO_BUTTON");

			Click.clickAtNotVisible(
				key_radioOption = "Exclude",
				locator1 = "CommerceEntry#RADIO_BUTTON");
		}

		task ("Then Confirm the "multiple" option is not selected And Confirm the "Include" option is not selected") {
			AssertNotChecked.assertNotCheckedNotVisible(
				key_radioOption = "Multiple",
				locator1 = "CommerceEntry#RADIO_BUTTON");

			AssertNotChecked.assertNotCheckedNotVisible(
				key_radioOption = "Include",
				locator1 = "CommerceEntry#RADIO_BUTTON");
		}
	}

	@description = "LPS-176187. Confirm that the Selection option is not displayed."
	@priority = 5
	test CanAssertSelectionIsNotDisplayed {
		task ("And creating a picklist") {
			Picklist.addPicklistViaAPI(picklistName = "Custom Picklist");
		}

		task ("And Add an item to the created picklist") {
			Picklist.addPicklistItemViaAPI(
				itemKey = "name1",
				itemName = "name1",
				picklistName = "Custom Picklist");
		}

		task ("And it does not select any custom pick list option in the Source Option drop-down menu") {
			for (var key_filterType : list "creator") {
				LexiconEntry.gotoAdd();

				Select(
					locator1 = "DataSet#FILTER_BY_SELECT",
					value1 = ${key_filterType});
			}
		}

		task ("Then asserts the Selection option is not displayed") {
			AssertElementNotPresent(
				key_type = "Selection",
				locator1 = "DataSet#FILTER_SELECTION");
		}
	}

	@description = "LPS-176187. Confirm that the Selection option has a tooltip with the text message."
	@priority = 3
	test CanAssertSelectionTooltip {
		task ("And creating a picklist") {
			Picklist.addPicklistViaAPI(picklistName = "Custom Picklist");
		}

		task ("And Add an item to the created picklist") {
			Picklist.addPicklistItemViaAPI(
				itemKey = "name1",
				itemName = "name1",
				picklistName = "Custom Picklist");
		}

		task ("And selects an option "creator" in the Filter By field") {
			for (var key_filterType : list "creator") {
				LexiconEntry.gotoAdd();

				Select(
					locator1 = "DataSet#FILTER_BY_SELECT",
					value1 = ${key_filterType});
			}
		}

		task ("And selects the custom picklist option in the Source Option drop-down") {
			Select(
				locator1 = "DataSet#SOURCE_OPTIONS_SELECT",
				value1 = "Custom Picklist");
		}

		task ("Then asserts there is a tooltip icon next to it with the message "Determines how many preselected values for the filter can be added"") {
			AssertHTMLSourceTextPresent(
				key_title = "Determines how many preselected values for the filter can be added.",
				locator1 = "DataSet#FILTER_TOOLTIP",
				value1 = "Determines how many preselected values for the filter can be added.");
		}
	}

	@description = "LPS-176187. Confirm that the Source Option is displayed in the New Filter Modal."
	@priority = 3
	test CanAssertSourceOption {
		task ("And selects the option "creator" in the Filter By field") {
			for (var key_filterType : list "creator") {
				LexiconEntry.gotoAdd();

				Select(
					locator1 = "DataSet#FILTER_BY_SELECT",
					value1 = ${key_filterType});
			}
		}

		task ("Then asserts the source options field is displayed // is labeled as "Select" ") {
			AssertElementPresent(
				key_label = "Source Options",
				locator1 = "DataSet#LABEL");
		}
	}

	@description = "LPS-183056. Confirm the change of the Source Options from Cars to Names."
	@priority = 5
	test CanAssertSourceOptionsIsNames {
		task ("And creating two picklist Cars and Names, with two items Civic and Ana") {
			Picklist.addPicklistViaAPI(picklistName = "Cars");

			Picklist.addPicklistItemViaAPI(
				itemKey = "Civic",
				itemName = "Civic",
				picklistName = "Cars");

			Picklist.addPicklistViaAPI(picklistName = "Names");

			Picklist.addPicklistItemViaAPI(
				itemKey = "Ana",
				itemName = "Ana",
				picklistName = "Names");
		}

		task ("And go to the filters tab inside the View test") {
			for (var key_filterType : list "creator") {
				LexiconEntry.gotoAdd();

				Type(
					locator1 = "DataSet#NEW_FILTER_NAME",
					value1 = "Test Filter");

				Select(
					locator1 = "DataSet#FILTER_BY_SELECT",
					value1 = ${key_filterType});
			}
		}

		task ("And Preselected Values Civic") {
			DataSetAdmin.selectPreselectedValue(
				key_sortOption = "Civic",
				picklist = "Cars",
				preselectType = "Civic");
		}

		task ("When go to filter edit page") {
			Click(
				key_fieldName = "creator",
				locator1 = "DataSet#VERTICAL_ELLIPSIS_BY_FIELDS_NAME");

			MenuItem.click(menuItem = "Edit");
		}

		task ("And Change the Source Options for Names and click Save") {
			Select(
				locator1 = "DataSet#SOURCE_OPTIONS_SELECT",
				value1 = "Names");

			Click(
				key_text = "Save",
				locator1 = "CP2ActivationKeys#KEY_DEACTIVATION_TERMS");
		}

		task ("And go to filter edit page again") {
			Click(
				key_fieldName = "creator",
				locator1 = "DataSet#VERTICAL_ELLIPSIS_BY_FIELDS_NAME");

			MenuItem.click(menuItem = "Edit");
		}

		task ("Then Confirm that the Source Options field shows the Name") {
			AssertElementPresent(
				locator1 = "DataSet#SOURCE_OPTIONS_SELECT",
				value1 = "Names");
		}
	}

	@description = "LPS-176187. Confirm the text message in the Source Option Tooltip."
	@priority = 3
	test CanAssertSourceOptionTooltip {
		task ("And selects an option "creator" in the Filter By field") {
			for (var key_filterType : list "creator") {
				LexiconEntry.gotoAdd();

				Select(
					locator1 = "DataSet#FILTER_BY_SELECT",
					value1 = ${key_filterType});
			}
		}

		task ("Then asserts there is a tooltip icon next to the Source Option field name") {
			AssertElementPresent(
				key_label = "Source Options",
				locator1 = "CommerceEntry#LABEL_TOOLTIP_ICON");
		}

		task ("When the mouse is over the tooltip icon") {
			MouseOver(
				key_label = "Source Options",
				locator1 = "CommerceEntry#LABEL_TOOLTIP_ICON");
		}

		task ("Then the tooltip message is shown: "Choose a Picklist to associate to this filter."") {
			AssertHTMLSourceTextPresent(
				key_title = "Choose a picklist to associate with this filter",
				locator1 = "DataSet#FILTER_TOOLTIP",
				value1 = "Choose a picklist to associate with this filter");
		}
	}

	@description = "LPS-176187. Confirm that the Filter has been created and has the Name and Field Name fields."
	@priority = 5
	test CanAssertTheFieldsIsDisplayed {
		task ("And creating a picklist") {
			Picklist.addPicklistViaAPI(picklistName = "Custom Picklist");
		}

		task ("And Add an item to the created picklist") {
			Picklist.addPicklistItemViaAPI(
				itemKey = "name1",
				itemName = "name1",
				picklistName = "Custom Picklist");
		}

		task ("And selects an option "creator" in the Filter By field") {
			for (var key_filterType : list "creator") {
				LexiconEntry.gotoAdd();

				Type(
					locator1 = "DataSet#NEW_FILTER_NAME",
					value1 = "Test Filter");

				Select(
					locator1 = "DataSet#FILTER_BY_SELECT",
					value1 = ${key_filterType});
			}
		}

		task ("And selects the custom picklist option in the Source Option drop-down") {
			Select(
				locator1 = "DataSet#SOURCE_OPTIONS_SELECT",
				value1 = "Custom Picklist");
		}

		task ("And the user selects one of the radio buttons") {
			Click.clickAtNotVisible(
				key_radioOption = "Single",
				locator1 = "CommerceEntry#RADIO_BUTTON");
		}

		task ("And the user clicks on the Save button") {
			Button.clickSave();
		}

		task ("Then the filter is saved //Assert the name and the Field Name are expected") {
			AssertElementNotPresent(
				key_modalTitle = "Test Filter",
				locator1 = "DataSet#FILTERS_ENTRY");

			AssertElementNotPresent(
				key_modalTitle = "creator",
				locator1 = "DataSet#FILTERS_ENTRY");
		}
	}

	@description = "LPS-183056. Confirm that the filter name has been changed ."
	@priority = 5
	test CanAssertTheNameFieldIsChanged {
		task ("And creating a picklist") {
			Picklist.addPicklistViaAPI(picklistName = "Custom Picklist");

			Picklist.addPicklistItemViaAPI(
				itemKey = "bike",
				itemName = "bike",
				picklistName = "Custom Picklist");
		}

		task ("And go to the filters tab inside the View test and create new Filter") {
			for (var key_filterType : list "creator") {
				LexiconEntry.gotoAdd();

				Type(
					locator1 = "DataSet#NEW_FILTER_NAME",
					value1 = "TestFilter");

				Select(
					locator1 = "DataSet#FILTER_BY_SELECT",
					value1 = ${key_filterType});
			}
		}

		task ("And Preselected Values: bike") {
			DataSetAdmin.selectPreselectedValue(
				key_sortOption = "bike",
				picklist = "Custom Picklist",
				preselectType = "bike");
		}

		task ("When the user tries to edit the filter") {
			Click(
				key_fieldName = "creator",
				locator1 = "DataSet#VERTICAL_ELLIPSIS_BY_FIELDS_NAME");

			MenuItem.click(menuItem = "Edit");
		}

		task ("And Change the name for Filter test modified, click save") {
			Type(
				locator1 = "DataSet#NEW_FILTER_NAME",
				value1 = "Test Filter Edited");

			Click(
				key_text = "Save",
				locator1 = "CP2ActivationKeys#KEY_DEACTIVATION_TERMS");
		}

		task ("Then confirm that the filter name has changed") {
			AssertElementPresent(
				chosenFilter = "Test Filter Edited",
				key_tableColumn = 1,
				key_tableRow = 1,
				locator1 = "DataSet#FILTER_TABLE_CELL");
		}
	}

	@description = "LPS-183056. Confirm that there is only one option of car in Custom Picklist / Preselected."
	@priority = 4
	test CanAssertThereIsOnlyTheCarOption {
		task ("And creating a picklist") {
			Picklist.addPicklistViaAPI(picklistName = "Custom Picklist");

			Picklist.addPicklistItemViaAPI(
				itemKey = "car",
				itemName = "car",
				picklistName = "Custom Picklist");

			Picklist.addPicklistItemViaAPI(
				itemKey = "bike",
				itemName = "bike",
				picklistName = "Custom Picklist");
		}

		task ("And go to the filters tab inside the View test and create Filter") {
			for (var key_filterType : list "creator") {
				LexiconEntry.gotoAdd();

				Type(
					locator1 = "DataSet#NEW_FILTER_NAME",
					value1 = "TestFilter");

				Select(
					locator1 = "DataSet#FILTER_BY_SELECT",
					value1 = ${key_filterType});
			}
		}

		task ("And Preselected Values: bike") {
			DataSetAdmin.selectPreselectedValue(
				key_sortOption = "bike",
				picklist = "Custom Picklist",
				preselectType = "bike");
		}

		task ("When the user tries to edit the filter") {
			Click(
				key_fieldName = "creator",
				locator1 = "DataSet#VERTICAL_ELLIPSIS_BY_FIELDS_NAME");

			MenuItem.click(menuItem = "Edit");
		}

		task ("And remove the bike option and Add Car from the pre-selected values field") {
			Click(
				ariaLabel = "Remove bike",
				locator1 = "Button#ANY_WITH_ARIA_LABEL");

			DataSetAdmin.selectPreselectedValue(
				key_sortOption = "car",
				picklist = "Custom Picklist",
				preselectType = "car");
		}

		task ("Then the changes are saved and a success message is displayed") {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#SUCCESS",
				value1 = "Your request completed successfully.");
		}
	}

	@description = "LPS-176188. Confirm that an element dragged and dropped below another,will be deprioritized."
	@priority = 5
	test CanBeDeprioritizedBelowAnother {
		task ("And adds two or more new filters") {
			DataSetAdmin.createFilters(
				filterName = "Filter Test",
				key_filterList = "id");

			DataSetAdmin.createFilters(
				filterName = "Second Test",
				key_filterList = "creator");
		}

		task ("When an element is dragged and dropped below another element of the list") {
			DragAndDrop.javaScriptDragAndDropToBottom(
				key_nameField = "id",
				key_position = 2,
				keyName = "creator",
				locator1 = "DataSet#SELECT_DATASET",
				locator2 = "DataSet#FIELDS_TABLE");
		}

		task ("Then this element will be deprioritized") {
			DataSetAdmin.assertFieldsOnTable(
				key_position = 2,
				keyName = "id");
		}
	}

	@description = "LPS-176188. Confirm that an element dragged and dropped on top of another element will be prioritized."
	@priority = 4
	test CanBePrioritizedOverAnother {
		task ("And adds two or more new filters") {
			DataSetAdmin.createFilters(
				filterName = "Filter Test",
				key_filterList = "id");

			DataSetAdmin.createFilters(
				filterName = "Second Test",
				key_filterList = "creator");
		}

		task ("When an element is dragged and dropped over another element of the list") {
			DragAndDrop.javaScriptDragAndDropToBottom(
				key_nameField = "creator",
				key_position = 1,
				keyName = "id",
				locator1 = "DataSet#FIELDS_TABLE",
				locator2 = "DataSet#SELECT_DATASET");
		}

		task ("Then this element will be prioritized") {
			DataSetAdmin.assertFieldsOnTable(
				key_position = 1,
				keyName = "creator");
		}
	}

	@description = "LPS-176188. Confirm that the field is not deleted by clicking the Cancel button."
	@priority = 5
	test CanCancelButtonDeleteFilter {
		task ("And adds a filter") {
			DataSetAdmin.createFilters(
				filterName = "Filter Test",
				key_filterList = "from");
		}

		task ("When the user selects the Delete option in the 3 dots menu") {
			Click(
				key_fieldName = "from",
				locator1 = "DataSet#VERTICAL_ELLIPSIS_BY_FIELDS_NAME");

			ClickNoError(locator1 = "ObjectPortlet#DELETE_ENTRY_BUTTON");
		}

		task ("Then the modal with a confirmation message is displayed") {
			AssertElementPresent(
				key_modalText = "Are you sure you want to delete this filter? It will be removed immediately. Fragments using it will be affected. This action cannot be undone.",
				locator1 = "DataSet#DELETE_DATA_SET_MODAL_BODY");
		}

		task ("And cancels the deletion") {
			Button.clickCancel();
		}

		task ("Then assert the field is not deleted and it still appears in the Fields tab table") {
			DataSetAdmin.assertFieldsOnTable(
				key_position = 1,
				keyName = "from");
		}
	}

	@description = "LPS-183056. Confirm the cancellation of the edit with the Cancel button."
	@priority = 3
	test CanCancelEditOnCancelButton {
		task ("And creating a picklist, and an item to the created picklist "bike"") {
			Picklist.addPicklistViaAPI(picklistName = "Custom Picklist");

			Picklist.addPicklistItemViaAPI(
				itemKey = "bike",
				itemName = "bike",
				picklistName = "Custom Picklist");
		}

		task ("And go to the filters tab inside the View test") {
			for (var key_filterType : list "creator") {
				LexiconEntry.gotoAdd();

				Type(
					locator1 = "DataSet#NEW_FILTER_NAME",
					value1 = "Test Filter");

				Select(
					locator1 = "DataSet#FILTER_BY_SELECT",
					value1 = ${key_filterType});
			}
		}

		task ("Preselected Values: bike") {
			DataSetAdmin.selectPreselectedValue(
				key_sortOption = "bike",
				picklist = "Custom Picklist",
				preselectType = "bike");
		}

		task ("When the user tries to edit the filter, Change the name for Test Filter Edited") {
			Click(
				key_fieldName = "creator",
				locator1 = "DataSet#VERTICAL_ELLIPSIS_BY_FIELDS_NAME");

			MenuItem.click(menuItem = "Edit");

			Type(
				locator1 = "DataSet#NEW_FILTER_NAME",
				value1 = "Test Filter Edited");
		}

		task ("And Clicking Cancel") {
			Button.clickCancel();
		}

		task ("Then confirm that the filter name has no changed") {
			AssertElementPresent(
				chosenFilter = "Test Filter",
				key_tableColumn = 1,
				key_tableRow = 1,
				locator1 = "DataSet#FILTER_TABLE_CELL");
		}
	}

	@description = "LPS-183056. Confirm the cancellation of the edit with the Close button."
	@priority = 2
	test CanCancelEditOnCloseButton {
		task ("And creating a picklist") {
			Picklist.addPicklistViaAPI(picklistName = "Custom Picklist");

			Picklist.addPicklistItemViaAPI(
				itemKey = "bike",
				itemName = "bike",
				picklistName = "Custom Picklist");
		}

		task ("And go to the filters tab inside the View test and create a Filter") {
			for (var key_filterType : list "creator") {
				LexiconEntry.gotoAdd();

				Type(
					locator1 = "DataSet#NEW_FILTER_NAME",
					value1 = "Test Filter");

				Select(
					locator1 = "DataSet#FILTER_BY_SELECT",
					value1 = ${key_filterType});
			}
		}

		task ("And Preselected Values: bike") {
			DataSetAdmin.selectPreselectedValue(
				key_sortOption = "bike",
				picklist = "Custom Picklist",
				preselectType = "bike");
		}

		task ("When the user tries to edit the filter, the name for Test Filter Edited") {
			Click(
				key_fieldName = "creator",
				locator1 = "DataSet#VERTICAL_ELLIPSIS_BY_FIELDS_NAME");

			MenuItem.click(menuItem = "Edit");

			Type(
				locator1 = "DataSet#NEW_FILTER_NAME",
				value1 = "Test Filter Edited");
		}

		task ("And Clicking Close button") {
			Click(
				key_modalTitle = "Edit Test Filter Filter",
				locator1 = "Button#CLOSE_MODAL");
		}

		task ("Then confirm that the filter name has no changed") {
			AssertElementPresent(
				chosenFilter = "Test Filter",
				key_tableColumn = 1,
				key_tableRow = 1,
				locator1 = "DataSet#FILTER_TABLE_CELL");
		}
	}

	@description = "LPS-176184. Confirm that the New filter modal is closed and the changes are not applied when canceling on Cancel button"
	@priority = 3
	test CanCancelFilterCreationOnCancelButton {
		task ("And clicks to add a new filter") {
			LexiconEntry.gotoAdd();
		}

		task ("Then click on the "Cancel button"") {
			Button.clickCancel();
		}

		task ("And assert the New filter modal is closed and the changes are not applied") {
			AssertElementNotPresent(
				key_modalTitle = "New Filter",
				locator1 = "Button#CLOSE_MODAL");

			AssertTextEquals.assertText(
				locator1 = "Message#EMPTY_STATE_INFO",
				value1 = "No default filters were created.");
		}
	}

	@description = "LPS-176184. Confirm that the New filter modal is closed and the changes are not applied when canceling on Close X button"
	@priority = 3
	test CanCancelFilterCreationOnCloseButton {
		task ("And clicks to add a new filter") {
			LexiconEntry.gotoAdd();
		}

		task ("Then click on the "Close button"") {
			Click(
				key_modalTitle = "New Filter",
				locator1 = "Button#CLOSE_MODAL");
		}

		task ("And assert the New filter modal is closed and the changes are not applied") {
			AssertElementNotPresent(
				key_modalTitle = "New Filter",
				locator1 = "Button#CLOSE_MODAL");

			AssertTextEquals.assertText(
				locator1 = "Message#EMPTY_STATE_INFO",
				value1 = "No default filters were created.");
		}
	}

	@description = "LPS-176187. Confirm the cancellation of the Filter creation with the cancel button."
	@priority = 4
	test CanCancelOnCancelButton {
		task ("And creating a picklist") {
			Picklist.addPicklistViaAPI(picklistName = "Custom Picklist");
		}

		task ("And Add an item to the created picklist") {
			Picklist.addPicklistItemViaAPI(
				itemKey = "name1",
				itemName = "name1",
				picklistName = "Custom Picklist");
		}

		task ("And selects an option "creator" in the Filter By field") {
			for (var key_filterType : list "creator") {
				LexiconEntry.gotoAdd();

				Select(
					locator1 = "DataSet#FILTER_BY_SELECT",
					value1 = ${key_filterType});
			}
		}

		task ("And selects the custom picklist option in the Source Option drop-down") {
			Select(
				locator1 = "DataSet#SOURCE_OPTIONS_SELECT",
				value1 = "Custom Picklist");
		}

		task ("Then the user selects Single radio button") {
			Click.clickAtNotVisible(
				key_radioOption = "Single",
				locator1 = "CommerceEntry#RADIO_BUTTON");
		}

		task ("When the user clicks on the Cancel button") {
			Button.clickCancel();
		}

		task ("Then The Filter is not created") {
			AssertTextEquals.assertText(
				locator1 = "Message#EMPTY_STATE_INFO",
				value1 = "No default filters were created.");
		}
	}

	@description = "LPS-176187. Confirm the cancellation of the Filter creation with the close button."
	@priority = 4
	test CanCancelOnCloseButton {
		task ("And creating a picklist") {
			Picklist.addPicklistViaAPI(picklistName = "Custom Picklist");
		}

		task ("And Add an item to the created picklist") {
			Picklist.addPicklistItemViaAPI(
				itemKey = "name1",
				itemName = "name1",
				picklistName = "Custom Picklist");
		}

		task ("And selects an option "creator" in the Filter By field") {
			for (var key_filterType : list "creator") {
				LexiconEntry.gotoAdd();

				Select(
					locator1 = "DataSet#FILTER_BY_SELECT",
					value1 = ${key_filterType});
			}
		}

		task ("And selects the custom picklist option in the Source Option drop-down") {
			Select(
				locator1 = "DataSet#SOURCE_OPTIONS_SELECT",
				value1 = "Custom Picklist");
		}

		task ("Then the user selects Single radio button") {
			Click.clickAtNotVisible(
				key_radioOption = "Single",
				locator1 = "CommerceEntry#RADIO_BUTTON");
		}

		task ("And the user clicks on the Close button "X" icon") {
			Click(
				key_modalTitle = "New Filter",
				locator1 = "Button#CLOSE_MODAL");
		}

		task ("Then The Filter is not created") {
			AssertTextEquals.assertText(
				locator1 = "Message#EMPTY_STATE_INFO",
				value1 = "No default filters were created.");
		}
	}

	@description = "LPS-176184. Confirm that the text Select is labeling the  Filter By Field"
	@priority = 5
	test CanCreateFilters {
		task ("And adds a new filter") {
			DataSetAdmin.createFilters(
				filterName = "Test Filter",
				key_filterList = "id");
		}

		task ("Then asserts the selected option is actually displayed") {
			AssertElementPresent(
				chosenFilter = "id",
				key_tableColumn = 1,
				key_tableRow = 1,
				locator1 = "DataSet#FILTER_TABLE_CELL");
		}
	}

	@description = "LPS-176188. Confirm that the elements of the list can be dragged and dropped."
	@priority = 4
	test CanInteractDragDrop {
		task ("And adds two or more filters") {
			DataSetAdmin.createFilters(
				filterName = "Filter Test",
				key_filterList = "id");

			DataSetAdmin.createFilters(
				filterName = "Second Test",
				key_filterList = "creator");
		}

		task ("Then assert the elements in the list can be dragged and dropped") {
			DragAndDrop.javaScriptDragAndDropToBottom(
				key_nameField = "id",
				key_position = 2,
				keyName = "creator",
				locator1 = "DataSet#SELECT_DATASET",
				locator2 = "DataSet#FIELDS_TABLE");

			DataSetAdmin.assertFieldsOnTable(
				key_position = 1,
				keyName = "creator");

			DataSetAdmin.assertFieldsOnTable(
				key_position = 2,
				keyName = "id");
		}
	}

	@description = "LPS-176184. Confirm that 'Filter By' field cannot be empty"
	@priority = 3
	test CannotLeaveFilterByEmpty {
		task ("And adds a new filter") {
			LexiconEntry.gotoAdd();
		}

		task ("And Fill the name filter with Test filter") {
			Type(
				locator1 = "TextInput#NAME",
				value1 = "Test Filter");
		}

		task ("Then Comfirm that is not possible clicks save button") {
			AssertElementPresent(
				key_text = "Save",
				locator1 = "Button#ANY_DISABLED");
		}
	}

	@description = "LPS-176187. Confirm that only one radio button can be selected."
	@priority = 5
	test CanOnlyOneRadioButtonIsSelected {
		task ("And creating a picklist") {
			Picklist.addPicklistViaAPI(picklistName = "Custom Picklist");
		}

		task ("And Add an item to the created picklist") {
			Picklist.addPicklistItemViaAPI(
				itemKey = "name1",
				itemName = "name1",
				picklistName = "Custom Picklist");
		}

		task ("And selects an option "creator" in the Filter By field") {
			for (var key_filterType : list "creator") {
				LexiconEntry.gotoAdd();

				Select(
					locator1 = "DataSet#FILTER_BY_SELECT",
					value1 = ${key_filterType});
			}
		}

		task ("And selects the custom picklist option in the Source Option drop-down") {
			Select(
				locator1 = "DataSet#SOURCE_OPTIONS_SELECT",
				value1 = "Custom Picklist");
		}

		task ("Then the Selection option is displayed") {
			AssertElementPresent(
				key_type = "Selection",
				locator1 = "DataSet#FILTER_SELECTION");
		}

		task ("And asserts the radio buttons "Multiple" and "Single" are present") {
			AssertElementPresent(
				locator1 = "Radio#ANY",
				radioLabel = "Multiple");

			AssertElementPresent(
				locator1 = "Radio#ANY",
				radioLabel = "Single");
		}

		task ("And the user can select only one of the two available radio buttons") {
			Click.clickAtNotVisible(
				key_radioOption = "Single",
				locator1 = "CommerceEntry#RADIO_BUTTON");

			AssertNotChecked.assertNotCheckedNotVisible(
				key_radioOption = "Multiple",
				locator1 = "CommerceEntry#RADIO_BUTTON");
		}
	}

	@description = "LPS-176184. Confirm that is possible search filter when click on search icon"
	@priority = 3
	test CanSearchFilterOnIcon {
		task ("And adds two or more new filters") {
			DataSetAdmin.createFilters(key_filterList = "creator,id");
		}

		task ("Then the user searches for one of the created filters") {
			DataSetAdmin.searchField(searchTerm = "creator");
		}

		task ("And clicks the search icon") {
			Click(locator1 = "AppBuilder#SEARCH_BUTTON");
		}

		task ("Then the corresponding result is displayed.") {
			AssertElementPresent(
				chosenFilter = "creator",
				key_tableColumn = 1,
				key_tableRow = 1,
				locator1 = "DataSet#FILTER_TABLE_CELL");
		}
	}

	@description = "LPS-183621. Confirm error when selecting Single, having two items selected in Preselected values."
	@priority = 5
	test CantAddMoreThanOneItemInSingle {
		task ("And creating a picklist") {
			Picklist.addPicklistViaAPI(picklistName = "Transport");
		}

		task ("And Add items to the created picklist") {
			Picklist.addPicklistItemViaAPI(
				itemKey = "bike",
				itemName = "bike",
				picklistName = "Transport");

			Picklist.addPicklistItemViaAPI(
				itemKey = "car",
				itemName = "car",
				picklistName = "Transport");

			Picklist.addPicklistItemViaAPI(
				itemKey = "bus",
				itemName = "bus",
				picklistName = "Transport");
		}

		task ("And go to the filters tab inside the View test") {
			for (var key_filterType : list "creator") {
				LexiconEntry.gotoAdd();

				Type(
					locator1 = "DataSet#NEW_FILTER_NAME",
					value1 = "Test Filter");

				Select(
					locator1 = "DataSet#FILTER_BY_SELECT",
					value1 = ${key_filterType});
			}
		}

		task ("And selects the Transport option in the Source Option drop-down") {
			Select(
				locator1 = "DataSet#SOURCE_OPTIONS_SELECT",
				value1 = "Transport");
		}

		task ("And Preselected Values: car") {
			Type(
				key_fieldName = "Select a default value for your filter.",
				locator1 = "ObjectCustomViews#FROM_DATE_INPUT",
				value1 = "car");

			Click(
				key_sortOption = "car",
				locator1 = "ObjectCustomViews#SORT_OPTION");

			Click(
				key_text = "Save",
				locator1 = "CP2ActivationKeys#KEY_DEACTIVATION_TERMS");
		}

		task ("When the user try to edit filter") {
			Click(
				key_fieldName = "Test Filter",
				locator1 = "DataSet#VERTICAL_ELLIPSIS_BY_FIELDS_NAME");

			MenuItem.click(menuItem = "Edit");
		}

		task ("And checks the Single option in Selection field") {
			Click.clickAtNotVisible(
				key_radioOption = "Single",
				locator1 = "CommerceEntry#RADIO_BUTTON");
		}

		task ("And Preselected Values: bike") {
			Type(
				key_label = "Preselected Values",
				locator1 = "DataSet#SELECT_VALUE",
				value1 = "bike");

			Click(
				key_sortOption = "bike",
				locator1 = "ObjectCustomViews#SORT_OPTION");
		}

		task ("Then an error message is displayed") {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#WARNING_FEEDBACK",
				value1 = "Only one value is allowed");
		}

		task ("And the user cant save the change") {
			AssertElementPresent(locator1 = "CreateObject#SAVE_BUTTON_DISABLED");
		}
	}

	@description = "LPS-183621. Confirm that Single works when there is only one item left in Preselected values."
	@priority = 4
	test CanUseOnlyOneItemInSingle {
		task ("And creating a picklist") {
			Picklist.addPicklistViaAPI(picklistName = "Transport");
		}

		task ("And Add items to the created picklist") {
			Picklist.addPicklistItemViaAPI(
				itemKey = "bike",
				itemName = "bike",
				picklistName = "Transport");

			Picklist.addPicklistItemViaAPI(
				itemKey = "car",
				itemName = "car",
				picklistName = "Transport");

			Picklist.addPicklistItemViaAPI(
				itemKey = "bus",
				itemName = "bus",
				picklistName = "Transport");
		}

		task ("And go to the filters tab inside the View test") {
			for (var key_filterType : list "creator") {
				LexiconEntry.gotoAdd();

				Type(
					locator1 = "DataSet#NEW_FILTER_NAME",
					value1 = "Test Filter");

				Select(
					locator1 = "DataSet#FILTER_BY_SELECT",
					value1 = ${key_filterType});
			}
		}

		task ("And selects the Transport option in the Source Option drop-down") {
			Select(
				locator1 = "DataSet#SOURCE_OPTIONS_SELECT",
				value1 = "Transport");
		}

		task ("And Preselected Values: car and bike") {
			Type(
				key_fieldName = "Select a default value for your filter.",
				locator1 = "ObjectCustomViews#FROM_DATE_INPUT",
				value1 = "car");

			Click(
				key_sortOption = "car",
				locator1 = "ObjectCustomViews#SORT_OPTION");

			Type(
				key_label = "Preselected Values",
				locator1 = "DataSet#SELECT_VALUE",
				value1 = "bike");

			Click(
				key_sortOption = "bike",
				locator1 = "ObjectCustomViews#SORT_OPTION");

			Click(
				key_text = "Save",
				locator1 = "CP2ActivationKeys#KEY_DEACTIVATION_TERMS");
		}

		task ("When the user try to edit filter") {
			Click(
				key_fieldName = "Test Filter",
				locator1 = "DataSet#VERTICAL_ELLIPSIS_BY_FIELDS_NAME");

			MenuItem.click(menuItem = "Edit");
		}

		task ("And checks the Single option in Selection field") {
			Click.clickAtNotVisible(
				key_radioOption = "Single",
				locator1 = "CommerceEntry#RADIO_BUTTON");
		}

		task ("And remove one of the Preselected Values items") {
			Click(
				ariaLabel = "Remove bike",
				locator1 = "Button#ANY_WITH_ARIA_LABEL");
		}

		task ("And the user can save the new filter") {
			Click(
				key_text = "Save",
				locator1 = "CP2ActivationKeys#KEY_DEACTIVATION_TERMS");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#SUCCESS",
				value1 = "Your request completed successfully.");
		}
	}

	@description = "LPS-183621. Confirm that by selecting the radio button Multiple and selecting more than one item, the filter can be saved ."
	@priority = 5
	test MultipleAllowMoreThanOneItem {
		task ("And creating a picklist") {
			Picklist.addPicklistViaAPI(picklistName = "Transport");
		}

		task ("And Add items to the created picklist") {
			Picklist.addPicklistItemViaAPI(
				itemKey = "bike",
				itemName = "bike",
				picklistName = "Transport");

			Picklist.addPicklistItemViaAPI(
				itemKey = "car",
				itemName = "car",
				picklistName = "Transport");

			Picklist.addPicklistItemViaAPI(
				itemKey = "bus",
				itemName = "bus",
				picklistName = "Transport");
		}

		task ("And go to the filters tab inside the View test") {
			for (var key_filterType : list "creator") {
				LexiconEntry.gotoAdd();

				Type(
					locator1 = "DataSet#NEW_FILTER_NAME",
					value1 = "Test Filter");

				Select(
					locator1 = "DataSet#FILTER_BY_SELECT",
					value1 = ${key_filterType});
			}
		}

		task ("And selects the Transport option in the Source Option drop-down") {
			Select(
				locator1 = "DataSet#SOURCE_OPTIONS_SELECT",
				value1 = "Transport");
		}

		task ("And Preselected Values: car") {
			Type(
				key_fieldName = "Select a default value for your filter.",
				locator1 = "ObjectCustomViews#FROM_DATE_INPUT",
				value1 = "car");

			Click(
				key_sortOption = "car",
				locator1 = "ObjectCustomViews#SORT_OPTION");
		}

		task ("And Select the option Multiple radio button") {
			Click.clickAtNotVisible(
				key_radioOption = "Multiple",
				locator1 = "CommerceEntry#RADIO_BUTTON");

			Click.clickAtNotVisible(
				key_radioOption = "Multiple",
				locator1 = "CommerceEntry#RADIO_BUTTON");
		}

		task ("And add another item to Preselected Values") {
			Type(
				key_label = "Preselected Values",
				locator1 = "DataSet#SELECT_VALUE",
				value1 = "bike");

			Click(
				key_sortOption = "bike",
				locator1 = "ObjectCustomViews#SORT_OPTION");
		}

		task ("And the user can save the new filter") {
			Click(
				key_text = "Save",
				locator1 = "CP2ActivationKeys#KEY_DEACTIVATION_TERMS");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#SUCCESS",
				value1 = "Your request completed successfully.");
		}
	}

	@description = "LPS-183621. Confirm that by editing the filter and selecting Multiple, other items can be added and saved."
	@priority = 5
	test SelectMoreOneItemWithMultiple {
		task ("And creating a picklist") {
			Picklist.addPicklistViaAPI(picklistName = "Transport");
		}

		task ("And Add items to the created picklist") {
			Picklist.addPicklistItemViaAPI(
				itemKey = "bike",
				itemName = "bike",
				picklistName = "Transport");

			Picklist.addPicklistItemViaAPI(
				itemKey = "car",
				itemName = "car",
				picklistName = "Transport");

			Picklist.addPicklistItemViaAPI(
				itemKey = "bus",
				itemName = "bus",
				picklistName = "Transport");
		}

		task ("And go to the filters tab inside the View test") {
			for (var key_filterType : list "creator") {
				LexiconEntry.gotoAdd();

				Type(
					locator1 = "DataSet#NEW_FILTER_NAME",
					value1 = "Test Filter");

				Select(
					locator1 = "DataSet#FILTER_BY_SELECT",
					value1 = ${key_filterType});
			}
		}

		task ("And selects the Transport option in the Source Option drop-down") {
			Select(
				locator1 = "DataSet#SOURCE_OPTIONS_SELECT",
				value1 = "Transport");

			Click.clickAtNotVisible(
				key_radioOption = "Single",
				locator1 = "CommerceEntry#RADIO_BUTTON");
		}

		task ("And Preselected Values: bus") {
			Type(
				key_fieldName = "Select a default value for your filter.",
				locator1 = "ObjectCustomViews#FROM_DATE_INPUT",
				value1 = "bus");

			Click(
				key_sortOption = "bus",
				locator1 = "ObjectCustomViews#SORT_OPTION");

			Click(
				key_text = "Save",
				locator1 = "CP2ActivationKeys#KEY_DEACTIVATION_TERMS");
		}

		task ("When the user try to edit filter") {
			Click(
				key_fieldName = "Test Filter",
				locator1 = "DataSet#VERTICAL_ELLIPSIS_BY_FIELDS_NAME");

			MenuItem.click(menuItem = "Edit");
		}

		task ("And checks the Multiple option in Selection field") {
			Click.clickAtNotVisible(
				key_radioOption = "Multiple",
				locator1 = "CommerceEntry#RADIO_BUTTON");
		}

		task ("And Preselected Values: bike") {
			Type(
				key_label = "Preselected Values",
				locator1 = "DataSet#SELECT_VALUE",
				value1 = "bike");

			Click(
				key_sortOption = "bike",
				locator1 = "ObjectCustomViews#SORT_OPTION");
		}

		task ("And the user can save the new filter") {
			Click(
				key_text = "Save",
				locator1 = "CP2ActivationKeys#KEY_DEACTIVATION_TERMS");

			AssertTextEquals.assertPartialText(
				locator1 = "Message#SUCCESS",
				value1 = "Your request completed successfully.");
		}
	}

	@description = "LPS-183621. Confirm that when you select the Single radio button and select more than one item, an error message is displayed."
	@ignore = "true"
	@priority = 5
	test SinglePreventsMoreThanOneItem {
		task ("And creating a picklist") {
			Picklist.addPicklistViaAPI(picklistName = "Transport");
		}

		task ("And Add items to the created picklist") {
			Picklist.addPicklistItemViaAPI(
				itemKey = "bike",
				itemName = "bike",
				picklistName = "Transport");

			Picklist.addPicklistItemViaAPI(
				itemKey = "car",
				itemName = "car",
				picklistName = "Transport");

			Picklist.addPicklistItemViaAPI(
				itemKey = "bus",
				itemName = "bus",
				picklistName = "Transport");
		}

		task ("And go to the filters tab inside the View test") {
			for (var key_filterType : list "creator") {
				LexiconEntry.gotoAdd();

				Type(
					locator1 = "DataSet#NEW_FILTER_NAME",
					value1 = "Test Filter");

				Select(
					locator1 = "DataSet#FILTER_BY_SELECT",
					value1 = ${key_filterType});
			}
		}

		task ("And selects the Transport option in the Source Option drop-down") {
			Select(
				locator1 = "DataSet#SOURCE_OPTIONS_SELECT",
				value1 = "Transport");
		}

		task ("And Preselected Values: car") {
			Type(
				key_fieldName = "Select a default value for your filter.",
				locator1 = "ObjectCustomViews#FROM_DATE_INPUT",
				value1 = "car");

			Click(
				key_sortOption = "car",
				locator1 = "ObjectCustomViews#SORT_OPTION");
		}

		task ("And Select the option single radio button") {
			Click.clickAtNotVisible(
				key_radioOption = "Single",
				locator1 = "CommerceEntry#RADIO_BUTTON");
		}

		task ("And add another item to Preselected Values") {
			Type(
				key_label = "Preselected Values",
				locator1 = "DataSet#SELECT_VALUE",
				value1 = "bike");

			Click(
				key_sortOption = "bike",
				locator1 = "ObjectCustomViews#SORT_OPTION");
		}

		task ("Then an error message is displayed") {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#WARNING_FEEDBACK",
				value1 = "Only one value is allowed");
		}

		task ("And the user cant save the change") {
			AssertElementPresent(locator1 = "CreateObject#SAVE_BUTTON_DISABLED");
		}
	}

	@description = "LPS-183621. Confirm that it is possible to create the filter without filling out the Preselected field."
	@priority = 3
	test TheFilterWithoutPreselection {
		task ("And creating a picklist") {
			Picklist.addPicklistViaAPI(picklistName = "Transport");
		}

		task ("And Add items to the created picklist") {
			Picklist.addPicklistItemViaAPI(
				itemKey = "bike",
				itemName = "bike",
				picklistName = "Transport");

			Picklist.addPicklistItemViaAPI(
				itemKey = "car",
				itemName = "car",
				picklistName = "Transport");

			Picklist.addPicklistItemViaAPI(
				itemKey = "bus",
				itemName = "bus",
				picklistName = "Transport");
		}

		task ("And go to the filters tab inside the View test") {
			for (var key_filterType : list "creator") {
				LexiconEntry.gotoAdd();

				Type(
					locator1 = "DataSet#NEW_FILTER_NAME",
					value1 = "Test Filter");

				Select(
					locator1 = "DataSet#FILTER_BY_SELECT",
					value1 = ${key_filterType});
			}
		}

		task ("And selects the Transport option in the Source Option drop-down") {
			Select(
				locator1 = "DataSet#SOURCE_OPTIONS_SELECT",
				value1 = "Transport");
		}

		task ("When the user clicks on Save button ") {
			Click(
				key_text = "Save",
				locator1 = "CP2ActivationKeys#KEY_DEACTIVATION_TERMS");
		}
	}

	@description = "LPS-183056. Confirm that the Name field cannot be empty."
	@priority = 3
	test TheNameFieldCannotBeEmpty {
		task ("And creating a picklist") {
			Picklist.addPicklistViaAPI(picklistName = "Custom Picklist");

			Picklist.addPicklistItemViaAPI(
				itemKey = "bike",
				itemName = "bike",
				picklistName = "Custom Picklist");
		}

		task ("And go to the filters tab inside the View test") {
			for (var key_filterType : list "creator") {
				LexiconEntry.gotoAdd();

				Type(
					locator1 = "DataSet#NEW_FILTER_NAME",
					value1 = "TestFilter");

				Select(
					locator1 = "DataSet#FILTER_BY_SELECT",
					value1 = ${key_filterType});
			}
		}

		task ("And Preselected Values: bike") {
			DataSetAdmin.selectPreselectedValue(
				key_sortOption = "bike",
				picklist = "Custom Picklist",
				preselectType = "bike");
		}

		task ("When the user tries to edit the filter") {
			Click(
				key_fieldName = "creator",
				locator1 = "DataSet#VERTICAL_ELLIPSIS_BY_FIELDS_NAME");

			MenuItem.click(menuItem = "Edit");
		}

		task ("And leaves the name field blank and saved") {
			DoubleClick(locator1 = "DataSet#NEW_FILTER_NAME");

			KeyPress(
				locator1 = "DataSet#NEW_FILTER_NAME",
				value1 = "\BACK_SPACE");

			Click(
				key_text = "Save",
				locator1 = "CP2ActivationKeys#KEY_DEACTIVATION_TERMS");
		}

		task ("Then the filter's name is changed, receiving the value "creator"") {
			AssertElementPresent(
				chosenFilter = "creator",
				key_tableColumn = 1,
				key_tableRow = 1,
				locator1 = "DataSet#FILTER_TABLE_CELL");
		}
	}

}