@component-name = "portal-wcm"
definition {

	property ci.retries.disabled = "true";
	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Roles";
	property testray.main.component.name = "Sites Administration";

	static var randomSiteName = StringUtil.randomString(8);
	static var randomUserEmailAddress = StringUtil.randomString(8);
	var userFirstName = StringUtil.randomString(8);
	var userLastName = StringUtil.randomString(8);
	var userScreenName = StringUtil.randomString(8);
	static var randomRoleKey = StringUtil.randomString(8);

	setUp {
		task ("Set up virtual instance") {
			TestCase.setUpPortalInstance();
		}

		task ("Sign in") {
			User.firstLoginPG();
		}

		task ("Add a site") {
			HeadlessSite.addSite(siteName = ${randomSiteName});
		}

		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name");
		}

		task ("Add a Web Content Display to page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name",
				widgetName = "Web Content Display");
		}

		task ("Add a new user") {
			JSONUser.addUser(
				userEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"),
				userFirstName = ${userFirstName},
				userLastName = ${userLastName},
				userScreenName = StringUtil.toLowerCase(${userScreenName}));

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));
		}

		task ("Add a new regular role") {
			JSONRole.addRegularRole(roleTitle = ${randomRoleKey});
		}
	}

	@description = "Assert could add site with Add Site	regular role and could not after removing."
	@priority = 4
	test AddSiteRegRole {
		var siteName = StringUtil.randomString(8);

		task ("Add a regular role and define permissions to access site admin") {
			Permissions.definePermissionsViaJSONAPI(
				resourceNameActionList = "90,VIEW_CONTROL_PANEL:com_liferay_site_admin_web_portlet_SiteAdminPortlet,ACCESS_IN_CONTROL_PANEL:com_liferay_roles_admin_web_portlet_RolesAdminPortlet,ACCESS_IN_CONTROL_PANEL",
				roleTitle = ${randomRoleKey},
				roleType = "regular");

			JSONRole.assignRoleToUser(
				roleTitle = ${randomRoleKey},
				userEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));
		}

		task ("Login as the user with created role") {
			User.logoutAndLoginPG(userLoginEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));
		}

		task ("Assert can not add site") {
			Site.openSitesAdmin();

			AssertElementNotPresent(locator1 = "Button#PLUS");
		}

		task ("Add add site permisssion to the role") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "ADD_COMMUNITY",
				resourceName = 90,
				roleTitle = ${randomRoleKey});
		}

		task ("Assert can add site") {
			Site.openSitesAdmin();

			Site.addBlankCP(siteName = ${siteName});
		}

		task ("Remove add site permisssion to the role") {
			Permissions.removePermissionViaAPI(
				resourceAction = "ADD_COMMUNITY",
				resourceName = 90,
				roleTitle = ${randomRoleKey});
		}

		task ("Assert can not add site with user without add site permission") {
			Site.openSitesAdmin();

			AssertElementNotPresent(locator1 = "Button#PLUS");
		}
	}

	@description = "Assert could find site by site name and view Site Administrator role permissions."
	@priority = 5
	test SearchParenetAndChildSiteAndViewPermissions {
		property portal.acceptance = "true";
		property testray.component.names = "Training";

		var siteName = StringUtil.randomString(8);

		task ("Define permission to access in control panel") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "VIEW_CONTROL_PANEL",
				resourceName = 90,
				roleTitle = ${randomRoleKey});
		}

		task ("Add a child site") {
			HeadlessSite.addSite(siteName = "${siteName} Parent");

			HeadlessSite.addSite(
				parentSiteName = "${siteName} Parent",
				siteName = "${siteName} Child");
		}

		task ("Assign user to parent site") {
			JSONUser.addUserToSite(
				groupName = "${siteName} Parent",
				userEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));
		}

		task ("Assign site administor role to user") {
			JSONGroup.assignGroupRoleToUser(
				groupName = "${siteName} Parent",
				roleTitle = "Site Administrator",
				userEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));
		}

		task ("Assign user to child site") {
			JSONGroup.assignUserToGroup(
				groupName = "${siteName} Child",
				parentGroupName = "${siteName} Parent",
				userEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));
		}

		task ("Assign site administor role to user") {
			JSONGroup.assignGroupRoleToUser(
				groupName = "${siteName} Child",
				parentGroupName = "${siteName} Parent",
				roleTitle = "Site Administrator",
				userEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));
		}

		task ("Search parent site name") {
			Site.openSitesAdmin();

			Search.searchCP(searchTerm = "Parent");
		}

		task ("Assert can find parent site but can't find child site") {
			AssertTextEquals.assertPartialText(
				key_siteName = "${siteName} Parent",
				locator1 = "Sites#SITE_TABLE_NAME",
				value1 = "${siteName} Parent");

			AssertTextNotPresent(value1 = "${siteName} Child");
		}

		task ("Search child site name") {
			Search.searchCP(searchTerm = "Child");
		}

		task ("Assert can find child site but can't find parent site") {
			AssertTextEquals.assertPartialText(
				key_siteName = "${siteName} Child",
				locator1 = "Sites#SITE_TABLE_NAME",
				value1 = "${siteName} Child");

			AssertTextNotPresent(value1 = "${siteName} Parent");
		}

		task ("Only search siteName") {
			Search.searchCP(searchTerm = ${siteName});
		}

		task ("Assert can find child site and parent site") {
			AssertTextEquals.assertPartialText(
				key_siteName = "${siteName} Parent",
				locator1 = "Sites#SITE_TABLE_NAME",
				value1 = "${siteName} Parent");

			AssertTextEquals.assertPartialText(
				key_siteName = "${siteName} Child",
				locator1 = "Sites#SITE_TABLE_NAME",
				value1 = "${siteName} Child");
		}

		task ("View the user has site admin permissions in parent site and child site") {
			Site.viewSiteAdminPermissionsCP(siteName = "${siteName} Parent");

			Site.viewSiteAdminPermissionsCP(siteName = "${siteName} Child");
		}
	}

	@description = "Assert could manage child site with Manage Subsites	site role and could not after removing."
	@priority = 4
	test ViewSiteManageChildSiteSiteRole {
		var roleKey = StringUtil.randomString(8);
		var siteName = StringUtil.randomString(8);

		task ("Log out and log in user with assigned site role and created site and page") {
			JSONRole.addSiteRole(
				roleKey = ${roleKey},
				roleTitle = ${roleKey});

			JSONUser.addUserToSite(
				groupName = ${randomSiteName},
				userEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));
		}

		task ("Add a child site and assign the user to it") {
			HeadlessSite.addSite(
				parentSiteName = ${randomSiteName},
				siteName = "${siteName}1");

			JSONGroup.assignUserToGroup(
				groupName = "${siteName}1",
				parentGroupName = ${randomSiteName},
				userEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));
		}

		task ("Add a regular role and assign it to the user") {
			JSONRole.assignRoleToUser(
				roleTitle = ${randomRoleKey},
				userEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));
		}

		task ("Give permissions to regular role to add site in site admin") {
			Permissions.definePermissionsViaJSONAPI(
				resourceNameActionList = "90,ADD_COMMUNITY,VIEW_CONTROL_PANEL:com_liferay_site_admin_web_portlet_SiteAdminPortlet,ACCESS_IN_CONTROL_PANEL",
				roleTitle = ${randomRoleKey},
				roleType = "regular");
		}

		task ("Give permissions to site role to add and update site") {
			Permissions.definePermissionsViaJSONAPI(
				resourceNameActionList = "com.liferay.portal.kernel.model.Group,ADD_COMMUNITY,UPDATE",
				roleTitle = ${roleKey},
				roleType = "site");
		}

		task ("Logout and login as the created user") {
			User.logoutAndLoginPG(userLoginEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));
		}

		task ("Go to add a child site") {
			Site.openSitesAdmin();

			Site.addBlankCP(
				parentSiteName = ${randomSiteName},
				siteName = "${siteName}2");
		}

		task ("Go to dropdown menu of the child site") {
			Site.openSitesAdmin();

			WaitForPageLoad();

			Click.waitForMenuToggleJSClick(
				key_siteName = "${siteName}1",
				locator1 = "Sites#SITE_TABLE_ACTIONS");
		}

		task ("Assert could not add child site and delete child site") {
			MenuItem.viewNotPresent(menuItem = "Add Child Site");

			MenuItem.viewNotPresent(menuItem = "Delete");
		}

		task ("View child site 2") {
			LexiconTable.clickTableEntryTitle(tableEntry = "${siteName}2");

			AssertTextEquals(
				locator1 = "Portlet#HEADER",
				value1 = "${siteName}2");
		}

		task ("Give permissions to site role to manage child site") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "MANAGE_SUBGROUPS",
				resourceName = "com.liferay.portal.kernel.model.Group",
				roleTitle = ${roleKey},
				roleType = "site");
		}

		task ("Go to view child site 1 and child site 2 as new user") {
			User.logoutAndLoginPG(userLoginEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));

			Site.openSitesAdmin();

			WaitForPageLoad();

			LexiconTable.clickTableEntryTitle(tableEntry = "${siteName}1");

			AssertTextEquals(
				locator1 = "Portlet#HEADER",
				value1 = "${siteName}1");

			Site.openSitesAdmin();

			WaitForPageLoad();

			LexiconTable.clickTableEntryTitle(tableEntry = "${siteName}2");

			AssertTextEquals(
				locator1 = "Portlet#HEADER",
				value1 = "${siteName}2");
		}

		task ("Remove permissions to site role to manage child site") {
			Permissions.removePermissionViaAPI(
				resourceAction = "MANAGE_SUBGROUPS",
				resourceName = "com.liferay.portal.kernel.model.Group",
				roleTitle = ${roleKey},
				roleType = "site");
		}

		task ("view could not add child site and delete child site 1 as new user") {
			Site.openSitesAdmin();

			WaitForPageLoad();

			Click.waitForMenuToggleJSClick(
				key_siteName = "${siteName}1",
				locator1 = "Sites#SITE_TABLE_ACTIONS");

			MenuItem.viewNotPresent(menuItem = "Add Child Site");

			MenuItem.viewNotPresent(menuItem = "Delete");
		}

		task ("View child site 2") {
			LexiconTable.clickTableEntryTitle(tableEntry = "${siteName}2");

			AssertTextEquals(
				locator1 = "Portlet#HEADER",
				value1 = "${siteName}2");
		}
	}

	@description = "Assert could manage pages with Manage Pages	regular role and could not after removing."
	@priority = 4
	test ViewSiteManagePagesRegRole {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Get site name") {
			Navigator.openURL();

			var siteName = selenium.getText("Home#SITE_NAME");
		}

		task ("Log out and log in user with assigned regular role") {
			JSONRole.assignRoleToUser(
				roleTitle = ${randomRoleKey},
				userEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));
		}

		task ("Give permissions to regular role to go to view site admin") {
			Permissions.definePermissionsViaJSONAPI(
				resourceNameActionList = "90,VIEW_CONTROL_PANEL:com_liferay_site_admin_web_portlet_SiteAdminPortlet,ACCESS_IN_CONTROL_PANEL",
				roleTitle = ${randomRoleKey},
				roleType = "regular");
		}

		task ("Assert could not view site as new user") {
			User.logoutAndLoginPG(userLoginEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));

			Site.openSitesAdmin();

			AssertTextEquals.assertPartialText(
				locator1 = "Message#EMPTY_INFO",
				value1 = "No sites were found.");
		}

		task ("Give permissions to regular role to go to view site and manage page") {
			Permissions.definePermissionsViaJSONAPI(
				resourceNameActionList = "com.liferay.portal.kernel.model.Group,MANAGE_LAYOUTS,VIEW",
				roleTitle = ${randomRoleKey},
				roleType = "regular");
		}

		task ("Assert could view site and manage page as new user") {
			User.logoutAndLoginPG(userLoginEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));

			Site.openSitesAdmin();

			LexiconTable.viewTableEntryTitleLink(tableEntry = ${siteName});

			LexiconTable.viewTableEntryTitleLink(tableEntry = ${randomSiteName});
		}

		task ("Remove permissions of regular role to go to view site and manage page") {
			Permissions.removePermissionViaAPI(
				resourceAction = "VIEW",
				resourceName = "com.liferay.portal.kernel.model.Group",
				roleTitle = ${randomRoleKey});

			Permissions.removePermissionViaAPI(
				resourceAction = "MANAGE_LAYOUTS",
				resourceName = "com.liferay.portal.kernel.model.Group",
				roleTitle = ${randomRoleKey});
		}

		task ("Assert could not view site as new user") {
			User.logoutAndLoginPG(userLoginEmailAddress = StringUtil.toLowerCase("${randomUserEmailAddress}@liferay.com"));

			Site.openSitesAdmin();

			AssertTextEquals.assertPartialText(
				locator1 = "Message#EMPTY_INFO",
				value1 = "No sites were found.");
		}
	}

}