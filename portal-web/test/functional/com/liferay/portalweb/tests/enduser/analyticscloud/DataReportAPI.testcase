@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		task ("Copy the token from AC") {
			ACUtils.launchAC();
		}

		task ("Navigate to settings > Api") {
			ACNavigation.goToSettings();

			ACSettings.goToApis();
		}
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		ACUtils.tearDownDXP();

		ACUtils.launchAC();

		ACNavigation.goToSettings();

		ACSettings.goToApis();

		ACUtils.clickAnyButton(button = "Revoke");

		ACUtils.clickAnyButton(button = "Continue");

		// It is not possible to delete properties and data source after LRAC-13389. This functionality should return after LRAC-8040

		//ACUtils.tearDownAC();

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONUser.tearDownNonAdminUsers();

			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}
	}

	@description = "Feature ID: LRAC-8103 | Automation ID: LRAC-11502 | Test Summary: Assert the user is able to query data using Analytics Cloud API"
	@priority = 3
	test CreateQueryDataWithAnalyticsCloudAPI {
		var typeList = "blogs,documents-and-media,forms,individuals,pages,segments,web-contents";

		task ("Get the token value") {
			var token = ACApi.getTokenValue();
		}

		task ("Create a query data using analytics cloud API") {
			ACApi.createDataReport(token = ${token});
		}

		task ("Check the list of endpoints that are available for querying in the API") {
			ACApi.viewApiResponseForRootEndpoint(typeList = ${typeList});
		}
	}

	@description = "Feature ID: LRAC-12919 | Automation ID: LRAC-13511 | Test Summary: Check that an error message appears when using an invalid type in the endpoint"
	@priority = 2
	test RequestShowErrorMessageWhenUseInvalidType {
		property portal.upstream = "quarantine";

		// AC Quarantine Reason: Test fix sites incorrect error message
		// AC Quarantine Ticket: LRAC-13783

		var typeList = "accounts,acqa";
		var message = "The \"type\" query parameter must be either blogs, documents-and-media, forms, individuals, pages, segments, or web-contents.";
		var analyticsCloudURL = PropsUtil.get("analytics.cloud.url");

		task ("Get the token value") {
			var token = ACApi.getTokenValue();
		}

		for (var type : list ${typeList}) {
			task ("Create a data report using analytics cloud API with invalid type") {
				var curl = '''
					${analyticsCloudURL}/api/reports/${type} -H "Authorization: Bearer ${token}"
				''';

				var apiResponse = JSONCurlUtil.get(${curl}, "$");
			}

			task ("Check if the API response is correct for the error case") {
				ACApi.viewApiResponseForError(message = ${message});
			}
		}
	}

	@description = "Feature ID: LRAC-12919 | Automation ID: LRAC-13479 | Test Summary: Check that you can access data from all existing blogs"
	@priority = 4
	test RequestToAccessDataForAllBlogs {
		var blogsTitleList = "Blog AC Title 1,Blog AC Title 2";
		var type = "blogs";
		var range = "rangeKey";
		var rangeValue = 0;

		task ("Copy the token value for the API") {
			var token = ACApi.getTokenValue();
		}

		task ("Take the token from Analytics Cloud") {
			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Go to DXP and create a site and two blogs and then connect Analytics Cloud to DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();

			ACUtils.addSiteAndPage();

			for (var blogTitle : list ${blogsTitleList}) {
				ACUtils.createBlogsAndAddToPage(entryTitle = ${blogTitle});
			}

			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Visit the two blogs") {
			ACUtils.navigateToSitePage(
				actionType = "View Blog",
				documentTitleList = ${blogsTitleList},
				pageName = "AC Page",
				siteName = "Site Name");

			ACUtils.closeAllSessionsAndWait();
		}

		task ("Create a data report using analytics cloud API with the type blogs") {
			ACApi.createDataReport(
				filter = ${range},
				filterValue = ${rangeValue},
				token = ${token},
				type = ${type});
		}

		task ("Assert the two created blogs are present in the response") {
			ACApi.assertApiResponse(
				apiDataResponse = ${apiResponse},
				expectedList = ${blogsTitleList});
		}
	}

	@description = "Feature ID: LRAC-12919 | Automation ID: LRAC-13504 | Test Summary: Check that you can access data from all existing Documents and Media"
	@priority = 4
	test RequestToAccessDataForAllDocumentsAndMedia {
		var documentsMediaTitleList = "DM AC Title 1,DM AC Title 2";
		var type = "documents-and-media";
		var range = "rangeKey";
		var rangeValue = 0;

		task ("Copy the token value for the API") {
			var token = ACApi.getTokenValue();
		}

		task ("Take the token from Analytics Cloud") {
			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Go to DXP and create a site and two documents and media, then connect Analytics Cloud to DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();

			ACUtils.addSiteAndPage();

			for (var n : list "1,2") {
				ACUtils.createDMAndAddToPage(
					dmDocumentFile = "Document_${n}.jpg",
					dmDocumentTitle = "DM AC Title ${n}");
			}

			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("View the documents and media page") {
			ACUtils.navigateToSitePage(
				actionType = "View DM",
				documentTitleList = ${documentsMediaTitleList},
				pageName = "AC Page",
				siteName = "Site Name");

			ACUtils.closeAllSessionsAndWait();
		}

		task ("Create a data report using analytics cloud API with the type documents and media") {
			ACApi.createDataReport(
				filter = ${range},
				filterValue = ${rangeValue},
				token = ${token},
				type = ${type});
		}

		task ("Assert the two created documents and media are present in the response") {
			ACApi.assertApiResponse(
				apiDataResponse = ${apiResponse},
				expectedList = ${documentsMediaTitleList});
		}
	}

	@description = "Feature ID: LRAC-12919 | Automation ID: LRAC-13489 | Test Summary: Check if you can access data from all existing pages"
	@priority = 4
	test RequestToAccessDataForAllExistingPages {
		var webContentPage = "WC Page";

		var pageTitleList = "AC Page,${webContentPage}";
		var type = "pages";
		var range = "rangeKey";
		var rangeValue = 0;

		task ("Copy the token value for the API") {
			var token = ACApi.getTokenValue();
		}

		task ("Take the token from Analytics Cloud") {
			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Go to DXP and create a site and two pages and then connect Analytics Cloud to DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();

			task ("Create the first web content") {
				ACUtils.addSiteAndPage();

				ACUtils.createWCAndAddToPage(webContentTitle = "WC AC Title 1");
			}

			task ("Create the second web content") {
				ACUtils.addPage(layoutName = ${webContentPage});

				ACUtils.createWCAndAddToPage(
					layoutName = ${webContentPage},
					webContentTitle = "WC AC Title 2");
			}

			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Visit the first page") {
			ACUtils.navigateToSitePage(
				actionType = "View WC",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Visit the second page") {
			ACUtils.navigateToSitePage(
				actionType = "View WC",
				pageName = ${webContentPage},
				siteName = "Site Name");

			ACUtils.closeAllSessionsAndWait();
		}

		task ("Create a data report using analytics cloud API with the type pages") {
			ACApi.createDataReport(
				filter = ${range},
				filterValue = ${rangeValue},
				token = ${token},
				type = ${type});
		}

		task ("Assert the two created pages are present in the response") {
			ACApi.assertApiResponse(
				apiDataResponse = ${apiResponse},
				expectedList = ${pageTitleList});
		}
	}

	@description = "Feature ID: LRAC-12919 | Automation ID: LRAC-13506 | Test Summary: Check that you can access data from all existing Forms"
	@priority = 4
	test RequestToAccessDataForAllForms {
		var formsTitleList = "Form AC Title 1,Form AC Title 2";
		var formPageName = "Forms page";
		var type = "forms";
		var range = "rangeKey";
		var rangeValue = 0;

		task ("Copy the token value for the API") {
			var token = ACApi.getTokenValue();
		}

		task ("Take the token from Analytics Cloud") {
			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Go to DXP and create a site and two forms and then connect Analytics Cloud to DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();

			task ("Create the first form") {
				ACUtils.addSiteAndPage();

				ACUtils.createFormAndAddToPage(formAcTitle = "Form AC Title 1");
			}

			task ("Create the second form") {
				ACUtils.addPage(layoutName = ${formPageName});

				ACUtils.createFormAndAddToPage(
					formAcTitle = "Form AC Title 2",
					layoutName = ${formPageName});
			}

			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Visit the first form") {
			ACUtils.navigateToSitePage(
				actionType = "View Form",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Visit the second form") {
			ACUtils.navigateToSitePage(
				actionType = "View Form",
				pageName = ${formPageName},
				siteName = "Site Name");

			ACUtils.closeAllSessionsAndWait();
		}

		task ("Create a data report using analytics cloud API with the type forms") {
			ACApi.createDataReport(
				filter = ${range},
				filterValue = ${rangeValue},
				token = ${token},
				type = ${type});
		}

		task ("Assert the two created forms are present in the response") {
			ACApi.assertApiResponse(
				apiDataResponse = ${apiResponse},
				expectedList = ${formsTitleList});
		}
	}

	@description = "Feature ID: LRAC-12919 | Automation ID: LRAC-13491 | Test Summary: Check that you can access the data of all individuals in the workspace"
	@priority = 4
	test RequestToAccessDataForAllIndividuals {
		var type = "individuals";
		var userNameList = "ac,bq";
		var emailList = "ac@liferay.com,bq@liferay.com";

		task ("Copy the token value for the API and copy the token for the AC and DXP connection") {
			var token = ACApi.getTokenValue();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Take the token from Analytics Cloud") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();

			ACUtils.addSiteAndPage();
		}

		task ("Add 2 users") {
			for (var name : list ${userNameList}) {
				JSONUser.addUser(
					userEmailAddress = "${name}@liferay.com",
					userFirstName = ${name},
					userLastName = ${name},
					userScreenName = ${name});

				JSONUser.setFirstPassword(
					agreeToTermsAndAnswerReminderQuery = "true",
					requireReset = "false",
					userEmailAddress = "${name}@liferay.com");
			}
		}

		task ("Connect AC and DXP") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Visit the site page") {
			ACUtils.navigateToSitePageWithUser(
				emailList = ${emailList},
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Create a data report using analytics cloud API with the type individuals") {
			ACApi.createDataReport(
				token = ${token},
				type = ${type});
		}

		task ("Assert the two individuals are present in the API response") {
			ACApi.assertApiResponse(
				apiDataResponse = ${apiResponse},
				expectedList = ${userNameList});
		}
	}

	@description = "Feature ID: LRAC-12919 | Automation ID: LRAC-13495 | Test Summary: Check that you can access data from all existing segments"
	@priority = 4
	test RequestToAccessDataForAllSegments {
		var segmentsTitleList = "Dynamic Segment Test 1,Dynamic Segment Test 2";
		var type = "segments";

		task ("Copy the token value for the API") {
			var token = ACApi.getTokenValue();
		}

		task ("Take the token from Analytics Cloud") {
			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Go to DXP and create a site and then connect Analytics Cloud to DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();

			ACUtils.addSiteAndPage();

			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Visit the site page") {
			ACUtils.navigateToSitePage(
				pageName = "AC Page",
				siteName = "Site Name");

			ACUtils.closeAllSessionsAndWait();
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = ${assignedPropertyName});
		}

		task ("Create two dynamic segments") {
			for (var n : list "1,2") {
				ACNavigation.goToSegments();

				ACSegments.createDynamicSegment();

				ACUtils.setItemName(itemName = "Dynamic Segment Test ${n}");

				ACSegments.goToSidebarAttributes(criterion = "Individual Attributes");

				ACSegments.addSegmentField(segmentField = "email");

				ACSegments.editTextCriterion(textInput = "test@liferay.com");

				ACSegments.saveSegment();
			}
		}

		task ("Create a data report using analytics cloud API with the type segments") {
			ACApi.createDataReport(
				token = ${token},
				type = ${type});
		}

		task ("Assert the three created segments are present in the response (one segment created by the user + two segments of the demo data)") {
			ACApi.assertApiResponse(
				apiDataResponse = ${apiResponse},
				expectedList = ${segmentsTitleList});
		}
	}

	@description = "Feature ID: LRAC-12919 | Automation ID: LRAC-13508 | Test Summary: Check that you can access data from all existing Web Content"
	@priority = 4
	test RequestToAccessDataForAllWebContent {
		var webContentTitleList = "WC AC Title 1,WC AC Title 2";
		var type = "web-contents";
		var range = "rangeKey";
		var rangeValue = 0;

		task ("Copy the token value for the API") {
			var token = ACApi.getTokenValue();
		}

		task ("Take the token from Analytics Cloud") {
			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Go to DXP and create a site and two web contents and then connect Analytics Cloud to DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();

			ACUtils.addSiteAndPage();

			task ("Create the first web content") {
				ACUtils.createWCAndAddToPage(
					portletIndex = 1,
					webContentTitle = "WC AC Title 1");
			}

			task ("Create the second web content") {
				ACUtils.createWCAndAddToPage(
					portletIndex = 2,
					webContentTitle = "WC AC Title 2");
			}

			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Visit the two web contents") {
			ACUtils.navigateToSitePage(
				actionType = "View WC",
				documentTitleList = ${webContentTitleList},
				pageName = "AC Page",
				siteName = "Site Name");

			ACUtils.closeAllSessionsAndWait();
		}

		task ("Create a data report using analytics cloud API with the type web content") {
			ACApi.createDataReport(
				filter = ${range},
				filterValue = ${rangeValue},
				token = ${token},
				type = ${type});
		}

		task ("Assert the two created web contents are present in the response") {
			ACApi.assertApiResponse(
				apiDataResponse = ${apiResponse},
				expectedList = ${webContentTitleList});
		}
	}

	@description = "Feature ID: LRAC-12919 | Automation ID: LRAC-13503 | Test Summary: Check if you can access data for a specific blog"
	@priority = 3
	test RequestToAccessDataForSpecificBlog {
		var blogsTitleList = "Blog AC Title 1,Blog AC Title 2";
		var type = "blogs";
		var range = "rangeKey";
		var rangeValue = 0;

		task ("Copy the token value for the API") {
			var token = ACApi.getTokenValue();
		}

		task ("Take the token from Analytics Cloud") {
			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Go to DXP and create a site and two blogs and then connect Analytics Cloud to DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();

			ACUtils.addSiteAndPage();

			for (var blogTitle : list ${blogsTitleList}) {
				ACUtils.createBlogsAndAddToPage(entryTitle = ${blogTitle});
			}

			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Visit the two blogs") {
			ACUtils.navigateToSitePage(
				actionType = "View Blog",
				documentTitleList = "Blog AC Title 1,Blog AC Title 2",
				pageName = "AC Page",
				siteName = "Site Name");

			ACUtils.closeAllSessionsAndWait();
		}

		task ("Create a data report using analytics cloud API with the type blogs") {
			ACApi.createDataReport(
				filter = ${range},
				filterValue = ${rangeValue},
				token = ${token},
				type = ${type});
		}

		task ("Assert the total items of the response is 2 (because we have just 2 blogs)") {
			var totalValue = ACApi.searchApiResponse(
				apiDataResponse = ${apiResponse},
				jsonQuery = "total");

			TestUtils.assertEquals(
				actual = ${totalValue},
				expected = 2);
		}

		task ("Get the id of the blog in the first position of the response") {
			var blogId = ACApi.searchApiResponse(
				apiDataResponse = ${apiResponse},
				jsonQuery = "id",
				resultPosition = 0);
		}

		task ("Create a data report using analytics API for the specific blog chosen") {
			ACApi.createIndividualOrAssetDataReport(
				id = ${blogId},
				token = ${token},
				type = ${type});
		}

		task ("Assert that there's only one result in the response") {
			var searchedValue = ACApi.searchApiResponse(
				apiDataResponse = ${apiIndividualOrAssetResponse},
				jsonQuery = "total");

			TestUtils.assertEquals(
				actual = ${searchedValue},
				expected = "");
		}

		task ("Assert that the result matches with the blog id") {
			ACApi.assertApiResponse(
				apiDataResponse = ${apiIndividualOrAssetResponse},
				expectedList = ${blogId});
		}
	}

	@description = "Feature ID: LRAC-12919 | Automation ID: LRAC-13510 | Test Summary: Check if it is possible to filter the API response data only for the channelID that was chosen"
	@ignore = "true"
	@priority = 4
	test RequestToAccessDataForSpecificChannelID {

		// AC Bug: Unable to search using special characters
		// AC Bug ticket: LRAC-13715

		var blogsTitleList = "Blog AC Title 1,Blog AC Title 2";
		var type = "blogs";
		var range = "rangeKey";
		var rangeValue = 0;
		var analyticsCloudURL = PropsUtil.get("analytics.cloud.url");

		task ("Copy the token value for the API") {
			var token = ACApi.getTokenValue();
		}

		task ("Take the token from Analytics Cloud") {
			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Go to DXP and create a site and two blogs and then connect Analytics Cloud to DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();

			ACUtils.addSiteAndPage();

			for (var blogTitle : list ${blogsTitleList}) {
				ACUtils.createBlogsAndAddToPage(entryTitle = ${blogTitle});
			}

			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Visit the first blog") {
			ACUtils.navigateToSitePage(
				actionType = "View Blog",
				documentTitleList = "Blog AC Title 1",
				pageName = "AC Page",
				siteName = "Site Name");

			ACUtils.closeAllSessionsAndWait();
		}

		task ("Get the channelId from the first property") {
			ACUtils.launchAC();

			ACNavigation.goToSettings();

			var channelId1 = ACSettings.getPropertyId(propertyName = ${assignedPropertyName});

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Disconnect and Connect AC with DXP again using different property") {
			ACUtils.launchDXP();

			ACDXPSettings.disconnectDXPFromAnalyticsCloud();

			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Visit the two blogs") {
			ACUtils.navigateToSitePage(
				actionType = "View Blog",
				documentTitleList = ${blogsTitleList},
				pageName = "AC Page",
				siteName = "Site Name");

			ACUtils.closeAllSessionsAndWait();
		}

		task ("Get the channelId from the second property") {
			ACUtils.launchAC();

			ACNavigation.goToSettings();

			var channelId2 = ACSettings.getPropertyId(propertyName = ${assignedPropertyName});
		}

		task ("Create a data report using analytics cloud API with the type blogs and filtering only by the first property") {
			var curl = '''
				${analyticsCloudURL}/api/reports/${type}\?${range}=${rangeValue}\&channelId=${channelId1} -H "Authorization: Bearer ${token}"
			''';

			var apiResponse = JSONCurlUtil.get(${curl});
		}

		task ("Check that the first Blog appears in the API response") {
			ACApi.assertApiResponse(
				apiDataResponse = ${apiResponse},
				expectedList = "Blog AC Title 1");
		}

		task ("Check that the second Blog does not appear in the API response") {
			ACApi.assertApiResponseNotContain(
				apiDataResponse = ${apiResponse},
				expectedList = "Blog AC Title 2");
		}

		task ("Create a data report using analytics cloud API with the type blogs and filtering only by the second property") {
			var curl = '''
				${analyticsCloudURL}/api/reports/${type}\?${range}=${rangeValue}\&channelId=${channelId2} -H "Authorization: Bearer ${token}"
			''';

			var apiResponse = JSONCurlUtil.get(${curl});
		}

		task ("Check that both blogs appear in the API response") {
			ACApi.assertApiResponse(
				apiDataResponse = ${apiResponse},
				expectedList = ${blogsTitleList});
		}
	}

	@description = "Feature ID: LRAC-12919 | Automation ID: LRAC-13504 | Test Summary: Check if you can access data for a specific Documents and Media"
	@priority = 3
	test RequestToAccessDataForSpecificDocumentsAndMedia {
		var documentsMediaTitleList = "DM AC Title 1,DM AC Title 2";
		var type = "documents-and-media";
		var range = "rangeKey";
		var rangeValue = 0;

		task ("Copy the token value for the API") {
			var token = ACApi.getTokenValue();
		}

		task ("Take the token from Analytics Cloud") {
			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Go to DXP and create a site and two documents and media, then connect Analytics Cloud to DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();

			ACUtils.addSiteAndPage();

			for (var n : list "1,2") {
				ACUtils.createDMAndAddToPage(
					dmDocumentFile = "Document_${n}.jpg",
					dmDocumentTitle = "DM AC Title ${n}");
			}

			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("View the documents and media page") {
			ACUtils.navigateToSitePage(
				actionType = "View DM",
				documentTitleList = ${documentsMediaTitleList},
				pageName = "AC Page",
				siteName = "Site Name");

			ACUtils.closeAllSessionsAndWait();
		}

		task ("Create a data report using analytics cloud API with the type documents and media") {
			ACApi.createDataReport(
				filter = ${range},
				filterValue = ${rangeValue},
				token = ${token},
				type = ${type});
		}

		task ("Assert the total items of the response is 2 (because we have just 2 documents and media)") {
			var totalValue = ACApi.searchApiResponse(
				apiDataResponse = ${apiResponse},
				jsonQuery = "total");

			TestUtils.assertEquals(
				actual = ${totalValue},
				expected = 2);
		}

		task ("Get the id of the document and media in the first position of the response") {
			var documentAndMediaId = ACApi.searchApiResponse(
				apiDataResponse = ${apiResponse},
				jsonQuery = "id",
				resultPosition = 0);
		}

		task ("Create a data report using analytics API for the specific document and media chosen") {
			ACApi.createIndividualOrAssetDataReport(
				id = ${documentAndMediaId},
				token = ${token},
				type = ${type});
		}

		task ("Assert that there's only one result in the response") {
			var searchedValue = ACApi.searchApiResponse(
				apiDataResponse = ${apiIndividualOrAssetResponse},
				jsonQuery = "total");

			TestUtils.assertEquals(
				actual = ${searchedValue},
				expected = "");
		}

		task ("Assert that the result matches with the document and media id") {
			ACApi.assertApiResponse(
				apiDataResponse = ${apiIndividualOrAssetResponse},
				expectedList = ${documentAndMediaId});
		}
	}

	@description = "Feature ID: LRAC-12919 | Automation ID: LRAC-13507 | Test Summary: Check if you can access data for a specific Forms"
	@priority = 4
	test RequestToAccessDataForSpecificForm {
		var formsTitleList = "Form AC Title 1,Form AC Title 2";
		var formPageName = "Forms page";
		var type = "forms";
		var range = "rangeKey";
		var rangeValue = 0;

		task ("Copy the token value for the API") {
			var token = ACApi.getTokenValue();
		}

		task ("Take the token from Analytics Cloud") {
			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Go to DXP and create a site and two forms and then connect Analytics Cloud to DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();

			task ("Create the first form") {
				ACUtils.addSiteAndPage();

				ACUtils.createFormAndAddToPage(formAcTitle = "Form AC Title 1");
			}

			task ("Create the second form") {
				ACUtils.addPage(layoutName = ${formPageName});

				ACUtils.createFormAndAddToPage(
					formAcTitle = "Form AC Title 2",
					layoutName = ${formPageName});
			}

			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Visit the first form") {
			ACUtils.navigateToSitePage(
				actionType = "View Form",
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Visit the second form") {
			ACUtils.navigateToSitePage(
				actionType = "View Form",
				pageName = ${formPageName},
				siteName = "Site Name");

			ACUtils.closeAllSessionsAndWait();
		}

		task ("Create a data report using analytics cloud API with the type forms") {
			ACApi.createDataReport(
				filter = ${range},
				filterValue = ${rangeValue},
				token = ${token},
				type = ${type});
		}

		task ("Assert the total items of the response is 2 (because we have just 2 forms)") {
			var totalValue = ACApi.searchApiResponse(
				apiDataResponse = ${apiResponse},
				jsonQuery = "total");

			TestUtils.assertEquals(
				actual = ${totalValue},
				expected = 2);
		}

		task ("Get the id of the form in the first position of the response") {
			var formId = ACApi.searchApiResponse(
				apiDataResponse = ${apiResponse},
				jsonQuery = "id",
				resultPosition = 0);
		}

		task ("Create a data report using analytics API for the specific form chosen") {
			ACApi.createIndividualOrAssetDataReport(
				id = ${formId},
				token = ${token},
				type = ${type});
		}

		task ("Assert that there's only one result in the response") {
			var searchedValue = ACApi.searchApiResponse(
				apiDataResponse = ${apiIndividualOrAssetResponse},
				jsonQuery = "total");

			TestUtils.assertEquals(
				actual = ${searchedValue},
				expected = "");
		}

		task ("Assert that the result matches with the form id") {
			ACApi.assertApiResponse(
				apiDataResponse = ${apiIndividualOrAssetResponse},
				expectedList = ${formId});
		}
	}

	@description = "Feature ID: LRAC-12919 | Automation ID: LRAC-13492 | Test Summary: Check that you can access the activities of a specific individual"
	@priority = 3
	test RequestToAccessDataForSpecificIndividual {
		var type = "individuals";
		var usernameList = "analytics,cloud";
		var emailList = "analytics@liferay.com,cloud@liferay.com";

		task ("Copy the token value for the API and copy the token for the AC and DXP connection") {
			var token = ACApi.getTokenValue();

			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Take the token from Analytics Cloud") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();

			ACUtils.addSiteAndPage();
		}

		task ("Add 2 users") {
			for (var name : list ${usernameList}) {
				JSONUser.addUser(
					userEmailAddress = "${name}@liferay.com",
					userFirstName = ${name},
					userLastName = ${name},
					userScreenName = ${name});

				JSONUser.setFirstPassword(
					agreeToTermsAndAnswerReminderQuery = "true",
					requireReset = "false",
					userEmailAddress = "${name}@liferay.com");
			}
		}

		task ("Connect AC and DXP") {
			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Visit the site page") {
			ACUtils.navigateToSitePageWithUser(
				emailList = ${emailList},
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Create a data report using analytics cloud API with the type individuals") {
			ACApi.createDataReport(
				token = ${token},
				type = ${type});
		}

		task ("Assert the total of the response is two, because we have only two individuals") {
			var oldTotalValue = ACApi.searchApiResponse(
				apiDataResponse = ${apiResponse},
				jsonQuery = "total");

			TestUtils.assertEquals(
				actual = ${oldTotalValue},
				expected = 2);
		}

		task ("Get the id of the first individual") {
			var individualId = ACApi.searchApiResponse(
				apiDataResponse = ${apiResponse},
				jsonQuery = "id",
				resultPosition = 0);
		}

		task ("Create a new report for the specific individual") {
			ACApi.createIndividualOrAssetDataReport(
				id = ${individualId},
				token = ${token},
				type = ${type});
		}

		task ("Assert that there is only one result in the response (the individual that is being searched)") {
			var currentTotalValue = ACApi.searchApiResponse(
				apiDataResponse = ${apiIndividualOrAssetResponse},
				jsonQuery = "total");

			TestUtils.assertEquals(
				actual = ${currentTotalValue},
				expected = "");
		}

		task ("Assert that the id of the individual is present in the response") {
			ACApi.assertApiResponse(
				apiDataResponse = ${apiIndividualOrAssetResponse},
				expectedList = ${individualId});
		}
	}

	@description = "Feature ID: LRAC-12919 | Automation ID: LRAC-13509 | Test Summary: Check if you can access data for a specific Web Content"
	@priority = 4
	test RequestToAccessDataForSpecificWebContent {
		property portal.upstream = "quarantine";

		// AC Quarantine Reason: Test fix sending too many requests
		// AC Quarantine Ticket: LRAC-13756

		var webContentTitleList = "WC AC Title 1,WC AC Title 2";
		var type = "web-contents";
		var range = "rangeKey";
		var rangeValue = 0;

		task ("Copy the token value for the API") {
			var token = ACApi.getTokenValue();
		}

		task ("Take the token from Analytics Cloud") {
			ACSettings.takeTokenFromAnalyticsCloud();
		}

		task ("Go to DXP and create a site and two web contents and then connect Analytics Cloud to DXP") {
			TestCase.setUpPortalInstance();

			ACUtils.launchDXP();

			ACUtils.addSiteAndPage();

			task ("Create the first web content") {
				ACUtils.createWCAndAddToPage(
					portletIndex = 1,
					webContentTitle = "WC AC Title 1");
			}

			task ("Create the second web content") {
				ACUtils.createWCAndAddToPage(
					portletIndex = 2,
					webContentTitle = "WC AC Title 2");
			}

			ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("Visit the two web contents") {
			ACUtils.navigateToSitePage(
				actionType = "View WC",
				documentTitleList = ${webContentTitleList},
				pageName = "AC Page",
				siteName = "Site Name");

			ACUtils.closeAllSessionsAndWait();
		}

		task ("Create a data report using analytics cloud API with the type web content") {
			ACApi.createDataReport(
				filter = ${range},
				filterValue = ${rangeValue},
				token = ${token},
				type = ${type});
		}

		task ("Assert the total items of the response is 2 (because we have just 2 web content)") {
			var totalValue = ACApi.searchApiResponse(
				apiDataResponse = ${apiResponse},
				jsonQuery = "total");

			TestUtils.assertEquals(
				actual = ${totalValue},
				expected = 2);
		}

		task ("Get the id of the web content in the first position of the response") {
			var webContentId = ACApi.searchApiResponse(
				apiDataResponse = ${apiResponse},
				jsonQuery = "id",
				resultPosition = 0);
		}

		task ("Create a data report using analytics API for the specific web content chosen") {
			ACApi.createIndividualOrAssetDataReport(
				id = ${webContentId},
				token = ${token},
				type = ${type});
		}

		task ("Assert that there's only one result in the response") {
			var searchedValue = ACApi.searchApiResponse(
				apiDataResponse = ${apiIndividualOrAssetResponse},
				jsonQuery = "total");

			TestUtils.assertEquals(
				actual = ${searchedValue},
				expected = "");
		}

		task ("Assert the two created web contents are present in the response") {
			ACApi.assertApiResponse(
				apiDataResponse = ${apiResponse},
				expectedList = ${webContentTitleList});
		}
	}

}