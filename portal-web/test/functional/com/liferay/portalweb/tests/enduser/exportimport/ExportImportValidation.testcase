@component-name = "portal-staging"
definition {

	property ci.retries.disabled = "true";
	property custom.properties = "virtual.hosts.default.site.name=Guest";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Export/Import Framework";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			WebContent.tearDownCP();
		}
	}

	@description = "This is a use case for LPS-184978. TC-1 and TC-3: Custom URL can bypass validation if the custom URL match with URL Pattern in System Settings."
	@priority = 5
	test CustomURLCanBypassValidationIfMatchWithURLPatternInSystemSettings {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("When: Not set URL Pattern in System Settings") {
			StagingNavigator.openToConfigInSystemSettings(portlet = "Export/Import, Staging");

			AssertTextEquals(
				locator1 = "ExportImport#URL_PATTERN",
				value1 = "");

			takeScreenshot();
		}

		task ("Then: Custom URLs cannot bypass validation") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(webContentTitle = "Web Content Title");

			var portalURL = PropsUtil.get("portal.url");

			ExportImport.addSourceContent(content = '''<p><a href="${portalURL}/dl/XYZ123">${portalURL}/dl/XYZ123</a></p>''');

			Button.clickPublish();

			ExportImport.viewValidationMessage(
				url = "/dl/XYZ123",
				urlPattern = "/dl");
		}

		task ("When: Add custom URL in URL Pattern in System Settings") {
			StagingNavigator.openToConfigInSystemSettings(portlet = "Export/Import, Staging");

			ExportImport.configureURLPattern(urlPattern = "/dl/*");
		}

		task ("Then: Custom URL can bypass validation") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(webContentTitle = "Web Content Title");

			var portalURL = PropsUtil.get("portal.url");

			ExportImport.addSourceContent(content = '''<p><a href="${portalURL}/dl/XYZ123">${portalURL}/dl/XYZ123</a></p>''');

			PortletEntry.publish();
		}
	}

	@description = "This is a use case for LPS-184978. TC-12: Reset default values should take effect on URL Pattern in Instance Settings. Blocked by LPS-187606"
	@ignore = "true"
	@priority = 5
	test CustomURLCannotBypassValidationAfterResetDefaultValues {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given: Add URL Pattern in Instance Settings") {
			StagingNavigator.openToConfigInInstanceSettings(portlet = "Export/Import, Staging");

			ExportImport.configureURLPattern(urlPattern = "/dl/*");
		}

		task ("And: Add a web content entry with custom URL") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(webContentTitle = "Web Content Title A");

			var portalURL = PropsUtil.get("portal.url");

			ExportImport.addSourceContent(content = '''<p><a href="${portalURL}/dl/XYZ123">${portalURL}/dl/XYZ123</a></p>''');

			PortletEntry.publish();
		}

		task ("When: Reset default values in Instance Settings") {
			StagingNavigator.openToConfigInInstanceSettings(portlet = "Export/Import, Staging");

			SystemSettings.resetConfiguration();
		}

		task ("Then: Custom URL cannot bypass validation") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(webContentTitle = "Web Content Title B");

			var portalURL = PropsUtil.get("portal.url");

			ExportImport.addSourceContent(content = '''<p><a href="${portalURL}/dl/XYZ123">${portalURL}/dl/XYZ123</a></p>''');

			Button.clickPublish();

			ExportImport.viewValidationMessage(
				url = "/dl/XYZ123",
				urlPattern = "/dl");
		}
	}

	@description = "This is a use case for LPS-184978. TC-8: URL Pattern can be added with multiple custom URLs in Instance Settings."
	@priority = 5
	test MultipleURLPatternCanBeAddedInInstanceSettings {
		task ("When: Add multiple URL Pattern in Instance Settings") {
			StagingNavigator.openToConfigInInstanceSettings(portlet = "Export/Import, Staging");

			ExportImport.configureURLPattern(
				multipleURL = "/files/MyFileToLinkToWebContent",
				urlPattern = "/dl/*");
		}

		task ("Then: Custom URL can bypass validation if custom URL match with URL Patterns") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(webContentTitle = "Web Content Title");

			var portalURL = PropsUtil.get("portal.url");

			ExportImport.addSourceContent(content = '''<p><a href="${portalURL}/files/MyFileToLinkToWebContent">MyFileToLinkToWebContent</a></p>''');

			PortletEntry.publish();
		}
	}

	@description = "This is a use case for LPS-184978. TC-2 and TC-4: Custom URLs cannot bypass validation if the custom URL doesn't match with URL Pattern in System Settings and URL Pattern can be added with multiple custom URLs in System Settings."
	@priority = 5
	test MultipleURLPatternCanBeAddedInSystemSettings {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given: Add multiple URL Pattern in System Settings") {
			StagingNavigator.openToConfigInSystemSettings(portlet = "Export/Import, Staging");

			ExportImport.configureURLPattern(
				multipleURL = "/files/MyFileToLinkToWebContent",
				urlPattern = "/dl/*");

			takeScreenshot();
		}

		task ("When: Add a web content with custom URL which doesn't match with URL Pattern") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

			var portalURL = PropsUtil.get("portal.url");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(
				source = "true",
				webContentContent = '''<p><a href="${portalURL}/unaddedurl/XYZ123">${portalURL}/unaddedurl/XYZ123</a></p>''',
				webContentTitle = "Web Content Title");

			Button.clickPublish();
		}

		task ("Then: Custom URL cannot bypass validation") {
			ExportImport.viewValidationMessage(
				url = "/unaddedurl/XYZ123",
				urlPattern = "/unaddedurl");
		}

		task ("When: Add a web content with custom URL which match with URL Pattern") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(webContentTitle = "Web Content Title");

			var portalURL = PropsUtil.get("portal.url");

			ExportImport.addSourceContent(content = '''<p><a href="${portalURL}/files/MyFileToLinkToWebContent">MyFileToLinkToWebContent</a></p>''');
		}

		task ("Then: Custom URL can bypass validation") {
			PortletEntry.publish();
		}
	}

	@description = "This is a use case for LPS-184978. AC-3 and AC-4: An error message should display when adding invalid URL value."
	@priority = 4
	test VerifyErrorMessageWhenAddingInvalidURL {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Add invalid url values to the URL Pattern field and assert the error messages at System settings") {
			StagingNavigator.openToConfigInSystemSettings(portlet = "Export/Import, Staging");

			ExportImport.configureURLPattern(
				errorMessage = "Please enter a relative URL that begins with a slash",
				urlPattern = "abc");

			ExportImport.configureURLPattern(
				errorMessage = "Please enter a relative URL that does not end with a slash",
				urlPattern = "/dl/");
		}

		task ("Add invalid url values to the URL Pattern field and assert the error messages at Instance settings") {
			StagingNavigator.openToConfigInInstanceSettings(portlet = "Export/Import, Staging");

			ExportImport.configureURLPattern(
				errorMessage = "Please enter a relative URL that begins with a slash",
				urlPattern = "abc");

			ExportImport.configureURLPattern(
				errorMessage = "Please enter a relative URL that does not end with a slash",
				urlPattern = "/dl/");
		}
	}

	@description = "This is a use case for LPS-184978. TC-9: Verify the URL Pattern configuration could be loaded from OSGi configuration file on virtual instance."
	@priority = 5
	test VerifyURLPatternConfigurationCanBeLoadedFromOSGiFile {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given Add virtual instance") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");

			UserBar.signOut();

			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");
		}

		task ("When add the OSGI configuration file") {
			ExportImport.deployInstanceConfigFile(
				osgiConfigFileName = "com.liferay.exportimport.configuration.ExportImportServiceConfiguration.scoped~instance~level.config",
				portalInstanceName = "www.able.com");

			// Wait for OSGi configurations loading due to LPS-184978

			Pause(locator1 = 15000);
		}

		task ("Then: The preconfigured value is present at Instance Settings.") {
			StagingNavigator.openToConfigInInstanceSettings(
				baseURL = "http://www.able.com:8080",
				portlet = "Export/Import, Staging");

			AssertTextPresent(
				locator1 = "ExportImport#URL_PATTERN",
				value1 = "/dl/*");
		}

		task ("And: Custom URL can bypass validation") {
			WebContentNavigator.openWebContentAdmin(
				baseURL = "http://www.able.com:8080",
				siteURLKey = "guest");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(webContentTitle = "Web Content Title");

			var portalURL = PropsUtil.get("portal.url");

			ExportImport.addSourceContent(content = '''<p><a href="${portalURL}/dl/XYZ123">${portalURL}/dl/XYZ123</a></p>''');

			PortletEntry.publish();
		}
	}

	@description = "This is a use case for LPS-184978. TC-10: Verify the URL Pattern configuration can be set via OSGI config using company Web ID."
	@priority = 4
	test VerifyURLPatternCouldConfiguredByWebId {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given: Add the OSGI configuration file") {
			OSGiConfig.copyOSGiConfigFile(
				osgiConfigFileBaseDir = "test/functional/com/liferay/portalweb/tests/enduser/exportimport/dependencies",
				osgiConfigFileName = "com.liferay.exportimport.configuration.ExportImportServiceConfiguration.scoped~webid.config");

			// Wait for OSGi configurations loading due to LPS-184978

			Pause(locator1 = 15000);
		}

		task ("When: The Instance Administrator opens the Export/Import settings at Instance level.") {
			StagingNavigator.openToConfigInInstanceSettings(portlet = "Export/Import, Staging");
		}

		task ("Then: The preconfigured value is present at Instance Settings.") {
			AssertTextPresent(
				locator1 = "ExportImport#URL_PATTERN",
				value1 = "/dl/*");
		}

		task ("And: Custom URL can bypass validation") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(webContentTitle = "Web Content Title");

			var portalURL = PropsUtil.get("portal.url");

			ExportImport.addSourceContent(content = '''<p><a href="${portalURL}/dl/XYZ123">${portalURL}/dl/XYZ123</a></p>''');

			PortletEntry.publish();
		}
	}

}