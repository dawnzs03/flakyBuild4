@component-name = "portal-document-library-store"
definition {

	property ibm.store.enabled = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property test.assert.warning.exceptions = "true";
	property testray.main.component.name = "Document Library Stores";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		HeadlessSite.addSite(siteName = "Test Site Name");
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");

			User.logoutPG();
		}
	}

	@description = "This is a use case for LPS-129271."
	@priority = 4
	test AssertNoErrorMessageAfterExportAndImportSiteLAR {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		var bucketID = PropsUtil.get("s3.bucket.id");
		var companyId = JSONCompany.getCompanyId();
		var groupId = JSONGroupAPI._getGroupIdByName(
			groupName = "Test Site Name",
			site = "true");

		for (var layoutUtilityPageName : list "404 Error,500 Error") {
			JSONLayoututilitypage.deleteLayoutUtilityPage(
				groupName = "Test Site Name",
				layoutUtilityPageName = ${layoutUtilityPageName});
		}

		AntCommands.runCommand("build-test-s3-store.xml", "assert-no-document-in-bucket -DcompanyId=${companyId} -DgroupId=${groupId} -Ds3.bucket.id=${bucketID}");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Test Site Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		AntCommands.runCommand("build-test-s3-store.xml", "assert-document-in-bucket -DcompanyId=${companyId} -DgroupId=${groupId} -Ds3.bucket.id=${bucketID}");

		LAR.exportSiteCP(siteScopeName = "Test Site Name");

		var larFileName = LAR.getLarFileName();

		LAR.downloadLar();

		HeadlessSite.addSite(siteName = "Test Site Name 1");

		LAR.importSiteCP(
			larFileName = ${larFileName},
			siteName = "Test Site Name 1");

		AssertConsoleTextNotPresent(value1 = "java.io.IOException");
	}

	@description = "Verify a data migration can be executed from the default store to IBM S3 store."
	@priority = 3
	test IBMS3StoreDataMigration {
		property store.migration.test = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given a document is added to the default store") {
			var bucketId = PropsUtil.get("s3.bucket.id");
			var companyId = JSONCompany.getCompanyId();
			var groupId = JSONGroupAPI._getGroupIdByName(
				groupName = "Test Site Name",
				site = "true");

			JSONDocument.addFileWithUploadedFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "DM Document Title",
				groupName = "Test Site Name",
				mimeType = "text/plain",
				sourceFileName = "Document_1.txt");

			AntCommands.runCommand("build-test-s3-store.xml", "assert-no-document-in-bucket -DcompanyId=${companyId} -DgroupId=${groupId} -Ds3.bucket.id=${bucketId}");
		}

		task ("And given the user cannot migrate data to IBM S3 store without setting up a connection configuration") {
			ServerAdministration.openServerAdmin();

			Navigator.gotoNavItem(navItem = "Data Migration");

			AssertElementNotPresent(
				key_fieldLabel = "dl.store.impl",
				key_value = "com.liferay.portal.store.s3.IBMS3Store",
				locator1 = "Select#GENERIC_SELECT_VALUE");
		}

		task ("When the user adds the configuration") {
			AntCommands.runCommand("build-test.xml", "prepare-ibm-s3-configuration -Ds3.bucket.id=${bucketId}");

			while ((IsElementNotPresent(locator1 = "Select#SELECT_VALUE_ID", option = "com.liferay.portal.store.s3.IBMS3Store", selectFieldId = "dl-store-impl")) && (maxIterations = "2")) {
				OSGiConfig.waitForOSGiConfig();

				Refresh();
			}
		}

		task ("Then the user can now migrate data over to the IBM S3 bucket") {
			SelectField.select(
				selectFieldLabel = "dl.store.impl",
				selectFieldValue = "com.liferay.portal.store.s3.IBMS3Store");
		}

		task ("When the user executes the data migration") {
			Button.click(button = "Execute");

			AssertTextPresent(
				locator1 = "//body",
				value1 = "Executing com.liferay.document.library.internal.convert.document.library.DocumentLibraryConvertProcess");

			WaitForConsoleTextPresent(value1 = "Please set dl.store.impl in your portal-ext.properties to use com.liferay.portal.store.s3.IBMS3Store");

			WaitForConsoleTextPresent(value1 = "Finished conversion for com.liferay.document.library.internal.convert.document.library.DocumentLibraryConvertProcess");
		}

		task ("Then the document is migrated over from the default store to the IBM S3 store") {
			AntCommands.runCommand("build-test-s3-store.xml", "assert-document-in-bucket -DcompanyId=${companyId} -DgroupId=${groupId} -Ds3.bucket.id=${bucketId}");
		}

		task ("And the user can configure the portal to use IBM S3 store without issue") {
			Portlet.shutdownServer();

			var newProperty = "com.liferay.portal.store.s3.IBMS3Store";

			AntCommands.runCommand("build-test.xml", "portal-ext-properties-update -Dadd.new.properties=true -Dupdate.properties=${newProperty}");

			Portlet.startServer(deleteLiferayHome = "false");

			User.firstLoginPG();

			Smoke.viewWelcomeContentPage();
		}
	}

	@priority = 5
	test IBMS3StoreSmoke {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		var bucketId = PropsUtil.get("s3.bucket.id");
		var companyId = JSONCompany.getCompanyId();
		var groupId = JSONGroupAPI._getGroupIdByName(
			groupName = "Test Site Name",
			site = "true");

		AntCommands.runCommand("build-test-s3-store.xml", "assert-no-document-in-bucket -DcompanyId=${companyId} -DgroupId=${groupId} -Ds3.bucket.id=${bucketId}");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "test-site-name");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.txt",
			dmDocumentTitle = "DM Document Title");

		AntCommands.runCommand("build-test-s3-store.xml", "assert-document-in-bucket -DcompanyId=${companyId} -DgroupId=${groupId} -Ds3.bucket.id=${bucketId}");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "test-site-name");

		DMDocument.deleteCP(dmDocumentTitle = "DM Document Title");

		RecycleBin.openRecycleBinAdmin(siteURLKey = "test-site-name");

		RecycleBin.emptyCP();

		AntCommands.runCommand("build-test-s3-store.xml", "assert-no-document-in-bucket -DcompanyId=${companyId} -DgroupId=${groupId} -Ds3.bucket.id=${bucketId}");
	}

	@description = "This is a use case for LPS-127589."
	@priority = 3
	test S3ConnectionDoesNotLeakWhenServingFileAsStream {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		CloudStore.VerifyConnectionWhenServingFileAsStream();
	}

}