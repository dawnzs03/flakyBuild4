definition {

	property custom.properties = "feature.flag.LPS-164563=true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Client Extensions";
	property testray.main.component.name = "Client Extensions";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		task ("Given Client Extension admin page") {
			ApplicationsMenu.gotoPortlet(
				category = "Custom Apps",
				panel = "Applications",
				portlet = "Client Extensions");
		}

		task ("When the user clicks on plus button") {
			LexiconEntry.gotoAdd();
		}

		task ("And clicks on Cell Renderer option") {
			DropdownMenuItem.click(menuItem = "Add Frontend Data Set Cell Renderer");
		}
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Navigator.gotoPage(pageName = "Home");

			ClientExtensionGeneral.tearDown();
		}
	}

	@description = "LPS-175155. Verify if changes are not saved when clicks on Cancel button"
	@priority = 5
	test CanCancelChanges {
		task ("And types “Change Date Format” on Name field") {
			Type(
				key_text = "Name",
				locator1 = "TextInput#ANY",
				value1 = "Change Date Format");
		}

		task ("And types “http://www.myplace.com/mycellrenderer.js” on JS URL field") {
			Type.typeNoMouseOver(
				key_text = "JavaScript URL",
				locator1 = "TextInput#ANY",
				value1 = "http://www.myplace.com/mycellrenderer.js");
		}

		task ("And clicks on Cancel button") {
			Button.clickCancel();
		}

		task ("Then there is no “Change Data Format” entry on Client Extension admin page") {
			ClientExtensionGeneral.goToRemoteAppsPortlet();

			AssertElementNotPresent(
				key_tableEntryName = "Name",
				locator1 = "ClientExtension#TABLE_ENTRY_NAME_REMOTE_TABLE",
				value1 = "Change Date Format");
		}
	}

	@description = "LPS-175155. Verify if has possible change the language"
	@priority = 3
	test CanChangeLanguage {
		task ("And changes the language icon to Spanish") {
			Click(
				key_locale = "en-US",
				locator1 = "Translation#CURRENT_LOCALE_NAME");

			DropdownMenuItem.click(menuItem = "es-ES");
		}

		task ("And types “Cambiar formato de fecha” on Name field") {
			Type(
				key_text = "Name",
				locator1 = "TextInput#ANY",
				value1 = "Cambiar formato de fecha");
		}

		task ("And changes the language icon to English and Spanish again") {
			Click(
				key_locale = "es-ES",
				locator1 = "Translation#CURRENT_LOCALE_NAME");

			DropdownMenuItem.click(menuItem = "en-US");

			Click(
				key_locale = "en-US",
				locator1 = "Translation#CURRENT_LOCALE_NAME");

			DropdownMenuItem.click(menuItem = "es-ES");
		}

		task ("Then the title and information about the fields are displayed in Spanish") {
			AssertTextEquals(
				key_text = "Name",
				locator1 = "TextInput#ANY",
				value1 = "Cambiar formato de fecha");
		}
	}

	@description = "LPS-175155. Verify if is possible create a cell renderer"
	@priority = 5
	test CanCreateCellRender {
		task ("And types “Change Date Format” on Name field") {
			Type(
				key_text = "Name",
				locator1 = "TextInput#ANY",
				value1 = "Change Date Format");
		}

		task ("And types “http://www.myplace.com/mycellrenderer.js” on JS URL field") {
			Type.typeNoMouseOver(
				key_text = "JavaScript URL",
				locator1 = "TextInput#ANY",
				value1 = "http://www.myplace.com/mycellrenderer.js");
		}

		task ("And clicks on Publish button") {
			Button.clickPublish();
		}

		task ("Then a confirmation message is displayed") {
			Alert.viewSuccessMessage();
		}

		task ("And “Change Date Format” entry is present on Client Extension admin page") {
			ClientExtensionGeneral.viewTableEntries(
				entryName = "Change Date Format",
				entryType = "Frontend Data Set Cell Renderer");
		}
	}

	@description = "LPS-175155. Verify if is possible create a Renderer Cell via OSGI"
	@priority = 4
	test CanCreateCellRendererViaOSGI {
		property fdsCellRenderer.client.extension.created = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given creating a Cell Renderer via OSGI") {
			ClientExtension.createGlobalVariableClientExtensionType(type = "fdsCellRenderer");

			ClientExtension.checkConfigFileCreatedProperly();
		}

		task ("And access Client Extension admin page") {
			ClientExtensionGeneral.goToRemoteAppsPortlet();
		}

		task ("When the user search for the OSGI cell renderer name on Client Extension search bar") {
			Search.searchCP(searchTerm = "Change Date Format");
		}

		task ("Then only the cell renderer created by OSGI is displayed") {
			AssertElementNotPresent(
				key_tableEntryName = "Configured From",
				locator1 = "ClientExtension#TABLE_ENTRY_NAME_REMOTE_TABLE",
				value1 = "Workspace");
		}
	}

	@description = "LPS-175155. Verify if the Additional Resources field can be hidden"
	@priority = 3
	test CanHiddenAdditionalResourcesField {
		task ("And clicks on Identity collapse icon") {
			ClientExtensionGeneral.openOrCloseCollapseField(
				key_fieldName = "Additional Resources",
				key_status = "Close");
		}

		task ("Then Source Code URL field is hidden") {
			AssertNotVisible(
				key_fieldName = "Source Code URL",
				locator1 = "ClientExtension#ANY_FIELD");
		}
	}

	@description = "LPS-175155. Verify if the Content field can be hidden"
	@priority = 3
	test CanHiddenContentField {
		task ("And clicks on Content collapse icon") {
			ClientExtensionGeneral.openOrCloseCollapseField(
				key_fieldName = "Content",
				key_status = "Close");
		}

		task ("Then JS URL field is hidden") {
			AssertNotVisible(
				key_fieldName = "JavaScript URL",
				locator1 = "ClientExtension#ANY_FIELD");
		}
	}

	@description = "LPS-175155. Verify if the Identity field can be hidden"
	@priority = 3
	test CanHiddenIdentityField {
		task ("And clicks on Identity collapse icon") {
			ClientExtensionGeneral.openOrCloseCollapseField(
				key_fieldName = "Identity",
				key_status = "Close");
		}

		task ("Then Name and Description fields are hidden") {
			AssertNotVisible(
				key_fieldName = "Name",
				locator1 = "ClientExtension#ANY_FIELD");

			AssertNotVisible(
				key_fieldName = "Description",
				locator1 = "ClientExtension#ANY_FIELD");
		}
	}

	@description = "LPS-175155. Verify if not is possible publish when field name is empty"
	@priority = 5
	test CannotPublishWhenFieldNameIsEmpty {
		task ("And types “http://www.myplace.com/mycellrenderer.js” on JS URL field") {
			Type.typeNoMouseOver(
				key_text = "JavaScript URL",
				locator1 = "TextInput#ANY",
				value1 = "http://www.myplace.com/mycellrenderer.js");
		}

		task ("And types “This Cell Renderer will show the Date in a different format to the default shown by the FDS View.” on Description field") {
			Type(
				locator1 = "CKEditor#BODY_FIELD_IFRAME",
				value1 = "This Cell Renderer will show the Date in a different format to the default shown by the FDS View.");
		}

		task ("And clicks on Publish button") {
			Button.clickPublish();
		}

		task ("Then an error message should be displayed ") {
			AssertVisible(
				key_alertMessage = "Your request failed to complete.",
				locator1 = "Message#ERROR_ENTER_ANY");
		}
	}

	@description = "LPS-175155. Verify if cannot publish when JS field are empty"
	@priority = 5
	test CannotPublishWhenJSFieldIsEmpty {
		task ("And types “Change Date Format” on Name field") {
			Type(
				key_text = "Name",
				locator1 = "TextInput#ANY",
				value1 = "Change Date Format");
		}

		task ("And types “This Cell Renderer will show the Date in a different format to the default shown by the FDS View.” on Description field") {
			Type(
				locator1 = "CKEditor#BODY_FIELD_IFRAME",
				value1 = "This Cell Renderer will show the Date in a different format to the default shown by the FDS View.");
		}

		task ("And clicks on Publish button") {
			Button.clickPublish();
		}

		task ("Then an error message should be displayed ") {
			Alert.viewSpecificRequiredField(fieldFieldLabel = "JavaScript URL");
		}
	}

	@description = "LPS-175155. Verify if Source Code field only can be published with a valid value"
	@priority = 4
	test CannotPublishWithInvalidValueOnSourceCodeField {
		task ("And types “Change Date Format” on Name field") {
			Type(
				key_text = "Name",
				locator1 = "TextInput#ANY",
				value1 = "Change Date Format");
		}

		task ("And types “http://www.myplace.com/mycellrenderer.js” on JS URL field") {
			Type.typeNoMouseOver(
				key_text = "JavaScript URL",
				locator1 = "TextInput#ANY",
				value1 = "http://www.myplace.com/mycellrenderer.js");
		}

		task ("And types “This Cell Renderer will show the Date in a different format to the default shown by the FDS View.” on Source Code URL field") {
			Type(
				key_text = "Source Code URL",
				locator1 = "TextInput#ANY",
				value1 = "This Cell Renderer will show the Date in a different format to the default shown by the FDS View.");
		}

		task ("And clicks on Publish button") {
			Button.clickPublish();
		}

		task ("Then an error message should be displayed ") {
			AssertVisible(
				key_alertMessage = "Your request failed to complete.",
				locator1 = "Message#ERROR_ENTER_ANY");
		}
	}

}