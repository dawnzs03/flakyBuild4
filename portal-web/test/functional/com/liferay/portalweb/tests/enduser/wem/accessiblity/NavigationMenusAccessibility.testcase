@component-name = "portal-wcm"
definition {

	property ci.retries.disabled = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Echo Accessibility";
	property testray.main.component.name = "Navigation";

	static var randomSiteName = StringUtil.randomString(8);

	var siteURLKey = StringUtil.toLowerCase(${randomSiteName});

	setUp {
		task ("Set up virtual instance") {
			TestCase.setUpPortalInstance();
		}

		task ("Sign in") {
			User.firstLoginPG();
		}

		task ("Add a site") {
			HeadlessSite.addSite(siteName = ${randomSiteName});
		}
	}

	@description = "This is a test for LPS-172782. The navigation menu creator could add child item via keyboard. The screen reader should announce relevant info when hover on the plus icon of navigation menu item."
	@priority = 4
	test AddChildNavigationMenuItemViaKeyboard {
		task ("Given a navigation menu creator has a navigation menu with an item") {
			JSONCategory.addVocabulary(
				groupName = ${randomSiteName},
				title = "Vocabulary Name");

			JSONCategory.addCategory(
				groupName = ${randomSiteName},
				title = "Category Name",
				vocabularyName = "Vocabulary Name");

			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = ${randomSiteName},
				title = "Web Content Title");

			JSONSitenavigation.addSiteNavigationMenu(
				groupName = ${randomSiteName},
				siteNavigationMenuName = "Navigation Menu Name");

			NavigationMenusAdmin.openNavigationMenusAdmin(siteURLKey = ${siteURLKey});

			NavigationMenusAdmin.editMenu(navigationMenuName = "Navigation Menu Name");

			NavigationMenusAdmin.addItem(
				assetTitle = "Web Content Title",
				item = "Web Content Article");
		}

		task ("When the navigation menu creator focuses on the above plus icon of Web Content Article type item") {
			MouseOver.javaScriptFocus(
				key_itemName = "Web Content Title",
				key_relationship = "before",
				locator1 = "SiteNavigationMenu#ITEM_ENTRY_ADD_ICON");
		}

		task ("Then the screen reader should announce relevant info") {
			AssertAttributeValue(
				attribute1 = "title",
				key_itemName = "Web Content Title",
				key_relationship = "before",
				locator1 = "SiteNavigationMenu#ITEM_ENTRY_ADD_ICON",
				value1 = "Add item before Web Content Title.");
		}

		task ("When the navigation menu creator focuses on the below plus icon of Web Content Article type item") {
			MouseOver.javaScriptFocus(
				key_itemName = "Web Content Title",
				key_relationship = "after",
				locator1 = "SiteNavigationMenu#ITEM_ENTRY_ADD_ICON");
		}

		task ("Then the screen reader should announce relevant info") {
			AssertAttributeValue(
				attribute1 = "title",
				key_itemName = "Web Content Title",
				key_relationship = "after",
				locator1 = "SiteNavigationMenu#ITEM_ENTRY_ADD_ICON",
				value1 = "Add item after Web Content Title.");
		}

		task ("When the navigation menu creator focuses on the card body of Web Content Article type item via Tab key") {
			KeyPress(
				key_text = "cog",
				locator1 = "Icon#ANY",
				value1 = "\TAB");

			AssertElementFocused(locator1 = "//div[contains(@aria-label,'Web Content Title')]");
		}

		task ("Then the navigation menu creator could create a Category type item via keyboard") {
			KeyPress(
				locator1 = "//div[contains(@aria-label,'Web Content Title')]",
				value1 = "\TAB");

			KeyPress(
				key_sourceItemName = "Web Content Title",
				locator1 = "SiteNavigationMenu#ITEM_ENTRY_DRAG_ICON",
				value1 = "\TAB");

			KeyPress(
				key_itemName = "Web Content Title",
				key_relationship = "before",
				locator1 = "SiteNavigationMenu#ITEM_ENTRY_ADD_ICON",
				value1 = "\TAB");

			KeyPress(
				key_itemName = "Web Content Title",
				key_relationship = "after",
				locator1 = "SiteNavigationMenu#ITEM_ENTRY_ADD_ICON",
				value1 = "\TAB");

			AssertElementFocused(locator1 = "//div[contains(@class,'card')][contains(.,'Web Content Title')]//*[contains(@class,'dropdown-toggle')][..//*[name()='svg'][contains(@class,'lexicon-icon-ellipsis')]]");

			KeyPress(
				key_card = "Web Content Title",
				locator1 = "Card#CARD_ELLIPSIS",
				value1 = "\ENTER");

			KeyPress(
				key_menuItem = "Add Child",
				locator1 = "MenuItem#ANY_MENU_ITEM",
				value1 = "\ENTER");

			KeyPress(
				key_menuItem = "Blogs Entry",
				locator1 = "MenuItem#ANY_MENU_ITEM",
				value1 = "\DOWN");

			KeyPress(
				key_menuItem = "Category",
				locator1 = "MenuItem#ANY_MENU_ITEM",
				value1 = "\ENTER");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			Portlet.expandTree();

			Click(
				key_nodeName = "Category Name",
				locator1 = "Treeview#NODE_UNSELECTED");

			SelectFrame.selectFrameTop();

			Button.clickSelect();

			SelectFrame.selectFrameTop();

			Alert.viewSuccessMessage();

			NavigationMenusAdmin.viewItemNested(
				groupName = ${randomSiteName},
				itemNameList = "Category Name",
				parentItemNameList = "Web Content Title",
				site = "true",
				siteNavigationMenuName = "Navigation Menu Name");
		}
	}

	@description = "This is a test for LPS-172782. The navigation menu creator could add sibling item via keyboard."
	@priority = 4
	test AddSiblingNavigationMenuItemsViaKeyboard {
		task ("Given a navigation menu creator has a navigation menu with an item") {
			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name");

			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = ${randomSiteName},
				title = "Web Content Title");

			JSONSitenavigation.addSiteNavigationMenu(
				groupName = ${randomSiteName},
				siteNavigationMenuName = "Navigation Menu Name");

			JSONSitenavigation.addSiteNavigationMenuItem(
				groupName = ${randomSiteName},
				privateLayout = "false",
				siteNavigationMenuItemName = "Test Page Name",
				siteNavigationMenuName = "Navigation Menu Name",
				type = "layout");
		}

		task ("When the navigation menu creator focuses on the card body of page type item via Tab key") {
			NavigationMenusAdmin.openNavigationMenusAdmin(siteURLKey = ${siteURLKey});

			NavigationMenusAdmin.editMenu(navigationMenuName = "Navigation Menu Name");

			KeyPress(
				key_text = "cog",
				locator1 = "Icon#ANY",
				value1 = "\TAB");
		}

		task ("Then the navigation menu creators sees two plus icons on the card") {
			AssertElementFocused(locator1 = "//div[contains(@aria-label,'Test Page Name')]");

			for (var relationship : list "before,after") {
				AssertVisible(
					key_itemName = "Test Page Name",
					key_relationship = ${relationship},
					locator1 = "SiteNavigationMenu#ITEM_ENTRY_ADD_ICON");
			}
		}

		task ("When the navigation menu creator press the Tab key") {
			KeyPress(
				locator1 = "//div[contains(@aria-label,'Test Page Name')]",
				value1 = "\TAB");
		}

		task ("Then the drag icon is focused") {
			AssertElementFocused(locator1 = "//div[contains(@class,'MenuItem')][.//p[contains(@class,'card-title')][normalize-space()='Test Page Name']]//div[contains(@draggable,'true')]//button");
		}

		task ("When the navigation menu creator press the Tab key") {
			KeyPress(
				key_sourceItemName = "Test Page Name",
				locator1 = "SiteNavigationMenu#ITEM_ENTRY_DRAG_ICON",
				value1 = "\TAB");
		}

		task ("Then the above plus icon is focused") {
			AssertElementFocused(locator1 = "//div[contains(@class,'MenuItem')][.//p[contains(@class,'card-title')][normalize-space()='Test Page Name']]//button[contains(@title,'Add item before')]");
		}

		task ("When the navigation menu creator press the Enter key") {
			KeyPress(
				key_itemName = "Test Page Name",
				key_relationship = "before",
				locator1 = "SiteNavigationMenu#ITEM_ENTRY_ADD_ICON",
				value1 = "\ENTER");
		}

		task ("Then the navigation menu creator could create a URL type item") {
			KeyPress(
				key_menuItem = "Submenu",
				locator1 = "MenuItem#ANY_MENU_ITEM",
				value1 = "\DOWN");

			KeyPress(
				key_menuItem = "URL",
				locator1 = "MenuItem#ANY_MENU_ITEM",
				value1 = "\ENTER");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			NavigationMenusAdmin._addItemURL(
				url = "https://www.liferay.com",
				urlName = "Liferay");

			Button.click(button = "Add");

			SelectFrame.selectFrameTop();

			Alert.viewSuccessMessage();

			NavigationMenusAdmin.viewItemOrder(
				index = 1,
				itemName = "Liferay");

			NavigationMenusAdmin.viewItemOrder(
				index = 2,
				itemName = "Test Page Name");

			NavigationMenusAdmin.viewItemNotNested(itemNameList = "Liferay,Test Page Name");
		}

		task ("When the navigation menu creator focuses on the below plus icon of page type item via keyboard") {
			KeyPress(
				key_text = "cog",
				locator1 = "Icon#ANY",
				value1 = "\TAB");

			KeyPress(
				locator1 = "//div[contains(@aria-label,'Liferay')]",
				value1 = "\DOWN");

			KeyPress(
				locator1 = "//div[contains(@aria-label,'Test Page Name')]",
				value1 = "\TAB");

			KeyPress(
				key_sourceItemName = "Test Page Name",
				locator1 = "SiteNavigationMenu#ITEM_ENTRY_DRAG_ICON",
				value1 = "\TAB");

			KeyPress(
				key_itemName = "Test Page Name",
				key_relationship = "before",
				locator1 = "SiteNavigationMenu#ITEM_ENTRY_ADD_ICON",
				value1 = "\TAB");

			AssertElementFocused(locator1 = "//div[contains(@class,'MenuItem')][.//p[contains(@class,'card-title')][normalize-space()='Test Page Name']]//button[contains(@title,'Add item after')]");
		}

		task ("Then the navigation menu creator could create a Web Content Article type item") {
			KeyPress(
				key_itemName = "Test Page Name",
				key_relationship = "after",
				locator1 = "SiteNavigationMenu#ITEM_ENTRY_ADD_ICON",
				value1 = "\ENTER");

			KeyPress(
				key_menuItem = "Vocabulary",
				locator1 = "MenuItem#ANY_MENU_ITEM",
				value1 = "\DOWN");

			KeyPress(
				key_menuItem = "Web Content Article",
				locator1 = "MenuItem#ANY_MENU_ITEM",
				value1 = "\ENTER");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			ManagementBar.changeDisplayStyle(displayStyle = "Cards");

			LexiconCard.clickCard(card = "Web Content Title");

			SelectFrame.selectFrameTop();

			Alert.viewSuccessMessage();

			NavigationMenusAdmin.viewItemOrder(
				index = 2,
				itemName = "Test Page Name");

			NavigationMenusAdmin.viewItemOrder(
				index = 3,
				itemName = "Web Content Title");

			NavigationMenusAdmin.viewItemNotNested(itemNameList = "Web Content Title");
		}
	}

	@description = "This is a test for LPS-177667. The site designer could cancel reorder navigation menu items via keyboard. The screen reader should announce relevant info when the site designer activates the movement."
	@priority = 4
	test CancelReorderNavigationMenuItemsViaKeyboard {
		task ("Given a navigation menu creator has a navigation menu with items") {
			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name");

			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = ${randomSiteName},
				title = "Web Content Title");

			JSONSitenavigation.addSiteNavigationMenu(
				groupName = ${randomSiteName},
				siteNavigationMenuName = "Navigation Menu Name");

			JSONSitenavigation.addSiteNavigationMenuItem(
				groupName = ${randomSiteName},
				privateLayout = "false",
				siteNavigationMenuItemName = "Test Page Name",
				siteNavigationMenuName = "Navigation Menu Name",
				type = "layout");

			JSONSitenavigation.addSiteNavigationMenuItem(
				groupName = ${randomSiteName},
				siteNavigationMenuItemName = "Liferay",
				siteNavigationMenuName = "Navigation Menu Name",
				type = "url",
				url = "https://www.liferay.com",
				useNewTab = "false");

			NavigationMenusAdmin.openNavigationMenusAdmin(siteURLKey = ${siteURLKey});

			NavigationMenusAdmin.editMenu(navigationMenuName = "Navigation Menu Name");

			NavigationMenusAdmin.addItem(
				assetTitle = "Web Content Title",
				item = "Web Content Article");
		}

		task ("When the navigation menu creator reorders items via keyboard") {
			KeyPress(
				key_text = "cog",
				locator1 = "Icon#ANY",
				value1 = "\TAB");

			KeyPress(
				locator1 = "//div[contains(@aria-label,'Test Page Name')]",
				value1 = "\DOWN");

			KeyPress(
				locator1 = "//div[contains(@aria-label,'Liferay')]",
				value1 = "\TAB");

			KeyPress(
				key_sourceItemName = "Liferay",
				locator1 = "SiteNavigationMenu#ITEM_ENTRY_DRAG_ICON",
				value1 = "\ENTER");

			AssertElementPresent(locator1 = "//div[contains(@class,'menu_editor')]//span[contains(@class,'sr-only')][contains(.,'Use up and down arrows to move Liferay (URL) and press enter to place it in desired position.')]");

			AssertTextEquals(
				locator1 = "SiteNavigationMenu#DRAG_PREVIEW_LABEL",
				value1 = "Liferay");

			AssertCssValue(
				locator1 = "SiteNavigationMenu#DRAG_PREVIEW_BORDER",
				locator2 = "border-top-color",
				value1 = "rgba(128, 172, 255, 1)");

			KeyPress(
				key_sourceItemName = "Liferay",
				locator1 = "SiteNavigationMenu#ITEM_ENTRY_DRAG_ICON",
				value1 = "\DOWN");

			KeyPress(
				key_sourceItemName = "Liferay",
				locator1 = "SiteNavigationMenu#ITEM_ENTRY_DRAG_ICON",
				value1 = "\DOWN");

			AssertCssValue(
				locator1 = "SiteNavigationMenu#DRAG_PREVIEW_BORDER",
				locator2 = "border-top-color",
				value1 = "rgba(128, 172, 255, 1)");
		}

		task ("Then the navigation menu creator could cancel reorder via ESCAPE key") {
			KeyPress(
				locator1 = "//body",
				value1 = "\ESCAPE");

			AssertElementNotPresent(locator1 = "SiteNavigationMenu#DRAG_PREVIEW_LABEL");

			var i = 1;

			for (var itemName : list "Test Page Name,Liferay,Web Content Title") {
				NavigationMenusAdmin.viewItemOrder(
					index = ${i},
					itemName = ${itemName});

				var i = ${i} + 1;
			}
		}
	}

	@description = "This is a test for LPS-177667. The site designer could reorder navigation menu items with child via keyboard."
	@priority = 4
	test ReorderNavigationMenuItemsWithChildViaKeyboard {
		task ("Given a navigation menu creator has a navigation menu with items") {
			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name");

			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = ${randomSiteName},
				title = "Web Content Title");

			JSONSitenavigation.addSiteNavigationMenu(
				groupName = ${randomSiteName},
				siteNavigationMenuName = "Navigation Menu Name");

			JSONSitenavigation.addSiteNavigationMenuItem(
				groupName = ${randomSiteName},
				privateLayout = "false",
				siteNavigationMenuItemName = "Test Page Name",
				siteNavigationMenuName = "Navigation Menu Name",
				type = "layout");

			JSONSitenavigation.addSiteNavigationMenuItem(
				groupName = ${randomSiteName},
				siteNavigationMenuItemName = "Liferay",
				siteNavigationMenuName = "Navigation Menu Name",
				type = "url",
				url = "https://www.liferay.com",
				useNewTab = "false");
		}

		task ("When the navigation menu creator adds a child item") {
			NavigationMenusAdmin.openNavigationMenusAdmin(siteURLKey = ${siteURLKey});

			NavigationMenusAdmin.editMenu(navigationMenuName = "Navigation Menu Name");

			NavigationMenusAdmin.addChildItem(
				assetTitle = "Web Content Title",
				item = "Web Content Article",
				itemName = "Test Page Name");
		}

		task ("Then the navigation menu creator reorders items with child via keyboard") {
			KeyPress(
				key_text = "cog",
				locator1 = "Icon#ANY",
				value1 = "\TAB");

			KeyPress(
				locator1 = "//div[contains(@aria-label,'Test Page Name')]",
				value1 = "\TAB");

			KeyPress(
				key_sourceItemName = "Test Page Name",
				locator1 = "SiteNavigationMenu#ITEM_ENTRY_DRAG_ICON",
				value1 = "\ENTER");

			AssertTextEquals(
				locator1 = "SiteNavigationMenu#DRAG_PREVIEW_LABEL",
				value1 = "Test Page Name and 1 Child");

			KeyPress(
				key_sourceItemName = "Test Page Name",
				locator1 = "SiteNavigationMenu#ITEM_ENTRY_DRAG_ICON",
				value1 = "\DOWN");

			KeyPress(
				key_sourceItemName = "Test Page Name",
				locator1 = "SiteNavigationMenu#ITEM_ENTRY_DRAG_ICON",
				value1 = "\DOWN");

			KeyPress(
				key_sourceItemName = "Test Page Name",
				locator1 = "SiteNavigationMenu#ITEM_ENTRY_DRAG_ICON",
				value1 = "\DOWN");

			KeyPress(
				key_sourceItemName = "Test Page Name",
				locator1 = "SiteNavigationMenu#ITEM_ENTRY_DRAG_ICON",
				value1 = "\ENTER");

			var i = 1;

			for (var itemName : list "Liferay,Test Page Name") {
				NavigationMenusAdmin.viewItemOrder(
					index = ${i},
					itemName = ${itemName});

				var i = ${i} + 1;
			}

			NavigationMenusAdmin.viewItemNested(
				groupName = ${randomSiteName},
				itemNameList = "Web Content Title",
				parentItemNameList = "Test Page Name",
				site = "true",
				siteNavigationMenuName = "Navigation Menu Name");
		}
	}

	@description = "This is a test for LPS-171044. The site designer could select or deselect a parent node and all its child items via keyboard and mouse."
	@priority = 3
	test SelectOrDeselectParentNodeAndChildItemsViaKeyboardAndMouse {
		task ("Given a site designer has a navigation menu") {
			JSONCategory.addVocabulary(
				groupName = ${randomSiteName},
				title = "Vocabulary Name");

			JSONCategory.addCategory(
				groupName = ${randomSiteName},
				title = "Category Name",
				vocabularyName = "Vocabulary Name");

			for (var i : list "1,2,3") {
				JSONCategory.addSubcategory(
					groupName = ${randomSiteName},
					parentCategoryName = "Category Name",
					title = "Subcategory Name ${i}",
					vocabularyName = "Vocabulary Name");
			}

			JSONSitenavigation.addSiteNavigationMenu(
				groupName = ${randomSiteName},
				siteNavigationMenuName = "Navigation Menu Name");
		}

		task ("When the site designer opens the Select Category modal") {
			NavigationMenusAdmin.openNavigationMenusAdmin(siteURLKey = ${siteURLKey});

			NavigationMenusAdmin.editMenu(navigationMenuName = "Navigation Menu Name");

			WaitForPageLoad();

			Button.clickAdd();

			MenuItem.click(menuItem = "Category");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			Portlet.expandTree();
		}

		task ("Then the site designer could select or deselect parent node and child items via keyboard and mouse") {
			KeyPress(
				locator1 = "TextInput#SEARCH",
				value1 = "\TAB");

			KeyPress.keyDown(
				key_nodeName = "Category Name",
				locator1 = "Treeview#NODE_CHECKBOX",
				value1 = "\SHIFT");

			Click(
				key_nodeName = "Category Name",
				locator1 = "Treeview#NODE_ITEM");

			KeyPress.keyUp(
				key_nodeName = "Category Name",
				locator1 = "Treeview#NODE_CHECKBOX",
				value1 = "\SHIFT");

			for (var categoryName : list "Category Name,Subcategory Name 1,Subcategory Name 2,Subcategory Name 3") {
				AssertChecked.assertCheckedNotVisible(
					key_nodeName = ${categoryName},
					locator1 = "Treeview#NODE_CHECKBOX");
			}

			KeyPress.keyDown(
				key_nodeName = "Category Name",
				locator1 = "Treeview#NODE_CHECKBOX",
				value1 = "\SHIFT");

			Click(
				key_nodeName = "Category Name",
				locator1 = "Treeview#NODE_ITEM");

			KeyPress.keyUp(
				key_nodeName = "Category Name",
				locator1 = "Treeview#NODE_CHECKBOX",
				value1 = "\SHIFT");

			for (var categoryName : list "Category Name,Subcategory Name 1,Subcategory Name 2,Subcategory Name 3") {
				AssertNotChecked.assertNotCheckedNotVisible(
					key_nodeName = ${categoryName},
					locator1 = "Treeview#NODE_CHECKBOX");
			}
		}
	}

}