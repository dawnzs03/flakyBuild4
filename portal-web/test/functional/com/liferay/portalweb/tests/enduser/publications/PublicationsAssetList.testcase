@component-name = "portal-publications"
definition {

	property osgi.module.configuration.file.names = "com.liferay.change.tracking.configuration.CTSettingsConfiguration.config";
	property osgi.module.configurations = "enabled=B\"true\"";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Publications";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Publications.disablePublications();
		}
	}

	@description = "Assert that is possible to create a Asset List within Publications"
	@priority = 3
	test CanAddAssetList {
		task ("Add new Publication and use it") {
			JSONPublications.addPublication(publicationName = "Publication Name");

			JSONPublications.selectPublication(publicationName = "Publication Name");
		}

		task ("Create a manual asset list") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "guest");

			AssetListsAdmin.addManualSelection(assetListTitle = "Manual Asset List Test");
		}

		task ("Create a dynamic asset list") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "guest");

			AssetListsAdmin.addDynamicSelection(assetListTitle = "Dynamic Asset List Test");
		}

		task ("Assert Asset List Entry names and types") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "guest");

			AssertTextEquals.assertPartialText(
				key_title = "Manual Asset List Test",
				locator1 = "AssetLists#ASSET_LIST_ENTRY_TITLE",
				value1 = "Manual Asset List Test");

			AssertTextEquals.assertPartialText(
				key_columnName = "lfr-type",
				key_tableEntry = "Manual",
				locator1 = "LexiconTable#TABLE_ENTRY_INFO",
				value1 = "Manual");

			AssertTextEquals.assertPartialText(
				key_title = "Dynamic Asset List Test",
				locator1 = "AssetLists#ASSET_LIST_ENTRY_TITLE",
				value1 = "Dynamic Asset List Test");

			AssertTextEquals.assertPartialText(
				key_columnName = "lfr-type",
				key_tableEntry = "Dynamic",
				locator1 = "LexiconTable#TABLE_ENTRY_INFO",
				value1 = "Dynamic");
		}

		task ("Assert that it's possible to publish it") {
			PublicationsNavigator.gotoReviewChanges();

			PublicationsChanges.viewChanges(
				changeCategory = "Asset List Entry",
				changeSite = "Guest",
				changeTitle = "Asset List Entry",
				changeType = "Added",
				changeUser = "Test Test",
				showAllItems = "true");

			PublicationsChanges.viewChanges(
				changeCategory = "Asset List Entry",
				changeOrder = 2,
				changeSite = "Guest",
				changeTitle = "Asset List Entry",
				changeType = "Added",
				changeUser = "Test Test",
				showAllItems = "true");

			Publications.publishPublication(publicationName = "Publication Name");
		}
	}

	@description = "Assert that is possible to delete a Asset List within Publications"
	@priority = 3
	test CanDeleteAssetList {
		task ("Create a manual asset list") {
			JSONAssetlist.addManualAssetListEntry(
				groupName = "Guest",
				title = "Manual Asset List Test");
		}

		task ("Create a dynamic asset list") {
			JSONAssetlist.addDynamicAssetListEntry(
				groupName = "Guest",
				title = "Dynamic Asset List Test");
		}

		task ("Add new Publication and use it") {
			JSONPublications.addPublication(publicationName = "Publication Name");

			JSONPublications.selectPublication(publicationName = "Publication Name");
		}

		task ("Delete both asset lists") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "guest");

			AssetListsAdmin.deleteEntry(assetListTitle = "Manual Asset List Test");

			AssetListsAdmin.deleteEntry(assetListTitle = "Dynamic Asset List Test");
		}

		task ("Assert the taglib that displays when there are no entries displays") {
			AssertElementPresent(locator1 = "Message#EMPTY_INFO_TAGLIB");
		}

		task ("Assert that it's possible to publish it") {
			PublicationsNavigator.gotoReviewChanges();

			PublicationsChanges.viewChanges(
				changeCategory = "Asset List Entry",
				changeSite = "Guest",
				changeTitle = "Asset List Entry",
				changeType = "Deleted",
				changeUser = "Test Test",
				showAllItems = "true");

			PublicationsChanges.viewChanges(
				changeCategory = "Asset List Entry",
				changeOrder = 2,
				changeSite = "Guest",
				changeTitle = "Asset List Entry",
				changeType = "Deleted",
				changeUser = "Test Test",
				showAllItems = "true");

			Publications.publishPublication(publicationName = "Publication Name");
		}
	}

	@description = "Assert that is possible to edit a Asset List within Publications"
	@priority = 3
	test CanEditAssetList {
		task ("Create a manual asset list") {
			JSONAssetlist.addManualAssetListEntry(
				groupName = "Guest",
				title = "Manual Asset List Test");
		}

		task ("Add new Publication and use it") {
			JSONPublications.addPublication(publicationName = "Publication Name");

			JSONPublications.selectPublication(publicationName = "Publication Name");
		}

		task ("Rename the asset list") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "guest");

			AssetListsAdmin.renameAssetList(
				newAssetListTitle = "Manual Asset List Edit",
				oldAssetListTitle = "Manual Asset List Test");
		}

		task ("Assert that it's possible to publish it") {
			PublicationsNavigator.gotoReviewChanges();

			PublicationsChanges.viewChanges(
				changeCategory = "Asset List Entry",
				changeSite = "Guest",
				changeTitle = "Asset List Entry",
				changeType = "Modified",
				changeUser = "Test Test",
				showAllItems = "true");

			Publications.publishPublication(publicationName = "Publication Name");
		}

		task ("Assert that the edited name remains after publishing the Publication") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "guest");

			AssertTextEquals.assertPartialText(
				key_title = "Manual Asset List Edit",
				locator1 = "AssetLists#ASSET_LIST_ENTRY_TITLE",
				value1 = "Manual Asset List Edit");

			AssertTextEquals.assertPartialText(
				key_columnName = "lfr-type",
				key_tableEntry = "Manual",
				locator1 = "LexiconTable#TABLE_ENTRY_INFO",
				value1 = "Manual");
		}
	}

	@description = "Assert that is possible to resolve a conflict by discarding Asset List within Publications"
	@priority = 3
	test CanResolveAssetListConflictByDiscarding {
		task ("Create a manual asset list") {
			JSONAssetlist.addManualAssetListEntry(
				groupName = "Guest",
				title = "Manual Asset List Test");
		}

		task ("Add new blog entry") {
			JSONBlog.addEntry(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				groupName = "Guest");
		}

		task ("Add new Publication and use it") {
			JSONPublications.addPublication(publicationName = "Publication Name 1");

			JSONPublications.selectPublication(publicationName = "Publication Name 1");
		}

		task ("Select Blog Entry as item type and add the new blog to the Asset List") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "guest");

			AssetListsAdmin.editAssetList(assetListTitle = "Manual Asset List Test");

			AssetListsAdmin.configureItemTypeInManualCollection(itemType = "Blogs Entry");

			AssetListsAdmin.selectAsset(
				assetListTitle = "Manual Asset List Test",
				assetType = "Blogs Entry",
				entryList = "Blogs Entry Title");
		}

		task ("Add new Publication and use it") {
			JSONPublications.addPublication(publicationName = "Publication Name 2");

			JSONPublications.selectPublication(publicationName = "Publication Name 2");
		}

		task ("Add new Document") {
			JSONDocument.addFile(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "DM Document Title",
				groupName = "Guest");
		}

		task ("Select Document as item type and add the new Document to the Asset List") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "guest");

			AssetListsAdmin.editAssetList(assetListTitle = "Manual Asset List Test");

			AssetListsAdmin.configureItemTypeInManualCollection(
				itemSubtype = "Basic Document",
				itemType = "Document");

			AssetListsAdmin.selectAsset(
				assetListTitle = "Manual Asset List Test",
				assetType = "Basic Document",
				entryList = "DM Document Title");
		}

		task ("Publish Publication 2") {
			Publications.publishPublication(
				gotoPublicationsAdmin = "true",
				publicationName = "Publication Name 2");
		}

		task ("Try to publish Publication 1") {
			PublicationsNavigator.gotoPublish(
				gotoPublicationsAdmin = "true",
				publicationName = "Publication Name 1");

			Publications.viewConflictingChangesWarning(warningMessage = "This publication contains conflicting changes that must be manually resolved before publishing.");
		}

		task ("Discard Changes") {
			PublicationsChanges.discardChanges(
				changeCategory = "Asset List",
				changeTitle = "Asset List",
				conflictingChanges = "true");
		}

		task ("Assert that there's no conflict and pubish Publication") {
			Publications.publishPublication(publicationName = "Publication Name 1");
		}
	}

}