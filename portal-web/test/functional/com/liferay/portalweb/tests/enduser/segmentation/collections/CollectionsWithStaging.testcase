@component-name = "portal-segmentation"
definition {

	property ci.retries.disabled = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Segmentation";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		HeadlessSite.addSite(siteName = "Test Site Name");

		Staging.openStagingAdmin(siteURLKey = "test-site-name");

		Staging.activateStagingCP(siteName = "Test Site Name");
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Test Site Name");
		}
	}

	@description = "This is a test for LPS-112994. Assert the Collections administration is written accessible on the staging site while read-only accessible on live site."
	@priority = 5
	test AssertCollectionsAdminInStagingAndLiveSite {
		property portal.acceptance = "true";

		task ("Navigate to Collections administration in the staging site") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name-staging");
		}

		task ("Assert Collections admin is written accessible") {
			AssertVisible(locator1 = "Dropdown#EMPTY_MESSAGE_DROPDOWN");

			AssertVisible(locator1 = "Button#PLUS");
		}

		task ("Navigate to Collections administration in the live site") {
			ProductMenu.gotoLiveSite(site = "Test Site Name");

			ProductMenu.gotoPortlet(
				category = "Site Builder",
				portlet = "Collections");
		}

		task ("Assert Collections admin is read-only accessible") {
			AssertElementNotPresent(locator1 = "Dropdown#EMPTY_MESSAGE_DROPDOWN");

			AssertElementNotPresent(locator1 = "Button#PLUS");
		}
	}

	@description = "This is a use case for LPS-109102. User Segment specific Assets Lists should be correctly published to live site."
	@priority = 4
	test FilterCollectionItemsByPersonalizedVariationsInLiveSite {
		task ("Given a site administrator displays a collection with personalized variations on Asset Publisher in staging site") {
			for (var pageName : list "home,admin") {
				JSONLayout.addPublicLayout(
					groupName = "Test Site Name (Staging)",
					layoutName = ${pageName},
					site = "false");
			}

			for (var i : list "A,B,C") {
				JSONWebcontent.addWebContent(
					content = "Content ${i}",
					groupName = "Test Site Name (Staging)",
					site = "false",
					title = "Content ${i}");
			}

			for (var segmentName : list "HOME,ADMIN") {
				JSONSegmentsentry.addSegment(
					conditionType = "Session",
					fieldName = "URL",
					groupName = "Test Site Name (Staging)",
					operator = "contains",
					segmentName = ${segmentName},
					site = "false",
					text = StringUtil.lowerCase(${segmentName}));
			}

			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name-staging");

			AssetListsAdmin.addManualSelection(assetListTitle = "DEMO");

			AssetListsAdmin.selectAsset(
				assetName = "Content A",
				assetType = "Basic Web Content",
				itemSubtype = "Basic Web Content",
				itemType = "Web Content Article");

			AssetListsAdmin.addPersonalizedVariation(segmentName = "HOME");

			AssetListsAdmin.selectAsset(
				assetType = "Basic Web Content",
				entryList = "Content B");

			AssetListsAdmin.addPersonalizedVariation(segmentName = "ADMIN");

			AssetListsAdmin.selectAsset(
				assetType = "Basic Web Content",
				entryList = "Content C");

			AssetListsAdmin.deprioritizeVariation(variationTitle = "Anyone");

			AssetListsAdmin.deprioritizeVariation(variationTitle = "Anyone");

			AssertTextEquals(
				key_index = 3,
				locator1 = "AssetLists#VARIATION_INDEX",
				value1 = "Anyone");

			for (var layoutName : list "home,admin") {
				JSONLayout.addWidgetToPublicLayout(
					column = 1,
					groupName = "Test Site Name (Staging)",
					layoutName = ${layoutName},
					site = "false",
					widgetName = "Asset Publisher");

				Navigator.gotoStagedSitePage(
					pageName = ${layoutName},
					siteName = "test-site-name");

				AssetPublisherPortlet.selectAssetList(assetListName = "DEMO");
			}

			Navigator.openStagingSiteURL(siteName = "Test Site Name");

			AssetPublisherPortlet.viewAssetPG(
				assetContent = "Content A",
				assetTitle = "Content A");

			AssetPublisherPortlet.viewAssetNotPresentPG(
				assetContent = "Content B",
				assetTitle = "Content B");

			AssetPublisherPortlet.viewAssetNotPresentPG(
				assetContent = "Content C",
				assetTitle = "Content C");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name-staging/home");

			AssetPublisherPortlet.viewAssetPG(
				assetContent = "Content B",
				assetTitle = "Content B");

			AssetPublisherPortlet.viewAssetNotPresentPG(
				assetContent = "Content A",
				assetTitle = "Content A");

			AssetPublisherPortlet.viewAssetNotPresentPG(
				assetContent = "Content C",
				assetTitle = "Content C");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/test-site-name-staging/admin");

			AssetPublisherPortlet.viewAssetPG(
				assetContent = "Content C",
				assetTitle = "Content C");

			AssetPublisherPortlet.viewAssetNotPresentPG(
				assetContent = "Content A",
				assetTitle = "Content A");

			AssetPublisherPortlet.viewAssetNotPresentPG(
				assetContent = "Content B",
				assetTitle = "Content B");
		}

		task ("When the site administrator publishes changes to live") {
			Staging.gotoPublishToLive();

			Staging.publishToLive();
		}

		task ("Then the site administrator could filter collection items by personalized variations in live site") {
			Navigator.openSiteURL(siteName = "Test Site Name");

			AssetPublisherPortlet.viewAssetPG(
				assetContent = "Content A",
				assetTitle = "Content A");

			AssetPublisherPortlet.viewAssetNotPresentPG(
				assetContent = "Content B",
				assetTitle = "Content B");

			AssetPublisherPortlet.viewAssetNotPresentPG(
				assetContent = "Content C",
				assetTitle = "Content C");

			Navigator.openSitePage(
				pageName = "home",
				siteName = "Test Site Name");

			AssetPublisherPortlet.viewAssetPG(
				assetContent = "Content B",
				assetTitle = "Content B");

			AssetPublisherPortlet.viewAssetNotPresentPG(
				assetContent = "Content A",
				assetTitle = "Content A");

			AssetPublisherPortlet.viewAssetNotPresentPG(
				assetContent = "Content C",
				assetTitle = "Content C");

			Navigator.openSitePage(
				pageName = "admin",
				siteName = "Test Site Name");

			AssetPublisherPortlet.viewAssetPG(
				assetContent = "Content C",
				assetTitle = "Content C");

			AssetPublisherPortlet.viewAssetNotPresentPG(
				assetContent = "Content A",
				assetTitle = "Content A");

			AssetPublisherPortlet.viewAssetNotPresentPG(
				assetContent = "Content B",
				assetTitle = "Content B");
		}
	}

	@description = "This is a test for LPS-166045. The site designer could see the usages of Collections from staging and live site."
	@priority = 4
	test ViewUsagesOfCollection {
		task ("Given the site designer has a collection") {
			JSONAssetlist.addDynamicAssetListEntryWithItemType(
				groupName = "Test Site Name (Staging)",
				itemType = "All Types",
				site = "false",
				title = "Dynamic Collection");
		}

		task ("When the site designer select the dynamic collection on a Collection Display in staging site") {
			JSONLayout.addPublicLayout(
				groupName = "Test Site Name (Staging)",
				layoutName = "Test Page Name",
				site = "false",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = "Test Site Name Staging");

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");

			PageEditor.editCollectionDisplay(
				assetListName = "Dynamic Collection",
				fragmentName = "Collection Display");

			PageEditor.publish();
		}

		task ("Then the site designer could directly see usages on the dynamic collection in staging site") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name-staging");

			LexiconTable.viewTableEntryInfo(
				columnName = "usages",
				tableEntry = "Dynamic Collection",
				tableEntryInfo = 2);

			LexiconEntry.changeDisplayStyle(displayStyle = "list");

			LexiconList.viewListEntrySubtitle(
				listEntry = "Dynamic Collection",
				listEntrySubtitle = "2 Usages");
		}

		task ("When the site designer publishes to live") {
			Staging.openStagingAdmin(siteURLKey = "test-site-name-staging");

			Staging.publishCustomPublication();
		}

		task ("Then the site designer could directly see usages on the dynamic collection in live site") {
			AssetListsAdmin.openAssetListsAdmin(siteURLKey = "test-site-name");

			LexiconList.viewListEntrySubtitle(
				listEntry = "Dynamic Collection",
				listEntrySubtitle = "2 Usages");

			LexiconEntry.changeDisplayStyle(displayStyle = "table");

			LexiconTable.viewTableEntryInfo(
				columnName = "usages",
				tableEntry = "Dynamic Collection",
				tableEntryInfo = 2);
		}
	}

}