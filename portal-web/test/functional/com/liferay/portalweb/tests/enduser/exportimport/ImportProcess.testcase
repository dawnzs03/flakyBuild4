@component-name = "portal-staging"
definition {

	property ci.retries.disabled = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Export/Import Framework";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Site.tearDownCP();
		}
	}

	@description = "This is a use case for LPS-166514. TC-1: Verify that the import process related LAR file is thrown away immediately after the process."
	@priority = 5
	test LARFileRemovedAfterImportProcess {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given: Import two types of LAR files") {
			HeadlessSite.addSite(siteName = "Site Name");

			JSONBlog.addEntry(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				groupName = "Site Name");

			BlogsNavigator.openBlogsAdmin(siteURLKey = "site-name");

			LAR.exportPortlet(larFileName = "Blog_portlet.lar");

			JSONGroup.deleteGroupByName(groupName = "Site Name");

			for (var layoutUtilityPageName : list "404,500") {
				JSONLayoututilitypage.deleteLayoutUtilityPage(
					groupName = "Guest",
					layoutUtilityPageName = ${layoutUtilityPageName});
			}

			LAR.importSiteCP(
				larFileName = "HR_Home_Page_Content_master.lar",
				siteName = "Guest",
				uploadFrom = "dependencies");

			BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

			LAR.importPortlet(larFileName = "Blog_portlet.lar");
		}

		task ("When: Query the stored import LAR files in the database") {
			var lARFileStatus = ExportImport.getLARFileStatus();
		}

		task ("Then: Verify that the import process related LAR files are removed without waiting") {
			TestUtils.assertEquals(
				actual = ${lARFileStatus},
				expected = "Deleted successfully");
		}
	}

	@description = "This is a use case for LPS-166514. TC-2: Verify that the expired import process entries can be removed after triggering scheduler job manually."
	@priority = 5
	test TriggerSchedulerJobManuallyCanRemoveExpiredImportEntry {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given: Import two types of LAR files") {
			HeadlessSite.addSite(siteName = "Site Name");

			JSONBlog.addEntry(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title",
				groupName = "Site Name");

			BlogsNavigator.openBlogsAdmin(siteURLKey = "site-name");

			LAR.exportPortlet(larFileName = "Blog_portlet.lar");

			JSONGroup.deleteGroupByName(groupName = "Site Name");

			for (var layoutUtilityPageName : list "404,500") {
				JSONLayoututilitypage.deleteLayoutUtilityPage(
					groupName = "Guest",
					layoutUtilityPageName = ${layoutUtilityPageName});
			}

			LAR.importSiteCP(
				larFileName = "HR_Home_Page_Content_master.lar",
				siteName = "Guest",
				uploadFrom = "dependencies");

			BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

			LAR.importPortlet(larFileName = "Blog_portlet.lar");
		}

		task ("When: Modify the modifiedDate of background task to a past date and trigger scheduler job manually") {
			ExportImport.updateLayoutBackgroundTaskModifiedDateToPast(type = "Import");

			ExportImport.updatePortletBackgroundTaskModifiedDateToPast(type = "Import");

			ApplicationsMenu.gotoPortlet(
				category = "System",
				panel = "Control Panel",
				portlet = "Server Administration");

			ServerAdministration.executeServerResourcesActions(actionsDescription = "Clear the database cache.");

			JobScheduler.openJobSchedulerAdmin();

			Navigator.gotoNavItem(navItem = "Scheduled Jobs");

			Click.clickAtNotVisible(locator1 = "Blueprints#PAGINATION_NEXT_LINK");

			Click.clickAtNotVisible(
				key_name = "DeleteObsoleteBackgroundTasksSchedulerJobConfiguration",
				locator1 = "JobScheduler#RUN_NOW_BUTTON");

			Alert.viewSuccessMessage();
		}

		task ("Then: Verify that the import entries and the stored import LAR files are removed without waiting") {
			var backgroundTaskStatus = ExportImport.getBackgroundTaskStatus(type = "Import");

			TestUtils.assertEquals(
				actual = ${backgroundTaskStatus},
				expected = "Deleted successfully");

			LAR.openImportAdmin(siteName = "guest");

			LexiconEntry.viewNoEntry(rowEntry = "HR_Home_Page_Content_master.lar");

			BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

			LAR._gotoExportImport();

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			Click(
				key_navItem = "Import",
				locator1 = "NavBar#NAV_ITEM_LINK");

			Click(locator1 = "ExportImport#CURRENT_AND_PREVIOUS_TAB");

			AssertElementNotPresent(locator1 = "ExportImport#CURRENT_AND_PREVIOUS_STATUS_1");
		}
	}

	@description = "This is a use case for LPS-182567. TC-1: Verify that a confirmation pop-up should show up when Delete Application Data Before Importing checkbox is checked."
	@priority = 5
	test ViewDeletingApplicationDataPopUpOnDefaultSite {
		task ("Given: Add a web content article and a document file") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Guest",
				title = "WC WebContent Title");

			JSONDocument.addFileWithUploadedFile(
				dmDocumentTitle = "Document_1",
				groupName = "Guest",
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpg");

			for (var layoutUtilityPageName : list "404,500") {
				JSONLayoututilitypage.deleteLayoutUtilityPage(
					groupName = "Guest",
					layoutUtilityPageName = ${layoutUtilityPageName});
			}
		}

		task ("When: Import a site lar file and check the Delete Application Data Before Importing checkbox") {
			LAR.openImportAdmin(siteName = "guest");

			LAR._selectImportFileSite(
				larFileName = "HR_Home_Page_Content_master.lar",
				uploadFrom = "dependencies");

			while (IsElementNotPresent(locator1 = "Button#CONTINUE")) {
				WaitForElementPresent(locator1 = "Button#CONTINUE");
			}

			Click(locator1 = "Button#CONTINUE");

			Click.clickAtNotVisible(locator1 = "StagingPublishToLive#DELETE_APPLICATION_DATA_BEFORE_IMPORTING_CHECKBOX");

			AssertClickNoError(
				key_text = "Import",
				locator1 = "Button#ANY",
				value1 = "Import");
		}

		task ("Then: Verify that after clicking cancel button, the confirmation dialog closes and the page is redirected to the New Import Process screen") {
			Confirm.dismissAlert();

			AssertChecked.assertCheckedNotVisible(
				checkboxName = "Delete Application Data Before Importing",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}

		task ("And: Verify that after clicking ok button, the import process starts, the web content and document are deleted") {
			AssertClickNoError(
				key_text = "Import",
				locator1 = "Button#ANY",
				value1 = "Import");

			AssertConfirm(value1 = "Deleting application data before importing cannot be undone. Some applications in other pages might be referencing this data. Are you sure you want to continue deleting application data?");

			AssertTextEquals(
				locator1 = "ExportImport#CURRENT_AND_PREVIOUS_STATUS_1",
				value1 = "Successful");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

			WebContent.viewNotPresentCP(webContentTitle = "WC WebContent Title");

			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

			AssertElementNotPresent(
				key_card = "Document_1",
				locator1 = "Card#CARD_TITLE");
		}
	}

	@description = "This is a use case for LPS-182567. TC-6: Verify that a confirmation pop-up should show up when Delete Application Data Before Importing checkbox is checked on staging site."
	@priority = 5
	test ViewDeletingApplicationDataPopUpOnStagingSite {
		task ("Given: Add a web content article and a document file on staging site") {
			JSONStaging.enableLocalStaging(groupName = "Guest");

			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Guest (Staging)",
				site = "false",
				title = "WC WebContent Title");

			JSONDocument.addFileWithUploadedFile(
				dmDocumentTitle = "Document_1",
				groupName = "Guest-staging",
				mimeType = "image/jpeg",
				site = "false",
				sourceFileName = "Document_1.jpg");

			for (var layoutUtilityPageName : list "404,500") {
				JSONLayoututilitypage.deleteLayoutUtilityPage(
					groupName = "Guest (Staging)",
					layoutUtilityPageName = ${layoutUtilityPageName},
					site = "false");
			}
		}

		task ("When: Import a site lar file and check the Delete Application Data Before Importing checkbox") {
			LAR.openImportAdmin(siteName = "guest-staging");

			LAR._selectImportFileSite(
				larFileName = "HR_Home_Page_Content_master.lar",
				uploadFrom = "dependencies");

			while (IsElementNotPresent(locator1 = "Button#CONTINUE")) {
				WaitForElementPresent(locator1 = "Button#CONTINUE");
			}

			Click(locator1 = "Button#CONTINUE");

			Click.clickAtNotVisible(locator1 = "StagingPublishToLive#DELETE_APPLICATION_DATA_BEFORE_IMPORTING_CHECKBOX");

			AssertClickNoError(
				key_text = "Import",
				locator1 = "Button#ANY",
				value1 = "Import");
		}

		task ("Then: Verify that after clicking cancel button, the confirmation dialog closes and the page is redirected to the New Import Process screen") {
			Confirm.dismissAlert();

			AssertChecked.assertCheckedNotVisible(
				checkboxName = "Delete Application Data Before Importing",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}

		task ("And: Verify that after clicking ok button, the import process starts, the web content and document are deleted") {
			AssertClickNoError(
				key_text = "Import",
				locator1 = "Button#ANY",
				value1 = "Import");

			AssertConfirm(value1 = "Deleting application data before importing cannot be undone. Some applications in other pages might be referencing this data. Are you sure you want to continue deleting application data?");

			AssertTextEquals(
				locator1 = "ExportImport#CURRENT_AND_PREVIOUS_STATUS_1",
				value1 = "Successful");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "guest-staging");

			WebContent.viewNotPresentCP(webContentTitle = "WC WebContent Title");

			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest-staging");

			AssertElementNotPresent(
				key_card = "Document_1",
				locator1 = "Card#CARD_TITLE");
		}
	}

	@description = "This is a use case for LPS-182567. TC-4: Verify that a confirmation pop-up should show up when Delete Application Data Before Importing checkbox is checked on virtual instance."
	@priority = 5
	test ViewDeletingApplicationDataPopUpOnVirtualInstance {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given: Add a virtual instance and create a web content article and a document file in it") {
			PortalInstances.openVirtualInstancesAdmin();

			PortalInstances.addCP(
				mailDomain = "liferay.com",
				virtualHost = "www.able.com",
				webId = "www.able.com");

			User.logoutPG();

			User.firstLoginPG(
				password = "test",
				userEmailAddress = "test@liferay.com",
				virtualHostsURL = "http://www.able.com:8080");

			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Guest",
				title = "WC WebContent Title",
				userEmailAddress = "test@liferay.com",
				userPassword = "test");

			JSONDocument.addFileWithUploadedFile(
				dmDocumentTitle = "Document_1",
				groupName = "Guest",
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpg",
				userEmailAddress = "test@liferay.com",
				userPassword = "test");

			Navigator.openSpecificURL(url = "http://www.able.com:8080");

			ApplicationsMenu.gotoPortlet(
				category = "Sites",
				panel = "Control Panel",
				portlet = "Sites");

			Site.addBlankCP(siteName = "Site Name");

			for (var layoutUtilityPageName : list "404 Error,500 Error") {
				JSONLayoututilitypage.deleteLayoutUtilityPage(
					groupName = "Site Name",
					layoutUtilityPageName = ${layoutUtilityPageName},
					portalInstanceName = "www.able.com",
					portalURL = "http://www.able.com:8080");
			}
		}

		task ("When: Import a site lar file and check the Delete Application Data Before Importing checkbox") {
			LAR.openImportAdmin(
				baseURL = "http://www.able.com:8080",
				siteName = "Site Name");

			LAR._selectImportFileSite(
				larFileName = "HR_Home_Page_Content_master.lar",
				uploadFrom = "dependencies");

			WaitForElementPresent(locator1 = "Button#CONTINUE");

			Click(locator1 = "Button#CONTINUE");

			Click.clickAtNotVisible(locator1 = "StagingPublishToLive#DELETE_APPLICATION_DATA_BEFORE_IMPORTING_CHECKBOX");

			AssertClickNoError(
				key_text = "Import",
				locator1 = "Button#ANY",
				value1 = "Import");
		}

		task ("Then: Verify that after clicking cancel button, the confirmation dialog closes and the page is redirected to the New Import Process screen") {
			Confirm.dismissAlert();

			AssertChecked.assertCheckedNotVisible(
				checkboxName = "Delete Application Data Before Importing",
				locator1 = "Checkbox#ANY_CHECKBOX");
		}

		task ("And: Verify that after clicking ok button, the import process starts, the web content and document are deleted") {
			AssertClickNoError(
				key_text = "Import",
				locator1 = "Button#ANY",
				value1 = "Import");

			AssertConfirm(value1 = "Deleting application data before importing cannot be undone. Some applications in other pages might be referencing this data. Are you sure you want to continue deleting application data?");

			AssertTextEquals(
				locator1 = "ExportImport#CURRENT_AND_PREVIOUS_STATUS_1",
				value1 = "Successful");

			WebContentNavigator.openWebContentAdmin(
				baseURL = "http://www.able.com:8080",
				siteURLKey = "site-name");

			WebContent.viewNotPresentCP(webContentTitle = "WC WebContent Title");

			DMNavigator.openDocumentsAndMediaAdmin(
				baseURL = "http://www.able.com:8080",
				siteURLKey = "site-name");

			AssertElementNotPresent(
				key_card = "Document_1",
				locator1 = "Card#CARD_TITLE");
		}
	}

	@description = "This is a use case for LPS-182567. TC-2: Verify that no confirmation pop-up should show up when Delete Application Data Before Importing checkbox is not checked."
	@priority = 5
	test ViewNoDeletingApplicationDataPopUpWhenUncheckCheckbox {
		task ("Given: Add a web content article and a document file") {
			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Guest",
				title = "WC WebContent Title");

			JSONDocument.addFileWithUploadedFile(
				dmDocumentTitle = "Document_1",
				groupName = "Guest",
				mimeType = "image/jpeg",
				sourceFileName = "Document_1.jpg");

			for (var layoutUtilityPageName : list "404,500") {
				JSONLayoututilitypage.deleteLayoutUtilityPage(
					groupName = "Guest",
					layoutUtilityPageName = ${layoutUtilityPageName});
			}
		}

		task ("When: Import a site lar file and uncheck the Delete Application Data Before Importing checkbox") {
			LAR.importSiteCP(
				deleteApplicationData = "false",
				larFileName = "HR_Home_Page_Content_master.lar",
				siteName = "Guest",
				uploadFrom = "dependencies");
		}

		task ("Then: Verify that web content and document are not deleted before the import process") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

			WebContent.viewTitle(webContentTitle = "WC WebContent Title");

			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

			AssertElementPresent(
				key_dmDocumentTitle = "Document_1",
				locator1 = "DocumentsAndMedia#DESCRIPTIVE_LIST_DOCUMENT_TITLE");
		}
	}

}