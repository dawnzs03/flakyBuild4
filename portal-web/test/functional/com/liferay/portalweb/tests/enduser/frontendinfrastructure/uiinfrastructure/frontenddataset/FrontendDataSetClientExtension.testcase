@component-name = "portal-frontend-infrastructure"
definition {

	property custom.properties = "feature.flag.LPS-172904=true";
	property portal.acceptance = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Frontend Data Set";
	property testray.main.component.name = "Frontend Data Set";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONLayout.deletePublicLayout(
				groupName = "Guest",
				layoutName = "Frontend Data Set Test Page");
		}
	}

	@description = "LPS-185873 Confirm Cell Renderer label in cell renderer option"
	@priority = 3
	test AssertTheCellRendererIsDisplayed {
		property osgi.modules.includes = "frontend-data-set-sample-web";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given a client extension zip file deployed") {
			FileInstall.deployFileOnServer(jarFile = "liferay-sample-fds-cell-renderer.zip");

			WaitForConsoleTextPresent(value1 = "STARTED liferaysamplefdscellrenderer_7.4.13");

			Refresh();
		}

		task ("And the creation of a new data set") {
			DataSetAdmin.goToDataSetAdminPage();

			DataSetAdmin.createDataSetEntryViaAPI(
				dataSetName = "Data Set Fields Test",
				restApplication = "/data-set-manager/fields",
				restEndpoint = "/",
				restSchema = "FDSField");
		}

		task ("And adding a dataset view") {
			DataSetAdmin.createFDSViewViaAPI(
				dataSetName = "Data Set Fields Test",
				dataSetViewDescription = "FDSViewDescription",
				key_dataSetViewNameList = "View Fields Test");
		}

		task ("When go to the View page of the data set created.") {
			DataSetAdmin.goToSpecificViewPage(
				dataSetName = "Data Set Fields Test",
				key_viewName = "View Fields Test");
		}

		task ("When the user goes to Fields tab") {
			DataSetAdmin.goToTab(tabName = "Fields");
		}

		task ("And adds new fields //creator, id, status") {
			DataSetAdmin.addFields(key_fieldList = "creator,id,status");
		}

		task ("And edits one of the fields") {
			Click(
				key_fieldName = "creator",
				locator1 = "DataSet#VERTICAL_ELLIPSIS_BY_FIELDS_NAME");

			MenuItem.click(menuItem = "Edit");
		}

		task ("When the user clicks on the Renderer field") {
			Click(
				key_dropdownItem = "Default",
				locator1 = "TableViewBuilder#FILTER_DROPDOWN_ITEM");
		}

		task ("And there is not Cell Renderer label in the cell renderer option") {
			AssertElementPresent(
				key_selectAction = "Liferay Sample Frontend Data Set Cell Renderer",
				locator1 = "FormViewBuilder#FIELD_ELLIPSIS_ACTION");
		}
	}

	@description = "LPS-185873 Confirm that the Client Extension label is displayed on the drop-down item"
	@priority = 5
	test CanAssertClientExtensionInDropdown {
		property osgi.modules.includes = "frontend-data-set-sample-web";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given a client extension zip file deployed") {
			FileInstall.deployFileOnServer(jarFile = "liferay-sample-fds-cell-renderer.zip");

			WaitForConsoleTextPresent(value1 = "STARTED liferaysamplefdscellrenderer_7.4.13");

			Refresh();
		}

		task ("And the creation of a new data set") {
			DataSetAdmin.goToDataSetAdminPage();

			DataSetAdmin.createDataSetEntryViaAPI(
				dataSetName = "Data Set Fields Test",
				restApplication = "/data-set-manager/fields",
				restEndpoint = "/",
				restSchema = "FDSField");
		}

		task ("And adding a dataset view") {
			DataSetAdmin.createFDSViewViaAPI(
				dataSetName = "Data Set Fields Test",
				dataSetViewDescription = "FDSViewDescription",
				key_dataSetViewNameList = "View Fields Test");
		}

		task ("When go to the View page of the data set created.") {
			DataSetAdmin.goToSpecificViewPage(
				dataSetName = "Data Set Fields Test",
				key_viewName = "View Fields Test");
		}

		task ("When the user goes to Fields tab") {
			DataSetAdmin.goToTab(tabName = "Fields");
		}

		task ("And adds new fields //creator, id, status") {
			DataSetAdmin.addFields(key_fieldList = "creator,id,status");
		}

		task ("And edits one of the fields") {
			Click(
				key_fieldName = "creator",
				locator1 = "DataSet#VERTICAL_ELLIPSIS_BY_FIELDS_NAME");

			MenuItem.click(menuItem = "Edit");
		}

		task ("Then there is a Cell Renderer available to be selected") {
			Click(
				key_dropdownItem = "Default",
				locator1 = "TableViewBuilder#FILTER_DROPDOWN_ITEM");
		}

		task ("And the label Client Extension is displayed in the dropdown item") {
			AssertElementPresent(
				key_workflowStatus = "Client Extension",
				locator1 = "ProcessBuilderKaleoDesigner#WORKFLOW_STATUS");
		}
	}

	@description = "LPS-185873 Confirm that the Renderer column is present on the fields creation page"
	@priority = 5
	test CanAssertTheRendererColumn {
		task ("Given the creation of a new data set") {
			DataSetAdmin.goToDataSetAdminPage();

			DataSetAdmin.createDataSetEntryViaAPI(
				dataSetName = "Data Set Fields Test",
				restApplication = "/data-set-manager/fields",
				restEndpoint = "/",
				restSchema = "FDSField");
		}

		task ("And adding a dataset view ") {
			DataSetAdmin.createFDSViewViaAPI(
				dataSetName = "Data Set Fields Test",
				dataSetViewDescription = "FDSViewDescription",
				key_dataSetViewNameList = "View Fields Test");
		}

		task ("When go to the View page of the data set created.") {
			DataSetAdmin.goToSpecificViewPage(
				dataSetName = "Data Set Fields Test",
				key_viewName = "View Fields Test");
		}

		task ("And the user goes to Fields tab") {
			DataSetAdmin.goToTab(tabName = "Fields");
		}

		task ("When the user adds new fields") {
			DataSetAdmin.addFields(key_fieldList = "creator,id,status");
		}

		task ("Then the column Renderer appears") {
			AssertElementPresent(
				key_type = "Renderer",
				locator1 = "DataSet#FIELD_COLUMN_NAME");
		}
	}

	@description = "LPS-176807. Verify if the apple icon appears when file is deployed"
	@priority = 4
	test CanChangeFilterWithClientExtension {
		property osgi.modules.includes = "frontend-data-set-sample-web";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given Sample FDS portlet deployed") {
			FileInstall.deployFileOnServer(jarFile = "liferay-sample-fds-cell-renderer.zip");

			WaitForConsoleTextPresent(value1 = "STARTED liferay-sample-fds-cell-renderer_1.0.0");
		}

		task ("When entering on a page which uses FDS") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Frontend Data Set Test Page");

			JSONLayout.updateLayoutTemplateOfPublicLayout(
				groupName = "Guest",
				layoutName = "Frontend Data Set Test Page",
				layoutTemplate = "1 Column");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Guest",
				layoutName = "Frontend Data Set Test Page",
				widgetName = "Frontend Data Set Sample");

			Navigator.gotoPage(pageName = "Frontend Data Set Test Page");
		}

		task ("Then an apple emoji appears instead of the word green") {
			Click(
				key_sampleTab = "Customized",
				locator1 = "FrontendDataSet#FDS_DATASET");

			WaitForElementPresent(
				assetType = "apple",
				index = 1,
				locator1 = "Fragment#CONTENT_DISPLAY_TEXT");

			AssertElementPresent(
				assetType = "apple",
				index = 1,
				locator1 = "Fragment#CONTENT_DISPLAY_TEXT");
		}
	}

	@description = "LPS-176807. Verify if is not possible to see an client extension deployed"
	@priority = 4
	test CannotSeeClientExtensionNotDeployed {
		task ("When you access the Client Extension admin page") {
			ApplicationsMenu.gotoPortlet(
				category = "Custom Apps",
				panel = "Applications",
				portlet = "Client Extensions");
		}

		task ("Then the client extension is not present") {
			AssertElementNotPresent(
				key_tableEntryName = "Liferay Sample Frontend Data Set Cell Renderer",
				locator1 = "ClientExtension#TABLE_ENTRY_NAME_REMOTE_TABLE");

			AssertElementNotPresent(
				key_tableEntryType = "Frontend Data Set Cell Renderer",
				locator1 = "ClientExtension#TABLE_ENTRY_TYPE_REMOTE_TABLE");
		}
	}

	@description = "LPS-176807. Verify if the Client Extension are visible when deploys"
	@priority = 4
	test CanViewDeployedFile {
		property osgi.modules.includes = "frontend-data-set-sample-web";

		task ("When create a page") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Frontend Data Set Test Page");
		}

		task ("And Go to page edit page") {
			Navigator.gotoPage(pageName = "Frontend Data Set Test Page");

			Click(locator1 = "Icon#PLUS");
		}

		task ("Then Confirm the client extension sample is located at Widgets > Samples") {
			Click(
				key_panel = "Sample",
				locator1 = "Panel#PANEL");

			AssertElementPresent(
				key_remoteAppName = "Frontend Data Set Sample",
				locator1 = "ClientExtension#APPLICATION_SEARCH_FIELD_WIDGET_SEARCH_REMOTE_APP");
		}
	}

	@description = "LPS-176807. Verify if filters are corretly displayed"
	@priority = 4
	test CanViewSpecificFilters {
		property osgi.modules.includes = "frontend-data-set-sample-web";

		task ("And entering on a page which uses FDS") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Frontend Data Set Test Page");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Guest",
				layoutName = "Frontend Data Set Test Page",
				widgetName = "Frontend Data Set Sample");

			Navigator.gotoPage(pageName = "Frontend Data Set Test Page");
		}

		task ("When Selecting the Customized tab") {
			Click(
				key_sampleTab = "Customized",
				locator1 = "FrontendDataSet#FDS_DATASET");
		}

		task ("Then check that the user can see the word "Green" within the Color column") {
			AssertElementPresent(
				key_color = "Green",
				key_field = "Color",
				locator1 = "FrontendDataSet#SEARCH_COLUMN_AND_ROW");
		}
	}

}