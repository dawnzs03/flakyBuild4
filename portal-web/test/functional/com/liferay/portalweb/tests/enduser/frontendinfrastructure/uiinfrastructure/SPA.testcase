@component-name = "portal-frontend-infrastructure"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "User Interface";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "LPS-172764 Confirm that filtering the WCs does not deselect them"
	@priority = 4
	test CanAssertTheWCAreNotDeselected {
		task ("And there are 6 web content articles") {
			for (var i : list "1,2,3,4,5,6") {
				JSONWebcontent.addWebContent(
					content = "WebContent${i}",
					description = "Description${i}",
					groupName = "Guest",
					title = "WebContentTitle${i}");
			}
		}

		task ("And pagination is set to 4") {
			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Web Content");

			Pagination.changePagination(itemsPerPage = 4);
		}

		task ("When I filter using the management bar") {
			Click(
				key_text = "Filter and Order",
				locator1 = "Button#ANY_WITH_SPAN");

			Click(
				key_value = "Recent",
				locator1 = "ProcessBuilderListView#DROPDOWN_ITEM");
		}

		task ("And two articles are selected, one from each page") {
			Click(
				key_title = "WebContentTitle6",
				locator1 = "WCEditWebContent#SELECT_CHECKBOX_WC");

			Click(locator1 = "Pagination#NEXT_LINK");

			Click(
				key_title = "WebContentTitle2",
				locator1 = "WCEditWebContent#SELECT_CHECKBOX_WC");
		}

		task ("And clear the filters") {
			Click(locator1 = "ManagementBar#CLEAR_FILTER");
		}

		task ("Then the selections should still be kept") {
			AssertElementPresent(
				key_title = "WebContentTitle2",
				locator1 = "WCEditWebContent#SELECT_CHECKBOX_WC");

			Click(locator1 = "Pagination#FIRST_LINK");

			AssertElementPresent(
				key_title = "WebContentTitle6",
				locator1 = "WCEditWebContent#SELECT_CHECKBOX_WC");
		}
	}

	@description = "LPS-172764 Confirm that WC is deselected when you go to another tab and come back to WC"
	@priority = 4
	test CanAssertWCDoesNotStaySelected {
		task ("And there are 6 web content articles") {
			for (var i : list "1,2,3,4,5,6") {
				JSONWebcontent.addWebContent(
					content = "WebContent${i}",
					description = "Description${i}",
					groupName = "Guest",
					title = "WebContentTitle${i}");
			}
		}

		task ("And pagination is set to 4") {
			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Web Content");

			Pagination.changePagination(itemsPerPage = 4);
		}

		task ("And two articles are selected, one from each page") {
			Click(
				key_title = "WebContentTitle6",
				locator1 = "WCEditWebContent#SELECT_CHECKBOX_WC");

			Click(locator1 = "Pagination#NEXT_LINK");

			Click(
				key_title = "WebContentTitle2",
				locator1 = "WCEditWebContent#SELECT_CHECKBOX_WC");
		}

		task ("When I navigate away from Web Content") {
			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Blogs");
		}

		task ("And navigate back to Web Content") {
			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Web Content");
		}

		task ("Then both itens should still be selected and be displayed at the top of both pages.") {
			AssertElementPresent(
				key_title = "WebContentTitle2",
				locator1 = "WCEditWebContent#SELECT_CHECKBOX_WC");

			AssertElementPresent(
				key_title = "WebContentTitle6",
				locator1 = "WCEditWebContent#SELECT_CHECKBOX_WC");
		}
	}

	@description = "LPS-172764 Confirm that WC can be excluded in two pages of pagination"
	@priority = 4
	test IsPossibleToDeleteWCOnEachPage {
		task ("And there are 6 web content articles") {
			for (var i : list "1,2,3,4,5,6") {
				JSONWebcontent.addWebContent(
					content = "WebContent${i}",
					description = "Description${i}",
					groupName = "Guest",
					title = "WebContentTitle${i}");
			}
		}

		task ("And pagination is set to 4") {
			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Web Content");

			Pagination.changePagination(itemsPerPage = 4);
		}

		task ("and two articles are selected, one from each page") {
			Click(
				key_title = "WebContentTitle6",
				locator1 = "WCEditWebContent#SELECT_CHECKBOX_WC");

			Click(locator1 = "Pagination#NEXT_LINK");

			Click(
				key_title = "WebContentTitle2",
				locator1 = "WCEditWebContent#SELECT_CHECKBOX_WC");
		}

		task ("When I delete the articles from the toolbar") {
			ClickNoError(locator1 = "Button#TRASH_ENABLED");
		}

		task ("Then both itens from both pages should be deleted.") {
			Alert.viewSuccessMessageText(successMessage = "2 items were moved to the Recycle Bin.");
		}
	}

	@description = "Verify loading bar can be visible during new location based SPA load event"
	@priority = 5
	@refactordone
	test NewURLLoadEventCanDisplayLoadingBar {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		AssertVisible.assertVisibleNoSPAWait(locator1 = "//html[contains(@class,'lfr-spa-loading')]");
	}

	@description = "LPS-67072. Set the user notification timeout to 1 second"
	@priority = 4
	test SPANotificationSetTimeout {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given: set the user notification timeout to 1 second") {
			SystemSettings.openSystemSettingsAdmin();

			SystemSettings.gotoConfiguration(
				configurationCategory = "Infrastructure",
				configurationName = "Frontend SPA Infrastructure",
				configurationScope = "System Scope");

			Type(
				key_text = "User Notification Timeout",
				locator1 = "TextInput#ANY",
				value1 = 1000);

			SystemSettings.saveConfiguration();

			Refresh();
		}

		task ("When: Activate the slow script/portlet to cause a SPA timeout") {
			ServerAdministration.openServerAdmin();

			var script = '''
				sleep(1000);
				out.println('Timeout notification warning triggered');
			''';

			ServerAdministration.executeScript(
				language = "Groovy",
				script = ${script});
		}

		task ("And When: pause for 1 second") {

			// We need this pause to wait for notification timeout. See LRQA-29748

			Pause(locator1 = 1000);
		}

		task ("Then: notification timeout pop up immediately appears") {
			AssertTextEquals(
				locator1 = "ServerAdministrationScript#OUTPUT_FIELD",
				value1 = "Timeout notification warning triggered");
		}
	}

	@description = "LPS-172764 Confirm that the first selection is displayed at the top of the first Web Content page"
	@priority = 4
	test TheItemsListIsCorrectInFirstPage {
		task ("And there are 6 web content articles") {
			for (var i : list "1,2,3,4,5,6") {
				JSONWebcontent.addWebContent(
					content = "WebContent${i}",
					description = "Description${i}",
					groupName = "Guest",
					title = "WebContentTitle${i}");
			}
		}

		task ("And pagination is set to 4") {
			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Web Content");

			Pagination.changePagination(itemsPerPage = 4);
		}

		task ("When I select article from both pages") {
			Click(locator1 = "Pagination#NEXT_LINK");

			Click(
				key_title = "WebContentTitle2",
				locator1 = "WCEditWebContent#SELECT_CHECKBOX_WC");
		}

		task ("and go back to the first page") {
			Click(locator1 = "Pagination#FIRST_LINK");
		}

		task ("Then both itens should still be selected and be displayed at the top of both pages.") {
			AssertTextEquals.assertPartialText(
				locator1 = "ManagementBar#NAVBAR_TEXT",
				value1 = "1 of 6 Items Selected");
		}
	}

	@description = "LPS-172764 Confirm that the first selection is displayed at the top of the second Web Content page"
	@priority = 4
	test TheItemsListIsCorrectInSecondPage {
		task ("And there are 6 web content articles") {
			for (var i : list "1,2,3,4,5,6") {
				JSONWebcontent.addWebContent(
					content = "WebContent${i}",
					description = "Description${i}",
					groupName = "Guest",
					title = "WebContentTitle${i}");
			}
		}

		task ("And pagination is set to 4") {
			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Web Content");

			Pagination.changePagination(itemsPerPage = 4);
		}

		task ("When I select an item on the first page") {
			Click(
				key_title = "WebContentTitle6",
				locator1 = "WCEditWebContent#SELECT_CHECKBOX_WC");

			AssertTextEquals.assertPartialText(
				locator1 = "ManagementBar#NAVBAR_TEXT",
				value1 = "1 of 6 Items Selected");
		}

		task ("And navigate to the second page") {
			Click(locator1 = "Pagination#NEXT_LINK");

			Click(
				key_title = "WebContentTitle2",
				locator1 = "WCEditWebContent#SELECT_CHECKBOX_WC");
		}

		task ("Then the first selection should be displayed at the top of the second page.") {
			AssertTextEquals.assertPartialText(
				locator1 = "ManagementBar#NAVBAR_TEXT",
				value1 = "2 of 6 Items Selected");
		}
	}

	@description = "LPS-172764 Confirm that WC is deselected when exiting and entering the Web Content tab"
	@priority = 4
	test WCDoesNotStaySelectedIfLeavingTheWCTab {
		task ("And there are 6 web content articles") {
			for (var i : list "1,2,3,4,5,6") {
				JSONWebcontent.addWebContent(
					content = "WebContent${i}",
					description = "Description${i}",
					groupName = "Guest",
					title = "WebContentTitle${i}");
			}
		}

		task ("And pagination is set to 4") {
			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Web Content");

			Pagination.changePagination(itemsPerPage = 4);
		}

		task ("And two articles are selected, one from each page") {
			Click(
				key_title = "WebContentTitle6",
				locator1 = "WCEditWebContent#SELECT_CHECKBOX_WC");

			Click(locator1 = "Pagination#NEXT_LINK");

			Click(
				key_title = "WebContentTitle2",
				locator1 = "WCEditWebContent#SELECT_CHECKBOX_WC");
		}

		task ("And navigate back to Web Content") {
			Navigator.openURL();

			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Web Content");
		}

		task ("Then both itens should still be selected and be displayed at the top of both pages.") {
			AssertElementPresent(
				key_title = "WebContentTitle2",
				locator1 = "WCEditWebContent#SELECT_CHECKBOX_WC");

			AssertElementPresent(
				key_title = "WebContentTitle6",
				locator1 = "WCEditWebContent#SELECT_CHECKBOX_WC");
		}
	}

}