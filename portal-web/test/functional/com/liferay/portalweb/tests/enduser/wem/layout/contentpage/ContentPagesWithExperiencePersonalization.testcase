@component-name = "portal-wcm"
definition {

	property ci.retries.disabled = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Content Pages";

	static var randomSiteName = StringUtil.randomString(8);

	var siteURLKey = StringUtil.toLowerCase(${randomSiteName});

	setUp {
		task ("Set up virtual instance") {
			TestCase.setUpPortalInstance();
		}

		task ("Sign in") {
			User.firstLoginPG();
		}

		task ("Add a site") {
			HeadlessSite.addSite(siteName = ${randomSiteName});
		}

		task ("Add a content page") {
			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name",
				type = "content");
		}
	}

	@description = "LPS-157033 Given the View mode of a page When an experience is active in the Control Menu Then the ACTIVE label will appear next to the experience name"
	@priority = 3
	test ActiveExperienceLabelInControlMenu {
		task ("Create an experience and add on content page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			ContentPages.gotoPageEditor();

			PageEditor.addExperience(
				experienceName = "NewAnyoneExperience",
				segmentName = "Anyone");

			PageEditor.prioritizeExperience(experienceName = "NewAnyoneExperience");

			PageEditor.publish();
		}

		task ("Go to the view mode of the page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});
		}

		task ("Switch to the new experience") {
			ContentPages.changeExperience(experienceName = "NewAnyoneExperience");
		}

		task ("Assert the Active label is present") {
			PageEditor.viewExperienceActiveInViewModeControlMenu(experienceName = "NewAnyoneExperience");
		}
	}

	@description = "LPS-157033 Given the View mode of a page When the Experience dropdown menu is displayed And there experiences active Then the ACTIVE label will appear next to each experience name active"
	@priority = 3
	test ActiveExperienceLabelInViewDropdown {
		task ("Create an experience and add on content page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			ContentPages.gotoPageEditor();

			PageEditor.addExperience(
				experienceName = "NewAnyoneExperience",
				segmentName = "Anyone");

			PageEditor.prioritizeExperience(experienceName = "NewAnyoneExperience");

			PageEditor.publish();
		}

		task ("Go to the view mode of the page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});
		}

		task ("Assert the Active label is present") {
			PageEditor.viewExperienceActiveInViewModeDropdown(experienceName = "NewAnyoneExperience");
		}
	}

	@description = "This is a test for LPS-142290. The user cannot modify experiences at view mode."
	@priority = 4
	test CannotModifyExperienceAtViewMode {
		task ("Add a Button fragment to a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");
		}

		task ("Add a new experience") {
			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "Anyone");
		}

		task ("Add a Heading fragment below the Button then publish") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading",
				targetFragmentName = "Button");

			PageEditor.publish();
		}

		task ("View cannot prioritize, deprioritize, edit, duplicate, delete experiences at view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			ContentPages.openExperienceMenu();

			for (var experienceName : list "Default,New Experience") {
				MenuItem.viewPresent(menuItem = ${experienceName});
			}

			for (var action : list "Prioritize,Deprioritize,Edit,Duplicate,Delete") {
				AssertElementNotPresent(
					ariaLabel = "${action} Experience",
					locator1 = "Button#ANY_WITH_ARIA_LABEL");
			}
		}
	}

	@description = "This is a test for LPS-142290. The user cannot modify experiences on preview draft page."
	@priority = 4
	test CannotModifyExperiencesOnPreviewDraftPage {
		task ("Add a Button fragment to a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");
		}

		task ("Add a new experience") {
			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "Anyone");
		}

		task ("Add a Heading fragment below the Button") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading",
				targetFragmentName = "Button");
		}

		task ("View cannot prioritize, deprioritize, edit, duplicate, delete experiences on preview draft page") {
			PagesAdmin.openPagesAdmin(siteURLKey = ${siteURLKey});

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Preview Draft",
				pageName = "Test Page Name");

			SelectWindow.selectPopUp(locator1 = "null");

			ControlMenu.viewHeaderDraftTitle(headerTitle = "Test Page Name");

			ControlMenu.viewHeaderTitleLabel(headerTitleLabel = "Draft");

			ContentPages.openExperienceMenu();

			for (var experienceName : list "Default,New Experience") {
				MenuItem.viewPresent(menuItem = ${experienceName});
			}

			for (var action : list "Prioritize,Deprioritize,Edit,Duplicate,Delete") {
				AssertElementNotPresent(
					ariaLabel = "${action} Experience",
					locator1 = "Button#ANY_WITH_ARIA_LABEL");
			}
		}
	}

	@description = "This is a test for LPS-140483. The site admin could create page template from content page based on non-default experience."
	@priority = 4
	test CreatePageTemplateFromContentPageBasedOnNonDefaultExperience {
		task ("Add a page template collection") {
			JSONLayoutpagetemplate.addLayoutPageTemplateCollection(
				groupName = ${randomSiteName},
				layoutPageTemplateCollectionName = "Page Template Collection");
		}

		task ("Add a new experience for Anyone") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "Anyone");
		}

		task ("Add a Heading fragment to content page based on new experience") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("View the info shown in Create Page Template modal then create a content page template under page template collection") {
			PageEditor.createPageTemplate(
				collectionName = "Page Template Collection",
				experienceName = "New Experience");
		}

		task ("View the content page template shown in Page Templates admin") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = ${siteURLKey});

			Navigator.gotoNavNested(navNested = "Page Template Collection");

			PageTemplatesAdmin.viewPageTemplatePresent(pageTemplateName = "Test Page Name - Page Template");

			PageTemplatesAdmin.viewEntryWorkflowStatus(
				entry = "Test Page Name - Page Template",
				workflowStatus = "Draft");
		}

		task ("View the Heading is shown in content page template") {
			PageTemplatesAdmin.gotoPageTemplate(pageTemplateName = "Test Page Name - Page Template");

			PageEditor.viewFragment(fragmentName = "Heading");
		}
	}

	@description = "This is a test for LPS-143321. After clicking on discard draft the page continues to run."
	@priority = 5
	test DiscardContentPageDraft {
		task ("Given a page designer has a content page with draft and experience") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Paragraph",
				targetFragmentName = "Heading");

			PageEditor.publish();

			PagesAdmin.openPagesAdmin(siteURLKey = ${randomSiteName});

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Edit",
				pageName = "Test Page Name");

			PageEditor.addExperience(
				experienceName = "Experience Name",
				segmentName = "Anyone");

			PageEditor.clickBack();
		}

		task ("When the page designer discards draft via Pages admin") {
			PagesAdmin.discardDraft(pageName = "Test Page Name");

			Alert.viewSuccessMessage();
		}

		task ("Then the page editor should be rendered well") {
			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Edit",
				pageName = "Test Page Name");

			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = "Heading Example");

			PageEditor.viewFragmentEditableText(
				editableText = "A paragraph is a self-contained unit of a discourse in writing dealing with a particular point or idea. Paragraphs are usually an expected part of formal writing, used to organize longer prose.",
				fragmentName = "Paragraph",
				id = "element-text");
		}
	}

	@description = "LPS-157033 Given the View mode of a page When an experience is inactive in the Control Menu Then the INACTIVE label will appear next to the experience name"
	@priority = 3
	test InactiveExperienceLabelInControlMenu {
		task ("Create an experience and add on content page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			ContentPages.gotoPageEditor();

			PageEditor.addExperience(
				experienceName = "NewAnyoneExperience",
				segmentName = "Anyone");

			PageEditor.publish();
		}

		task ("Go to the view mode of the page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});
		}

		task ("Switch to the new experience") {
			ContentPages.changeExperience(experienceName = "NewAnyoneExperience");
		}

		task ("Assert the Inactive label is present") {
			PageEditor.viewExperienceNotActiveInViewModeControlMenu(experienceName = "NewAnyoneExperience");
		}
	}

	@description = "LPS-157033 Given the View mode of a page When the Experience dropdown menu is displayed And there experiences inactive Then the INACTIVE label will appear next to each experience name inactive"
	@priority = 3
	test InactiveExperienceLabelInViewDropdown {
		task ("Create an experience and add on content page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			ContentPages.gotoPageEditor();

			PageEditor.addExperience(
				experienceName = "NewAnyoneExperience",
				segmentName = "Anyone");

			PageEditor.publish();
		}

		task ("Go to the view mode of the page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});
		}

		task ("Assert the Inactive label is present") {
			PageEditor.viewExperienceNotActiveInViewModeDropdown(experienceName = "NewAnyoneExperience");
		}
	}

	@description = "This is a test for LPS-153367. The page creator could preview current experience in a new tab."
	@priority = 4
	test PreviewCurrentExperienceInANewTab {
		task ("Given a page creator has a Heading fragment on a content page with a new experience") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");

			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "Anyone");
		}

		task ("When the page creator edits the inline text of Heading in the new experience") {
			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "New editable fragment text");
		}

		task ("Then the page creator could preview current experience in a new tab") {
			PageEditor.previewInANewTab();

			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = "New editable fragment text");
		}
	}

	@description = "This is a test for LPS-142290. The user can switch experiences at view mode."
	@priority = 4
	test SwitchExperienceAtViewMode {
		task ("Add a Button fragment to a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");
		}

		task ("Add a new experience") {
			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "Anyone");
		}

		task ("Add a Heading fragment below the Button then publish") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading",
				targetFragmentName = "Button");

			PageEditor.publish();
		}

		task ("View the current experience is Default at view mode") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			ContentPages.viewCurrentExperience(experienceName = "Default");

			AssertElementNotPresent(
				fragmentName = "heading",
				id = "element-text",
				index = 1,
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_TEXT");

			ContentPages.viewFragmentText(
				fragmentName = "button",
				id = "link",
				text = "Go Somewhere");
		}

		task ("Switch to the new experience") {
			ContentPages.changeExperience(experienceName = "New Experience");
		}

		task ("View both Button and Heading fragments are shown") {
			ContentPages.viewFragmentText(
				fragmentName = "button",
				id = "link",
				text = "Go Somewhere");

			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = "Heading Example");
		}

		task ("View the order of experiences at view mode") {
			ContentPages.viewExperienceOrder(experienceNameList = "Default,New Experience");
		}

		task ("Prioritize the new experience in page editor") {
			ContentPages.gotoPageEditor();

			PageEditor.prioritizeExperience(experienceName = "New Experience");

			PageEditor.clickBack();
		}

		task ("View the new order of experiences at view mode") {
			ContentPages.viewExperienceOrder(experienceNameList = "New Experience,Default");
		}

		task ("View both Button and Heading fragments are shown") {
			ContentPages.viewFragmentText(
				fragmentName = "button",
				id = "link",
				text = "Go Somewhere");

			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = "Heading Example");
		}

		task ("Switch back to the default experience") {
			ContentPages.changeExperience(experienceName = "Default");
		}

		task ("View only Button fragment is shown") {
			AssertElementNotPresent(
				fragmentName = "heading",
				id = "element-text",
				index = 1,
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_TEXT");

			ContentPages.viewFragmentText(
				fragmentName = "button",
				id = "link",
				text = "Go Somewhere");
		}
	}

	@description = "This is a test for LPS-142290. The user can switch experiences on preview draft page."
	@priority = 4
	test SwitchExperienceOnPreviewDraftPage {
		task ("Add a Button fragment to a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");
		}

		task ("Add a new experience") {
			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "Anyone");
		}

		task ("Add a Heading fragment to below the Button") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading",
				targetFragmentName = "Button");
		}

		task ("View the current experience is Default on preview draft page") {
			PagesAdmin.openPagesAdmin(siteURLKey = ${siteURLKey});

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Preview Draft",
				pageName = "Test Page Name");

			SelectWindow.selectPopUp(locator1 = "null");

			ControlMenu.viewHeaderDraftTitle(headerTitle = "Test Page Name");

			ControlMenu.viewHeaderTitleLabel(headerTitleLabel = "Draft");

			ContentPages.viewCurrentExperience(experienceName = "Default");

			AssertElementNotPresent(
				fragmentName = "heading",
				id = "element-text",
				index = 1,
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_TEXT");

			ContentPages.viewFragmentText(
				fragmentName = "button",
				id = "link",
				text = "Go Somewhere");
		}

		task ("Switch to the new experience") {
			ContentPages.changeExperience(experienceName = "New Experience");
		}

		task ("View both Button and Heading fragments are shown") {
			ContentPages.viewFragmentText(
				fragmentName = "button",
				id = "link",
				text = "Go Somewhere");

			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = "Heading Example");
		}

		task ("View the order of experiences on preview draft page") {
			ContentPages.viewExperienceOrder(experienceNameList = "Default,New Experience");
		}

		task ("Prioritize the new experience in page editor") {
			ContentPages.gotoPageEditor();

			PageEditor.prioritizeExperience(experienceName = "New Experience");

			PageEditor.clickBack();
		}

		task ("View the new order of experiences on preview draft page") {
			ContentPages.viewExperienceOrder(experienceNameList = "New Experience,Default");
		}

		task ("View both Button and Heading fragments are shown") {
			ContentPages.viewFragmentText(
				fragmentName = "button",
				id = "link",
				text = "Go Somewhere");

			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = "Heading Example");
		}

		task ("Switch back to the default experience") {
			ContentPages.changeExperience(experienceName = "Default");
		}

		task ("View only Button fragment is shown") {
			AssertElementNotPresent(
				fragmentName = "heading",
				id = "element-text",
				index = 1,
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_TEXT");

			ContentPages.viewFragmentText(
				fragmentName = "button",
				id = "link",
				text = "Go Somewhere");
		}
	}

	@description = "This is a test for LPS-187444. Deleted experience resets widget configuration on default experience"
	@priority = 4
	test ViewDisplayedWebContentPersistedInAssetPublisherAfterDeleteExperience {
		property asset.publisher.selection.style = "asset-list";

		task ("Given a page designer has an experienced content page with an Asset Publisher widget") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = ${randomSiteName},
				title = "Web Content Title 1");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addWidget(portletName = "Asset Publisher");

			AssertVisible(
				key_portletName = "Asset Publisher",
				key_text = "Select a collection to make it visible.",
				locator1 = "Portlet#PORTLET_SELECTOR");

			AssetPublisherPortlet.configureDynamicAssetSelectionPG(portletName = "Asset Publisher");

			PageEditor.publish();

			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "Anyone");
		}

		task ("When the page designer deletes the experience") {
			PageEditor.deleteExperience(experienceName = "New Experience");

			Refresh();
		}

		task ("Then the page designer still can see the web content displayed in Asset Publisher") {
			AssetPublisherPortlet.viewAssetPG(
				assetContent = "Web Content Content",
				assetTitle = "Web Content Title 1");
		}
	}

	@description = "This is a test for LPS-141773. Able to land in the experience selected at view mode in page editor."
	@priority = 5
	test ViewExperienceInViewMode {
		property portal.acceptance = "true";

		task ("Add a Button fragment to a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");
		}

		task ("Add a new experience") {
			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "Anyone");
		}

		task ("Add a Heading fragment below the Button then publish") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading",
				targetFragmentName = "Button");

			PageEditor.publish();
		}

		task ("View the page and view the new experience shown in experience selector") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			ContentPages.changeExperience(experienceName = "New Experience");
		}

		task ("Open the preview modal and View the new experience shown in experience selector") {
			ContentPages.gotoPageEditor();

			PageEditor.previewInANewTab();

			ContentPages.viewFragmentText(
				fragmentName = "button",
				id = "link",
				text = "Go Somewhere");

			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = "Heading Example");
		}

		task ("Back to view page mode and view the new experience still shown in experience selector") {
			Close.closeWindow();

			PageEditor.clickBack();

			ContentPages.openExperienceMenu();

			MenuItem.viewPresent(menuItem = "New Experience");
		}
	}

	@description = "This is a test for LPS-141773. Able to land in the experience selected at preview draft page in page editor."
	@priority = 5
	test ViewExperienceSelectedInPreviewDraftPage {
		property portal.acceptance = "true";

		task ("Add a Button fragment to a content page") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button");
		}

		task ("Add a new experience") {
			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "Anyone");
		}

		task ("Add a Heading fragment below the Button then publish") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading",
				targetFragmentName = "Button");

			PageEditor.publish();
		}

		task ("Edit the inline text of Button in Default experience") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.editFragmentText(
				fragmentName = "Button",
				id = "link",
				text = "Edited Text");
		}

		task ("Edit the inline text of Heading in new experience") {
			PageEditor.changeExperience(newExperience = "New Experience");

			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "Edited Heading Example");
		}

		task ("Navigate to preview draft page via Page Tree") {
			PagesFinder.goToPagesFinder();

			PagesFinder.gotoPageEllipsisItem(
				item = "Preview Draft",
				pageName = "Test Page Name*");
		}

		task ("Change to new experience and view the new experience shown in experience selector") {
			SelectWindow.selectPopUp(locator1 = "null");

			ContentPages.changeExperience(experienceName = "New Experience");

			ContentPages.viewCurrentExperience(experienceName = "New Experience");
		}

		task ("Open the preview modal and View the new experience selected in experience selector") {
			ContentPages.gotoPageEditor();

			PageEditor.previewInANewTab();

			ContentPages.viewFragmentText(
				fragmentName = "button",
				id = "link",
				text = "Go Somewhere");

			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = "Edited Heading Example");
		}

		task ("Back to view page mode and view the new experience still selected in experience selector") {
			Close.closeWindow();

			SelectWindow.selectPopUp(locator1 = "null");

			PageEditor.clickBack();

			ContentPages.viewCurrentExperience(experienceName = "New Experience");
		}
	}

	@description = "This is a test for LPS-122148. Only the inline text items from current experience shown in Page Content panel."
	@priority = 5
	test ViewInlineTextItemsFromCurrentExperienceInPageContentPanel {
		property portal.acceptance = "true";

		task ("Add a new experience") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addExperience(
				experienceName = "New Experience",
				segmentName = "Anyone");

			PageEditor.clickManagementBar();
		}

		task ("Switch to the default experience") {
			PageEditor.changeExperience(newExperience = "Default");
		}

		task ("Add a Heading fragment to page") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Heading");
		}

		task ("Add a Paragraph below the Heading") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Paragraph",
				targetFragmentName = "Heading");
		}

		task ("Switch to the new experience") {
			PageEditor.changeExperience(newExperience = "New Experience");
		}

		task ("Add a Card fragment to page") {
			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Card");
		}

		task ("Select the Inline Text as content filter in Page Content panel") {
			PageEditor.gotoTab(tabName = "Page Content");

			PageEditor.selectContentFilter(filter = "Inline Text");
		}

		task ("View only the inline texts of Card shown in Page Content panel") {
			AssertVisible(
				key_itemName = "Card Title example",
				locator1 = "PageEditor#PAGE_CONTENTS_ITEM");

			AssertVisible(
				key_itemName = "This is an example of quick text to fill the body of the card with some content in order to present it properly in page. We hope you like it.",
				locator1 = "PageEditor#PAGE_CONTENTS_ITEM");

			AssertElementNotPresent(
				key_itemName = "Heading Example",
				locator1 = "PageEditor#PAGE_CONTENTS_ITEM");

			AssertElementNotPresent(
				key_itemName = "A paragraph is a self-contained unit of a discourse in writing dealing with a particular point or idea. Paragraphs are usually an expected part of formal writing, used to organize longer prose.",
				locator1 = "PageEditor#PAGE_CONTENTS_ITEM");
		}

		task ("Switch to the default experience") {
			PageEditor.changeExperience(newExperience = "Default");
		}

		task ("View only the inline texts of Heading and Paragraph shown in Page Content panel") {
			AssertVisible(
				key_itemName = "Heading Example",
				locator1 = "PageEditor#PAGE_CONTENTS_ITEM");

			AssertVisible(
				key_itemName = "A paragraph is a self-contained unit of a discourse in writing dealing with a particular point or idea. Paragraphs are usually an expected part of formal writing, used to organize longer prose.",
				locator1 = "PageEditor#PAGE_CONTENTS_ITEM");

			AssertElementNotPresent(
				key_itemName = "Card Title example",
				locator1 = "PageEditor#PAGE_CONTENTS_ITEM");

			AssertElementNotPresent(
				key_itemName = "This is an example of quick text to fill the body of the card with some content in order to present it properly in page. We hope you like it.",
				locator1 = "PageEditor#PAGE_CONTENTS_ITEM");
		}
	}

}