@component-name = "portal-wcm"
definition {

	property ci.retries.disabled = "true";
	property custom.properties = "feature.flag.LPS-195205=true${line.separator}feature.flag.LPS-183727=true";
	property portal.accessibility = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Echo Accessibility";
	property testray.main.component.name = "Fragments";

	static var randomSiteName = StringUtil.randomString(8);

	var siteURLKey = StringUtil.toLowerCase(${randomSiteName});
	static var randomLabelName = StringUtil.randomString(8);

	static var randomObjectName = "A${randomLabelName}";

	setUp {
		task ("Set up virtual instance") {
			TestCase.setUpPortalInstance();
		}

		task ("Sign in") {
			User.firstLoginPG();
		}

		task ("Add a site") {
			HeadlessSite.addSite(siteName = ${randomSiteName});
		}

		task ("Add an object") {
			ObjectAdmin.addObjectViaAPI(
				labelName = ${randomLabelName},
				objectName = ${randomObjectName},
				pluralLabelName = "${randomLabelName}s");
		}
	}

	@description = "This is a test for LPS-191362. Check the accessibility when the fragment developer edit Decimal field of object from Edit DPT."
	@priority = 3
	test ViewAccessibilityOfDecimalFieldOnAssociatedDisplayPage {
		task ("Given a site administrater has a display page template for Object with decimal field") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Decimal",
				fieldLabelName = "Price",
				fieldName = "price",
				fieldType = "Double",
				isRequired = "false",
				objectName = ${randomObjectName});

			ObjectAdmin.publishObjectViaAPI(objectName = ${randomObjectName});

			var objectEntryId = ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "price",
				objectName = ${randomObjectName},
				value = "9.9");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = ${siteURLKey});

			DisplayPageTemplatesAdmin.addDisplayPage(
				contentType = ${randomLabelName},
				displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Form Components",
				fragmentName = "Form Container");

			PageEditor.mapFormContainerToObject(contentType = "${randomLabelName} (Default)");

			PageEditor.publish();

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");

			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoListProviderName = "${randomLabelName}s");

			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Sample Collection Item",
				fragmentName = "Button");

			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Button",
				id = "link");

			PageEditorEditableLink.mapURLToAsset(field = "Default");

			PageEditor.publish();
		}

		task ("When the site administrater accesses to the associated display page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			Button.click(button = "Go Somewhere");

			ControlMenu.viewHeaderTitle(headerTitle = ${objectEntryId});
		}

		task ("Then the decimal field should have correct accessibility") {
			AssertElementAccessible(locator1 = "//div[contains(@class,'lfr-layout-structure-item-inputs-numeric-input')]");
		}
	}

	@description = "This is a test for LPS-191359. The Integer fields on associated display page should comply with WCAG 2.1 AA standards."
	@priority = 3
	test ViewAccessibilityOfIntegerFieldsOnAssociatedDisplayPage {
		task ("Given a site administrater has a display page template for Object with integer fields") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Integer",
				fieldLabelName = "Age",
				fieldName = "age",
				fieldType = "Integer",
				isRequired = "false",
				objectName = ${randomObjectName});

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "LongInteger",
				fieldLabelName = "Postcode",
				fieldName = "postcode",
				fieldType = "Long",
				isRequired = "false",
				objectName = ${randomObjectName});

			ObjectAdmin.publishObjectViaAPI(objectName = ${randomObjectName});

			var objectEntryId = ObjectAdmin.addObjectEntryViaAPI(
				fieldNameList = "age,postcode",
				objectName = ${randomObjectName},
				valueList = "30,20231010");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = ${siteURLKey});

			DisplayPageTemplatesAdmin.addDisplayPage(
				contentType = ${randomLabelName},
				displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Form Components",
				fragmentName = "Form Container");

			PageEditor.mapFormContainerToObject(contentType = "${randomLabelName} (Default)");

			PageEditor.publish();

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");

			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoListProviderName = "${randomLabelName}s");

			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Sample Collection Item",
				fragmentName = "Button");

			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Button",
				id = "link");

			PageEditorEditableLink.mapURLToAsset(field = "Default");

			PageEditor.publish();
		}

		task ("When the site administrater accesses to the associated display page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			Button.click(button = "Go Somewhere");

			ControlMenu.viewHeaderTitle(headerTitle = ${objectEntryId});
		}

		task ("Then the integer fields should have correct accessibility") {
			AssertElementAccessible(locator1 = "xpath=(//div[contains(@class,'lfr-layout-structure-item-inputs-numeric-input')])[1]");

			AssertElementAccessible(locator1 = "xpath=(//div[contains(@class,'lfr-layout-structure-item-inputs-numeric-input')])[2]");
		}
	}

	@description = "This is a test for LPS-191358. Check the accessibility when the fragment developer edit Rich Text field of object from Edit DPT."
	@priority = 3
	test ViewAccessibilityOfRichTextFieldOnAssociatedDisplayPage {
		task ("Given a site administrater has a display page template for Object with rich text field") {
			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "RichText",
				fieldLabelName = "Description",
				fieldName = "description",
				fieldType = "Clob",
				isRequired = "false",
				objectName = ${randomObjectName});

			ObjectAdmin.publishObjectViaAPI(objectName = ${randomObjectName});

			var objectEntryId = ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "description",
				objectName = ${randomObjectName},
				value = "Create custom digital experiences without sacrificing speed, flexibility, or cost.");

			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = ${siteURLKey});

			DisplayPageTemplatesAdmin.addDisplayPage(
				contentType = ${randomLabelName},
				displayPageName = "Display Page Name");

			PageEditor.addFragment(
				collectionName = "Form Components",
				fragmentName = "Form Container");

			PageEditor.mapFormContainerToObject(contentType = "${randomLabelName} (Default)");

			PageEditor.publish();

			DisplayPageTemplatesAdmin.markDisplayPageAsDefault(displayPageName = "Display Page Name");

			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Test Page Name",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			PageEditor.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display");

			PageEditor.editCollectionDisplay(
				fragmentName = "Collection Display",
				infoListProviderName = "${randomLabelName}s");

			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "Sample Collection Item",
				fragmentName = "Button");

			PageEditorEditableLink.gotoEditableFieldLink(
				fragmentName = "Button",
				id = "link");

			PageEditorEditableLink.mapURLToAsset(field = "Default");

			PageEditor.publish();
		}

		task ("When the site administrater accesses to the associated display page") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Test Page Name",
				siteName = ${randomSiteName});

			Button.click(button = "Go Somewhere");

			ControlMenu.viewHeaderTitle(headerTitle = ${objectEntryId});
		}

		task ("Then the rich text field should have correct accessibility") {
			AssertElementAccessible(locator1 = "//div[contains(@class,'lfr-layout-structure-item-inputs-rich-text-input')]");
		}
	}

}