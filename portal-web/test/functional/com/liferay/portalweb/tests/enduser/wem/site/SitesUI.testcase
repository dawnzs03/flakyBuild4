@component-name = "portal-wcm"
definition {

	property ci.retries.disabled = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Sites Administration";
	property testray.main.component.name = "Sites Administration";

	static var randomSiteName = StringUtil.randomString(8);

	var siteURLKey = StringUtil.toLowerCase(${randomSiteName});

	setUp {
		task ("Set up virtual instance") {
			TestCase.setUpPortalInstance();
		}

		task ("Sign in") {
			User.firstLoginPG();
		}
	}

	@description = "This is a test for LPS-112992. The user could add a child site in Sites admin."
	@priority = 5
	test AddChildSite {
		property portal.acceptance = "true";
		property testray.component.names = "Training";

		var childSiteName = StringUtil.randomString(8);

		task ("Add a site via JSON") {
			HeadlessSite.addSite(siteName = ${randomSiteName});
		}

		task ("Add a child site") {
			ApplicationsMenu.gotoPortlet(
				category = "Sites",
				panel = "Control Panel",
				portlet = "Sites");

			Site.addBlankCP(
				parentSiteName = ${randomSiteName},
				siteName = ${childSiteName});
		}

		task ("View child site added") {
			ApplicationsMenu.gotoPortlet(
				category = "Sites",
				panel = "Control Panel",
				portlet = "Sites");

			Site.viewChildCP(
				childSiteName = ${childSiteName},
				siteName = ${randomSiteName});
		}
	}

	@description = "Able to add multiple sites based on different site template."
	@priority = 4
	@uitest
	test AddSitesMultiple {
		var randomSiteTemplateName = StringUtil.randomString(8);

		task ("Add a blank site") {
			Site.openSitesAdmin();

			Site.addBlankCP(siteName = "${randomSiteName}1");
		}

		task ("View blank site added") {
			Site.openSitesAdmin();

			Site.viewCP(siteName = "${randomSiteName}1");
		}

		task ("Add a site template and add a site based on site template") {
			JSONSiteTemplate.addSiteTemplate(siteTemplateName = ${randomSiteTemplateName});

			Site.addSiteTemplateCP(
				siteName = "${randomSiteName}2",
				siteTemplateName = ${randomSiteTemplateName},
				siteTemplateTab = "Custom Site Templates");
		}

		task ("View site added") {
			Site.openSitesAdmin();

			Site.viewCP(siteName = "${randomSiteName}2");
		}

		task ("Add a site based on Minium site template") {
			Site.openSitesAdmin();

			Site.addSiteTemplateCP(
				siteName = "${randomSiteName}3",
				siteTemplateName = "Minium");
		}

		task ("View site added") {
			Site.openSitesAdmin();

			Site.viewCP(siteName = "${randomSiteName}3");
		}
	}

	@description = "This is a test for LPS-149293. The user could cancel the site creation."
	@priority = 4
	test CancelSiteCreation {
		task ("Navigate to the Sites admin") {
			Site.openSitesAdmin();
		}

		task ("Cancel site creation after typing name") {
			LexiconEntry.gotoAdd();

			LexiconCard.clickCard(card = "Blank");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			PortletEntry.inputName(name = ${randomSiteName});

			Button.clickCancel();
		}

		task ("View the new site is not created") {
			Site.openSitesAdmin();

			LexiconTable.viewTableEntryNotPresent(tableEntry = ${randomSiteName});
		}
	}

	@description = "This is a test for LPS-148254. Unable to create private pages from Site Template."
	@priority = 4
	@uitest
	test CreateDefaultPageAsPrivateFromSiteTemplate {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Given a page creator has a site with a page from a site template") {
			task ("Add a site template") {
				JSONSiteTemplate.addSiteTemplate(
					description = "Site description",
					siteTemplateName = "Site Template Name");

				SiteTemplates.addSitePageViaSiteTemplateCP(
					masterLayoutName = "Blank",
					pageName = "Content Page Name",
					sitePageType = "Content Page",
					siteTemplateName = "Site Template Name");

				PageEditor.publish();
			}
		}

		task ("When page creator checks the checkbox of Create default pages as private") {
			task ("Navigate to the Sites admin") {
				Site.openSitesAdmin();
			}

			task ("Add a new site based on site template") {
				LexiconEntry.gotoAdd();

				Site.selectSiteTemplateTab(siteTemplateTab = "Custom Site Templates");

				LexiconCard.clickCard(card = "Site Template Name");

				SelectFrame(locator1 = "IFrame#MODAL_BODY");

				PortletEntry.inputName(name = ${randomSiteName});

				Check(
					checkboxName = "Create default pages as private (available only to members). If unchecked, they will be public (available to anyone).",
					locator1 = "Checkbox#ANY_CHECKBOX");

				Button.click(button = "Add");
			}
		}

		task ("Then there's no view permission for guest user") {
			task ("View page is not shown for guest") {
				ContentPagesNavigator.openViewContentPage(
					pageName = "Content Page Name",
					privateLayout = "true",
					siteName = ${randomSiteName});

				User.logoutPG();

				Navigator.openWithAppendToBaseURL(urlAppend = "group/${siteURLKey}");

				AssertTextNotPresent(
					locator1 = "Home#PAGE_2_GUEST_VIEW",
					value1 = "Content Page Name");
			}
		}
	}

	@description = "Able to delete site."
	@priority = 5
	@uitest
	test DeleteSite {
		property portal.acceptance = "true";

		task ("Add a blank site") {
			Site.openSitesAdmin();

			Site.addBlankCP(siteName = ${randomSiteName});
		}

		task ("Assert able to delete the site") {
			Site.openSitesAdmin();

			Site.deleteCP(siteName = ${randomSiteName});
		}
	}

	@description = "This is a test for LPS-149293. The site creation process continues even though the user close the modal after submitting form."
	@priority = 5
	test ViewSiteCreatedEvenThoughCloseModalAfterSubmitForm {
		property portal.acceptance = "true";
		property portal.release = "false";

		task ("Navigate to the Sites admin") {
			Site.openSitesAdmin();
		}

		task ("Add a new site based on Minium") {
			LexiconEntry.gotoAdd();

			LexiconCard.clickCard(card = "Minium");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			PortletEntry.inputName(name = ${randomSiteName});

			Button.clickAdd();
		}

		task ("Close the modal") {
			IFrame.closeFrame();
		}

		task ("View the new site created") {
			var groupId = JSONGroupAPI._getGroupIdByNameNoError(
				groupName = ${randomSiteName},
				site = "true");

			while (("" == "")) {
				var groupId = JSONGroupAPI._getGroupIdByNameNoError(
					groupName = ${randomSiteName},
					site = "true");
			}

			Site.openSitesAdmin();

			LexiconTable.viewTableEntryTitle(tableEntry = ${randomSiteName});
		}
	}

	@description = "This is a test for LPS-149293 and LPS-146278. The user could view a message in modal when create a new site."
	@priority = 5
	@uitest
	test ViewSiteCreationMessage {
		property portal.acceptance = "true";

		task ("Navigate to the Sites admin") {
			Site.openSitesAdmin();
		}

		task ("Add a new site") {
			LexiconEntry.gotoAdd();

			LexiconCard.clickCard(card = "Blank Site");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			PortletEntry.inputName(name = ${randomSiteName});

			var map = MapUtil.newHashMap();

			ExecuteCDPCommand(
				value1 = "Fetch.enable",
				value2 = ${map});

			Button.click(button = "Add");
		}

		task ("View the Add and Cancel buttons are not shown") {
			for (var button : list "Add,Cancel") {
				AssertNotVisible(
					key_text = ${button},
					locator1 = "Button#ANY");
			}
		}

		task ("View the name field is not shown") {
			AssertNotVisible(locator1 = "TextInput#NAME");
		}

		task ("View site creation message") {
			AssertTextEquals(
				locator1 = "Message#SUBTITLE",
				value1 = "The creation of the site may take some time. Closing the window will not cancel the process.");
		}

		task ("View the new site is created") {
			var map = MapUtil.newHashMap();

			ExecuteCDPCommand(
				value1 = "Fetch.disable",
				value2 = ${map});

			WaitForTextNotPresent(value1 = "The creation of the site may take some time. Closing the window will not cancel the process.");

			SelectFrameTop();

			Alert.viewSuccessMessageText(successMessage = "Site was successfully added.");

			ControlMenu.viewHeaderTitle(headerTitle = "Site Settings");
		}
	}

	@description = "This is a test for LPS-176154. The site administrater should see site initializers under Provided by Liferay tab when create a new site."
	@priority = 3
	test ViewSiteInitializersUnderProvidedByLiferayTab {
		task ("Given a site administrater accesses to the Sites admin") {
			Site.openSitesAdmin();
		}

		task ("When the site administrater creates a new site") {
			LexiconEntry.gotoAdd();
		}

		task ("Then the site administrater could see site initializers under Provided by Liferay tab") {
			Navigator.viewActivatedNavTab(navTab = "Provided by Liferay");

			for (var siteInitializerName : list "Blank Site,Welcome") {
				LexiconCard.viewCardPresent(card = ${siteInitializerName});
			}
		}
	}

}