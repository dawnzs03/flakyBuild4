@component-name = "portal-staging"
definition {

	property ci.retries.disabled = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Export/Import Framework";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "This is a use case for LRQA-29297. Verify that Admin user can delete a custom export process."
	@priority = 4
	test DeleteCustomExportProcess {
		task ("Export the LAR file of a site") {
			LAR.exportSiteCP(
				larFileName = "CustomExport",
				siteScopeName = "Guest");
		}

		task ("Delete the created custom export process and verify it was deleted") {
			LAR.deleteCurrentAndPreviousProcess(larFileName = "CustomExport");

			AssertElementNotPresent(locator1 = "ExportImport#CURRENT_AND_PREVIOUS_STATUS_1");
		}
	}

	@description = "This is a use case for LRQA-29297. Verify that the Admin user can delete a portlet export process."
	@priority = 4
	test DeletePortletExportProcess {
		task ("Go to DM admin and Export a process") {
			Navigator.openURL();

			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Documents and Media");

			LAR.exportPortlet(larFileName = "DMExport");
		}

		task ("Delete the export process and verify that it was deleted") {
			Refresh();

			LAR.deleteCurrentAndPreviousProcess(
				deleteFromPortlet = "true",
				larFileName = "DMExport");

			AssertElementNotPresent(locator1 = "ExportImport#CURRENT_AND_PREVIOUS_STATUS");
		}
	}

	@description = "This is a use case for LRQA-47649. Verify that Admin user can relaunch a custom export process."
	@priority = 4
	test RelaunchCustomExportProcess {
		task ("Export the LAR file of a site") {
			LAR.exportSiteCP(
				larFileName = "CustomExport",
				siteScopeName = "Guest");
		}

		task ("Relaunch the custom export process") {
			LAR.relaunchCurrentAndPreviousProcess(larFileName = "CustomExport");
		}
	}

	@description = "This is a use case for LPS-166513. TC-1&2: Verify that the export process entries with the LAR files can be removed after triggering scheduler job manually."
	@priority = 5
	test TriggerSchedulerJobManuallyCanRemoveExportEntryAndLARFile {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given: Export two types of LAR files") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Page Name");

			LAR.exportSiteCP(
				larFileName = "ExportGuest",
				siteScopeName = "Guest");

			JSONBlog.addEntry(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title");

			BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

			LAR.exportPortlet(larFileName = "Blog_portlet.lar");
		}

		task ("When: Modify the modifiedDate of background task to a past date and trigger scheduler job manually") {
			ExportImport.updateLayoutBackgroundTaskModifiedDateToPast(type = "Export");

			ExportImport.updatePortletBackgroundTaskModifiedDateToPast(type = "Export");

			Navigator.openURL();

			ApplicationsMenu.gotoPortlet(
				category = "System",
				panel = "Control Panel",
				portlet = "Server Administration");

			ServerAdministration.executeServerResourcesActions(actionsDescription = "Clear the database cache.");

			JobScheduler.openJobSchedulerAdmin();

			Navigator.gotoNavItem(navItem = "Scheduled Jobs");

			Click.clickAtNotVisible(locator1 = "Blueprints#PAGINATION_NEXT_LINK");

			Click.clickAtNotVisible(
				key_name = "DeleteObsoleteBackgroundTasksSchedulerJobConfiguration",
				locator1 = "JobScheduler#RUN_NOW_BUTTON");

			Alert.viewSuccessMessage();
		}

		task ("Then: Verify that the import entries and the stored import LAR files are removed without waiting") {
			var backgroundTaskStatus = ExportImport.getBackgroundTaskStatus(type = "Export");

			TestUtils.assertEquals(
				actual = ${backgroundTaskStatus},
				expected = "Deleted successfully");

			var lARFileStatus = ExportImport.getLARFileStatus();

			TestUtils.assertEquals(
				actual = ${lARFileStatus},
				expected = "Deleted successfully");

			LAR.openExportAdmin(siteScopeName = "guest");

			AssertElementNotPresent(
				key_title = "ExportGuest",
				locator1 = "Header#H2_TITLE");

			BlogsNavigator.openBlogsAdmin(siteURLKey = "guest");

			LAR._gotoExportImport();

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			Navigator.gotoNavItem(navItem = "Export");

			Click(locator1 = "ExportImport#CURRENT_AND_PREVIOUS_TAB");

			AssertElementNotPresent(locator1 = "ExportImport#CURRENT_AND_PREVIOUS_STATUS_1");
		}
	}

	@description = "This is a use case for LRQA-28935. Verify that the Admin user can filter and modify the Export list display."
	@priority = 3
	test ViewExportProcess {
		task ("Export the LAR file of a site") {
			LAR.exportSiteCP(
				larFileName = "CustomExport",
				siteScopeName = "Guest");

			Refresh();
		}

		task ("Change the Display to Table, Order by Completed and Toggle the View Order icon") {
			LexiconEntry.changeExportDisplayStyle(displayStyle = "table");

			ManagementBar.setFilterAndOrder(filterBy = "Completed");

			ManagementBar.toggleViewOrder(order = "down");
		}
	}

}