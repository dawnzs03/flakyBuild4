@component-name = "portal-staging"
definition {

	property ci.retries.disabled = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Export/Import Framework";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			PagesAdmin.tearDownCP();

			Site.tearDownCP();
		}
	}

	@description = "This is a use case for LPS-139101. Verify that missing references validation also works on portlet import processes."
	@priority = 3
	test CanImportJournalArticleWhenUncheckMissingReferencesValidation {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given: Uncheck the Validate Missing References box in System settings") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "System Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Infrastructure",
				configurationName = "Export/Import, Staging",
				configurationScope = "Virtual Instance Scope");

			SystemSettings.configureSystemSetting(
				enableSetting = "false",
				settingFieldName = "Validate Missing References");
		}

		task ("And: Add a new site and add new web content with content containing link references to the Test page") {
			HeadlessSite.addSite(siteName = "Site Name");

			for (var layoutUtilityPageName : list "404 Error,500 Error") {
				JSONLayoututilitypage.deleteLayoutUtilityPage(
					groupName = "Site Name",
					layoutUtilityPageName = ${layoutUtilityPageName});
			}

			JSONLayout.addPublicLayout(
				groupName = "Site Name",
				layoutName = "Test Page");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(webContentTitle = "Web Content Title");

			var portalURL = PropsUtil.get("portal.url");

			CKEditor.addSourceContent(content = '''<p><a href="${portalURL}/web/site-name/test-page">test page</a></p>''');

			PortletEntry.publish();
		}

		task ("When: Export and download the web content to a LAR file") {
			LAR.exportPortlet(larFileName = "ExportWebContent.lar");
		}

		task ("And: Delete the site and create a new one") {
			JSONGroup.deleteGroupByName(groupName = "Site Name");

			HeadlessSite.addSite(siteName = "Site Name A");

			for (var layoutUtilityPageName : list "404 Error,500 Error") {
				JSONLayoututilitypage.deleteLayoutUtilityPage(
					groupName = "Site Name A",
					layoutUtilityPageName = ${layoutUtilityPageName});
			}
		}

		task ("And: Import the LAR file to this site") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name-a");

			LAR.importPortlet(
				larFileName = "ExportWebContent.lar",
				siteName = "Site Name A");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name-a");
		}

		task ("Then: The WC will be present") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name-a");

			WebContent.viewTitle(webContentTitle = "Web Content Title");
		}
	}

	@description = "This is a use case for LRQA-73362. Verify if custom fields can be added and deleted through importing their LAR file. Blocked by LPS-149168."
	@ignore = "true"
	@priority = 4
	test CustomFieldDeletionViaImporting {
		property app.server.bundles.size = "1";
		property databases.size = "1";
		property minimum.slave.ram = "24";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given: User add an input field for document then export it") {
			CustomFields.addCP(
				customFieldName = "Text Field",
				customFieldType = "Input Field",
				customInputDataType = "Text",
				modelResource = "com.liferay.document.library.kernel.model.DLFileEntry");

			CustomFields.openCustomFieldAdmin();

			LAR.exportPortlet(
				larFileName = "custom_fields.portlet.lar",
				portletName = "Custom Fields");
		}

		task ("When: User import this LAR file to the second portal") {
			User.logoutPG();

			User.firstLoginUI(
				password = "test",
				specificURL = "http://localhost:9080",
				userEmailAddress = "test@liferay.com");

			CustomFields.openCustomFieldAdmin(baseURL = "http://localhost:9080");

			LAR.importPortlet(larFileName = "custom_fields.portlet.lar");
		}

		task ("Then: The input field will be present") {
			CustomFields.viewCPIsPresent(
				customFieldName = "Text Field",
				resourceName = "Document");
		}

		task ("When: User delete the input field on the first portal then export it") {
			User.logoutPG(specificURL = "http://localhost:9080");

			User.loginPG();

			CustomFields.openCustomFieldAdmin();

			CustomFields.deleteCP(
				customFieldName = "Text Field",
				resourceName = "Document");

			CustomFields.openCustomFieldAdmin();

			LAR.exportPortlet(
				exportIndividualDeletions = "true",
				larFileName = "custom_fields_deletion.portlet.lar",
				portletName = "Custom Fields");
		}

		task ("And: Login on the second portal and import this LAR file") {
			User.logoutPG();

			User.firstLoginUI(
				password = "test",
				specificURL = "http://localhost:9080",
				userEmailAddress = "test@liferay.com");

			CustomFields.openCustomFieldAdmin(baseURL = "http://localhost:9080");

			LAR.importPortlet(
				importDeletions = "true",
				larFileName = "custom_fields_deletion.portlet.lar");
		}

		task ("Then: The Input field will not be present anymore") {
			CustomFields.viewCPIsNotPresent(
				customFieldName = "Text Field",
				resourceName = "Document");
		}
	}

	@description = "This is a use case for LPS-86501. Verify is possible edit an imported template."
	@priority = 3
	test EditImportedContentPageViaImportedSiteTemplate {
		property osgi.module.configuration.file.names = "com.liferay.layout.configuration.LayoutExportImportConfiguration.config";
		property osgi.module.configurations = "exportDraftLayout=\"true\"";
		property testray.component.names = "Training";

		task ("Given: User add a new site template") {
			SiteTemplates.addCP(
				siteTemplateActive = "Yes",
				siteTemplateName = "Site Template Name");
		}

		task ("And: Import a pre-configured fragment collection to the template") {
			LexiconEntry.gotoEntryMenuItem(
				menuItem = "Manage",
				rowEntry = "Site Template Name");

			ProductMenu.gotoPortlet(
				category = "Design",
				portlet = "Fragments");

			FragmentsAdmin.importCollectionFromDependenciesFolder(collectionZipFile = "fragment-collection.zip");
		}

		task ("And: Add new site based on the new site template then a new fragment to it") {
			SiteTemplatesNavigator.openSiteTemplatesAdmin();

			SiteTemplates.addSitePageViaSiteTemplateCP(
				pageName = "Test Template Content Page",
				sitePageType = "Content Page",
				siteTemplateName = "Site Template Name");

			PageEditor.addFragment(
				collectionName = "Collection Name",
				fragmentName = "Content");
		}

		task ("And: Edit the fragment's information") {
			PageEditor.editFragmentText(
				contributed = "false",
				fragmentName = "Content",
				text = "Editing Finished");

			PageEditor.viewFragmentEditableText(
				contributed = "false",
				editableText = "Editing Finished",
				fragmentName = "Content");
		}

		task ("And: Export the site template then delete it") {
			SiteTemplatesNavigator.openSiteTemplatesAdmin();

			LAR.exportPortlet(
				larFileName = "site-template-content-page.lar",
				portletName = "Site Templates");

			SiteTemplatesNavigator.openSiteTemplatesAdmin();

			SiteTemplates.deleteCP(siteTemplateName = "Site Template Name");
		}

		task ("When: User import the exported site template") {
			SiteTemplatesNavigator.openSiteTemplatesAdmin();

			LAR.importPortlet(
				larFileName = "site-template-content-page.lar",
				portletName = "Site Templates");

			SiteTemplates.viewCP(siteTemplateName = "Site Template Name");

			Refresh();
		}

		task ("Then: The imported site template can be edited") {
			LexiconEntry.gotoEntryMenuItem(
				menuItem = "Manage",
				rowEntry = "Site Template Name");

			ProductMenu.gotoPortlet(
				category = "Site Builder",
				portlet = "Pages");

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Edit",
				pageName = "Test Template Content Page");

			PageEditor.viewFragmentEditableText(
				contributed = "false",
				editableText = "Editing Finished",
				fragmentName = "Content");

			AssertConsoleTextNotPresent(value1 = "javax.portlet.PortletException:");

			AssertConsoleTextNotPresent(value1 = "org.apache.jasper.JasperException:");

			AssertConsoleTextNotPresent(value1 = "java.lang.NullPointerException");
		}
	}

	@description = "This is a use case for LPS-95589. Verify is not possible export a DM with deleted document link."
	@priority = 4
	test ExportDMWithDeletedDocumentLink {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given: User add a new site with a new document") {
			HeadlessSite.addSite(siteName = "Site Name");

			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

			DMDocument.addCP(
				dmDocumentDescription = "DM Document Description",
				dmDocumentFile = "Document_1.jpg",
				dmDocumentTitle = "DM Document Title");
		}

		task ("And: Add a new a document type") {
			DMNavigator.openDocumentTypesAdmin(siteURLKey = "site-name");

			DMDocumentType.add(
				dmDocumentTypeDescription = "DM Document Type Description",
				dmDocumentTypeFieldNames = "Image",
				dmDocumentTypeName = "DM Document Type Name");

			DMDocumentType.viewCP(dmDocumentTypeName = "DM Document Type Name");
		}

		task ("When: User add a new a document based on the new document type and the previously created document") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

			DMDocument.addCP(
				dmDocumentDescription = "DM Document Description",
				dmDocumentTitle = "DM Type Document Title",
				dmDocumentTypeName = "DM Document Type Name",
				imageField = "DM Document Title",
				imageFileName = "DM Document Title",
				navTab = "Documents and Media");
		}

		task ("And: Delete the first document") {
			JSONDocument.deleteFile(
				dmDocumentTitle = "DM Document Title",
				groupName = "Site Name");
		}

		task ("Then: The export process of the DM admin is successful") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

			LAR.exportPortlet(larFileName = "DocumentsandMedia_portlet.lar");

			AssertConsoleTextNotPresent(value1 = "NoSuchFileEntryException");
		}
	}

	@description = "Verify is possible export and import a DDL via Global."
	@priority = 5
	test ExportImportDDLViaGlobal {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given: User adds a new site and a page to it") {
			HeadlessSite.addSite(siteName = "Site Name");

			JSONLayout.addPublicLayout(
				groupName = "Site Name",
				layoutName = "Test Page");
		}

		task ("And: Add a new DDL data definition to the global site with a field") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "global");

			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Dynamic Data Lists");

			DDLDataDefinition.addCP(
				ddlDataDefinitionDescription = "DDL Definition Description",
				ddlDataDefinitionName = "DDL Definition");

			DynamicDataMapping.addField(
				field = "Text",
				fieldFieldLabel = "Text Label",
				fieldName = "TextName");

			DDLDataDefinition.save();
		}

		task ("And: Add a new DDL to the global site with chosing the previously created DDL data definition") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "global");

			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Dynamic Data Lists");

			DDLList.addCP(
				ddlListDescription = "DDL List Description",
				ddlListName = "DDL List");

			DDLDataDefinition.selectCP(ddlDataDefinitionName = "DDL Definition");

			DDLDataDefinition.save();
		}

		task ("And: Populate the new DDL data definition's field with text") {
			DDLRecord.addCP(
				ddlDataDefinitionName = "DDL Definition",
				ddlListName = "DDL List");

			DDLRecord.populateFieldText(
				ddlRecordFieldData = "DDL Definition Record",
				field = "Text",
				fieldFieldLabel = "Text Label",
				fieldName = "TextName");

			PortletEntry.publish();
		}

		task ("When: User export the DDL portlet then imports it to the default site") {
			PageTemplatesAdmin.openPageTemplatesAdmin(siteURLKey = "global");

			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Dynamic Data Lists");

			LAR.exportPortlet(
				larFileName = "DDL.portlet.lar",
				siteScopeName = "Global");

			Navigator.openSiteURL(siteName = "Site Name");

			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Dynamic Data Lists");

			LAR.importPortlet(
				larFileName = "DDL.portlet.lar",
				siteName = "Site Name");
		}

		task ("Then: The populated DDL data definition will be present on the default site") {
			Navigator.openURL();

			Navigator.openSiteURL(siteName = "Site Name");

			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Dynamic Data Lists");

			DDLNavigator.gotoListRecords(ddlListName = "DDL List");

			DDLRecord.viewFirstFieldCP(
				ddlRecordFieldData = "DDL Definition Record",
				field = "Text",
				fieldFieldLabel = "Text Label");
		}
	}

	@description = "Verify is possible export import deletions."
	@priority = 4
	test ExportImportDeletions {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given: User adds a new WC then export it") {
			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Guest",
				title = "Web Content Title");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

			LAR.exportPortlet(larFileName = "ExportWebContent.lar");
		}

		task ("And: Delete the WC then export it") {
			JSONWebcontent.deleteWebContent(
				groupName = "Guest",
				title = "Web Content Title");

			Refresh();

			LAR.exportPortlet(
				exportIndividualDeletions = "true",
				larFileName = "ExportWebContentDeletion.lar");
		}

		task ("When: User imports the first LAR file") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

			LAR.importPortlet(larFileName = "ExportWebContent.lar");
		}

		task ("Then: The WC will be present") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

			WebContent.viewTitle(webContentTitle = "Web Content Title");
		}

		task ("When: User imports the second LAR file") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

			LAR.importPortlet(
				importDeletions = "true",
				larFileName = "ExportWebContentDeletion.lar");
		}

		task ("Then: The WC will be deleted") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

			WebContent.viewNotPresentCP(webContentTitle = "Web Content Title");
		}
	}

	@description = "Verify is possible export/import a Portlet."
	@priority = 5
	test ExportImportPortlet {
		property portal.acceptance = "true";

		task ("Given: User adds a new page with an IFrame portlet") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Test Page Name");

			Navigator.gotoPage(pageName = "Test Page Name");

			Portlet.addPG(portletName = "IFrame");
		}

		task ("And: Configure a custom look for the portlet") {
			Portlet.gotoPortletOptions(
				portletName = "IFrame",
				portletOption = "Look and Feel Configuration");

			IFrame.selectConfigurationFrame();

			Portlet.configureGeneralViaLookAndFeelPG(customTitle = "IFrame Custom");

			IFrame.closeFrame();
		}

		task ("When: User exports the portlet then create a new site with a page") {
			LAR.exportPortlet(larFileName = "IFrame.lar");

			HeadlessSite.addSite(siteName = "Test Site Name");

			for (var layoutUtilityPageName : list "404 Error,500 Error") {
				JSONLayoututilitypage.deleteLayoutUtilityPage(
					groupName = "Test Site Name",
					layoutUtilityPageName = ${layoutUtilityPageName});
			}

			JSONLayout.addPublicLayout(
				groupName = "Test Site Name",
				layoutName = "Test Site Page");
		}

		task ("And: User can create an IFrame portlet, then import the LAR file") {
			Navigator.gotoSitePage(
				pageName = "Test Site Page",
				siteName = "Test Site Name");

			Portlet.addPG(portletName = "IFrame");

			LAR.importPortlet(larFileName = "IFrame.lar");
		}

		task ("Then: The custom settings of the portlet is visible") {
			Navigator.gotoSitePage(
				pageName = "Test Site Page",
				siteName = "Test Site Name");

			Portlet.viewTitle(portletName = "IFrame Custom");
		}
	}

	@description = "This is a use case for LPS-83326 and LPS-99287. Verify is possible export/import Web Content Folder with a Workflow."
	@priority = 5
	test ExportImportWebContentFolderWithWorkflow {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given: User adds a new WC folder with default workflow") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

			WebContentFolder.addCP(
				folderDescription = "WC Folder Description",
				folderName = "WC Folder Name");

			WebContentFolder.configureWorkflowCP(
				folderName = "WC Folder Name",
				workflowDefinition = "Single Approver",
				workflowRestriction = "Default Workflow");
		}

		task ("And: Export the web content portlet then delete the wc folder") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

			LAR.exportPortlet(larFileName = "WebContent_portlet.lar");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

			WebContentFolder.moveToRecycleBinCP(folderName = "WC Folder Name");

			RecycleBin.openRecycleBinAdmin(siteURLKey = "guest");

			RecycleBin.emptyCP();
		}

		task ("When: User adds a new site and import the LAR file") {
			HeadlessSite.addSite(siteName = "Site Name");

			for (var layoutUtilityPageName : list "404 Error,500 Error") {
				JSONLayoututilitypage.deleteLayoutUtilityPage(
					groupName = "Site Name",
					layoutUtilityPageName = ${layoutUtilityPageName});
			}

			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

			LAR.importPortlet(larFileName = "WebContent_portlet.lar");
		}

		task ("Then: The WC folder with default workflow has been imported without error on the console") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

			WebContentFolder.viewFolderWorkflow(
				folderName = "WC Folder Name",
				workflowResourceValue = "Single Approver");

			AssertConsoleTextNotPresent(value1 = "com.liferay.exportimport.kernel.lar.PortletDataException");
		}
	}

	@description = "This is a use case for LPS-86608. Verify is possible export/import Web Content with repeat field."
	@priority = 3
	test ExportImportWebcontentWithRepeatField {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given: User adds a new site") {
			HeadlessSite.addSite(siteName = "Exported Site");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "exported-site");
		}

		task ("And: Add a new WC structure with a field and a nested field which can be repeatable") {
			NavItem.gotoStructures();

			WebContentStructures.addCP(
				structureDescription = "Exported Structure Description",
				structureName = "Exported Structure");

			DataEngine.addField(
				fieldFieldLabel = "Separator",
				fieldName = "Separator");

			DataEngine.addFieldNested(
				fieldFieldLabel = "Text",
				fieldName = "Text",
				targetFieldLabel = "Separator");

			DataEngine.toggleFieldRepeatable(fieldsGroupLabel = "Fields Group");

			WebContentStructures.saveCP(structureName = "Exported Structure");
		}

		task ("And: Add a new WC template related to the structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "exported-site");

			NavItem.gotoTemplates();

			WebContentTemplates.addCP(
				structureName = "Exported Structure",
				templateDescription = "Exported Template Description",
				templateFieldNames = "Text",
				templateName = "Exported Template");
		}

		task ("And: Add a new WC based on the template and structure, duplicate the duplicable field and fill out the repeated fields") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "exported-site");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "Exported Structure");

			WebContent.addWithStructureCP(
				structureName = "Exported Structure",
				webContentText = "Exported Template",
				webContentTitle = "Exported Article");

			Click(locator1 = "FormFields#FIELD_ADD_DUPLICATE");

			takeScreenshot();

			Type(
				key_fieldFieldLabel = "Text",
				locator1 = "WCEditWebContent#TEXT_INPUT",
				value1 = "Liferay");

			Type(
				index = 2,
				key_fieldFieldLabel = "Text",
				locator1 = "WCEditWebContent#ANY_TEXT_INPUT",
				value1 = "Liferay 1");

			PortletEntry.publish();

			WebContent.viewTitle(webContentTitle = "Exported Article");
		}

		task ("When: User export the web content portlet and add a new site") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "exported-site");

			LAR.exportPortlet(larFileName = "WebContent_portlet.lar");

			HeadlessSite.addSite(siteName = "Imported Site");
		}

		task ("And: Import the LAR file") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "imported-site");

			LAR.importPortlet(larFileName = "WebContent_portlet.lar");
		}

		task ("Then: The WC will be present with the repeated fields") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "imported-site");

			WebContent.viewWithStructureCP(webContentTitle = "Exported Article");

			AssertTextEquals.assertValue(
				key_fieldFieldLabel = "Text",
				locator1 = "WCEditWebContent#TEXT_INPUT",
				value1 = "Liferay");

			AssertTextEquals.assertValue(
				index = 2,
				key_fieldFieldLabel = "Text",
				locator1 = "WCEditWebContent#ANY_TEXT_INPUT",
				value1 = "Liferay 1");
		}

		task ("And: The WC structure will be present") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "imported-site");

			NavItem.gotoStructures();

			WebContentStructures.viewCP(
				structureDescription = "Exported Structure Description",
				structureName = "Exported Structure");

			LexiconEntry.gotoEntry(rowEntry = "Exported Structure");

			AssertVisible(
				key_fieldFieldLabel = "Separator",
				locator1 = "DDMField#SEPARATOR");

			AssertVisible(
				key_fieldFieldLabel = "Text",
				locator1 = "WCEditWebContent#TEXT_INPUT");
		}

		task ("And: The WC template will be present too") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "imported-site");

			NavItem.gotoTemplates();

			WebContentTemplates.viewCP(
				structureName = "Exported Structure",
				templateDescription = "Exported Template Description",
				templateName = "Exported Template");
		}
	}

	@description = "This is a use case for LPS-88831, LPS-88889 and LPS-88890. Verify is possible export a web content with deleted reference."
	@priority = 4
	test ExportWebContentWithDeletedReference {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given: User adds a new site with a page") {
			HeadlessSite.addSite(siteName = "Site Name");

			JSONLayout.addPublicLayout(
				groupName = "Site Name",
				layoutName = "Test Page");
		}

		task ("And: Add a new file on this site") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

			DMDocument.addCP(
				dmDocumentDescription = "DM Document Description",
				dmDocumentFile = "Document_1.jpg",
				dmDocumentTitle = "DM Document Title");
		}

		task ("And: Add a new WC structure with 2 fields") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

			NavItem.gotoStructures();

			WebContentStructures.addCP(
				structureDescription = "WC Structure Description",
				structureName = "WC Structure Name");

			DataEngine.addFields(fieldNameList = "Link to Page,Image");

			WebContentStructures.saveCP(structureName = "WC Structure Name");
		}

		task ("And: Add a new WC template connected to the WC structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

			NavItem.gotoTemplates();

			WebContentTemplates.addCP(
				structureName = "WC Structure Name",
				templateDescription = "WC Template Description",
				templateFieldNames = "Link to Page,Image",
				templateName = "WC Template Name");
		}

		task ("And: Add a new WC based on the template and structure then publish it") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				imageFileName = "DM Document Title",
				navTab = "Documents and Media",
				structureName = "WC Structure Name",
				templateName = "WC Template Name",
				webContentImage = "DM Document Title",
				webContentLinkToPage = "Test Page",
				webContentTitle = "WC WebContent Title");

			PortletEntry.publish();

			WebContent.viewTitle(webContentTitle = "WC WebContent Title");
		}

		task ("When: User deletes the file and the test page, then export the web content") {
			JSONDocument.deleteFile(
				dmDocumentTitle = "DM Document Title",
				groupName = "Site Name");

			JSONLayout.deletePublicLayout(
				groupName = "Site Name",
				layoutName = "Test Page");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

			LAR.exportPortlet(larFileName = "WebContent_portlet.lar");
		}

		task ("Then: The export of the WC with deleted reference is successful without error on the console") {
			AssertConsoleTextNotPresent(value1 = "com.liferay.exportimport.kernel.lar.PortletDataException");
		}
	}

	@description = "This is a use case for LPS-84290. Verify is possible export Home Folder Permissions."
	@priority = 3
	test ImportSiteHomeFolderPermissions {
		task ("Given: User adds a new site") {
			HeadlessSite.addSite(siteName = "Site Name");
		}

		task ("When: User removes the Home Folder permissions from DM portlet for site member role on default site") {
			Navigator.openURL();

			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

			Portlet.gotoPortletOptions(portletOption = "Home Folder Permissions");

			SelectFrameTop();

			IFrame.selectModalFrame();

			Role.removePermissionPG(
				permissionDefinitionKey = "CONFIGURATION_PERMISSIONS_ADD_SHORTCUT_CHECKBOX",
				roleTitle = "Site Member");

			Role.removePermissionPG(
				permissionDefinitionKey = "CONFIGURATION_PERMISSIONS_ADD_DOCUMENT_CHECKBOX",
				roleTitle = "Site Member");

			Role.removePermissionPG(
				permissionDefinitionKey = "CONFIGURATION_PERMISSIONS_SUBSCRIBE_CHECKBOX",
				roleTitle = "Site Member");

			Role.removePermissionPG(
				permissionDefinitionKey = "CONFIGURATION_PERMISSIONS_VIEW_CHECKBOX",
				roleTitle = "Site Member");

			Role.removePermissionPG(
				permissionDefinitionKey = "CONFIGURATION_PERMISSIONS_ADD_FOLDER",
				roleTitle = "Site Member");
		}

		task ("And: Exports the LAR file of Documents and Media admin page") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

			Refresh();

			LAR.exportPortlet(
				exportPermissions = "true",
				larFileName = "DM.portlet.lar");
		}

		task ("And: Imports the LAR file to the new site") {
			DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "site-name");

			LAR.importPortlet(
				importPermissions = "true",
				larFileName = "DM.portlet.lar");
		}

		task ("Then: The permissions of Site member will be changed according to the imported LAR file on the new site") {
			Portlet.gotoPortletOptions(portletOption = "Home Folder Permissions");

			SelectFrameTop();

			IFrame.selectModalFrame();

			for (var permissionDefinitionKey : list "CONFIGURATION_PERMISSIONS_ADD_SHORTCUT_CHECKBOX,CONFIGURATION_PERMISSIONS_ADD_DOCUMENT_CHECKBOX,CONFIGURATION_PERMISSIONS_SUBSCRIBE_CHECKBOX,CONFIGURATION_PERMISSIONS_VIEW_CHECKBOX,CONFIGURATION_PERMISSIONS_ADD_FOLDER") {
				Role.viewPermissionPG(
					permissionDefinitionKey = ${permissionDefinitionKey},
					permissionFlagged = "false",
					roleTitle = "Site Member");
			}
		}
	}

	@description = "This is a use case for LPS-182704. TC-1 and TC-3: Verify that a confirmation pop-up should show up when Delete Application Data Before Importing checkbox is checked during portlet import process."
	@priority = 5
	test ViewDeleteApplicationDataPopUpInPortletImportProgress {
		task ("Export blank web content and add a new web content entry") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

			LAR.exportPortlet(larFileName = "WebContent_blank_portlet.lar");

			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Guest",
				title = "Web Content Title");
		}

		task ("Click Cancel in the confirmation dialog will return to the import tab") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

			LAR.importPortletWithDeleteApplicationData(
				cancelImport = "true",
				larFileName = "WebContent_blank_portlet.lar");
		}

		task ("Click OK will import successfully") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

			LAR.importPortletWithDeleteApplicationData(larFileName = "WebContent_blank_portlet.lar");

			WebContent.viewDefaultCP(webContentTitle = "Web Content Title");
		}
	}

	@description = "This is a use case for LPS-182704. TC-14 and TC-15: Verify that a confirmation pop-up should show up when Delete Application Data Before Importing checkbox is checked during portlet import process on virtual instance."
	@priority = 5
	test ViewDeleteApplicationDataPopUpInPortletImportProgressInVirtualInstance {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Export blank web content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

			LAR.exportPortlet(larFileName = "WebContent_blank_portlet.lar");
		}

		task ("Add a virtual Instance able.com") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "www.able.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");
		}

		task ("Login at able.com and add a new web content entry") {
			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@www.able.com");

			WebContentNavigator.openWebContentAdmin(
				baseURL = "http://www.able.com:8080",
				siteURLKey = "guest");

			WebContent.addArticleCP(
				webContentContent = "Web Content Content",
				webContentTitle = "Web Content Title");
		}

		task ("Click Cancel in the confirmation dialog will return to the import tab") {
			WebContentNavigator.openWebContentAdmin(
				baseURL = "http://www.able.com:8080",
				siteURLKey = "guest");

			LAR.importPortletWithDeleteApplicationData(
				cancelImport = "true",
				larFileName = "WebContent_blank_portlet.lar");
		}

		task ("Click OK will import successfully") {
			WebContentNavigator.openWebContentAdmin(
				baseURL = "http://www.able.com:8080",
				siteURLKey = "guest");

			LAR.importPortletWithDeleteApplicationData(larFileName = "WebContent_blank_portlet.lar");

			WebContent.viewDefaultCP(webContentTitle = "Web Content Title");
		}
	}

}