@component-name = "portal-wcm"
definition {

	property ci.retries.disabled = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Sites Administration";
	property testray.main.component.name = "Sites Administration";

	static var randomSiteName = StringUtil.randomString(8);

	static var randomSiteURLKey = StringUtil.toLowerCase(${randomSiteName});

	setUp {
		task ("Set up virtual instance") {
			TestCase.setUpPortalInstance();
		}

		task ("Sign in") {
			User.firstLoginPG();
		}
	}

	@description = "Inactive and reactive site."
	@priority = 4
	test ActivateSite {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Enable Show Inactive Request Message in system setting") {
			SystemSettings.openSystemSettingsAdmin();

			SystemSettings.gotoConfiguration(
				configurationCategory = "Infrastructure",
				configurationName = "Inactive Request Handler",
				configurationScope = "System Scope");

			FormFields.enableCheckbox(fieldName = "Show Inactive Request Message");

			SystemSettings.saveConfiguration();
		}

		task ("Add a site and add a page in it") {
			HeadlessSite.addSite(siteName = ${randomSiteName});

			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Site Page");
		}

		task ("Inactive the created site") {
			Site.openSiteSettingsAdmin(siteURLKey = ${randomSiteURLKey});

			Site.inactivateCP(siteName = ${randomSiteName});
		}

		task ("View Inactive Request Message") {
			var baseURL = PropsUtil.get("portal.url");

			Navigator.openSpecificURL(url = "${baseURL}/web/${randomSiteURLKey}");

			Page.viewInactiveRequestMessage(resource = "site");
		}

		task ("Active the created site") {
			Site.openSitesAdmin();

			Site.activateInactive(siteName = ${randomSiteName});
		}

		task ("View no Inactive Request Message") {
			Navigator.openSiteURL(siteName = ${randomSiteName});

			AssertTextNotPresent(value1 = "This site is inactive. Please contact the administrator.");
		}
	}

	@description = "Add child site in child site."
	@priority = 4
	test AddChildChildSite {
		var randomChildSiteName = StringUtil.randomString(8);
		var grandchildSiteName = StringUtil.randomString(8);

		task ("Add a site") {
			HeadlessSite.addSite(siteName = ${randomSiteName});
		}

		task ("Add a child site to the site") {
			HeadlessSite.addSite(
				parentSiteName = ${randomSiteName},
				siteName = ${randomChildSiteName});
		}

		task ("Add a child site to the child site") {
			HeadlessSite.addSite(
				grandParentSiteName = ${randomSiteName},
				parentSiteName = ${randomChildSiteName},
				siteName = ${grandchildSiteName});
		}

		task ("View the child site to the site") {
			Site.openSitesAdmin();

			Site.viewChildCP(
				childSiteName = ${randomChildSiteName},
				siteName = ${randomSiteName});
		}

		task ("View the child site to the child site") {
			Site.viewChildCP(
				childSiteName = ${grandchildSiteName},
				siteName = ${randomChildSiteName});
		}
	}

	@description = "View public page via virtual host URL."
	@priority = 3
	test AddPublicVirtualHostsSiteURL {
		task ("Add a site and a page in it") {
			HeadlessSite.addSite(siteName = ${randomSiteName});

			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Site Page");
		}

		task ("Add a virtual host to the public page") {
			Site.openSiteSettingsAdmin(siteURLKey = ${randomSiteURLKey});

			Site.addVirtualHostsURLCP(
				pageVirtualHosts = "true",
				pageVirtualHostURL = "www.able.com");
		}

		task ("Visit public page by virtual host") {
			Navigator.openSpecificURL(url = "http://www.able.com:8080/site-page");

			Site.viewVirtualHostsURLPG(
				pageName = "Site Page",
				siteName = ${randomSiteName},
				sitePageURL = "http://www.able.com:8080/site-page");
		}
	}

	@description = "Able to add a site with comma."
	@priority = 3
	test AddSiteWithCommaInName {
		task ("Add a site with comma") {
			HeadlessSite.addSite(siteName = "${randomSiteName},");
		}

		task ("View the site added") {
			Site.openSitesAdmin();

			Site.viewCP(siteName = "${randomSiteName},");
		}
	}

	@description = "Unable to add same site name."
	@priority = 3
	test AddSiteWithInvalidDuplicateName {
		task ("Add a site") {
			HeadlessSite.addSite(siteName = ${randomSiteName});
		}

		task ("Try to add a site with the same name and assert could not add it") {
			Site.openSitesAdmin();

			Site.viewCannotAdd(
				siteName = ${randomSiteName},
				siteNameInvalid = "Duplicate");
		}
	}

	@description = "Unable to add site name with blank name, invalid characters * and numeric."
	@priority = 3
	test AddSiteWithInvalidName {
		for (var siteName : list " ,${randomSiteName}*,22222") {
			Site.openSitesAdmin();

			Site.viewCannotAdd(
				siteName = ${siteName},
				siteNameInvalid = "Invalid");
		}
	}

	@description = "Deleting firiendly URL makes it not able to access page via fridely URL."
	@priority = 4
	test DeleteSiteFriendlyURL {
		property custom.properties = "virtual.hosts.default.site.name=Guest";
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		task ("Add a site") {
			HeadlessSite.addSite(siteName = ${randomSiteName});
		}

		task ("Add a public page and private page to the site") {
			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Public Page");

			JSONLayout.addPrivateLayout(
				groupName = ${randomSiteName},
				layoutName = "Private Page");
		}

		task ("Edit friendly URL to null") {
			Site.openSiteSettingsAdmin(siteURLKey = ${randomSiteURLKey});

			Site.editFriendlyURLCP(siteFriendlyURLEdit = "");
		}

		task ("View the the end of firend URL changes to site ID") {
			var siteId = JSONGroupAPI._getGroupIdByName(
				groupName = ${randomSiteName},
				site = "true");

			AssertTextEquals(
				locator1 = "TextInput#FRIENDLY_URL_SITE_SETTINGS",
				value1 = "/group-${siteId}");
		}

		task ("Assert can't access public page via old friendly URL") {
			Navigator.openSiteURL(siteName = ${randomSiteURLKey});

			Page.viewNoPG(pageName = "Public Page");

			ContentPages.viewFragmentText(
				fragmentName = "paragraph",
				id = "element-text",
				text = "Page Not Found");
		}

		task ("Assert can't access private page via old friendly URL") {
			Navigator.openPrivateSiteURL(siteName = ${randomSiteURLKey});

			Page.viewNoPG(pageName = "Private Page");

			ContentPages.viewFragmentText(
				fragmentName = "paragraph",
				id = "element-text",
				text = "Page Not Found");
		}
	}

	@description = "Could edit site name."
	@priority = 5
	test EditSite {
		property portal.acceptance = "true";

		task ("Add a site") {
			HeadlessSite.addSite(siteName = ${randomSiteName});
		}

		task ("Edit site name") {
			Site.openSiteSettingsAdmin(siteURLKey = ${randomSiteURLKey});

			Site.editCP(
				siteName = ${randomSiteName},
				siteNameEdit = "${randomSiteName} Edit");
		}

		task ("View site name edited") {
			Site.openSitesAdmin();

			Site.viewCP(siteName = "${randomSiteName} Edit");
		}
	}

	@description = "Could edit friendly URL and access by it."
	@priority = 4
	test EditSiteFriendlyURL {
		property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";

		var portalURL = PropsUtil.get("portal.url");

		task ("Add a site") {
			HeadlessSite.addSite(siteName = ${randomSiteName});
		}

		task ("Add a public page and private page to the site") {
			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Site Page");

			JSONLayout.addPrivateLayout(
				groupName = ${randomSiteName},
				layoutName = "Site Page");
		}

		task ("Edit friendly URL to alpha") {
			Site.openSiteSettingsAdmin(siteURLKey = ${randomSiteURLKey});

			Site.editFriendlyURLCP(siteFriendlyURLEdit = "alpha");
		}

		task ("Access public page via edited friendly URL") {
			Navigator.openSiteURL(siteName = "alpha");

			Site.viewSiteFriendlyURLPG(
				pageName = "Public Page",
				siteName = ${randomSiteName},
				sitePageURL = "${portalURL}/web/alpha");
		}

		task ("Access private page via edited friendly URL") {
			Navigator.openPrivateSiteURL(siteName = "alpha");

			Site.viewSiteFriendlyURLPG(
				pageName = "Private Page",
				siteName = ${randomSiteName},
				sitePageURL = "${portalURL}/group/alpha");
		}
	}

	@description = "Could not add invalid friendly URL and can access by former friendly URL."
	@priority = 3
	test EditSiteFriendlyURLInvalid {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		var portalURL = PropsUtil.get("portal.url");

		task ("Add a site and a public page in it") {
			HeadlessSite.addSite(siteName = ${randomSiteName});

			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Site Page");
		}

		task ("Edit friendly URL to have 2 slashes") {
			Site.openSiteSettingsAdmin(siteURLKey = ${randomSiteURLKey});

			Site.editFriendlyURLCP(
				friendlyURLInvalid = "true",
				siteFriendlyURL = "/${randomSiteURLKey}",
				siteFriendlyURLEdit = "/alpha/alpha");
		}

		task ("View friendly URL doesn't change") {
			PagesAdmin.openPagesAdmin(siteURLKey = ${randomSiteURLKey});

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Configure",
				pageName = "Site Page");

			PagesAdmin.viewBaseFriendlyURL(siteFriendlyURL = "${portalURL}/web/${randomSiteURLKey}");
		}
	}

	@description = "Able to search and find site by site name."
	@priority = 5
	test SearchSite {
		property portal.acceptance = "true";

		HeadlessSite.addSite(siteName = ${randomSiteName});

		Site.openSitesAdmin();

		Site.searchCP(siteName = ${randomSiteName});
	}

	@description = "Can not choose its own site as parent site."
	@priority = 3
	test SiteCannotBeItsOwnParent {
		HeadlessSite.addSite(siteName = ${randomSiteName});

		Site.openSiteSettingsAdmin(siteURLKey = ${randomSiteURLKey});

		Site.selectParentSite(
			chooseButtonAvailable = "false",
			parentSiteName = ${randomSiteName});
	}

	@description = "Can not choose its own site as parent site in staging."
	@priority = 3
	test SiteCannotBeItsOwnParentStaging {
		task ("Add a site and a public page in it") {
			HeadlessSite.addSite(siteName = ${randomSiteName});

			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Site Page");
		}

		task ("Enable local staging for the site") {
			Staging.openStagingAdmin(siteURLKey = ${randomSiteURLKey});

			Staging.activateStagingCP(siteName = ${randomSiteName});
		}

		task ("View page in staging and live site") {
			Navigator.openSiteURL(siteName = ${randomSiteName});

			Navigator.gotoStagedView();

			Staging.viewStagingLocalLivePG();
		}

		task ("Assert could not select its own site as parent site") {
			Site.openSiteSettingsAdmin(siteURLKey = ${randomSiteURLKey});

			Site.selectParentSite(
				chooseButtonAvailable = "false",
				parentSiteName = ${randomSiteName});
		}
	}

	@description = "This is a test case for LRQA-5853. Disbale Content Sharing in instance level and view child Sites doesn't display content from parent Sites."
	@priority = 4
	test ViewContentSharingDisabledAcrossSitesViaAP {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		var siteName = TestCase.getSiteName(siteName = ${siteName});
		var randomChildSiteName = StringUtil.randomString(8);

		PortalSettings.gotoConfiguration(
			configurationCategory = "Sharing",
			configurationName = "Content Sharing",
			configurationScope = "Virtual Instance Scope");

		PortalSettings.configureContentSharingAcrossSitesCP(enableAcrossSite = "false");

		PortalSettings.configureContentSharingSubSitesCP(subSites = "enabledByDefault");

		HeadlessSite.addSite(siteName = ${randomSiteName});

		JSONLayout.addPublicLayout(
			groupName = ${randomSiteName},
			layoutName = "AP Test Page");

		HeadlessSite.addSite(
			parentSiteName = ${randomSiteName},
			siteName = ${randomChildSiteName});

		JSONLayout.addPublicLayout(
			groupName = ${randomChildSiteName},
			layoutName = "WC Test Page",
			parentGroupName = ${randomSiteName});

		JSONLayout.addWidgetToPublicLayout(
			groupName = ${randomSiteName},
			layoutName = "AP Test Page",
			widgetName = "Asset Publisher");

		JSONLayout.addWidgetToPublicLayout(
			groupName = ${randomChildSiteName},
			layoutName = "WC Test Page",
			parentGroupName = ${randomSiteName},
			widgetName = "Web Content Display");

		Navigator.openSiteURL(siteName = ${randomChildSiteName});

		WebContentDisplayPortlet.add(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		WebContentDisplayPortlet.viewContent(
			webContentContent = "WC WebContent Content",
			webContentTitle = "WC WebContent Title");

		Navigator.openSiteURL(siteName = ${randomSiteName});

		AssetPublisherPortlet.configureSiteScopePG(
			siteName = ${randomChildSiteName},
			siteScopeType = "Child Site");

		Navigator.openSiteURL(siteName = ${randomSiteName});

		AssetPublisherPortlet.viewConfigureSiteScopeContentSharingPG(
			childSite = "true",
			contentSharingAcrossSitesEnabled = "false",
			liferaySiteName = ${siteName});

		Navigator.openSiteURL(siteName = ${randomSiteName});

		AssetPublisherPortlet.viewContentSharingPG(
			assetContent = "WC WebContent Content",
			assetTitle = "WC WebContent Title",
			siteScope1 = ${randomSiteName},
			siteScope2 = ${randomChildSiteName});

		Navigator.openSiteURL(siteName = ${randomSiteName});

		Blogs.addViaAPSelectScope(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title",
			siteScope = ${randomSiteName});

		JSONLayout.addWidgetToPublicLayout(
			groupName = ${randomChildSiteName},
			layoutName = "WC Test Page",
			parentGroupName = ${randomSiteName},
			widgetName = "Asset Publisher");

		Navigator.openSiteURL(siteName = ${randomChildSiteName});

		AssetPublisherPortlet.configureSiteScopePG(
			siteName = ${randomSiteName},
			siteScopeType = "Parent Site");

		Navigator.openSiteURL(siteName = ${randomSiteName});

		AssetPublisherPortlet.viewConfigureSiteScopeContentSharingPG(
			childSite = "true",
			contentSharingAcrossSitesEnabled = "false",
			liferaySiteName = ${siteName});

		Navigator.openSiteURL(siteName = ${randomChildSiteName});

		AssetPublisherPortlet.viewContentSharingPG(
			assetContent = "Blogs Entry Content",
			assetTitle = "Blogs Entry Title",
			siteScope1 = ${randomSiteName},
			siteScope2 = ${randomChildSiteName});
	}

	@description = "This is a test case for LRQA-6014. Enable Content Sharing in instance level and view child Sites display content from parent Sites."
	@priority = 4
	test ViewContentSharingEnabledAcrossSitesViaAP {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		var siteName = TestCase.getSiteName(siteName = ${siteName});

		PortalSettings.gotoConfiguration(
			configurationCategory = "Sharing",
			configurationName = "Content Sharing",
			configurationScope = "Virtual Instance Scope");

		PortalSettings.configureContentSharingAcrossSitesCP(enableAcrossSite = "true");

		PortalSettings.configureContentSharingSubSitesCP(subSites = "enabledByDefault");

		ApplicationsMenu.gotoPortlet(
			category = "Sites",
			panel = "Control Panel",
			portlet = "Sites");

		Site.addBlankCP(siteName = ${randomSiteName});

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PagesAdmin.addPage(pageName = "AP Test Page");

		Navigator.openSiteURL(siteName = ${randomSiteName});

		Portlet.addPG(portletName = "Asset Publisher");

		Navigator.openSiteURL(siteName = ${randomSiteName});

		AssetPublisherPortlet.viewConfigureSiteScopeContentSharingPG(
			contentSharingAcrossSitesEnabled = "true",
			liferaySiteName = ${siteName});

		Navigator.openSiteURL(siteName = ${randomSiteName});

		Blogs.addViaAP(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Site Builder",
			portlet = "Pages");

		PagesAdmin.addPage(pageName = "AP Test Page");

		Navigator.gotoPage(pageName = "AP Test Page");

		Portlet.addPG(portletName = "Asset Publisher");

		Navigator.gotoPage(pageName = "AP Test Page");

		AssetPublisherPortlet.viewConfigureSiteScopeContentSharingPG(
			contentSharingAcrossSitesEnabled = "true",
			currentSite = "true",
			liferaySiteName = ${siteName});

		Navigator.gotoPage(pageName = "AP Test Page");

		AssetPublisherPortlet.configureScope(otherSite = ${randomSiteName});

		Navigator.gotoPage(pageName = "AP Test Page");

		AssetPublisherPortlet.viewContentSharingPG(
			assetContent = "Blogs Entry Content",
			assetTitle = "Blogs Entry Title",
			siteScope1 = ${randomSiteName},
			siteScope2 = ${siteName});
	}

	@description = "View Web Content Admin displayed in global site."
	@priority = 4
	test ViewDefaultGlobalScopeLandingPage {
		property testray.component.names = "Sites Administration";

		WebContentNavigator.openWebContentAdmin(siteURLKey = "global");

		ProductMenuHelper.openProductMenu();

		Site.viewGlobalLandingDefault(
			portletName = "Web Content",
			siteName = "Global");
	}

	@description = "View parent site in child site's Sites Directory."
	@priority = 4
	test ViewDisplayParentSiteViaSitesDirectory {
		var randomChildSiteName = StringUtil.randomString(8);
		var grandchildSiteName = StringUtil.randomString(8);

		task ("Add a site and a public page in it") {
			HeadlessSite.addSite(siteName = ${randomSiteName});

			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Site Page");
		}

		task ("Add a child site to the site and a public page in it") {
			HeadlessSite.addSite(
				parentSiteName = ${randomSiteName},
				siteName = ${randomChildSiteName});

			JSONLayout.addPublicLayout(
				groupName = ${randomChildSiteName},
				layoutName = "Site Page",
				parentGroupName = ${randomSiteName});
		}

		task ("Add a child site to the child site and a public page in it") {
			HeadlessSite.addSite(
				grandParentSiteName = ${randomSiteName},
				parentSiteName = ${randomChildSiteName},
				siteName = ${grandchildSiteName});

			JSONLayout.addPublicLayout(
				grandParentGroupName = ${randomSiteName},
				groupName = ${grandchildSiteName},
				layoutName = "Site Page",
				parentGroupName = ${randomChildSiteName});
		}

		task ("View the child site and child site of the child site") {
			Site.openSitesAdmin();

			Site.viewChildCP(
				childSiteName = ${randomChildSiteName},
				siteName = ${randomSiteName});

			Site.viewChildCP(
				childSiteName = ${grandchildSiteName},
				siteName = ${randomChildSiteName});
		}

		task ("Add a Sites Directory to child site public page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = ${randomChildSiteName},
				layoutName = "Site Page",
				parentGroupName = ${randomSiteName},
				widgetName = "Sites Directory");
		}

		task ("Go to child site public page") {
			Navigator.gotoSitePage(
				pageName = "Site Page",
				siteName = ${randomChildSiteName});
		}

		task ("Configure Sites Directory to display in Parent Level") {
			SitesDirectory.configureSetupPG(directorySites = "Parent Level");
		}

		task ("View parent site displayed") {
			Navigator.gotoSitePage(
				pageName = "Site Page",
				siteName = ${randomChildSiteName});

			SitesDirectory.viewDescriptivePG(siteName = ${randomSiteName});
		}
	}

	@description = "View sites in child site's Sites Directory."
	@priority = 4
	test ViewSiteHierarchiesViaSitesDirectory {
		var randomChildSiteName1 = StringUtil.randomString(8);
		var randomChildSiteName2 = StringUtil.randomString(8);
		var grandchildSiteName1 = StringUtil.randomString(8);
		var grandchildSiteName2 = StringUtil.randomString(8);

		task ("Add a site and a public page in it") {
			HeadlessSite.addSite(siteName = ${randomSiteName});

			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Site Page");
		}

		task ("Add a child site to the site and a public page in it") {
			HeadlessSite.addSite(
				parentSiteName = ${randomSiteName},
				siteName = ${randomChildSiteName1});

			JSONLayout.addPublicLayout(
				groupName = ${randomChildSiteName1},
				layoutName = "Site Page",
				parentGroupName = ${randomSiteName});
		}

		task ("Add a child site to the child site and a public page in it") {
			HeadlessSite.addSite(
				grandParentSiteName = ${randomSiteName},
				parentSiteName = ${randomChildSiteName1},
				siteName = ${grandchildSiteName1});

			JSONLayout.addPublicLayout(
				grandParentGroupName = ${randomSiteName},
				groupName = ${grandchildSiteName1},
				layoutName = "Site Page",
				parentGroupName = ${randomChildSiteName1});
		}

		task ("Add another child site to the child site and a public page in it") {
			HeadlessSite.addSite(
				grandParentSiteName = ${randomSiteName},
				parentSiteName = ${randomChildSiteName1},
				siteName = ${grandchildSiteName2});

			JSONLayout.addPublicLayout(
				grandParentGroupName = ${randomSiteName},
				groupName = ${grandchildSiteName2},
				layoutName = "Site Page",
				parentGroupName = ${randomChildSiteName1});
		}

		task ("Add another child site to the site and a public page in it") {
			HeadlessSite.addSite(
				parentSiteName = ${randomSiteName},
				siteName = ${randomChildSiteName2});

			JSONLayout.addPublicLayout(
				groupName = ${randomChildSiteName2},
				layoutName = "Site Page",
				parentGroupName = ${randomSiteName});
		}

		task ("Add a Sites Directory to the first child site public page") {
			JSONLayout.addWidgetToPublicLayout(
				groupName = ${randomChildSiteName1},
				layoutName = "Site Page",
				parentGroupName = ${randomSiteName},
				widgetName = "Sites Directory");
		}

		task ("Go to first child site page") {
			Navigator.gotoSitePage(
				pageName = "Site Page",
				siteName = ${randomChildSiteName1});
		}

		task ("Configure Sites Directory to display in Top Level") {
			SitesDirectory.configureSetupPG(directorySites = "Top Level");
		}

		task ("Go to first child site page") {
			Navigator.gotoSitePage(
				pageName = "Site Page",
				siteName = ${randomChildSiteName1});
		}

		task ("View Top level site displayed") {
			SitesDirectory.viewDescriptivePG(siteName = ${randomSiteName});
		}

		task ("Configure Sites Directory to display in Parent Level") {
			SitesDirectory.configureSetupPG(directorySites = "Parent Level");
		}

		task ("Go to first child site page") {
			Navigator.gotoSitePage(
				pageName = "Site Page",
				siteName = ${randomChildSiteName1});
		}

		task ("View Parent level site displayed") {
			SitesDirectory.viewDescriptivePG(siteName = ${randomSiteName});
		}

		task ("Configure Sites Directory to display in Siblings") {
			SitesDirectory.configureSetupPG(directorySites = "Siblings");
		}

		task ("Go to first child site page") {
			Navigator.gotoSitePage(
				pageName = "Site Page",
				siteName = ${randomChildSiteName1});
		}

		task ("View Siblings sites displayed") {
			SitesDirectory.viewDescriptivePG(siteName = ${randomChildSiteName1});

			SitesDirectory.viewDescriptivePG(siteName = ${randomChildSiteName2});
		}

		task ("Configure Sites Directory to display in Children") {
			SitesDirectory.configureSetupPG(directorySites = "Children");
		}

		task ("Go to first child site page") {
			Navigator.gotoSitePage(
				pageName = "Site Page",
				siteName = ${randomChildSiteName1});
		}

		task ("View child sites displayed") {
			SitesDirectory.viewDescriptivePG(siteName = ${grandchildSiteName1});

			SitesDirectory.viewDescriptivePG(siteName = ${grandchildSiteName2});
		}

		task ("Add a Sites Directory to the first child site of first child site") {
			JSONLayout.addWidgetToPublicLayout(
				grandParentGroupName = ${randomSiteName},
				groupName = ${grandchildSiteName1},
				layoutName = "Site Page",
				parentGroupName = ${randomChildSiteName1},
				widgetName = "Sites Directory");
		}

		task ("Go to first child child site page") {
			Navigator.gotoSitePage(
				pageName = "Site Page",
				siteName = ${grandchildSiteName1});
		}

		task ("Configure Sites Directory to display in Top Level") {
			SitesDirectory.configureSetupPG(directorySites = "Top Level");
		}

		task ("Go to first child child site page") {
			Navigator.gotoSitePage(
				pageName = "Site Page",
				siteName = ${grandchildSiteName1});
		}

		task ("View Top level site displayed") {
			SitesDirectory.viewDescriptivePG(siteName = ${randomSiteName});
		}

		task ("Configure Sites Directory to display in Parent Level") {
			SitesDirectory.configureSetupPG(directorySites = "Parent Level");
		}

		task ("Go to first child child site page") {
			Navigator.gotoSitePage(
				pageName = "Site Page",
				siteName = ${grandchildSiteName1});
		}

		task ("View Parent level sites displayed") {
			SitesDirectory.viewDescriptivePG(siteName = ${randomChildSiteName1});

			SitesDirectory.viewDescriptivePG(siteName = ${randomChildSiteName2});
		}

		task ("Configure Sites Directory to display in Siblings") {
			SitesDirectory.configureSetupPG(directorySites = "Siblings");
		}

		task ("Go to first child child site page") {
			Navigator.gotoSitePage(
				pageName = "Site Page",
				siteName = ${grandchildSiteName1});
		}

		task ("View Siblings sites displayed") {
			SitesDirectory.viewDescriptivePG(siteName = ${grandchildSiteName1});

			SitesDirectory.viewDescriptivePG(siteName = ${grandchildSiteName2});
		}

		task ("Configure Sites Directory to display in Children") {
			SitesDirectory.configureSetupPG(directorySites = "Children");
		}

		task ("Configure Sites Directory to display in Children") {
			Navigator.gotoSitePage(
				pageName = "Site Page",
				siteName = ${grandchildSiteName1});
		}

		task ("View no site fits this level") {
			AssertTextEquals.assertPartialText(
				locator1 = "Message#EMPTY_INFO",
				value1 = "No sites were found.");
		}
	}

}