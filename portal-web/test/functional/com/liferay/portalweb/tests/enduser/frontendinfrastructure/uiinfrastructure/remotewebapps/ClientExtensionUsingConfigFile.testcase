@component-name = "portal-frontend-infrastructure"
definition {

	property portal.acceptance = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Client Extensions";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Navigator.gotoPage(pageName = "Home");

			while (IsElementPresent(locator1 = "Navigation#ANY_SITE_NAV_BUT_HOME")) {
				var layoutName = selenium.getText("Navigation#ANY_SITE_NAV_BUT_HOME");

				JSONLayout.deletePublicLayout(
					groupName = "Guest",
					layoutName = ${layoutName});

				Navigator.gotoPage(pageName = "Home");

				PortalInstances.tearDownCP();
			}

			ClientExtension.tearDownConfig();
		}
	}

	@description = "LPS-154274. Provisioning client extensions from external systems - Iframe"
	@priority = 5
	test CanUseOsgiClientExtensionIframeAsPortlet {
		property iframe.client.extension.created = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given config file for client extension of type iframe created") {
			ClientExtension.createGlobalVariableClientExtensionType(type = "iframe");

			ClientExtension.checkConfigFileCreatedProperly();
		}

		task ("When adding created portlet to a widget page") {
			ClientExtension.addPortletToWidgetPage(
				portletName = "My Pretty IFrame",
				widgetPageName = "My Widget Page");
		}

		task ("Then My Pretty IFrame is displayed correctly") {
			AssertElementPresent(locator1 = "//iframe[contains(@src,'https://liferay.github.io/liferay-frontend-projects/index.html?b=2&a=1')]");
		}
	}

	@description = "LPS-154274. Provisioning client extensions from external systems - Custom Element"
	@priority = 5
	test OsgiClientExtensionOfTypeCustomElementRendersCorrectlyWhenPlacedOnWidgetPage {
		property custom.element.client.extension.created = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given config file for client extension of type custom element created") {
			ClientExtension.createGlobalVariableClientExtensionType(type = "customElement");

			ClientExtension.checkConfigFileCreatedProperly();
		}

		task ("When placing created portlet on a widget page") {
			ClientExtension.addPortletToWidgetPage(
				portletName = "Vanilla Counter",
				widgetPageName = "My Widget Page");
		}

		task ("Then Vanilla Counter is displayed correctly") {
			AssertElementPresent(locator1 = "//vanilla-counter[@test-data-user='QAuser']");

			Refresh();

			AssertElementPresent(locator1 = "//script[contains(@src,'https://liferay.github.io/liferay-frontend-projects/vanilla-counter/index.js') and contains(@type,'module')]");
		}
	}

}