@component-name = "portal-publications"
definition {

	property osgi.module.configuration.file.names = "com.liferay.change.tracking.configuration.CTSettingsConfiguration.config";
	property osgi.module.configurations = "enabled=B\"true\"";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Site Teams";
	property testray.main.component.name = "Publications";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Publications.disablePublications();
		}
	}

	@description = "Able to Publish Team with assigned User"
	@priority = 4
	test CanPublishTeamWithAssignedUser {
		HeadlessSite.addSite(siteName = "Site Name");

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		Site.openSiteMembershipsAdmin(siteURLKey = "site-name");

		Site.assignUserAsMemberCP(
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONPublications.addPublication(publicationName = "Publication Name");

		JSONPublications.selectPublication(publicationName = "Publication Name");

		Site.openSiteTeamsAdmin(siteURLKey = "site-name");

		Team.addCP(
			teamDescription = "Team Description",
			teamName = "Team Name");

		Team.assignMembersCP(
			teamName = "Team Name",
			userScreenName = "usersn");

		PublicationsNavigator.gotoReviewChanges();

		PublicationsChanges.viewChanges(
			changeCategory = "Team",
			changeSite = "Site Name",
			changeTitle = "Team Name",
			changeType = "Added",
			changeUser = "Test Test");

		PublicationsChanges.viewChangesInRelationships(changeTitle = "Team & User (1 Added)");

		Publications.publishPublication(publicationName = "Publication Name");

		Site.openSiteTeamsAdmin(siteURLKey = "site-name");

		Team.viewMemberCP(
			membershipType = "User",
			teamName = "Team Name",
			userFirstName = "userfn",
			userLastName = "userln");
	}

	@description = "Able to Publish Team with assigned User Group"
	@priority = 4
	test CanPublishTeamWithAssignedUserGroup {
		HeadlessSite.addSite(siteName = "Site Name");

		UserGroup.openUserGroupsAdmin();

		UserGroup.addCP(userGroupName = "User Group Name");

		Site.openSiteMembershipsAdmin(siteURLKey = "site-name");

		Site.assignUserGroupAsMemberCP(userGroupName = "User Group Name");

		JSONPublications.addPublication(publicationName = "Publication Name");

		JSONPublications.selectPublication(publicationName = "Publication Name");

		Site.openSiteTeamsAdmin(siteURLKey = "site-name");

		Team.addCP(
			teamDescription = "Team Description",
			teamName = "Team Name");

		Team.viewCP(
			teamDescription = "Team Description",
			teamName = "Team Name");

		Site.openSiteTeamsAdmin(siteURLKey = "site-name");

		Team.assignUserGroups(
			teamName = "Team Name",
			userGroupName = "User Group Name");

		PublicationsNavigator.gotoReviewChanges();

		PublicationsChanges.viewChanges(
			changeCategory = "Team",
			changeSite = "Site Name",
			changeTitle = "Team Name",
			changeType = "Added",
			changeUser = "Test Test");

		PublicationsChanges.viewChangesInRelationships(changeTitle = "Team & User Group (1 Added)");

		Publications.publishPublication(publicationName = "Publication Name");

		Site.openSiteTeamsAdmin(siteURLKey = "site-name");

		Team.viewMemberCP(
			membershipType = "User Group",
			teamName = "Team Name",
			userGroupName = "User Group Name");
	}

	@description = "Able to resolve team conflicting change by discarding"
	@priority = 4
	test CanResolveTeamConflictingChangeByDiscarding {
		HeadlessSite.addSite(siteName = "Site Name");

		Site.openSiteTeamsAdmin(siteURLKey = "site-name");

		Team.addCP(
			teamDescription = "Team Description",
			teamName = "Team Name");

		JSONPublications.addPublication(publicationName = "Publication 1 Name");

		JSONPublications.selectPublication(publicationName = "Publication 1 Name");

		Site.openSiteTeamsAdmin(siteURLKey = "site-name");

		Team.editCP(
			teamDescriptionEdit = "Team Description Edit",
			teamName = "Team Name",
			teamNameEdit = "Team Name Edit");

		PublicationsNavigator.gotoReviewChanges();

		PublicationsChanges.viewChanges(
			changeCategory = "Team",
			changeSite = "Site Name",
			changeTitle = "Team Name Edit",
			changeType = "Modified",
			changeUser = "Test Test");

		JSONPublications.addPublication(publicationName = "Publication 2 Name");

		JSONPublications.selectPublication(publicationName = "Publication 2 Name");

		Site.openSiteTeamsAdmin(siteURLKey = "site-name");

		Team.deleteCP(
			teamDescription = "Team Description",
			teamName = "Team Name");

		PublicationsNavigator.gotoReviewChanges();

		PublicationsChanges.viewChanges(
			changeCategory = "Team",
			changeSite = "Site Name",
			changeTitle = "Team Name",
			changeType = "Deleted",
			changeUser = "Test Test");

		Publications.publishPublication(publicationName = "Publication 2 Name");

		JSONPublications.selectPublication(publicationName = "Publication 1 Name");

		PublicationsNavigator.gotoPublish(
			gotoPublicationsAdmin = "true",
			publicationName = "Publication 1 Name");

		Publications.viewNeedsManualResolution(
			entryTitle = "Team",
			warningMessage = "Deletion Modification Conflict: Modification conflicts with a deletion.");

		PublicationsChanges.discardChanges(
			changeCategory = "Team",
			changeTitle = "Team Name Edit",
			conflictingChanges = "true",
			entryTitle = "Team");

		Publications.publishPublication(publicationName = "Publication 1 Name");
	}

}