@component-name = "portal-analytics-cloud"
definition {

	property analytics.cloud.release = "true";
	property analytics.cloud.upstream = "true";
	property portal.release = "false";
	property portal.upstream = "true";
	property property.group = "analytics.cloud.profile";
	property testray.main.component.name = "Analytics Cloud";

	setUp {
		ACUtils.launchAC();

		ACSettings.takeTokenFromAnalyticsCloud();

		TestCase.setUpPortalInstance();

		ACUtils.launchDXP();

		ACUtils.addSiteAndPage();
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		// It is not possible to delete properties and data source after LRAC-13389. This functionality should return after LRAC-8040

		//ACUtils.tearDownAC();

		ACUtils.tearDownDXP();

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "Site Name");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8505 | Test Summary: Segment Overview distribution filtered by date"
	@priority = 3
	test SegmentOverviewDistributionFilteredByDate {
		var users = "ac1,ac2";
		var emailList = "ac1@liferay.com,ac2@liferay.com";
		var nameList = "ac1 ac1,ac2 ac2";

		task ("Create two new users") {
			JSONUser.addUser(
				birthdayDay = 15,
				birthdayMonth = 2,
				birthdayYear = 1972,
				userEmailAddress = "ac1@liferay.com",
				userFirstName = "ac1",
				userLastName = "ac1",
				userScreenName = "ac1");

			JSONUser.addUser(
				userEmailAddress = "ac2@liferay.com",
				userFirstName = "ac2",
				userLastName = "ac2",
				userScreenName = "ac2");
		}

		task ("Connect AC to DXP") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud(siteName = "Site Name");
		}

		task ("View AC Page as new user") {
			ACUtils.navigateToSitePageWithUser(
				emailList = ${emailList},
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Close all sessions, lauch AC, change the property and go to segments") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = ${propertyName});

			ACNavigation.goToSegments();
		}

		task ("Create a static segment, add two static members and save segment") {
			ACSegments.createStaticSegment();

			ACUtils.setItemName(itemName = "Static Segment Test");

			ACSegments.addStaticMultiMember(tableMember = ${nameList});

			ACSegments.saveSegment();
		}

		task ("Go to segments, select a segment") {
			ACNavigation.goToSegments();

			ACSegments.accessSegment(segmentName = "Static Segment Test");
		}

		task ("Filter Attribute by date identifier in Overview") {
			ACSegments.addBreakdownByAttribute(
				attribute = "birthDate",
				breakdownName = "Segment Overview Test");
		}

		task ("View chart entry") {
			ACIndividualsDashboard.viewBreakdownRecharts(
				fillColor = "#4B9BFF",
				index = 1,
				tick = "1972-03-15");

			ACIndividualsDashboard.viewBreakdownRecharts(
				fillColor = "#4B9BFF",
				index = 2,
				tick = "1986-05-31");
		}
	}

	@description = "Feature ID: Legacy | Automation ID: LRAC-8507 | Test Summary: Segment Overview distribution filtered by text"
	@priority = 3
	test SegmentOverviewDistributionFilteredByText {
		var users = "ac,liferay";
		var emailList = "ac@liferay.com,liferay@liferay.com";
		var nameList = "ac ac,liferay liferay";

		task ("Connect Analytics Cloud to DXP") {
			var propertyName = ACDXPSettings.connectDXPtoAnalyticsCloud();
		}

		task ("Create page") {
			ACUtils.addPage(layoutName = "AC Page");
		}

		task ("Add two new users") {
			for (var name : list ${users}) {
				JSONUser.addUser(
					jobTitle = "QA",
					userEmailAddress = "${name}@liferay.com",
					userFirstName = ${name},
					userLastName = ${name},
					userScreenName = ${name});
			}

			ACDXPSettings.syncNewContactData();
		}

		task ("View AC Page as new user") {
			ACUtils.navigateToSitePageWithUser(
				emailList = ${emailList},
				pageName = "AC Page",
				siteName = "Site Name");
		}

		task ("Switch to new property in AC") {
			ACUtils.launchAC();

			ACProperties.switchProperty(propertyName = ${propertyName});
		}

		task ("Add a new static segment") {
			ACNavigation.goToSegments();

			ACSegments.createStaticSegment();
		}

		task ("Type the segment name") {
			ACUtils.setItemName(itemName = "Static Segment Test");
		}

		task ("Add new user as member") {
			ACSegments.addStaticMultiMember(tableMember = ${nameList});

			ACSegments.saveSegment();
		}

		task ("Go to Segments") {
			ACNavigation.goToSegments();

			ACSegments.accessSegment(segmentName = "Static Segment Test");
		}

		task ("Filter Attribute by Boolean identifier in Overview") {
			ACSegments.addBreakdownByAttribute(
				attribute = "jobTitle",
				breakdownName = "QA");
		}

		task ("View Breakdown Chart") {
			ACIndividualsDashboard.viewBreakdownRecharts(
				fillColor = "#4B9BFF",
				tick = "QA");
		}
	}

}