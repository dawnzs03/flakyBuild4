@component-name = "portal-upgrades"
definition {

	property ci.retries.disabled = "true";
	property database.types = "db2,mariadb,mysql,oracle,postgresql,sqlserver,sybase";
	property portal.release = "true";
	property portal.upstream = "true";
	property test.liferay.virtual.instance = "false";
	property testray.main.component.name = "Upgrades Staging";

	setUp {
		SignIn.signIn();

		SearchAdministration.executeReindex();
	}

	@description = "This is a test for LPS-138634. Relaunch export process for default site."
	@priority = 5
	test DefaultSiteCanBeExportedAfterUpgrade71103 {
		property data.archive.type = "data-archive-default-site-export";
		property database.types = "db2,mariadb,mysql,oracle,postgresql,sybase";
		property portal.version = "7.1.10.3";

		task ("Navigate to Export portlet") {
			LAR.openExportAdmin(siteScopeName = "guest");
		}

		task ("Relaunch export process") {
			LAR.relaunchCurrentAndPreviousProcess(larFileName = "Public Pages");
		}
	}

	@description = "This is a test for LPS-138634. Relaunch export process for default site."
	@priority = 5
	test DefaultSiteCanBeExportedAfterUpgrade72101 {
		property data.archive.type = "data-archive-default-site-export";
		property database.types = "db2,mariadb,mysql,oracle,postgresql,sybase";
		property portal.version = "7.2.10.1";

		task ("Navigate to Export portlet") {
			LAR.openExportAdmin(siteScopeName = "guest");
		}

		task ("Relaunch export process") {
			LAR.relaunchCurrentAndPreviousProcess(larFileName = "Public Pages");
		}
	}

	@description = "This is a test for LPS-138634. Relaunch export process for default site."
	@priority = 5
	test DefaultSiteCanBeExportedAfterUpgrade73101 {
		property data.archive.type = "data-archive-default-site-export";
		property database.types = "db2,mariadb,mysql,oracle,postgresql,sybase";
		property portal.version = "7.3.10.1";

		task ("Navigate to Export portlet") {
			LAR.openExportAdmin(siteScopeName = "guest");
		}

		task ("Relaunch export process") {
			LAR.relaunchCurrentAndPreviousProcess(larFileName = "Public Pages");
		}
	}

	@description = "This is a test for LPS-138634. Relaunch export process for default site. Blocked by LRQA-73610."
	@priority = 5
	test DefaultSiteCanBeExportedAfterUpgrade701016 {
		property data.archive.type = "data-archive-default-site-export";
		property database.types = "db2,mariadb,mysql,oracle,postgresql,sybase";
		property portal.version = "7.0.10.16";

		task ("Navigate to Export portlet") {
			LAR.openExportAdmin(siteScopeName = "guest");
		}

		task ("Relaunch export process") {
			LAR.relaunchCurrentAndPreviousProcess(larFileName = "Public Pages");
		}
	}

	@description = "This is a test for LPS-138634. Modify contents of export template after upgrading."
	@priority = 5
	test ExportTemplateCanBeEditedAfterUpgrade71103 {
		property data.archive.type = "data-archive-edit-export-template";
		property database.types = "db2,mariadb,mysql,oracle,postgresql,sybase";
		property portal.version = "7.1.10.3";

		task ("Add Blog and Web Content entry") {
			JSONBlog.addEntry(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title");

			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Guest",
				title = "Web Content Title");
		}

		task ("Modify export template by enabling Blogs and disabling Web Content") {
			LAR.openExportAdmin(siteScopeName = "guest");

			LexiconEntry.gotoHeaderMenuItem(menuItem = "Export Templates");

			AssertClick(
				key_columnName = "title",
				key_tableEntry = "Export Template Name",
				locator1 = "LexiconTable#TABLE_ENTRY_COLUMN_LINK",
				value1 = "Export Template Name");

			LAR.configureExportOptions(
				checkContentNameList = "Blogs",
				uncheckContentNameList = "Web Content");

			LAR.saveExportTemplateCP(
				exportTemplateDescription = "Export Template Description",
				exportTemplateName = "Export Template Name");
		}

		task ("Import content into a new site using the modified export template") {
			LAR.exportExportTemplateCP(
				exportTemplateDescription = "Export Template Description",
				exportTemplateName = "Export Template Name",
				larFileName = "Export.Template");

			var larFileName = LAR.getLarFileName();

			LAR.downloadLar();

			HeadlessSite.addSite(siteName = "Site Name");

			LAR.importSiteCP(
				larFileName = ${larFileName},
				siteName = "site-name");
		}

		task ("Verify that after the import process, Blog entry is visible and Web Content isn't") {
			BlogsNavigator.openBlogsAdmin(siteURLKey = "site-name");

			BlogsNavigator.gotoEntryCP(entryTitle = "Blogs Entry Title");

			BlogsEntry.viewEntryCP(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

			WebContent.viewNotPresentCP(webContentTitle = "Web Content Title");
		}
	}

	@description = "This is a test for LPS-138634. Modify contents of export template after upgrading."
	@priority = 5
	test ExportTemplateCanBeEditedAfterUpgrade72101 {
		property data.archive.type = "data-archive-edit-export-template";
		property database.types = "db2,mariadb,mysql,oracle,postgresql,sybase";
		property portal.version = "7.2.10.1";

		task ("Add Blog and Web Content entry") {
			JSONBlog.addEntry(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title");

			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Guest",
				title = "Web Content Title");
		}

		task ("Modify export template by enabling Blogs and disabling Web Content") {
			LAR.openExportAdmin(siteScopeName = "guest");

			LexiconEntry.gotoHeaderMenuItem(menuItem = "Export Templates");

			AssertClick(
				key_columnName = "title",
				key_tableEntry = "Export Template Name",
				locator1 = "LexiconTable#TABLE_ENTRY_COLUMN_LINK",
				value1 = "Export Template Name");

			LAR.configureExportOptions(
				checkContentNameList = "Blogs",
				uncheckContentNameList = "Web Content");

			LAR.saveExportTemplateCP(
				exportTemplateDescription = "Export Template Description",
				exportTemplateName = "Export Template Name");
		}

		task ("Import content into a new site using the modified export template") {
			LAR.exportExportTemplateCP(
				exportTemplateDescription = "Export Template Description",
				exportTemplateName = "Export Template Name",
				larFileName = "Export.Template");

			var larFileName = LAR.getLarFileName();

			LAR.downloadLar();

			HeadlessSite.addSite(siteName = "Site Name");

			LAR.importSiteCP(
				larFileName = ${larFileName},
				siteName = "site-name");
		}

		task ("Verify that after the import process, Blog entry is visible and Web Content isn't") {
			BlogsNavigator.openBlogsAdmin(siteURLKey = "site-name");

			BlogsNavigator.gotoEntryCP(entryTitle = "Blogs Entry Title");

			BlogsEntry.viewEntryCP(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

			WebContent.viewNotPresentCP(webContentTitle = "Web Content Title");
		}
	}

	@description = "This is a test for LPS-138634. Modify contents of export template after upgrading."
	@priority = 5
	test ExportTemplateCanBeEditedAfterUpgrade73101 {
		property data.archive.type = "data-archive-edit-export-template";
		property database.types = "db2,mariadb,mysql,oracle,postgresql,sybase";
		property portal.version = "7.3.10.1";

		task ("Add Blog and Web Content entry") {
			JSONBlog.addEntry(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title");

			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Guest",
				title = "Web Content Title");
		}

		task ("Modify export template by enabling Blogs and disabling Web Content") {
			LAR.openExportAdmin(siteScopeName = "guest");

			LexiconEntry.gotoHeaderMenuItem(menuItem = "Export Templates");

			AssertClick(
				key_columnName = "title",
				key_tableEntry = "Export Template Name",
				locator1 = "LexiconTable#TABLE_ENTRY_COLUMN_LINK",
				value1 = "Export Template Name");

			LAR.configureExportOptions(
				checkContentNameList = "Blogs",
				uncheckContentNameList = "Web Content");

			LAR.saveExportTemplateCP(
				exportTemplateDescription = "Export Template Description",
				exportTemplateName = "Export Template Name");
		}

		task ("Import content into a new site using the modified export template") {
			LAR.exportExportTemplateCP(
				exportTemplateDescription = "Export Template Description",
				exportTemplateName = "Export Template Name",
				larFileName = "Export.Template");

			var larFileName = LAR.getLarFileName();

			LAR.downloadLar();

			HeadlessSite.addSite(siteName = "Site Name");

			LAR.importSiteCP(
				larFileName = ${larFileName},
				siteName = "site-name");
		}

		task ("Verify that after the import process, Blog entry is visible and Web Content isn't") {
			BlogsNavigator.openBlogsAdmin(siteURLKey = "site-name");

			BlogsNavigator.gotoEntryCP(entryTitle = "Blogs Entry Title");

			BlogsEntry.viewEntryCP(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

			WebContent.viewNotPresentCP(webContentTitle = "Web Content Title");
		}
	}

	@description = "This is a test for LPS-138634. Modify contents of export template after upgrading."
	@priority = 5
	test ExportTemplateCanBeEditedAfterUpgrade701016 {
		property data.archive.type = "data-archive-edit-export-template";
		property database.types = "db2,mariadb,mysql,oracle,postgresql,sybase";
		property portal.version = "7.0.10.16";

		task ("Add Blog and Web Content entry") {
			JSONBlog.addEntry(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title");

			JSONWebcontent.addWebContent(
				content = "Web Content Content",
				groupName = "Guest",
				title = "Web Content Title");
		}

		task ("Modify export template by enabling Blogs and disabling Web Content") {
			LAR.openExportAdmin(siteScopeName = "guest");

			LexiconEntry.gotoHeaderMenuItem(menuItem = "Export Templates");

			AssertClick(
				key_columnName = "title",
				key_tableEntry = "Export Template Name",
				locator1 = "LexiconTable#TABLE_ENTRY_COLUMN_LINK",
				value1 = "Export Template Name");

			LAR.configureExportOptions(
				checkContentNameList = "Blogs",
				uncheckContentNameList = "Web Content");

			LAR.saveExportTemplateCP(
				exportTemplateDescription = "Export Template Description",
				exportTemplateName = "Export Template Name");
		}

		task ("Import content into a new site using the modified export template") {
			LAR.exportExportTemplateCP(
				exportTemplateDescription = "Export Template Description",
				exportTemplateName = "Export Template Name",
				larFileName = "Export.Template");

			var larFileName = LAR.getLarFileName();

			LAR.downloadLar();

			HeadlessSite.addSite(siteName = "Site Name");

			LAR.importSiteCP(
				larFileName = ${larFileName},
				siteName = "site-name");
		}

		task ("Verify that after the import process, Blog entry is visible and Web Content isn't") {
			BlogsNavigator.openBlogsAdmin(siteURLKey = "site-name");

			BlogsNavigator.gotoEntryCP(entryTitle = "Blogs Entry Title");

			BlogsEntry.viewEntryCP(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

			WebContent.viewNotPresentCP(webContentTitle = "Web Content Title");
		}
	}

	@description = "This is a use case for LPS-184978. TC-11: URL Pattern configuration works well after upgrading from 7.3 SP1."
	@priority = 5
	test URLPatternShouldWorkAfterUpgrade73101 {
		property custom.properties = "virtual.hosts.default.site.name=Guest";
		property data.archive.type = "data-archive-web-content-with-custom-url";
		property portal.version = "7.3.10.1";

		task ("When: Not set URL pattern and edit web content") {
			StagingNavigator.openToConfigInInstanceSettings(portlet = "Export/Import, Staging");

			AssertTextEquals(
				locator1 = "ExportImport#URL_PATTERN",
				value1 = "");

			takeScreenshot();
		}

		task ("Then: Custom URLs cannot bypass validation") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			Button.clickPublish();

			ExportImport.viewValidationMessage(
				url = "/dl/XYZ123",
				urlPattern = "/dl");
		}

		task ("When: Add custom URL in URL Pattern in Instance Settings") {
			StagingNavigator.openToConfigInInstanceSettings(portlet = "Export/Import, Staging");

			ExportImport.configureURLPattern(urlPattern = "/dl/*");
		}

		task ("Then: Custom URL can bypass validation") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

			WebContentNavigator.gotoEditCP(webContentTitle = "Web Content Title");

			WebContent.editCP(webContentTitleEdit = "Web Content Title Edit");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

			WebContentNavigator.gotoAddCP();

			WebContent.addCP(webContentTitle = "Web Content Title B");

			var portalURL = PropsUtil.get("portal.url");

			ExportImport.addSourceContent(content = '''<p><a href="${portalURL}/dl/XYZ123">${portalURL}/dl/XYZ123</a></p>''');

			PortletEntry.publish();
		}
	}

}