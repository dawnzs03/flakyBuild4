@component-name = "portal-publications"
definition {

	property osgi.module.configuration.file.names = "com.liferay.change.tracking.configuration.CTSettingsConfiguration.config";
	property osgi.module.configurations = "enabled=B\"true\"";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Publications";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Publications.disablePublications();
		}
	}

	@description = "Assert we can add edit and delete comment for Publication Review."
	@priority = 4
	test AddEditAndDeleteCommentForPublicationReview {
		JSONPublications.addPublication(publicationName = "Publication Name");

		JSONPublications.selectPublication(publicationName = "Publication Name");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Guest",
			title = "WC WebContent Title");

		PublicationsNavigator.gotoReviewChanges(
			gotoPublicationsAdmin = "true",
			publicationName = "Publication Name");

		PublicationsChanges.assertPublicationsCommentsCRUDPermissions();
	}

	@description = "Assert Publications user can add/delete/publish publication with all permissions of Publications, can't add/publish a new publicaiton without add/publish publication permission."
	@priority = 5
	test AllowPublicationsPermissionUserToAddAndPublishPublications {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONRole.addRegularRole(
			roleKey = "Publications Role",
			roleTitle = "Publications Role");

		for (var resourceActionIndex : list "ACCESS_IN_CONTROL_PANEL,ADD_TO_PAGE,CONFIGURATION,PERMISSIONS,PREFERENCES,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = ${resourceActionIndex},
				resourceName = "com_liferay_change_tracking_web_portlet_PublicationsPortlet",
				roleTitle = "Publications Role");
		}

		Permissions.definePermissionViaJSONAPI(
			resourceAction = "VIEW_CONTROL_PANEL",
			resourceName = 90,
			roleTitle = "Publications Role");

		for (var resourceActionIndex : list "ADD_PUBLICATION,PERMISSIONS") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = ${resourceActionIndex},
				resourceName = "com.liferay.change.tracking",
				roleTitle = "Publications Role");
		}

		for (var resourceActionIndex : list "DELETE,PERMISSIONS,PUBLISH,UPDATE,VIEW") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = ${resourceActionIndex},
				resourceName = "com.liferay.change.tracking.model.CTCollection",
				roleTitle = "Publications Role");
		}

		JSONRole.assignRoleToUser(
			roleTitle = "Publications Role",
			userEmailAddress = "userea@liferay.com");

		JSONPublications.addPublication(publicationName = "Publication Name");

		JSONPublications.selectPublication(publicationName = "Publication Name");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Guest",
			title = "WC WebContent Title");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		Publications.publishPublication(
			gotoPublicationsAdmin = "true",
			publicationName = "Publication Name");

		Publications.createNewPublication(
			gotoPublicationsAdmin = "true",
			publicationName = "Publication Name 2");

		ApplicationsMenu.gotoPortlet(
			category = "Publications",
			panel = "Applications",
			portlet = "Publications");

		Publications.deletePublication(publicationName = "Publication Name 2");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		Permissions.removePermissionViaAPI(
			resourceAction = "ADD_PUBLICATION",
			resourceName = "com.liferay.change.tracking",
			roleTitle = "Publications Role");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		PublicationsPermissions.assertNoPermissionToCreatePublication();

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "test@liferay.com");

		Permissions.removePermissionViaAPI(
			resourceAction = "PUBLISH",
			resourceName = "com.liferay.change.tracking.model.CTCollection",
			roleTitle = "Publications Role");

		JSONPublications.addPublication(publicationName = "Publication Name 3");

		JSONPublications.selectPublication(publicationName = "Publication Name 3");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content 3",
			groupName = "Guest",
			title = "WC WebContent Title 3");

		User.logoutPG();

		User.loginUserPG(
			password = "test",
			userEmailAddress = "userea@liferay.com");

		PublicationsPermissions.assertNoPermissionToPublishPublication(publicationName = "Publication Name 3");
	}

	@description = "Assert Non-privileged user cannot see Publications bar."
	@priority = 5
	test AssertNonPrivilegedUserCannotSeePublicationsBar {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONRole.assignRoleToUser(
			roleTitle = "Power User",
			userEmailAddress = "userea@liferay.com");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		AssertElementNotPresent(locator1 = "Publications#PUBLICATIONS_INDICATOR_BUTTON");
	}

	@description = "This is the use case for LPS-153276. Browsing in a publication should not cause changes inside the publication."
	@priority = 4
	test BrowsingInPublicationCannotCauseChanges {
		JSONPublications.addPublication(publicationName = "Publication Name");

		JSONPublications.selectPublication(publicationName = "Publication Name");

		ApplicationsMenuHelper.openApplicationsMenu();

		Navigator.gotoNavTab(navTab = "Applications");

		PublicationsNavigator.openPublicationsAdmin();

		PublicationsNavigator.gotoReviewChanges(publicationName = "Publication Name");

		AssertElementPresent(locator1 = "PublicationsChanges#MESSAGE_NO_CHANGES");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Documents and Media");

		DMNavigator.gotoAddDocumentTypeCP(dmDocumentTypeName = "File Upload");

		Button.click(button = "Cancel");

		DMNavigator.gotoDocumentType();

		DMNavigator.gotoMetadataSets();

		PublicationsNavigator.gotoReviewChanges(publicationName = "Publication Name");

		AssertElementPresent(locator1 = "PublicationsChanges#MESSAGE_NO_CHANGES");

		UserBar.gotoDropdownItem(dropdownItem = "Account Settings");

		PublicationsNavigator.gotoReviewChanges(
			gotoPublicationsAdmin = "true",
			publicationName = "Publication Name");

		AssertElementPresent(locator1 = "PublicationsChanges#MESSAGE_NO_CHANGES");
	}

	@description = "This is the use case for LPS-158789. Allow you to change publication via URL parameter"
	@priority = 4
	test CanChangePublicationViaURLParameter {
		HeadlessSite.addSite(siteName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Test Page Name");

		JSONPublications.addPublication(publicationName = "Publication Name");

		JSONPublications.selectPublication(publicationName = "Publication Name");

		JSONWebcontent.addWebContent(
			content = "Web Content Content",
			groupName = "Site Name",
			title = "Web Content Title");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Site Name",
			layoutName = "Test Page Name",
			widgetName = "Web Content Display");

		Navigator.openSitePage(
			pageName = "Test Page Name",
			siteName = "Site Name");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "Web Content Title");

		PublicationsNavigator.openPublicationsAdmin();

		Publications.workOnProduction();

		var ctCollectionId = JSONPublicationsAPI._getCTCollectionId(publicationName = "Publication Name");
		var portalURL = PropsUtil.get("portal.url");

		Navigator.openSpecificURL(url = "${portalURL}/web/site-name/test-page-name?previewCTCollectionId=${ctCollectionId}");

		WebContentDisplayPortlet.viewContent(
			webContentContent = "Web Content Content",
			webContentTitle = "Web Content Title");
	}

	@description = "This is a use case for LPS-174721 - Create Publications Form does not submit on Enter keypress."
	@priority = 3
	test CanCreatePublicationViaKeyboard {
		PublicationsNavigator.openPublicationsAdmin();

		Click(locator1 = "Button#PLUS");

		Type(
			locator1 = "Publications#PUBLICATION_NAME",
			value1 = "Test Publication");

		KeyPress(
			locator1 = "Publications#PUBLICATION_NAME",
			value1 = "\ENTER");

		Alert.viewSuccessMessage();
	}

	@description = "Filter Publications Changes."
	@priority = 4
	test CanFilterChangesInReview {
		JSONWebcontent.addWebContent(
			content = "WC WebContent Content 1",
			groupName = "Guest",
			title = "WC WebContent Title 1");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Guest",
			guestPermissions = "false",
			mimeType = "image/jpeg",
			sourceFileName = "Document_1.jpg");

		HeadlessSite.addSite(siteName = "Test Site Name");

		JSONPublications.addPublication(publicationName = "Publication Name");

		JSONPublications.selectPublication(publicationName = "Publication Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		WebContent.moveToRecycleBinCP(webContentTitle = "WC WebContent Title 1");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "guest");

		DMDocument.editCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentDescriptionEdit = "DM Document Description Edit",
			dmDocumentTitle = "DM Document Title",
			dmDocumentTitleEdit = "DM Document Title Edit");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content 2",
			groupName = "Test Site Name",
			title = "WC WebContent Title 2");

		PublicationsNavigator.gotoReviewChanges();

		PublicationsChanges.filterChangesByItem(
			checkboxName = "Added",
			menuItem = "Change Types");

		PublicationsChanges.viewChanges(
			changeCategory = "Web Content Article",
			changeSite = "Test Site Name",
			changeTitle = "WC WebContent Title 2",
			changeType = "Added",
			changeUser = "Test Test");

		PublicationsChanges.viewChangesResultNotPresent(
			changeCategory = "Web Content Article",
			changeTitle = "WC WebContent Title 1");

		PublicationsChanges.viewChangesResultNotPresent(
			changeCategory = "Document",
			changeTitle = "DM Document Title Edit");

		PublicationsChanges.filterChangesByItem(
			checkboxName = "Deleted",
			menuItem = "Change Types");

		PublicationsChanges.viewChanges(
			changeCategory = "Web Content Article",
			changeSite = "Guest",
			changeTitle = "WC WebContent Title 1",
			changeType = "Deleted",
			changeUser = "Test Test");

		PublicationsChanges.viewChangesResultNotPresent(
			changeCategory = "Web Content Article",
			changeOrder = 2,
			changeTitle = "WC WebContent Title 2");

		PublicationsChanges.viewChangesResultNotPresent(
			changeCategory = "Document",
			changeTitle = "DM Document Title Edit");

		PublicationsChanges.filterChangesByItem(
			checkboxName = "Modified",
			menuItem = "Change Types");

		PublicationsChanges.viewChanges(
			changeCategory = "Document",
			changeSite = "Guest",
			changeTitle = "DM Document Title Edit",
			changeType = "Modified",
			changeUser = "Test Test");

		PublicationsChanges.viewChangesResultNotPresent(
			changeCategory = "Web Content Article",
			changeTitle = "WC WebContent Title 1");

		PublicationsChanges.viewChangesResultNotPresent(
			changeCategory = "Web Content Article",
			changeOrder = 2,
			changeTitle = "WC WebContent Title 2");

		PublicationsChanges.filterChangesByItem(
			checkboxName = "Guest",
			menuItem = "Sites");

		PublicationsChanges.viewChanges(
			changeCategory = "Document",
			changeSite = "Guest",
			changeTitle = "DM Document Title Edit",
			changeType = "Modified",
			changeUser = "Test Test");

		PublicationsChanges.viewChanges(
			changeCategory = "Web Content Article",
			changeSite = "Guest",
			changeTitle = "WC WebContent Title 1",
			changeType = "Deleted",
			changeUser = "Test Test");

		PublicationsChanges.viewChangesResultNotPresent(
			changeCategory = "Web Content Article",
			changeOrder = 2,
			changeTitle = "WC WebContent Title 2");

		PublicationsChanges.filterChangesByItem(
			checkboxName = "Test Site Name",
			menuItem = "Sites");

		PublicationsChanges.viewChanges(
			changeCategory = "Web Content Article",
			changeSite = "Test Site Name",
			changeTitle = "WC WebContent Title 2",
			changeType = "Added",
			changeUser = "Test Test");

		PublicationsChanges.viewChangesResultNotPresent(
			changeCategory = "Web Content Article",
			changeTitle = "WC WebContent Title 1");

		PublicationsChanges.viewChangesResultNotPresent(
			changeCategory = "Document",
			changeTitle = "DM Document Title Edit");

		PublicationsChanges.filterChangesByItem(
			checkboxName = "Document",
			menuItem = "Types");

		PublicationsChanges.viewChanges(
			changeCategory = "Document",
			changeSite = "Guest",
			changeTitle = "DM Document Title Edit",
			changeType = "Modified",
			changeUser = "Test Test");

		PublicationsChanges.viewChangesResultNotPresent(
			changeCategory = "Web Content Article",
			changeTitle = "WC WebContent Title 1");

		PublicationsChanges.viewChangesResultNotPresent(
			changeCategory = "Web Content Article",
			changeOrder = 2,
			changeTitle = "WC WebContent Title 2");

		PublicationsChanges.filterChangesByItem(
			checkboxName = "Web Content Article",
			menuItem = "Types");

		PublicationsChanges.viewChanges(
			changeCategory = "Web Content Article",
			changeSite = "Guest",
			changeTitle = "WC WebContent Title 1",
			changeType = "Deleted",
			changeUser = "Test Test");

		PublicationsChanges.viewChanges(
			changeCategory = "Web Content Article",
			changeOrder = 2,
			changeSite = "Test Site Name",
			changeTitle = "WC WebContent Title 2",
			changeType = "Added",
			changeUser = "Test Test");

		PublicationsChanges.viewChangesResultNotPresent(
			changeCategory = "Document",
			changeTitle = "DM Document Title Edit");
	}

	@description = "This is the use case for LPS-158789."
	@priority = 4
	test CannotChangePublicationViaURLWithNonexistentCollectionId {
		HeadlessSite.addSite(siteName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Test Page Name");

		JSONPublications.addPublication(publicationName = "Publication Name");

		JSONPublications.selectPublication(publicationName = "Publication Name");

		JSONWebcontent.addWebContent(
			content = "Web Content Content",
			groupName = "Site Name",
			title = "Web Content Title");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Site Name",
			layoutName = "Test Page Name",
			widgetName = "Web Content Display");

		Navigator.openSitePage(
			pageName = "Test Page Name",
			siteName = "Site Name");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "Web Content Title");

		PublicationsNavigator.openPublicationsAdmin();

		Publications.workOnProduction();

		var ctCollectionId1 = JSONPublicationsAPI._getCTCollectionId(publicationName = "Publication Name");

		var ctCollectionId2 = ${ctCollectionId1} + 1;
		var portalURL = PropsUtil.get("portal.url");

		Open.openRedirect(locator1 = "${portalURL}/web/site-name/test-page-name?previewCTCollectionId=${ctCollectionId2}");

		Alert.viewErrorMessage(errorMessage = "Your request failed to complete.");
	}

	@description = "This is the use case for LPS-183473."
	@priority = 4
	test CannotEmptyRecycleBinWithinPublication {
		HeadlessSite.addSite(siteName = "Site Name");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Site Name",
			title = "WC WebContent Title");

		JSONPublications.addPublication(publicationName = "Publication 1 Name");

		JSONPublications.selectPublication(publicationName = "Publication 1 Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "site-name");

		WebContent.moveToRecycleBinCP(
			assetType = "Web Content Article",
			webContentTitle = "WC WebContent Title");

		RecycleBin.openRecycleBinAdmin(siteURLKey = "site-name");

		LexiconTable.viewTableEntryTitle(tableEntry = "WC WebContent Title");

		LexiconTable.viewTableEntryText(
			tableEntry = "WC WebContent Title",
			tableEntryText = "Web Content Article");

		Click.waitForMenuToggleJSClick(
			key_tableEntry = "WC WebContent Title",
			locator1 = "LexiconTable#TABLE_ENTRY_ELLIPSIS");

		MenuItem.viewNotPresent(menuItem = "Delete");
	}

	@description = "This is a use case for LPS-194210 - Fail to publish publication after deleted on publication and production."
	@priority = 3
	test CanPublishAfterDeleteOnPublicationAndProduction {
		task ("Create 2 Pages") {
			for (var count : list "1,2") {
				JSONLayout.addPublicLayout(
					groupName = "Guest",
					layoutName = "Page ${count}");
			}
		}

		task ("Create Publication and delete both pages") {
			JSONPublications.addPublication(publicationName = "P1");

			JSONPublications.selectPublication(publicationName = "P1");

			for (var count : list "1,2") {
				JSONLayout.deletePublicLayout(
					groupName = "Guest",
					layoutName = "Page ${count}");
			}
		}

		task ("Go to production mode, delete Page 1 and Publish Publication") {
			PublicationsNavigator.openPublicationsAdmin();

			Publications.workOnProduction();

			JSONLayout.deletePublicLayout(
				groupName = "Guest",
				layoutName = "Page 1");

			Publications.publishPublication(
				gotoPublicationsAdmin = "true",
				publicationName = "P1");
		}
	}

	@description = "LPS-136380 - Add localization for translated titles and content."
	@priority = 4
	test CanPublishLocalizedContent {
		JSONPublications.addPublication(publicationName = "Publication Name");

		JSONPublications.selectPublication(publicationName = "Publication Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "Guest");

		WebContentNavigator.gotoAddCP();

		PortletEntry.viewLocale(locale = "en-US");

		WebContent.addCP(
			webContentContent = "Web Content",
			webContentTitle = "Web Content Title");

		PortletEntry.changeLocale(locale = "zh-CN");

		WebContent.addCP(
			webContentContent = "网页内容",
			webContentTitle = "网页内容标题");

		PortletEntry.publish();

		PublicationsNavigator.gotoReviewChanges();

		PublicationsChanges.viewChanges(
			changeCategory = "Web Content Translation",
			changeSite = "Guest",
			changeTitle = "Web Content Title",
			changeType = "Added",
			changeUser = "Test Test");

		PublicationsChanges.viewChanges(
			changeCategory = "Web Content Translation",
			changeOrder = 2,
			changeSite = "Guest",
			changeTitle = "网页内容标题",
			changeType = "Added",
			changeUser = "Test Test");

		PublicationsNavigator.gotoViewChangeDetails(
			changeCategory = "Web Content Article",
			changeTitle = "Web Content Title");

		PublicationsChangeDetails.viewChangeDetailsInDisplay(
			changeType = "Added",
			contentValueInPublication = "Web Content",
			publicationName = "Publication Name");

		PublicationsNavigator.gotoNavbar(navBarTitle = "Data");

		PublicationsChangeDetails.viewChangeDetailsInData(
			changeType = "Added",
			columnName = "Name",
			columnValueInPublication = "Web Content Title",
			publicationName = "Publication Name");

		Click(
			key_currentLocale = StringUtil.lowerCase("en-US"),
			locator1 = "Button#TRANSLATIONS_LOCALIZATION");

		Click(
			key_locale = "zh_CN",
			locator1 = "Translation#DROPDOWN_MENU_ITEM");

		PublicationsChangeDetails.viewChangeDetailsInData(
			changeType = "Added",
			columnName = "名称",
			columnValueInPublication = "网页内容标题",
			publicationName = "Publication Name");

		PublicationsNavigator.gotoNavbar(navBarTitle = "Display");

		PublicationsChangeDetails.viewChangeDetailsInDisplay(
			changeType = "Added",
			contentValueInPublication = "网页内容",
			publicationName = "Publication Name");
	}

	@description = "This is the use case for LPS-181668."
	@priority = 3
	test CanPublishPublicationAfterPageHasBeenDeleted {
		task ("Create and use a publication") {
			JSONPublications.addPublication(publicationName = "Publication Name");

			JSONPublications.selectPublication(publicationName = "Publication Name");
		}

		task ("Create a copy of home page") {
			PagesAdmin.openPagesAdmin(siteURLKey = "guest");

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Make a Copy",
				pageName = "Home");

			MenuItem.click(menuItem = "Page");

			SelectFrame(locator1 = "IFrame#MODAL_BODY");

			PortletEntry.inputName(name = "Home Page Copy");

			Button.clickAdd();
		}

		task ("Change to es_ES via language selector and edit fragment") {
			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Edit",
				pageName = "Home Page Copy");

			ContentPages.viewFragmentText(
				fragmentName = "heading",
				id = "element-text",
				text = "Welcome to Liferay");

			PageEditor.changeLocale(
				currentLocale = "en-US",
				locale = "es-ES");

			PageEditor.editFragmentText(
				fragmentName = "Heading",
				id = "element-text",
				text = "Bienvenido a Liferay Edit");

			PageEditor.publish();
		}

		task ("Delete copied page and try to publish the publication") {
			PagesAdmin.openPagesAdmin(siteURLKey = "guest");

			PagesAdmin.deletePage(pageName = "Home");

			Publications.publishPublication(
				gotoPublicationsAdmin = "true",
				publicationName = "Publication Name");
		}
	}

	@description = "Login after resetting password when last in Publication."
	@priority = 4
	test CanResetPasswordWhenLastInPublication {
		property custom.properties = "jsonws.web.service.paths.excludes=";

		JSONUser.addUser(
			userEmailAddress = "userea@liferay.com",
			userFirstName = "userfn",
			userLastName = "userln",
			userScreenName = "usersn");

		JSONUser.setFirstPassword(
			agreeToTermsAndAnswerReminderQuery = "true",
			requireReset = "false",
			userEmailAddress = "userea@liferay.com");

		JSONPublications.addPublication(publicationName = "Publication Name");

		PublicationsNavigator.openPublicationsAdmin();

		Publications.inviteUsers(
			gotoReviewChanges = "true",
			publicationName = "Publication Name",
			publicationRole = "Editor",
			userInvite = "userea@liferay.com",
			userMissingPublicationsRole = "true");

		var siteName = TestCase.getSiteName(siteName = ${siteName});

		ApplicationsMenu.gotoPortlet(
			category = "Users",
			panel = "Control Panel",
			portlet = "Users and Organizations");

		User.impersonateCP(
			siteName = ${siteName},
			userScreenName = "usersn");

		Publications.selectPublication(publicationName = "Publication Name");

		User.logoutAndLoginPG(
			userLoginEmailAddress = "userea@liferay.com",
			userLoginFullName = "userfn userln");

		AssertTextEquals(
			locator1 = "Publications#PUBLICATIONS_INDICATOR_BUTTON",
			value1 = "Publication Name");
	}

	@description = "This is use case for LPS-170779. File upload causes publication to become unusable"
	@ignore = "true"
	@priority = 4
	test CanReviewChangesWithManyDocuments {
		property test.assert.warning.exceptions = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		ApplicationsMenu.gotoPortlet(
			category = "System",
			panel = "Control Panel",
			portlet = "Server Administration");

		var script = TestCase.getFileContent(fileName = "AddManyDocuments.groovy");

		ServerAdministration.executeScript(
			language = "Groovy",
			script = ${script});

		JSONPublications.addPublication(publicationName = "Publication Name");

		JSONPublications.selectPublication(publicationName = "Publication Name");

		DMNavigator.openDocumentsAndMediaAdmin(siteURLKey = "Guest");

		DMDocument.addCP(
			dmDocumentDescription = "Document Description",
			dmDocumentFile = "Document_1.jpg",
			dmDocumentTitle = "DM Document Title");

		PublicationsNavigator.gotoReviewChanges();

		PublicationsChanges.viewChanges(
			changeCategory = "Document",
			changeSite = "Guest",
			changeTitle = "DM Document Title",
			changeType = "Added",
			changeUser = "Test Test");
	}

	@description = "This is a use case for LPS-161618 - As a publication user, I would like to track changes to addresses"
	@priority = 3
	test CanTrackChangesToAddresses {
		task ("Add an Organization and Create a Publication") {
			JSONOrganization.addOrganization(organizationName = "Organization Name");

			JSONPublications.addPublication(publicationName = "Test Publication");

			JSONPublications.selectPublication(publicationName = "Test Publication");
		}

		task ("Add address for the organization") {
			Organization.openOrganizationsAdmin();

			Organization.gotoEdit(orgName = "Organization Name");

			Navigator.gotoNavTab(navTab = "Contact");

			Organization.addContactInformation(
				addressType = "Billing",
				city = "Diamond Bar",
				contactType = "add-address-link",
				country = "United States",
				postalCode = 91765,
				region = "California",
				street1 = "1400 Montefino Ave");
		}

		task ("Review changes and publish the publication") {
			PublicationsNavigator.gotoReviewChanges(
				gotoPublicationsAdmin = "true",
				publicationName = "Test Publication");

			PublicationsChanges.viewChanges(
				changeCategory = "Address",
				changeSite = "Global",
				changeTitle = "Address",
				changeType = "Added",
				changeUser = "Test Test");

			Publications.publishPublication(publicationName = "Test Publication");
		}

		task ("Revert publication and publish it again") {
			PublicationsNavigator.openPublicationsHistory();

			Publications.revertPublication(
				publicationName = "Test Publication",
				publishNow = "true");

			PublicationsNavigator.gotoReviewChanges(
				gotoPublicationsAdmin = "true",
				publicationName = "Revert \"Test Publication\"");

			PublicationsChanges.viewChanges(
				changeCategory = "Address",
				changeSite = "Global",
				changeTitle = "Address",
				changeType = "Deleted",
				changeUser = "Test Test");

			Publications.publishPublication(publicationName = "Revert \"Test Publication\"");
		}

		task ("Assert there is no address in the Organization") {
			Organization.openOrganizationsAdmin();

			Organization.gotoEdit(orgName = "Organization Name");

			Navigator.gotoNavTab(navTab = "Contact");

			AssertElementPresent(locator1 = "//*[contains(text(), 'This organization does not have any addresses.')]");
		}
	}

	@description = "This is a use case for LPS-161618 - As a publication user, I would like to track changes to email addresses"
	@priority = 3
	test CanTrackChangesToEmailAddresses {
		task ("Add an Organization and Create a Publication") {
			JSONOrganization.addOrganization(organizationName = "Organization Name");

			JSONPublications.addPublication(publicationName = "Test Publication");

			JSONPublications.selectPublication(publicationName = "Test Publication");
		}

		task ("Add email address for the organization") {
			Organization.openOrganizationsAdmin();

			Organization.gotoEdit(orgName = "Organization Name");

			Navigator.gotoNavTab(navTab = "Contact");

			Navigator.gotoNavNested(navNested = "Contact Information");

			Organization.addContactInformation(
				address = "organization@liferay.com",
				contactType = "add-email-address-link");
		}

		task ("Review changes and publish the publication") {
			PublicationsNavigator.gotoReviewChanges(
				gotoPublicationsAdmin = "true",
				publicationName = "Test Publication");

			PublicationsChanges.viewChanges(
				changeCategory = "Email Address",
				changeSite = "Global",
				changeTitle = "organization@liferay.com",
				changeType = "Added",
				changeUser = "Test Test");

			Publications.publishPublication(publicationName = "Test Publication");
		}

		task ("Revert publication and publish it again") {
			PublicationsNavigator.openPublicationsHistory();

			Publications.revertPublication(
				publicationName = "Test Publication",
				publishNow = "true");

			PublicationsNavigator.gotoReviewChanges(
				gotoPublicationsAdmin = "true",
				publicationName = "Revert \"Test Publication\"");

			PublicationsChanges.viewChanges(
				changeCategory = "Email Address",
				changeSite = "Global",
				changeTitle = "organization@liferay.com",
				changeType = "Deleted",
				changeUser = "Test Test");

			Publications.publishPublication(publicationName = "Revert \"Test Publication\"");
		}

		task ("Assert there is no email address in the Organization") {
			Organization.openOrganizationsAdmin();

			Organization.gotoEdit(orgName = "Organization Name");

			Navigator.gotoNavTab(navTab = "Contact");

			Navigator.gotoNavNested(navNested = "Contact Information");

			AssertElementPresent(locator1 = "//*[contains(text(), 'This organization does not have any additional email addresses.')]");
		}
	}

	@description = "This is a use case for LPS-161618 - As a publication user, I would like to track changes to phone numbers"
	@priority = 3
	test CanTrackChangesToPhoneNumbers {
		task ("Add an Organization and Create a Publication") {
			JSONOrganization.addOrganization(organizationName = "Organization Name");

			JSONPublications.addPublication(publicationName = "Test Publication");

			JSONPublications.selectPublication(publicationName = "Test Publication");
		}

		task ("Add phone number for the organization") {
			Organization.openOrganizationsAdmin();

			Organization.gotoEdit(orgName = "Organization Name");

			Navigator.gotoNavTab(navTab = "Contact");

			Navigator.gotoNavNested(navNested = "Contact Information");

			Organization.addContactInformation(
				contactType = "add-phone-number-link",
				number = "1-877-543-3729");
		}

		task ("Review changes and publish the publication") {
			PublicationsNavigator.gotoReviewChanges(
				gotoPublicationsAdmin = "true",
				publicationName = "Test Publication");

			PublicationsChanges.viewChanges(
				changeCategory = "Phone",
				changeSite = "Global",
				changeTitle = "1-877-543-3729",
				changeType = "Added",
				changeUser = "Test Test");

			Publications.publishPublication(publicationName = "Test Publication");
		}

		task ("Revert publication and publish it again") {
			PublicationsNavigator.openPublicationsHistory();

			Publications.revertPublication(
				publicationName = "Test Publication",
				publishNow = "true");

			PublicationsNavigator.gotoReviewChanges(
				gotoPublicationsAdmin = "true",
				publicationName = "Revert \"Test Publication\"");

			PublicationsChanges.viewChanges(
				changeCategory = "Phone",
				changeSite = "Global",
				changeTitle = "1-877-543-3729",
				changeType = "Deleted",
				changeUser = "Test Test");

			Publications.publishPublication(publicationName = "Revert \"Test Publication\"");
		}

		task ("Assert there is no phone number in the Organization") {
			Organization.openOrganizationsAdmin();

			Organization.gotoEdit(orgName = "Organization Name");

			Navigator.gotoNavTab(navTab = "Contact");

			Navigator.gotoNavNested(navNested = "Contact Information");

			AssertElementPresent(locator1 = "//*[contains(text(), 'This organization does not have any phone numbers.')]");
		}
	}

	@description = "This is use case for LPS-157264.Changing permissions on a publication shouldn't go into the publication"
	@priority = 3
	test ChangePermissionsOnAPublicationShouldGoIntoProduction {
		JSONPublications.addPublication(publicationName = "Publication Name");

		JSONPublications.selectPublication(publicationName = "Publication Name");

		PublicationsNavigator.openPublicationsAdmin();

		PublicationsNavigator.gotoPublicationEllipsisItem(
			menuItem = "Permissions",
			publicationName = "Publication Name");

		IFrame.selectPermissionsFrame();

		Check.checkNotVisible(
			key_roleTitle = "publications-user",
			locator1 = "Permissions#CONFIGURATION_PERMISSIONS_VIEW_CHECKBOX");

		PortletEntry.save();

		IFrame.closeFrame();

		Publications.workOnProduction();

		PublicationsNavigator.gotoPublicationEllipsisItem(
			menuItem = "Permissions",
			publicationName = "Publication Name");

		IFrame.selectPermissionsFrame();

		AssertChecked.assertCheckedNotVisible(
			key_roleTitle = "publications-user",
			locator1 = "Permissions#CONFIGURATION_PERMISSIONS_VIEW_CHECKBOX");
	}

	@description = "This is a use case for LPS-186677 - As a publication user, I would like to configure the context view to display production entities."
	@priority = 4
	test ConfigureContextViewToDisplayProductionEntities {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Create a Publication and make a change to the Home Page") {
			JSONPublications.addPublication(publicationName = "Publication Name");

			JSONPublications.selectPublication(publicationName = "Publication Name");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Home Page",
				siteName = "Guest");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button",
				targetFragmentName = "Image");

			PageEditor.publish();
		}

		task ("Go to review changes and view change to Home Page") {
			PublicationsNavigator.gotoReviewChanges(
				gotoPublicationsAdmin = "true",
				publicationName = "Publication Name");

			PublicationsChanges.viewChanges(
				changeCategory = "Page",
				changeSite = "Guest",
				changeTitle = "Home",
				changeType = "Modified",
				changeUser = "Test Test");
		}

		task ("View Parents is available to view") {
			PublicationsNavigator.gotoViewChangeDetails(
				changeCategory = "Page",
				changeTitle = "Home");

			AssertElementPresent(
				key_navBarTitle = "Parents",
				locator1 = "Publications#MANAGE_PUBLICATIONS_NAVBAR_TITLE");
		}

		task ("Go to Publications System Settings and uncheck the Context View checkbox") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "System Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Publications",
				configurationName = "Publications View Changes",
				configurationScope = "Virtual Instance Scope");

			FormFields.disableCheckbox(fieldName = "Context View Include Production");

			SystemSettings.saveConfiguration();
		}

		task ("Assert that the Show All Items toggle shows up and Parents not") {
			PublicationsNavigator.gotoReviewChanges(
				gotoPublicationsAdmin = "true",
				publicationName = "Publication Name");

			PublicationsNavigator.gotoViewChangeDetails(
				changeCategory = "Page",
				changeTitle = "Home");

			AssertElementPresent(
				key_toggleSwitchLabel = "Show All Items",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			AssertElementNotPresent(
				key_navBarTitle = "Parents",
				locator1 = "Publications#MANAGE_PUBLICATIONS_NAVBAR_TITLE");
		}
	}

	@description = "This is a use case for LPS-179997 - Content Page Editor Control Panel Preferences is not created in Production."
	@priority = 2
	test ContentPageEditorControlPanelPreferencesCannotBeCreatedInProduction {
		JSONPublications.addPublication(publicationName = "Publication Name");

		JSONPublications.selectPublication(publicationName = "Publication Name");

		ContentPagesNavigator.openEditContentPage(
			pageName = "Home",
			siteName = "Guest");

		GoBack();

		PublicationsNavigator.gotoReviewChanges(
			gotoPublicationsAdmin = "true",
			publicationName = "Publication Name");

		AssertElementPresent(locator1 = "PublicationsChanges#MESSAGE_NO_CHANGES");
	}

	@priority = 4
	test DiscardSubsetsofChangesInPublication {
		JSONPublications.addPublication(publicationName = "Publication Name");

		JSONPublications.selectPublication(publicationName = "Publication Name");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Guest",
			title = "WC WebContent Title");

		WebContentStructures.openWebContentStructuresAdmin(siteURLKey = "guest");

		WebContentStructures.addCP(
			structureDescription = "WC Structure Description",
			structureName = "WC Structure Name");

		DataEngine.addField(
			fieldFieldLabel = "Text",
			fieldName = "Text");

		WebContentStructures.saveCP(structureName = "WC Structure Name");

		WebContentTemplates.openWebContentTemplatesAdmin(siteURLKey = "guest");

		WebContentTemplates.addCP(
			structureName = "WC Structure Name",
			templateDescription = "WC Template Description",
			templateFieldNames = "Text",
			templateName = "WC Template Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

		WebContent.addWithStructureCP(
			structureName = "WC Structure Name",
			templateName = "WC Template Name",
			webContentText = "WC WebContent Text",
			webContentTitle = "WC WebContent Title 1");

		PortletEntry.publish();

		PublicationsNavigator.gotoReviewChanges();

		PublicationsChanges.discardChanges(
			changeCategory = "Dynamic Data Mapping Structure",
			changeTitle = "WC Structure Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		WebContent.viewNotPresentCP(webContentTitle = "WC WebContent Title 2 Edit");

		WebContent.viewTitle(webContentTitle = "WC WebContent Title");

		NavItem.gotoStructures();

		AssertElementNotPresent(
			key_ddlDataDefinitionName = "WC Structure Name",
			locator1 = "DDMSelectStructure#DDM_STRUCTURE_TABLE_NAME");

		NavItem.gotoTemplates();

		AssertElementNotPresent(
			key_tableEntry = "WC Template Name",
			locator1 = "LexiconTable#TABLE_ENTRY");

		Publications.publishPublication(
			gotoPublicationsAdmin = "true",
			publicationName = "Publication Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		WebContent.viewNotPresentCP(webContentTitle = "WC WebContent Title 2 Edit");

		WebContent.viewTitle(webContentTitle = "WC WebContent Title");

		NavItem.gotoStructures();

		AssertElementNotPresent(
			key_ddlDataDefinitionName = "WC Structure Name",
			locator1 = "DDMSelectStructure#DDM_STRUCTURE_TABLE_NAME");

		NavItem.gotoTemplates();

		AssertElementNotPresent(
			key_tableEntry = "WC Template Name",
			locator1 = "LexiconTable#TABLE_ENTRY");
	}

	@priority = 4
	test IsBrowserHistoryPreserved {
		property test.assert.warning.exceptions = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		JSONPublications.addPublication(publicationName = "Publication Name");

		JSONPublications.selectPublication(publicationName = "Publication Name");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Guest",
			title = "WC WebContent Title");

		Publications.publishPublication(
			gotoPublicationsAdmin = "true",
			publicationName = "Publication Name");

		Masterclass.goBackUsingBrowserHistory();

		AssertTextPresent(
			key_publicationName = "Production",
			locator1 = "Publications#PUBLICATIONS_INDICATOR_TITLE",
			value1 = "Production");

		AssertElementNotPresent(
			key_changeTitle = "Conflicting Changes",
			locator1 = "PublicationsChanges#CHANGE_TITLE");

		Masterclass.goBackUsingBrowserHistory();

		LexiconEntry.changeDisplayStyle(displayStyle = "list");

		AssertTextEquals(
			key_publicationName = "Publication Name",
			locator1 = "Publications#LIST_PUBLISHED_STATUS",
			value1 = "Published");
	}

	@priority = 4
	test IsLocalizedInPublicationsAdmin {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		User.openUsersAdmin();

		User.editDisplaySettingsCP(
			languageName = "español (España)",
			userScreenName = "test");

		JSONPublications.addPublication(publicationName = "Publication Name");

		PublicationsNavigator.openPublicationsAdmin();

		AssertTextEquals.assertPartialText(
			locator1 = "Publications#MANAGE_PUBLICATIONS_PAGE_TITLE",
			value1 = "Listas de cambios");

		AssertTextEquals.assertPartialText(
			key_navItem = "Continua",
			locator1 = "NavBar#ACTIVE_NAV_ITEM_LINK",
			value1 = "Continua");

		AssertTextEquals.assertPartialText(
			key_tableHeader = "Publicación",
			locator1 = "LexiconTable#TABLE_HEADER",
			value1 = "Publicación");

		AssertTextEquals.assertPartialText(
			key_columnName = "status",
			key_tableEntry = "En progreso",
			locator1 = "LexiconTable#TABLE_ENTRY_INFO",
			value1 = "En progreso");
	}

	@description = "This is a use case for LPS-153949. Users should always be able to modify their account regardless of whether they are in a publication."
	@priority = 4
	test MyAccountActionsAreForcedToProduction {
		JSONPublications.addPublication(publicationName = "Publication Name");

		JSONPublications.selectPublication(publicationName = "Publication Name");

		Navigator.gotoAccountSettings();

		User.editUserInformation(userScreenNameEdit = "testscreen");

		User.viewUserInformation(
			userEmailAddress = "test@liferay.com",
			userFirstName = "Test",
			userLastName = "Test",
			userScreenName = "testscreen");

		Publications.workOnProduction();

		Navigator.gotoAccountSettings();

		User.viewUserInformation(
			userEmailAddress = "test@liferay.com",
			userFirstName = "Test",
			userLastName = "Test",
			userScreenName = "testscreen");
	}

	@description = "This is a use case for LPS-175323 - FragmentEntryLink table definition references defined incorrectly."
	@priority = 3
	test NoChangesCanBeFoundAfterDiscardingHomePageChange {
		task ("Create Publication and modify Home Page") {
			JSONPublications.addPublication(publicationName = "Test Publication");

			JSONPublications.selectPublication(publicationName = "Test Publication");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Home",
				siteName = "Guest");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button",
				targetFragmentName = "Image");

			PageEditor.publish();
		}

		task ("Discard change and assert no changes were found") {
			PublicationsNavigator.gotoReviewChanges();

			PublicationsChanges.discardChanges(
				changeCategory = "Page",
				changeTitle = "Home");

			PublicationsNavigator.gotoReviewChanges(
				gotoPublicationsAdmin = "true",
				publicationName = "Test Publication");

			AssertElementPresent(locator1 = "PublicationsChanges#MESSAGE_NO_CHANGES");
		}
	}

	@description = "This is a use case for LPS-191376 - As a Publication Reviewer I do not want to see information related to portlet preferences on the Review Changes screen."
	@priority = 3
	test PortletPreferenceChangesCannotAppearWhenChangedOnContentPage {
		task ("Create two Web Contents") {
			for (var order : list "1,2") {
				JSONWebcontent.addWebContent(
					content = "WC${order} content",
					groupName = "Guest",
					title = "WC${order}");
			}
		}

		task ("Create a Content Page") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Test Content Page",
				type = "content");

			JSONLayout.publishLayout(
				groupName = "Guest",
				layoutName = "Test Content Page");
		}

		task ("Add Web Content widget to content page and configure it to display WC1") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page",
				siteName = "Guest");

			PageEditor.addWidget(
				collectionName = "Content Management",
				portletName = "Web Content Display");

			WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC1");

			IFrame.closeFrame();

			PageEditor.publish();
		}

		task ("Create a Publication, replace to display WC2") {
			JSONPublications.addPublication(publicationName = "Publication Name");

			JSONPublications.selectPublication(publicationName = "Publication Name");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Test Content Page",
				siteName = "Guest");

			WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC2");

			IFrame.closeFrame();

			PageEditor.publish();
		}

		task ("Go to Review page and assert portlet preference change aren't displayed") {
			PublicationsNavigator.gotoReviewChanges(
				gotoPublicationsAdmin = "true",
				publicationName = "Publication Name");

			PublicationsChanges.viewChangesResultNotPresent(
				changeCategory = "Portlet Preference Value",
				changeTitle = "Preferences for Web Content Display on Test Content Page");
		}

		task ("Turn on Show All Items and assert assert portlet preference change are displayed") {
			Check.checkToggleSwitch(locator1 = "PublicationsChanges#SHOW_ALL_ITEMS_TOGGLE_SWITCH");

			PublicationsChanges.viewChanges(
				changeCategory = "Portlet Preference Value",
				changeSite = "Guest",
				changeTitle = "Preferences for Web Content Display on Test Content Page",
				changeType = "Modified",
				changeUser = "Test Test");
		}
	}

	@description = "This is a use case for LPS-191376 - As a Publication Reviewer I do not want to see information related to portlet preferences on the Review Changes screen."
	@priority = 3
	test PortletPreferenceChangesCannotAppearWhenChangedOnWidgetPage {
		task ("Create two Web Contents") {
			for (var order : list "1,2") {
				JSONWebcontent.addWebContent(
					content = "WC${order} content",
					groupName = "Guest",
					title = "WC${order}");
			}
		}

		task ("Create a Widget Page, add Web Content Display and configure it to display WC1") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Test Widget Page");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Guest",
				layoutName = "Test Widget Page",
				widgetName = "Web Content Display");

			Navigator.openSitePage(
				pageName = "Test Widget Page",
				siteName = "Guest");

			WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC1");

			IFrame.closeFrame();
		}

		task ("Create a Publication, replace to display WC2") {
			JSONPublications.addPublication(publicationName = "Publication Name");

			JSONPublications.selectPublication(publicationName = "Publication Name");

			Navigator.openSitePage(
				pageName = "Test Widget Page",
				siteName = "Guest");

			WebContentDisplayPortlet.selectWebContent(webContentTitle = "WC2");

			IFrame.closeFrame();
		}

		task ("Go to Review page and assert portlet preference change aren't displayed") {
			PublicationsNavigator.gotoReviewChanges(
				gotoPublicationsAdmin = "true",
				publicationName = "Publication Name");

			PublicationsChanges.viewChangesResultNotPresent(
				changeCategory = "Portlet Preference Value",
				changeTitle = "Preferences for Web Content Display on Test Widget Page");
		}

		task ("Turn on Show All Items and assert assert portlet preference change are displayed") {
			Check.checkToggleSwitch(locator1 = "PublicationsChanges#SHOW_ALL_ITEMS_TOGGLE_SWITCH");

			PublicationsChanges.viewChanges(
				changeCategory = "Portlet Preference Value",
				changeSite = "Guest",
				changeTitle = "Preferences for Web Content Display on Test Widget Page",
				changeType = "Modified",
				changeUser = "Test Test");
		}
	}

	@description = "Assert publications changes can search and sort"
	@priority = 4
	test PublicationsChangesCanSearchAndSort {
		JSONPublications.addPublication(publicationName = "Publication Name");

		JSONPublications.selectPublication(publicationName = "Publication Name");

		for (var count : list "1,2,3") {
			JSONWebcontent.addWebContent(
				content = "WC Content ${count}",
				groupName = "Guest",
				title = "WC Title ${count}");
		}

		PublicationsNavigator.gotoReviewChanges(
			gotoPublicationsAdmin = "true",
			publicationName = "Publication Name");

		Search.searchCP(searchTerm = 1);

		PublicationsChanges.viewChangesResultsOrder(
			changeCategory = "Web Content Article",
			changesList = "WC Title 1");

		PublicationsChanges.viewChangesResultNotPresent(
			changeCategory = "Web Content Article",
			changeOrder = 2,
			changeTitle = "WC Title 2");

		PublicationsChanges.viewChangesResultNotPresent(
			changeCategory = "Web Content Article",
			changeOrder = 3,
			changeTitle = "WC Title 3");

		Search.searchCP(searchTerm = "WC");

		PublicationsChanges.viewChangesResultsOrder(
			changeCategory = "Web Content Article",
			changesList = "WC Title 1,WC Title 2,WC Title 3");

		PublicationsChanges.sortChanges(
			sort = "descending",
			sortName = "Title");

		PublicationsChanges.viewChangesResultsOrder(
			changeCategory = "Web Content Article",
			changesList = "WC Title 1,WC Title 2,WC Title 3");

		PublicationsChanges.sortChanges(
			sort = "ascending",
			sortName = "Title");

		PublicationsChanges.viewChangesResultsOrder(
			changeCategory = "Web Content Article",
			changesList = "WC Title 3,WC Title 2,WC Title 1");
	}

	@priority = 5
	test PublishParallelPublications {
		property environment.acceptance = "true";
		property operating.system.types = "alpine,amazonlinux,centos,debian,fedora,orcllinux,osx,redhat,rockylinux,solaris,suse,ubuntu,windows";
		property portal.acceptance = "true";

		JSONWebcontent.addFolder(
			folderName = "WC Folder Name",
			groupName = "Guest");

		Publications.createNewPublication(
			gotoPublicationsAdmin = "true",
			publicationName = "Publication Name");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		WebContentFolder.gotoCP(
			folderName = "WC Folder Name",
			webContentTitle = "WC Folder Name");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent 1 Content",
			webContentTitle = "WC WebContent 1 Title");

		PortletEntry.publish();

		Publications.createNewPublication(publicationName = "Publication 2 Name");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		WebContentFolder.gotoCP(
			folderName = "WC Folder Name",
			webContentTitle = "WC Folder Name");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "WC WebContent 2 Content",
			webContentTitle = "WC WebContent 2 Title");

		PortletEntry.publish();

		Publications.publishPublication(
			gotoPublicationsAdmin = "true",
			publicationName = "Publication 2 Name");

		Publications.selectPublication(publicationName = "Publication Name");

		Publications.publishPublication(
			gotoPublicationsAdmin = "true",
			publicationName = "Publication Name");

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Web Content");

		WebContentFolder.gotoCP(
			folderName = "WC Folder Name",
			webContentTitle = "WC Folder Name");

		AssertElementPresent(
			key_webContentTitle = "WC WebContent 1 Title",
			locator1 = "WC#ENTRY_LIST_TITLE");

		AssertElementPresent(
			key_webContentTitle = "WC WebContent 2 Title",
			locator1 = "WC#ENTRY_LIST_TITLE");
	}

	@priority = 5
	test RescheduleAndCancelScheduledPublication {
		property portal.acceptance = "true";

		Publications.createNewPublication(
			gotoPublicationsAdmin = "true",
			publicationName = "Publication Name");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Guest",
			title = "WC WebContent Title");

		Publications.schedulePublication(
			gotoPublicationsAdmin = "true",
			publicationName = "Publication Name");

		Publications.schedulePublication(
			publicationName = "Publication Name",
			reschedule = "true");

		Publications.unschedulePublication(publicationName = "Publication Name");

		AssertTextEquals.assertPartialText(
			locator1 = "Message#EMPTY_INFO",
			value1 = "No publication has been scheduled yet.");
	}

	@priority = 5
	test RevertPublicationAndPublishNow {
		property portal.acceptance = "true";

		JSONPublications.addPublication(publicationName = "Publication Name");

		JSONPublications.selectPublication(publicationName = "Publication Name");

		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Guest",
			title = "WC WebContent Title");

		Publications.publishPublication(
			gotoPublicationsAdmin = "true",
			publicationName = "Publication Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		AssertElementPresent(
			key_webContentTitle = "WC WebContent Title",
			locator1 = "WC#ENTRY_LIST_TITLE");

		PublicationsNavigator.openPublicationsHistory();

		Publications.revertPublication(
			publicationName = "Publication Name",
			publishNow = "true");

		Publications.publishPublication(
			gotoPublicationsAdmin = "true",
			publicationName = "Revert \"Publication Name\"");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		AssertTextEquals.assertPartialText(
			locator1 = "Message#EMPTY_INFO",
			value1 = "No web content was found.");
	}

	@description = "This is use case for LPS-176351. Can review changes when publication is published"
	@priority = 3
	test ReviewChangesForPublishedPage {
		task ("Add new Publication and use it") {
			JSONPublications.addPublication(publicationName = "Publication Name");

			JSONPublications.selectPublication(publicationName = "Publication Name");
		}

		task ("Make a change to the Home Page by adding a button fragment in it") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Home Page",
				siteName = "Guest");

			PageEditor.addFragment(
				collectionName = "Basic Components",
				fragmentName = "Button",
				targetFragmentName = "Image");

			PageEditor.publish();
		}

		task ("Publish Publication") {
			Publications.publishPublication(
				gotoPublicationsAdmin = "true",
				publicationName = "Publication Name");
		}

		task ("View Publication history and confirm that the changes were made") {
			PublicationsNavigator.openPublicationsHistory();

			Click(
				key_publicationName = "Publication Name",
				locator1 = "Publications#PUBLISHED_PUBLICATION_NAME");

			PublicationsChanges.viewChanges(
				changeCategory = "Page",
				changeSite = "Guest",
				changeTitle = "Home",
				changeType = "Modified",
				changeUser = "Test Test");

			PublicationsChanges.viewChanges(
				changeCategory = "Fragment Entry Link",
				changeSite = "Guest",
				changeTitle = "Button for Home.",
				changeType = "Added",
				changeUser = "Test Test");
		}

		task ("Assert that the fragment button is present at the home page") {
			Navigator.gotoPage(pageName = "Home");

			AssertTextEquals(
				fragmentName = "button",
				id = "link",
				index = 1,
				locator1 = "Fragment#CONTRIBUTED_FRAGMENT_TEXT",
				value1 = "Go Somewhere");
		}
	}

	@description = "Assert that we can schedule a asset inside a publication and publish it."
	@priority = 3
	test ScheduledAssetsCanBePublished {
		JSONPublications.addPublication(publicationName = "Publication Name");

		JSONPublications.selectPublication(publicationName = "Publication Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "Guest");

		WebContentNavigator.gotoAddCP();

		WebContent.addCP(
			webContentContent = "Web Content Content",
			webContentTitle = "Web Content Title");

		WebContent.editDisplayDate(
			displayDate = "01/01/2050",
			displayTime = "12:30 AM");

		PortletEntry.publish();

		Publications.publishPublication(
			gotoPublicationsAdmin = "true",
			publicationName = "Publication Name");
	}

	@priority = 5
	test SchedulePublication {
		JSONPublications.addPublication(publicationName = "Publication Name 1");

		JSONPublications.selectPublication(publicationName = "Publication Name 1");

		JSONWebcontent.addWebContent(
			content = "WC WebContent 1 Content",
			groupName = "Guest",
			title = "WC WebContent 1 Title");

		PublicationsNavigator.openPublicationsAdmin();

		Publications.schedulePublication(publicationName = "Publication Name 1");

		Publications.assertScheduledPublicationPublished(publicationName = "Publication Name 1");

		JSONPublications.addPublication(publicationName = "Publication Name 2");

		JSONPublications.selectPublication(publicationName = "Publication Name 2");

		JSONWebcontent.addWebContent(
			content = "WC WebContent 2 Content",
			groupName = "Guest",
			title = "WC WebContent 2 Title");

		Publications.schedulePublication(
			gotoPublicationsAdmin = "true",
			publicationName = "Publication Name 2");

		Publications.assertScheduledPublicationPublished(publicationName = "Publication Name 2");

		JSONPublications.addPublication(publicationName = "Publication Name 3");

		JSONPublications.selectPublication(publicationName = "Publication Name 3");

		JSONWebcontent.addWebContent(
			content = "WC WebContent 3 Content",
			groupName = "Guest",
			title = "WC WebContent 3 Title");

		Publications.schedulePublication(
			gotoPublicationsAdmin = "true",
			publicationName = "Publication Name 3");

		Publications.assertScheduledPublicationPublished(publicationName = "Publication Name 3");
	}

	@priority = 5
	test SearchPublishedPublications {
		for (var publicationName : list "Apple,Banana,Cherry") {
			JSONPublications.addPublication(publicationName = ${publicationName});
		}

		PublicationsNavigator.openPublicationsAdmin();

		for (var publicationName : list "Apple,Banana,Cherry") {
			Publications.search(publicationName = ${publicationName});
		}

		for (var publicationName : list "Apple,Banana,Cherry") {
			JSONPublications.selectPublication(publicationName = ${publicationName});

			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = ${publicationName});

			Publications.publishPublication(
				gotoPublicationsAdmin = "true",
				publicationName = ${publicationName});
		}

		Navigator.gotoNavTab(navTab = "History");

		for (var publicationName : list "Apple,Banana,Cherry") {
			Publications.search(publicationName = ${publicationName});
		}
	}

	@description = "This is the use case for LPS-158789."
	@priority = 4
	test UserWithoutAccessCannotChangePublicationViaURL {
		HeadlessSite.addSite(siteName = "Site Name");

		JSONLayout.addPublicLayout(
			groupName = "Site Name",
			layoutName = "Test Page Name");

		JSONPublications.addPublication(publicationName = "Publication Name");

		JSONPublications.selectPublication(publicationName = "Publication Name");

		JSONWebcontent.addWebContent(
			content = "Web Content Content",
			groupName = "Site Name",
			title = "Web Content Title");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Site Name",
			layoutName = "Test Page Name",
			widgetName = "Web Content Display");

		Navigator.openSitePage(
			pageName = "Test Page Name",
			siteName = "Site Name");

		WebContentDisplayPortlet.selectWebContent(webContentTitle = "Web Content Title");

		Navigator.openSitePage(
			pageName = "Test Page Name",
			siteName = "Site Name");

		Publications.workOnProduction();

		var ctCollectionId = JSONPublicationsAPI._getCTCollectionId(publicationName = "Publication Name");
		var portalURL = PropsUtil.get("portal.url");

		User.logoutPG();

		Open.openRedirect(locator1 = "${portalURL}/web/site-name/test-page-name?previewCTCollectionId=${ctCollectionId}");

		Alert.viewErrorMessage(errorMessage = "Your request failed to complete.");
	}

	@description = "Assert that items are being properly indexed if they exists both in Production and in a Publication"
	@priority = 3
	test ViewItemsAreProperlyIndexedInProductionAndPublication {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Create a new tag") {
			JSONAssettag.addTag(
				groupName = "Guest",
				tagName = "tag1");
		}

		task ("Create a Web Content with a tag") {
			JSONWebcontent.addWebContent(
				assetTagNames = "tag1",
				content = "WC WebContent Content",
				groupName = "Guest",
				title = "WC WebContent Title");
		}

		task ("Add a Widget Page with Asset Publisher") {
			JSONLayout.addPublicLayout(
				groupName = "Guest",
				layoutName = "Test Page");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Guest",
				layoutName = "Test Page",
				widgetName = "Asset Publisher");
		}

		task ("Select the Web Content Article as Asset Type and assert that 'WC WebContent Title' is being returned by the Asset Publisher") {
			Navigator.gotoPage(pageName = "Test Page");

			AssetPublisherPortlet.configureAssetTypePG(
				assetSubtype = "Any",
				selectedAsset = "Web Content Article");

			Button.clickSave();

			Refresh();

			AssetPublisherPortlet.viewAssetPG(assetTitle = "WC WebContent Title");
		}

		task ("Add new Publication, edit the tag inside the publication and change back to production") {
			JSONPublications.addPublication(publicationName = "Publication Name");

			JSONPublications.selectPublication(publicationName = "Publication Name");

			Tag.openTagsAdmin(siteURLKey = "guest");

			Tag.editCP(
				tagMenuName = "tag1",
				tagNameEdit = "tag1Edited");

			Publications.workOnProduction();
		}

		task ("Clear database cache and excute reindex") {
			ApplicationsMenu.gotoPortlet(
				category = "System",
				panel = "Control Panel",
				portlet = "Server Administration");

			ServerAdministration.executeServerResourcesActions(actionsDescription = "Clear the database cache.");

			SearchAdministration.executeReindex();
		}

		task ("Go back to Test Page and assert that the Asset Publisher is still present") {
			Navigator.gotoPage(pageName = "Test Page");

			AssetPublisherPortlet.viewAssetPG(assetTitle = "WC WebContent Title");
		}
	}

	@description = "Assert Publications change details on Display Data Parents and Children Tabs"
	@priority = 4
	test ViewPublicationsChangeDetails {
		JSONWebcontent.addWebContent(
			content = "WC WebContent Content",
			groupName = "Guest",
			title = "WC WebContent Title");

		JSONPublications.addPublication(publicationName = "Publication Name");

		JSONPublications.selectPublication(publicationName = "Publication Name");

		WebContentNavigator.openWebContentAdmin(siteURLKey = "guest");

		WebContentNavigator.gotoEditCP(webContentTitle = "WC WebContent Title");

		WebContent.editCP(
			webContentContentEdit = "WC WebContent Content Edited",
			webContentTitle = "WC WebContent Title",
			webContentTitleEdit = "WC WebContent Title Edited");

		PublicationsNavigator.gotoReviewChanges(
			gotoPublicationsAdmin = "true",
			publicationName = "Publication Name");

		PublicationsNavigator.gotoViewChangeDetails(
			changeCategory = "Web Content Article",
			changeTitle = "WC WebContent Title Edited");

		PublicationsChangeDetails.viewChangeDetailsInDisplay(
			changeType = "Modified",
			contentValueInProduction = "WC WebContent Content",
			contentValueInPublication = "WC WebContent Content Edited",
			diffAddedValue = "Edited",
			publicationName = "Publication Name");

		PublicationsNavigator.gotoNavbar(navBarTitle = "Data");

		PublicationsChangeDetails.viewChangeDetailsInData(
			changeType = "Modified",
			columnName = "Name",
			columnValueInProduction = "WC WebContent Title",
			columnValueInPublication = "WC WebContent Title Edited",
			diffAddedValue = "Edited",
			publicationName = "Publication Name");

		PublicationsNavigator.gotoNavbar(navBarTitle = "Parents");

		PublicationsChangeDetails.viewChangeDetailsInParents(
			changeParentsCategory = "Dynamic Data Mapping Template",
			changeParentsTitle = "Basic Web Content");

		PublicationsNavigator.gotoNavbar(navBarTitle = "Children");

		PublicationsChangeDetails.viewChangeDetailsInChildren(
			changeChildrenCategory = "Web Content Translation",
			changeChildrenTitle = "WC WebContent Title Edited");
	}

	@description = "Can view Published Publications items pagination and order on History Tab."
	@priority = 4
	test ViewPublicationsHistoryItemsPaginationAndOrder {
		for (var count : list "1,2,3,4,5,6,7") {
			JSONPublications.addPublication(publicationName = "Publication Name ${count}");

			JSONPublications.selectPublication(publicationName = "Publication Name ${count}");

			JSONWebcontent.addWebContent(
				content = "WC Content ${count}",
				groupName = "Guest",
				title = "WC Title ${count}");

			Publications.publishPublication(
				gotoPublicationsAdmin = "true",
				publicationName = "Publication Name ${count}");
		}

		PublicationsNavigator.openPublicationsHistory();

		Publications.viewPublicationOrderInHistory(publicationList = "Publication Name 7,Publication Name 6,Publication Name 5,Publication Name 4,Publication Name 3,Publication Name 2,Publication Name 1");

		Pagination.viewResults(results = "Showing 1 to 7 of 7 entries.");

		Pagination.changePagination(itemsPerPage = 4);

		Pagination.viewResults(results = "Showing 1 to 4 of 7 entries.");

		Publications.viewPublicationOrderInHistory(
			paginationView = "true",
			publicationList = "Publication Name 7,Publication Name 6,Publication Name 5,Publication Name 4");

		Click(locator1 = "Pagination#NEXT_LINK");

		Pagination.viewResults(results = "Showing 5 to 7 of 7 entries.");

		Publications.viewPublicationOrderInHistory(
			paginationView = "true",
			publicationList = "Publication Name 3,Publication Name 2,Publication Name 1");
	}

	@description = "This is use case for LPS-186230. Assert Publication History uses Dataset Display"
	@priority = 4
	test ViewPublicationsHistoryTableUsingDatasetDisplay {
		property custom.properties = "feature.flag.LPS-180155=true";

		task ("Add a new Publication") {
			JSONPublications.addPublication(publicationName = "Publication Name");

			JSONPublications.selectPublication(publicationName = "Publication Name");
		}

		JSONWebcontent.addWebContent(
			content = "WC Content Title",
			groupName = "Guest",
			title = "WC Title Title");

		task ("Publish the Publication") {
			Refresh();

			Publications.publishPublication(publicationName = "Publication Name");
		}

		task ("Assert Publications History table uses dataset display") {
			PublicationsNavigator.openPublicationsHistory();

			AssertElementPresent(locator1 = "//button[contains(text(),'Publication')]");

			AssertElementPresent(locator1 = "//button[contains(text(),'Published Date')]");

			AssertElementPresent(locator1 = "//div[contains(text(),'Published By')]");

			AssertElementPresent(locator1 = "//div[contains(text(),'Status')]");
		}

		task ("Assert Revert and Review Changes under Ellipsis Item") {
			PublicationsNavigator.openPublicationsHistory();

			Click(
				key_publicationName = "Publication Name",
				locator1 = "Publications#ELLIPSIS_IN_DATASET_DIAPLAY");

			MenuItem.clickNoError(menuItem = "Revert");

			AssertTextEquals(
				locator1 = "Publications#PUBLICATION_NAME",
				value1 = "Revert \"Publication Name\"");

			PublicationsNavigator.openPublicationsHistory();

			Click(
				key_publicationName = "Publication Name",
				locator1 = "Publications#ELLIPSIS_IN_DATASET_DIAPLAY");

			MenuItem.clickNoError(menuItem = "Review Changes");

			AssertElementPresent(locator1 = "PublicationsChanges#CHANGE_HEADER");
		}

		task ("Filter and view published publication") {
			PublicationsNavigator.openPublicationsHistory();

			Publications.filterPublishedPublicationInDatasetDisplay(statusList = "Published");

			AssertTextEquals.assertPartialText(
				key_publicationName = "Publication Name",
				locator1 = "Publications#PUBLICATION_NAME_IN_DATASET_DIAPLAY",
				value1 = "Publication Name");
		}
	}

	@description = "Assert Publications table can be viewed using dataset display."
	@priority = 4
	test ViewPublicationsTableUsingDatasetDisplay {
		property custom.properties = "feature.flag.LPS-180155=true";

		task ("Add a Publication and navigate to Publications Admin") {
			JSONPublications.addPublication(publicationName = "Publication 1 Name");

			PublicationsNavigator.openPublicationsAdmin();
		}

		task ("Assert Publications table uses dataset display") {
			AssertElementPresent(locator1 = "//button[contains(text(),'Publication')]");

			AssertElementPresent(locator1 = "//div[contains(text(),'Description')]");

			AssertElementPresent(locator1 = "//button[contains(text(),'Last Modified')]");

			AssertElementPresent(locator1 = "//button[contains(text(),'Create Date')]");

			AssertElementPresent(locator1 = "//button[contains(text(),'Status')]");

			AssertElementPresent(locator1 = "//button[contains(text(),'Owner')]");
		}

		task ("Scheduled a Publication and navigate to Publications Admin") {
			JSONPublications.addPublication(publicationName = "Publication 2 Name");

			JSONPublications.selectPublication(publicationName = "Publication 2 Name");

			JSONWebcontent.addWebContent(
				content = "WC WebContent Content",
				groupName = "Guest",
				title = "WC WebContent Title");

			Refresh();

			Publications.schedulePublication(publicationName = "Publication 2 Name");

			PublicationsNavigator.openPublicationsScheduled();
		}

		task ("Assert Publications table uses dataset display") {
			AssertElementPresent(locator1 = "//button[contains(text(),'Publication')]");

			AssertElementPresent(locator1 = "//div[contains(text(),'Description')]");

			AssertElementPresent(locator1 = "//button[contains(text(),'Publishing')]");

			AssertElementPresent(locator1 = "//button[contains(text(),'Last Modified')]");

			AssertElementPresent(locator1 = "//button[contains(text(),'Create Date')]");

			AssertElementPresent(locator1 = "//button[contains(text(),'Owner')]");
		}
	}

}