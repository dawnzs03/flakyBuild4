@component-name = "portal-wcm"
definition {

	property ci.retries.disabled = "true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Web Content Administration";

	static var randomSiteName = StringUtil.randomString(8);

	static var randomSiteURLKey = StringUtil.toLowerCase(${randomSiteName});

	setUp {
		task ("Set up virtual instance") {
			TestCase.setUpPortalInstance();
		}

		task ("Sign in") {
			User.firstLoginPG();
		}

		task ("Add a site") {
			HeadlessSite.addSite(siteName = ${randomSiteName});
		}

		task ("Add a widget page") {
			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Staging Test Page");
		}
	}

	@description = "Assert Web Content created From Structure is published Via SAP"
	@priority = 4
	test AssertWebContentFromStructureNotBeDeletedOnLiveViaSAP {
		task ("Create a basic web content") {
			JSONWebcontent.addWebContent(
				content = "WC Content",
				groupName = ${randomSiteName},
				title = "WC 1");
		}

		task ("Activate Staging") {
			Staging.openStagingAdmin(siteURLKey = ${randomSiteURLKey});

			Staging.activateStagingCP(siteName = ${randomSiteName});
		}

		task ("Add a web content structure with all fields") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "${randomSiteURLKey}-staging");

			NavItem.gotoStructures();

			WebContentStructures.importStructure(
				structureName = "WC Structure Name",
				uploadFileName = "Structure_All_Fields.json");
		}

		task ("Add first web content based on new structure and template") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "${randomSiteURLKey}-staging");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				column = 1,
				dmNavTab = "User Personal Folder",
				navTab = "Web Content Images",
				row = 1,
				webContentColor = "FF0D0D",
				webContentDate = "10/10/2020",
				webContentGrid = "true",
				webContentImage = "Document_3.png",
				webContentLinkToPage = "Staging Test Page",
				webContentMultipleSelection = "Option 1",
				webContentNumeric = 9,
				webContentRichText = "This is a Rich Text field",
				webContentSelectFromList = "Option 2",
				webContentSingleSelection = "Option 3",
				webContentText = "This is a Text field",
				webContentTitle = "WC WebContent Title 1",
				webContentUpload = "Document_1.doc",
				webContentWebContent = "WC 1");

			PortletEntry.publish();

			WebContent.viewTitle(webContentTitle = "WC WebContent Title 1");
		}

		task ("Publish first web content via SAP") {
			Staging.publishViaSAP(
				confirmMessage = "Are you sure you want to publish the selected web content?",
				entry = "WC WebContent Title 1");

			WebContentNavigator.openWebContentAdmin(siteURLKey = ${randomSiteURLKey});

			WebContent.viewTitle(
				onLive = "true",
				webContentTitle = "WC WebContent Title 1");
		}

		task ("Delete first web content via SAP") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "${randomSiteURLKey}-staging");

			WebContent.deleteStagedCP(
				pageName = "Staging Test Page",
				siteName = ${randomSiteName},
				webContentTitle = "WC WebContent Title 1");
		}

		task ("Add second web content based on new structure and template") {
			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				column = 2,
				dmNavTab = "User Personal Folder",
				navTab = "Web Content Images",
				row = 2,
				webContentColor = "FF0D0D",
				webContentDate = "10/10/2020",
				webContentGrid = "true",
				webContentImage = "Document_2.png",
				webContentLinkToPage = "Staging Test Page",
				webContentMultipleSelection = "Option 1",
				webContentNumeric = 9,
				webContentRichText = "This is a Rich Text field 2",
				webContentSelectFromList = "Option 2",
				webContentSingleSelection = "Option 3",
				webContentText = "This is a Text field 2",
				webContentTitle = "WC WebContent Title 2",
				webContentUpload = "Document_3.doc",
				webContentWebContent = "WC 1");

			PortletEntry.publish();

			WebContent.viewTitle(webContentTitle = "WC WebContent Title 2");
		}

		task ("Publish first web content via SAP") {
			Staging.publishViaSAP(
				confirmMessage = "Are you sure you want to publish the selected web content?",
				entry = "WC WebContent Title 2");
		}

		task ("Verify both Web Content exist") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = ${randomSiteURLKey});

			WebContent.viewTitle(
				onLive = "true",
				webContentTitle = "WC WebContent Title 1");

			WebContent.viewTitle(
				onLive = "true",
				webContentTitle = "WC WebContent Title 2");
		}
	}

	@description = "This is a use case for LPS-121695. Assert imported DDMStructures in Global Staging are not published in Global Live."
	@priority = 4
	test ImportedDDMStructuresInGlobalStagingNotPublishedInLive {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Access Global Site") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "global");
		}

		task ("Add a web content structure") {
			NavItem.gotoStructures();

			WebContentStructures.addCP(
				structureDescription = "WC Structure Description",
				structureName = "WC Structure Name");

			DataEngine.addField(
				fieldFieldLabel = "Text",
				fieldName = "Text");

			WebContentStructures.saveCP(structureName = "WC Structure Name");
		}

		task ("Add a web content template") {
			NavItem.gotoTemplates();

			WebContentTemplates.addCP(
				structureName = "WC Structure Name",
				templateDescription = "WC Template Description",
				templateFieldNames = "Text",
				templateName = "WC Template Name");
		}

		task ("Export DDMStructures") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "global");

			LAR.exportPortlet(larFileName = "WebContent_portlet.lar");
		}

		task ("Add Portal Instance") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "liferay.com",
				portalInstanceId = "www.able.com",
				virtualHost = "www.able.com");
		}

		task ("Activate local staging in the created portal instance global site") {
			User.firstLoginPG(
				password = "test",
				userEmailAddress = "test@liferay.com",
				virtualHostsURL = "http://www.able.com:8080");

			WebContentNavigator.openWebContentAdmin(
				baseURL = "http://www.able.com:8080",
				siteURLKey = "global");

			ProductMenu.gotoPortlet(
				category = "Publishing",
				portlet = "Staging");

			Staging.activateStagingCP(siteName = "Global");
		}

		task ("Import DDMStructures") {
			WebContentNavigator.openWebContentAdmin(
				baseURL = "http://www.able.com:8080",
				siteURLKey = "global-staging");

			LAR.importPortlet(larFileName = "WebContent_portlet.lar");
		}

		task ("Assert DDMStructures has been imported in Global staging") {
			WebContentNavigator.openWebContentAdmin(
				baseURL = "http://www.able.com:8080",
				siteURLKey = "global-staging");

			NavItem.gotoStructures();

			WebContentStructures.viewCP(
				structureDescription = "WC Structure Description",
				structureName = "WC Structure Name");

			NavItem.gotoTemplates();

			LexiconEntry.changeDisplayStyle(displayStyle = "table");

			WebContentTemplates.viewTableEntryCP(
				templateDescription = "WC Template Description",
				templateName = "WC Template Name");
		}

		task ("Assert DDMStructures has not been imported in Global Live") {
			WebContentNavigator.openWebContentAdmin(
				baseURL = "http://www.able.com:8080",
				siteURLKey = "global");

			NavItem.gotoStructures();

			AssertElementNotPresent(
				key_ddlDataDefinitionName = "WC Structure Name",
				locator1 = "DDMSelectStructure#DDM_STRUCTURE_TABLE_NAME");

			NavItem.gotoTemplates();

			AssertElementNotPresent(
				key_tableEntry = "WC Template Name",
				locator1 = "LexiconTable#TABLE_ENTRY");
		}
	}

	@description = "Publish in Staging a Web Content From Structure"
	@priority = 5
	test PublishInStagingWebContentFromStructure {
		property portal.acceptance = "true";

		task ("Create a basic web content") {
			JSONWebcontent.addWebContent(
				content = "WC Content",
				groupName = ${randomSiteName},
				title = "WC 1");
		}

		task ("Activate Staging") {
			Staging.openStagingAdmin(siteURLKey = ${randomSiteURLKey});

			Staging.activateStagingCP(siteName = ${randomSiteName});
		}

		task ("Add a web content structure with all fields") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "${randomSiteURLKey}-staging");

			NavItem.gotoStructures();

			WebContentStructures.importStructure(
				structureName = "WC Structure Name",
				uploadFileName = "Structure_All_Fields.json");
		}

		task ("Add a web content based on new structure and template") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "${randomSiteURLKey}-staging");

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				column = 1,
				dmNavTab = "User Personal Folder",
				navTab = "Web Content Images",
				row = 1,
				webContentColor = "FF0D0D",
				webContentDate = "10/10/2020",
				webContentGrid = "true",
				webContentImage = "Document_3.png",
				webContentLinkToPage = "Staging Test Page",
				webContentMultipleSelection = "Option 1",
				webContentNumeric = 9,
				webContentRichText = "This is a Rich Text field",
				webContentSelectFromList = "Option 2",
				webContentSingleSelection = "Option 3",
				webContentText = "This is a Text field",
				webContentTitle = "Web Content Title",
				webContentUpload = "Document_1.doc",
				webContentWebContent = "WC 1");

			PortletEntry.publish();
		}

		task ("Publish Web Content to live") {
			Staging.publishToLiveNowViaPortletCP();
		}

		task ("View web content in live") {
			ProductMenu.gotoLiveSite(site = ${randomSiteName});

			WebContentNavigator.openWebContentAdmin(siteURLKey = ${randomSiteURLKey});

			AssertTextEquals.assertPartialText(
				key_webContentTitle = "Web Content Title",
				locator1 = "WC#ENTRY_LIST_TITLE_ON_LIVE",
				value1 = "Web Content Title");
		}
	}

	@description = "This is a use case for LPS-82757. The feedId should be different between staging and live."
	@priority = 3
	test PublishWebContentWithFeeds {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given a site designer has web content feeds") {
			Staging.openStagingAdmin(siteURLKey = ${randomSiteURLKey});

			Staging.activateStagingCP(siteName = ${randomSiteName});

			SystemSettings.openSystemSettingsAdmin();

			SystemSettings.gotoConfiguration(
				configurationCategory = "Web Content",
				configurationName = "Administration",
				configurationScope = "System Scope");

			FormFields.enableCheckbox(fieldName = "Show Feeds");

			SystemSettings.saveConfiguration();

			JSONLayout.addWidgetToPublicLayout(
				groupName = "${randomSiteName} (Staging)",
				layoutName = "Staging Test Page",
				site = "false",
				widgetName = "Asset Publisher");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "${randomSiteURLKey}-staging");

			NavItem.gotoFeeds();

			WebContentFeeds.addCP(
				feedTitle = "Web Content Feed",
				pageFriendlyURL = "/web/${randomSiteURLKey}-staging/staging-test-page",
				structureName = "Basic Web Content");

			WebContentFeeds.viewTableEntryCP(feedName = "Web Content Feed");

			Navigator.gotoStagedSitePage(
				pageName = "Staging Test Page",
				siteName = ${randomSiteName});

			Staging.gotoPublishToLive();

			Staging.publishToLive();

			WebContentNavigator.openWebContentAdmin(siteURLKey = ${randomSiteURLKey});

			NavItem.gotoFeeds();

			WebContentFeeds.viewTableEntryCP(feedName = "Web Content Feed");

			JSONLayout.addPublicLayout(
				groupName = "${randomSiteName} (Staging)",
				layoutName = "Second Page",
				site = "false");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "${randomSiteName} (Staging)",
				layoutName = "Second Page",
				site = "false",
				widgetName = "Web Content Display");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "${randomSiteURLKey}-staging");

			NavItem.gotoFeeds();

			WebContentNavigator.gotoEditFeed(feedName = "Web Content Feed");

			WaitForPageLoad();

			var stagingFeedId = selenium.getWebElementAttribute("//div[label[normalize-space()='ID']]//input[not(contains(@type,'checkbox'))]", "value");
			var webContentFeedURL = selenium.getWebElementAttribute("//a[contains(@href,'rss') and contains(.,'Preview')]", "href");

			var entryExternalURL = StringUtil.replace(${webContentFeedURL}, "http://", "");

			WebContentNavigator.openWebContentAdmin(siteURLKey = "${randomSiteURLKey}-staging");

			WebContentNavigator.gotoAddCP();

			PortletEntry.inputTitle(title = "Web Content Title");

			CKEditor.addEntryExternalURL(
				displayText = ${webContentFeedURL},
				entryExternalURL = ${entryExternalURL},
				fieldLabel = "Content");

			PortletEntry.publish();
		}

		task ("When the site designer displays web contents on Web Content Display") {
			Navigator.gotoStagedSitePage(
				pageName = "Second Page",
				siteName = ${randomSiteName});

			WebContentDisplayPortlet.selectWebContent(webContentTitle = "Web Content Title");

			Navigator.gotoStagedSitePage(
				pageName = "Staging Test Page",
				siteName = ${randomSiteName});

			Staging.gotoPublishToLive();

			Staging.publishToLive();
		}

		task ("Then the feedId on staging and on live should be different") {
			Navigator.gotoSitePage(
				pageName = "Second Page",
				siteName = ${randomSiteName});

			var webContentFeedURL = selenium.getWebElementAttribute("//div[contains(@class,'journal-content-article')]//a[contains(@href,'rss')]", "href");

			var liveFeedId = StringUtil.extractLast(${webContentFeedURL}, "/");

			TestUtils.assertNotEquals(
				actual = ${liveFeedId},
				expected = ${stagingFeedId});
		}
	}

	@description = "This is a use case for LPS-163499. Asserts a web content with an image field is displayed after publishing to live."
	@priority = 3
	test PublishWebContentWithImageField {
		task ("Given a user displayes a web content with image on a draft content page") {
			JSONDocument.addFileWithUploadedFile(
				dmDocumentTitle = "Document Title",
				groupName = ${randomSiteName},
				mimeType = "image/jpeg",
				sourceFileName = "Document_2.jpeg");

			WebContentNavigator.openWebContentAdmin(siteURLKey = ${randomSiteURLKey});

			NavItem.gotoStructures();

			WebContentStructures.addCP(structureName = "My Image");

			DataEngine.addField(
				fieldFieldLabel = "Image",
				fieldName = "Image",
				fieldReference = "myimage");

			WebContentStructures.saveCP();

			WebContentNavigator.gotoManageTemplatesViaStructures(structureName = "My Image");

			WebContentTemplates.addCP(
				templateName = "My Image",
				templateScript = "<#if (myimage.getData())?? && myimage.getData() != ''><img alt='${myimage.getAttribute('alt')}' data-fileentryid='${myimage.getAttribute('fileEntryId')}' src='${myimage.getAttribute('url')}' /></#if>");

			NavItem.gotoWebContent();

			WebContentNavigator.gotoAddWithStructureCP(structureName = "My Image");

			WebContent.addWithStructureCP(
				imageFileName = "Document Title",
				navTab = "Documents and Media",
				webContentImage = "Document Title",
				webContentTitle = "My Image");

			PortletEntry.publish();

			JSONLayout.addPublicLayout(
				groupName = ${randomSiteName},
				layoutName = "Home",
				type = "content");

			ContentPagesNavigator.openEditContentPage(
				pageName = "Home",
				siteName = ${randomSiteName});

			PageEditor.addWidget(portletName = "Web Content Display");

			WebContentDisplayPortlet.selectWebContent(webContentTitle = "My Image");

			Staging.openStagingAdmin(siteURLKey = ${randomSiteURLKey});

			Staging.activateStagingCP(siteName = ${randomSiteName});
		}

		task ("When the user publishes the content page in the staging site") {
			ContentPagesNavigator.openEditContentPage(
				pageName = "Home",
				siteName = "${randomSiteName} Staging");

			PortletEntry.publish();
		}

		task ("Then the image will be displayed on the live site after publishing to live") {
			ContentPagesNavigator.openViewContentPage(
				pageName = "Home",
				siteName = "${randomSiteName} Staging");

			Staging.gotoPublishToLive();

			Staging.publishToLive();

			ContentPagesNavigator.openViewContentPage(
				pageName = "Home",
				siteName = ${randomSiteName});

			AssertElementPresent(
				key_content = "[@data-analytics-asset-title='My Image']",
				locator1 = "WCD#WEB_CONTENT_CONTENT_ANY");
		}
	}

	@description = "This is a use case for LPS-75802."
	@priority = 5
	test PublishWebContentWithImportedStructureDefaultValues {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Create a basic web content") {
			JSONWebcontent.addWebContent(
				content = "WC Content",
				groupName = ${randomSiteName},
				title = "WC 1");
		}

		task ("Create structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = ${randomSiteURLKey});

			NavItem.gotoStructures();

			WebContentStructures.importStructure(
				structureName = "WC Structure Name",
				uploadFileName = "Structure_All_Fields.json");
		}

		task ("Set default values for the structure") {
			WebContentStructures.editStructureDefaultValuesCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				column = 1,
				dmNavTab = "User Personal Folder",
				navTab = "Web Content Images",
				row = 1,
				webContentColor = "FF0D0D",
				webContentDate = "10/10/2020",
				webContentGrid = "true",
				webContentImage = "Document_3.png",
				webContentLinkToPage = "Staging Test Page",
				webContentMultipleSelection = "Option 1",
				webContentNumeric = 9,
				webContentRichText = "This is a Rich Text field",
				webContentSelectFromList = "Option 2",
				webContentSingleSelection = "Option 3",
				webContentText = "(Enter Text Here)",
				webContentTitle = "Web Content Title",
				webContentUpload = "Document_1.doc",
				webContentWebContent = "WC 1");

			PortletEntry.save();
		}

		task ("Create and Publish Web Content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = ${randomSiteURLKey});

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				structureName = "WC Structure Name",
				webContentText = "Web Content Text",
				webContentTitle = "Web Content Title");

			PortletEntry.publish();

			WebContent.viewTitle(webContentTitle = "Web Content Title");
		}

		task ("Export web content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = ${randomSiteURLKey});

			LAR.exportPortlet(larFileName = "WebContent_portlet.lar");
		}

		task ("Create another site") {
			HeadlessSite.addSite(siteName = "${randomSiteName} B");
		}

		task ("Enable Staging in created site") {
			Staging.openStagingAdmin(siteURLKey = "${randomSiteURLKey}-b");

			Staging.activateStagingCP(siteName = "${randomSiteName} B");
		}

		task ("Import web content") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "${randomSiteURLKey}-b-staging");

			LAR.importPortlet(larFileName = "WebContent_portlet.lar");
		}

		task ("Assert web content has been imported in staging") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "${randomSiteURLKey}-b-staging");

			WebContent.viewWithStructureCP(
				webContentText = "Web Content Text",
				webContentTitle = "Web Content Title");
		}

		task ("Publish the site to live") {
			Staging.openStagingAdmin(siteURLKey = "${randomSiteURLKey}-b-staging");

			Staging.publishCustomPublication();
		}

		task ("Assert no error") {
			AssertConsoleTextNotPresent(value1 = "ConstraintViolationException");

			AssertConsoleTextNotPresent(value1 = "SystemException");
		}

		task ("Assert web content has been published") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "${randomSiteURLKey}-b");

			AssertTextEquals.assertPartialText(
				key_webContentTitle = "Web Content Title",
				locator1 = "WC#ENTRY_LIST_TITLE_ON_LIVE",
				value1 = "Web Content Title");
		}
	}

	@description = "This is a use case for LPS-77728."
	@priority = 5
	test StagingDraftWebContent {
		property portal.acceptance = "true";

		task ("Create a basic web content") {
			JSONWebcontent.addWebContent(
				content = "WC Content",
				groupName = ${randomSiteName},
				title = "WC 1");
		}

		task ("Create structure") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = ${randomSiteURLKey});

			NavItem.gotoStructures();

			WebContentStructures.importStructure(
				structureName = "WC Structure Name",
				uploadFileName = "Structure_All_Fields.json");
		}

		task ("Create a web content as draft") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = ${randomSiteURLKey});

			WebContentNavigator.gotoAddWithStructureCP(structureName = "WC Structure Name");

			WebContent.addWithStructureCP(
				column = 1,
				dmNavTab = "User Personal Folder",
				navTab = "Web Content Images",
				row = 1,
				saveAsDraft = "true",
				webContentColor = "FF0D0D",
				webContentDate = "10/10/2020",
				webContentGrid = "true",
				webContentImage = "Document_3.png",
				webContentLinkToPage = "Staging Test Page",
				webContentMultipleSelection = "Option 1",
				webContentNumeric = 9,
				webContentRichText = "This is a Rich Text field",
				webContentSelectFromList = "Option 2",
				webContentSingleSelection = "Option 3",
				webContentText = "(Enter Text Here)",
				webContentTitle = "WC WebContent Title",
				webContentUpload = "Document_1.doc",
				webContentWebContent = "WC 1");
		}

		task ("Assert web content draft exists") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = ${randomSiteURLKey});

			WebContentNavigator.gotoViewStatus(
				webContentStatus = "DRAFT",
				webContentTitle = "WC WebContent Title");
		}

		task ("Activate Staging with page versioning") {
			Staging.openStagingAdmin(siteURLKey = ${randomSiteURLKey});

			Staging.activateStagingCP(
				pageVersioningEnabled = "true",
				siteName = ${randomSiteName});
		}

		task ("Check web content draft is not present in staging") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = ${randomSiteURLKey});

			AssertTextNotPresent(value1 = "WC WebContent Title");
		}

		task ("Check web content draft is not present in life") {
			WebContentNavigator.openWebContentAdmin(siteURLKey = "${randomSiteURLKey}-life");

			AssertTextNotPresent(value1 = "WC WebContent Title");
		}
	}

	@description = "This is a use case for LPS-82431."
	@priority = 5
	test StagingEditWebContents {
		property portal.acceptance = "true";

		task ("Create three web contents") {
			for (var webContentTitle : list "WC WebContent Title 1,WC WebContent Title 2,WC WebContent Title 3") {
				WebContentNavigator.openWebContentAdmin(siteURLKey = ${randomSiteURLKey});

				WebContentNavigator.gotoAddCP();

				WebContent.addCP(
					webContentContent = "WC WebContent Content",
					webContentTitle = ${webContentTitle});

				PortletEntry.publish();

				WebContentNavigator.openWebContentAdmin(siteURLKey = ${randomSiteURLKey});

				WebContent.viewTitle(webContentTitle = ${webContentTitle});
			}
		}

		task ("Activate Staging") {
			Staging.openStagingAdmin(siteURLKey = ${randomSiteURLKey});

			Staging.activateStagingCP(siteName = ${randomSiteName});
		}

		task ("Edit the web contents") {
			for (var webContentTitle : list "WC WebContent Title 1,WC WebContent Title 2,WC WebContent Title 3") {
				WebContentNavigator.openWebContentAdmin(siteURLKey = "${randomSiteURLKey}-staging");

				WebContentNavigator.gotoEditCP(webContentTitle = ${webContentTitle});

				WebContent.editCP(
					webContentContentEdit = "WC WebContent Content Edit",
					webContentTitle = ${webContentTitle},
					webContentTitleEdit = "${webContentTitle} Edit");
			}
		}

		task ("Assert web content has been edited") {
			for (var webContentTitle : list "WC WebContent Title 1 Edit,WC WebContent Title 2 Edit,WC WebContent Title 3 Edit") {
				WebContentNavigator.openWebContentAdmin(siteURLKey = "${randomSiteURLKey}-staging");

				WebContent.viewTitle(webContentTitle = ${webContentTitle});
			}
		}
	}

}