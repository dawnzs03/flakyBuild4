@component-name = "portal-web-forms-and-data-lists"
definition {

	property osgi.module.configuration.file.names = "com.liferay.frontend.js.loader.modules.extender.internal.configuration.Details.config";
	property osgi.module.configurations = "waitTimeout=\"15\"";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Forms";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Navigator.openURL();

			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Forms");

			FormsAdmin.teardownForms();

			PagesAdmin.tearDownCP();
		}
	}

	@description = "This is a use case for LPS-103694. Verify Admin is notified of a form submission after two minutes."
	@priority = 5
	test AdminIsNotifiedOfAFormSubmissionIfWorkflowIsEnabled {
		task ("Given a published form with Single Approver workflow assigned to it") {
			FormsAdmin.addForm();

			Form.editName(formName = "Form 1");

			Form.gotoAddField(
				fieldPositionNumber = 0,
				fieldType = "Text");

			FormsAdminNavigator.gotoSettings();

			Form.configureWorkflow(workflowDefinition = "Single Approver");

			Form.save();

			Form.publishForm();
		}

		task ("and Given that a user submitted an entry using the form") {
			FormsAdminNavigator.gotoPublishCopyURLLink();

			var publishFormURL = Form.getPublishedFormPublicURL();

			Navigator.openSpecificURL(url = ${publishFormURL});

			FormFields.editText(
				fieldName = "Text",
				fieldValue = "Test Text");

			FormPortlet.submitLocalizedSuccessfully(buttonName = "Submit for Workflow");
		}

		task ("and Given that a user submits another entry after two minutes") {
			Pause(locator1 = 120000);

			Navigator.openSpecificURL(url = ${publishFormURL});

			FormFields.editText(
				fieldName = "Text",
				fieldValue = "Test Text1");

			FormPortlet.submitLocalizedSuccessfully(buttonName = "Submit for Workflow");
		}

		task ("Then the admin is notified of a form submission") {
			Navigator.openURL();

			UserBar.gotoDropdownItem(dropdownItem = "Notifications");

			AssertTextPresent(value1 = "Test Test sent you a Form Record for review in the workflow.");
		}
	}

	@description = "Verify that with Single Approver Workflow enabled, when a user submits a form entry, the status of the entry will be Pending. When the entry is approved, the status will change to Approved."
	@priority = 5
	test CanApprovePendingFormEntries {
		property portal.acceptance = "true";

		task ("Given a published form that is assigned the Single Approver workflow") {
			FormsAdmin.addForm();

			Form.editName(formName = "Form 1");

			Form.gotoAddField(
				fieldPositionNumber = 0,
				fieldType = "Text");

			FormsAdminNavigator.gotoSettings();

			Form.configureWorkflow(workflowDefinition = "Single Approver");

			Form.save();

			Form.publishForm();
		}

		task ("When a new user is added and this user submits a form entry for workflow") {
			FormsAdminNavigator.gotoPublishCopyURLLink();

			var publishedFormURL = Form.getPublishedFormPublicURL(publishedFormPublicURL = ${publishedFormPublicURL});

			JSONUser.addUser(
				userEmailAddress = "user1@liferay.com",
				userFirstName = "user1",
				userLastName = "user1",
				userScreenName = "user1");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "user1@liferay.com");

			User.logoutAndLoginPG(
				userLoginEmailAddress = "user1@liferay.com",
				userScreenName = "user1");

			Navigator.openSpecificURL(url = ${publishedFormURL});

			FormFields.editText(
				fieldName = "Text",
				fieldValue = "Test Text");

			FormPortlet.submitLocalizedSuccessfully(buttonName = "Submit for Workflow");

			FormPortlet.viewSuccessPage(
				successPageDescription = "Your information was successfully received. Thank you for filling out the form.",
				successPageTitle = "Thank you.");
		}

		task ("Then the entry will have the Pending status") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userScreenName = "Test Test");

			FormsAdmin.openFormsAdmin(siteURLKey = "guest");

			FormsAdminNavigator.gotoViewEntries();

			FormsAdmin.viewFormEntryWorkflowStatus(formEntryWorkflowStatus = "Pending");
		}

		task ("When the reviewer approves the form entry") {
			WorkflowAsset.gotoViaNotification(
				assetType = "Form Record",
				user = "user1 user1");

			LexiconEntry.gotoEllipsisMenuItem(menuItem = "Assign to Me");

			Workflow.confirmWorkflowAction();

			LexiconEntry.gotoEllipsisMenuItem(menuItem = "Approve");

			Workflow.confirmWorkflowAction();

			Alert.viewSuccessMessage();
		}

		task ("Then the form entry status is Approved") {
			Navigator.openURL();

			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Forms");

			FormsAdminNavigator.gotoViewEntries();

			FormsAdmin.viewFormTableEntry(
				fieldLabel = "Status",
				fieldValue = "Approved");
		}
	}

	@description = "Verify that Entries can be deleted"
	@priority = 5
	test CanBeDeleted {
		property portal.acceptance = "true";

		task ("Given a published form with a Text field") {
			FormsAdmin.addForm();

			Form.editName(formName = "Form 1");

			Form.addTextField(fieldPositionNumber = 0);

			Form.save();

			Form.publishForm();
		}

		task ("and Given a user submitted an entry using the published form") {
			FormsAdminNavigator.gotoPublishedForm();

			FormViewBuilder.editText(
				fieldName = "Text",
				fieldValue = "Test Text");

			FormPortlet.submitSuccessfully();
		}

		task ("When an admin deletes the submitted entry") {
			Navigator.openURL();

			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Forms");

			FormsAdminNavigator.gotoViewEntries();

			FormsAdmin.viewFormTableEntry(
				fieldLabel = "Text",
				fieldValue = "Test Text");

			FormsAdmin.deleteFormEntry(formEntryValue = "Text");
		}

		task ("Then the entry no longer exists") {
			FormsAdmin.viewFormTableEntryNotPresent(
				fieldLabel = "Text",
				fieldValue = "Test Text");
		}
	}

	@description = "Verify that Entries can be viewed and edited"
	@priority = 5
	test CanBeEdited {
		property portal.acceptance = "true";

		task ("Given a published form") {
			FormsAdmin.addForm();

			Form.editName(formName = "Form 1");

			Form.addTextField(fieldPositionNumber = 0);

			Form.save();

			Form.publishForm();
		}

		task ("When a user submits an entry using the published form") {
			FormsAdminNavigator.gotoPublishedForm();

			FormViewBuilder.editText(
				fieldName = "Text",
				fieldValue = "Test Text");

			FormPortlet.submitSuccessfully();
		}

		task ("Then the admin can view the submitted form entry") {
			Navigator.openURL();

			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Forms");

			FormsAdminNavigator.gotoViewEntries();

			FormsAdminNavigator.gotoView();

			FormsAdmin.viewTextEntry(
				fieldLabel = "Text",
				fieldName = "Text",
				fieldValue = "Test Text");
		}

		task ("and When the submitted entry is edited") {
			Navigator.openURL();

			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Forms");

			FormsAdminNavigator.gotoViewEntries();

			FormsAdmin.viewFormTableEntry(
				fieldLabel = "Text",
				fieldValue = "Test Text");

			FormsAdmin.editFormEntry(
				fieldValue = "Test Text Edit",
				formEntryValue = "Text");
		}

		task ("Then the changes are saved") {
			FormsAdmin.viewFormTableEntry(
				fieldLabel = "Text",
				fieldValue = "Test Text Edit");
		}
	}

	@description = "Verify that a user can navigate to the correct metric by using the list on the right"
	@priority = 5
	test CanNavigateThroughFormReportLinks {
		property portal.acceptance = "true";

		task ("Given a published form with multiple fields") {
			FormsAdmin.addForm();

			Form.editName(formName = "Form 1");

			Form.addTextField(fieldPositionNumber = 0);

			Form.closeSidebar();

			Form.gotoAddField(
				fieldPositionNumber = 1,
				fieldType = "Select from List");

			FormFields.editOptionsRow(
				optionName = "Option1",
				optionValue = "Option 1");

			Form.closeSidebar();

			Form.gotoAddField(
				fieldPositionNumber = 2,
				fieldType = "Numeric");

			Form.closeSidebar();

			Form.save();

			Form.publishForm();
		}

		task ("and Given an entry is submitted using the form") {
			FormsAdminNavigator.gotoPublishedForm();

			FormFields.editText(
				fieldName = "Text",
				fieldValue = "Test Text");

			FormFields.selectSelectOption(
				fieldName = "Select from List",
				selectOption = "Option 1");

			FormFields.editText(
				fieldName = "Numeric",
				fieldValue = 5);

			FormPortlet.submitSuccessfully();
		}

		task ("When the admin views the Form Entries Summary") {
			Navigator.openURL();

			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Forms");

			FormsAdminNavigator.gotoEditFormByName(formName = "Form 1");

			FormsAdminNavigator.gotoEntries();
		}

		task ("Then there are navigation links for each type of field") {
			FormsAdminNavigator.gotoEntriesLabel(
				key_type = "Numeric",
				key_value = "Numeric");

			FormsAdminNavigator.gotoEntriesLabel(
				key_type = "Text",
				key_value = "Text");
		}
	}

	@description = "LPS-172222 - Verify if it is possible to save a form when Javascript SPA is disabled"
	@priority = 5
	test CanPublishFormWhenJavascriptSPADisabled {
		task ("Given Javascript SPA is turned off") {
			property custom.properties = "javascript.single.page.application.enabled=false";
		}

		task ("When a user adds a Form entry") {
			FormsAdmin.addForm();

			Form.editName(formName = "Form 1");

			Form.addTextField(fieldPositionNumber = 0);

			Form.save();

			FormsAdminNavigator.gotoBack();
		}

		task ("Then the entry is saved") {
			FormsAdmin.viewForm(
				formDescription = "",
				formName = "Form 1");
		}
	}

	@description = "Verify that Entries Previews display the correct information"
	@priority = 5
	test CanViewEntriesInFormEntriesPage {
		property portal.acceptance = "true";

		task ("Given a published form") {
			FormsAdmin.addForm();

			Form.editName(formName = "Form 1");

			Form.gotoAddField(
				fieldPositionNumber = 0,
				fieldType = "Text");

			FormFields.editText(
				fieldName = "label",
				fieldValue = "Text Label");

			Form.closeSidebar();

			Form.gotoAddField(
				fieldPositionNumber = 1,
				fieldType = "Numeric");

			Form.save();

			Form.publishForm();
		}

		task ("and Given a entry is submitted using the form") {
			FormsAdminNavigator.gotoPublishedForm();

			FormFields.editText(
				fieldName = "Text",
				fieldValue = "Test Text");

			FormFields.editText(
				fieldName = "Numeric",
				fieldValue = 5);

			FormPortlet.submitSuccessfully();

			FormsAdminNavigator.closePublishedFormWindow();
		}

		task ("When admin navigates to Form Entries") {
			FormsAdminNavigator.gotoViewEntries();
		}

		task ("Then the correct information displays in Table View") {
			for (var fieldHeader : list "Text Label,Numeric") {
				FormsAdmin.viewFormTableHeader(fieldHeader = ${fieldHeader});
			}

			for (var formEntryWorkflowStatus : list "Test Text,5,Approved,Test Test") {
				FormsAdmin.viewFormEntryWorkflowStatus(formEntryWorkflowStatus = ${formEntryWorkflowStatus});
			}
		}
	}

	@description = "Verify that Entries for the Color, Date and Text Fields display a Field List in the Summary Tab"
	@priority = 5
	test DataIsDisplayedInFieldListFormat {
		task ("Given a published form with Text, Color, and Date fields") {
			FormsAdmin.addForm();

			Form.editName(formName = "Form 1");

			Form.addTextField(fieldPositionNumber = 0);

			Form.closeSidebar();

			Form.gotoAddField(
				fieldPositionNumber = 1,
				fieldType = "Color",
				formPageNumber = 0);

			Form.closeSidebar();

			Form.gotoAddField(
				fieldPositionNumber = 2,
				fieldType = "Date",
				formPageNumber = 0);

			Form.save();

			Form.publishForm();
		}

		task ("When an entry is submitted using the form") {
			FormsAdminNavigator.gotoPublishedForm();

			FormViewBuilder.editText(
				fieldName = "Text",
				fieldValue = "Test Text");

			FormViewBuilder.editColor(
				fieldName = "Color",
				fieldValue = "5f5f5f");

			FormViewBuilder.editDate(
				fieldName = "Date",
				fieldValue = "01/01/2001");

			Click(
				key_text = "Submit",
				locator1 = "Button#ANY");

			AssertElementPresent(locator1 = "Message#SUCCESS");
		}

		task ("and when the admin views the Form Report / Summary tab") {
			Navigator.openURL();

			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Forms");

			FormsAdminNavigator.gotoEditFormByName(formName = "Form 1");

			FormsAdminNavigator.gotoEntries();
		}

		task ("Then the data is reported as Field Lists") {
			FormViewBuilder.viewSummaryEntry(
				key_card = "Text",
				key_entryName = "Test Text",
				key_entryNumber = "1 entry");

			FormViewBuilder.viewSummaryEntry(
				key_card = "Color",
				key_entryName = "5f5f5f",
				key_entryNumber = "1 entry");

			FormViewBuilder.viewSummaryEntry(
				key_card = "Date",
				key_entryName = "01/01/2001",
				key_entryNumber = "1 entry");
		}
	}

	@description = "Verify that the correct number of Entries are displayed"
	@priority = 3
	test DisplayCorrectNumberOfEntries {
		property portal.acceptance = "true";

		task ("Given a published form") {
			FormsAdmin.addForm();

			Form.editName(formName = "Form1");

			Form.addTextField(fieldPositionNumber = 0);

			Form.save();

			Form.publishForm();
		}

		task ("and Given two entries are submitted using the form") {
			FormsAdminNavigator.gotoPublishedForm();

			FormFields.editText(
				fieldName = "Text",
				fieldValue = "Test Text");

			FormPortlet.submitSuccessfully();

			FormsAdminNavigator.closePublishedFormWindow();

			FormsAdminNavigator.gotoEditFormByName(formName = "Form1");

			FormsAdminNavigator.gotoPublishedForm();

			FormFields.editText(
				fieldName = "Text",
				fieldValue = "Test Text2");

			FormPortlet.submitSuccessfully();

			FormsAdminNavigator.closePublishedFormWindow();
		}

		task ("When the admin goes to the Entries tab of the form") {
			FormsAdminNavigator.gotoEditFormByName(formName = "Form1");

			FormsAdminNavigator.gotoEntries();
		}

		task ("Then the correct number of entries displays") {
			FormViewBuilder.viewEntriesTitle(key_entriesTitle = "2 Entries");
		}
	}

	@description = "LPS-74997 - Verify that editing a Form does not affect previously submitted Form Entries"
	@priority = 4
	test EditingTheFormDoesNotAffectSubmittedEntries {
		property portal.acceptance = "true";
		property portal.upstream = "true";

		task ("Given a published form with Select from List that has 3 options") {
			FormsAdmin.addForm();

			Form.editName(formName = "Delete Select Option Test");

			Form.gotoAddField(
				fieldPositionNumber = 0,
				fieldType = "Select from List");

			var fieldName = FormFields.getFieldName();

			Form.editFieldLabelMetal(fieldValue = "Select");

			for (var number : list "1,2,3") {
				FormFields.editOptionsRow(
					optionName = "Select${number}",
					optionValue = "Select ${number}",
					rowNumber = ${number});
			}

			Form.closeSidebar();

			Form.save();

			Form.publishForm();
		}

		task ("and Given that a user has submitted an entry using the form") {
			FormsAdminNavigator.gotoPublishedForm();

			FormPortlet.waitFormRenderer(text = "Submit");

			FormFields.selectSelectOption(
				fieldName = "Select",
				selectOption = "Select 2");

			FormPortlet.submitSuccessfully();
		}

		task ("When the form is updated and an option was removed") {
			Navigator.openURL();

			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Forms");

			FormsAdminNavigator.gotoEditFormByName(formName = "Delete Select Option Test");

			FormsAdminNavigator.gotoEditField(fieldName = "Select");

			FormFields.deleteOptionsRow(rowNumber = 2);

			FormFields.viewDeletedSelectOptionsRowFieldValue(
				fieldValue = "Select 2",
				rowNumber = 2);

			Form.closeSidebar();

			Form.save();
		}

		task ("Then the submitted entry's values remain the same") {
			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Forms");

			FormsAdminNavigator.gotoViewEntries();

			FormsAdminNavigator.gotoView();

			FormsAdmin.viewSelectEntry(
				fieldLabel = "Select",
				fieldName = ${fieldName},
				selectOption = "Select 2");
		}
	}

	@description = "LPS-61197 - Verify that with Single Approver Workflow enabled, the Date Field is properly displayed on an Entry submitted from the Forms Widget"
	@priority = 5
	test FormEntriesAreRenderedProperlyInMyWorkflowTasks {
		property portal.acceptance = "true";

		task ("Given a published form with Single Approver workflow assigned to it") {
			FormsAdmin.addForm();

			Form.editName();

			Form.gotoAddField(
				fieldPositionNumber = 0,
				fieldType = "Date");

			FormsAdminNavigator.gotoSettings();

			Form.configureWorkflow(workflowDefinition = "Single Approver");

			Form.publishForm();
		}

		task ("and Given that an entry is submitted using this form") {
			FormsAdminNavigator.gotoPublishedForm();

			FormFields.viewDateLabel(
				fieldLabel = "Date",
				fieldName = "Date");

			FormFields.editDate(
				fieldName = "Date",
				fieldValue = "02/01/2016");

			Button.clickSubmitForWorkflow();

			Alert.viewSuccessMessage();
		}

		task ("When the reviewer views this task via My Workflow Tasks") {
			Navigator.openURL();

			UserBar.gotoDropdownItem(dropdownItem = "My Workflow Tasks");

			Workflow.assignToMeTaskByDetails(
				workflowAssetTitle = "Created Form Name",
				workflowAssetType = "Form Record",
				workflowTask = "Review");

			Workflow.viewTaskAssignedToMe(
				workflowAssetTitle = "Created Form Name",
				workflowAssetType = "Form Record",
				workflowTask = "Review");

			Workflow.viewTaskAssignedToMeDetails(
				workflowAssetContent = "Date",
				workflowAssetTitle = "Created Form Name",
				workflowTask = "Review");

			Workflow.gotoPreviewView();
		}

		task ("Then the Form entry displays properly") {
			FormFields.viewDateField(
				fieldLabel = "Date",
				fieldName = "Date");
		}

		task ("and When the reviewer approves this workflow task") {
			UserBar.gotoDropdownItem(dropdownItem = "My Workflow Tasks");

			Workflow.approveTaskByActions(
				workflowAssetTitle = "Created Form Name",
				workflowAssetType = "Form Record",
				workflowTask = "Review");
		}

		task ("Then the Form entry displays under the Completed filter") {
			Workflow.viewCompletedTask(
				workflowAssetTitle = "Created Form Name",
				workflowAssetType = "Form Record",
				workflowTask = "Review");
		}
	}

	@description = "Verify that Entries for the Paragraph, Rich Text, Separator, Image, and Upload Fields do not display any metrics in the Summary Tab"
	@priority = 5
	test NoMetricsIsDisplayed {
		property portal.acceptance = "true";

		task ("Given a published form with Paragraph, Rich Text, Separator, Image, and Upload Fields") {
			FormsAdmin.addForm();

			Form.editName(formName = "Form 1");

			Form.gotoAddField(
				fieldPositionNumber = 0,
				fieldType = "Paragraph");

			FormFields.editParagraphBody(content = "Hello");

			Form.closeSidebar();

			Form.gotoAddField(
				fieldPositionNumber = 1,
				fieldType = "Rich Text");

			Form.closeSidebar();

			Form.gotoAddField(
				fieldPositionNumber = 2,
				fieldType = "Separator");

			Form.closeSidebar();

			Form.gotoAddField(
				fieldPositionNumber = 3,
				fieldType = "Image");

			Form.closeSidebar();

			Form.gotoAddField(
				fieldPositionNumber = 4,
				fieldType = "Upload");

			Form.save();

			Form.publishForm();
		}

		task ("When an entry is submitted using the form") {
			FormsAdminNavigator.gotoPublishedForm();

			FormFields.editParagraphBody(content = "Test Text");

			ItemSelector.gotoImageSelectorViaSelectButton();

			ItemSelector.uploadFile(
				navTab = "Documents and Media",
				uploadFileName = "Document_1.jpg");

			ItemSelector.gotoItemSelectorViaSelectButton();

			ItemSelector.uploadFile(
				navTab = "Documents and Media",
				uploadFileName = "Document_2.jpg");

			FormPortlet.submitSuccessfully();
		}

		task ("and when the admin views the Form Report / Summary tab") {
			Navigator.openURL();

			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Forms");

			FormsAdminNavigator.gotoEditFormByName(formName = "Form 1");

			FormsAdminNavigator.gotoEntries();
		}

		task ("Then no metrics is reported for these fields") {
			AssertElementPresent(
				key_text = "1 Entry",
				locator1 = "FormViewBuilder#ENTRIES_TITLE_CONTENT");

			AssertTextEquals(
				locator1 = "Message#EMPTY_STATE_INFO",
				value1 = "There are no entries.");
		}
	}

	@description = "Verify that Entries for the Numeric Field display a Field List, Average, Maximum Value, Minimum Value, and Sum in the Summary Tab"
	@priority = 5
	test SummaryStatisticsDisplayForNumericField {
		property portal.acceptance = "true";

		task ("Given a published form with Numeric Field") {
			FormsAdmin.addForm();

			Form.editName(formName = "Form 1");

			Form.gotoAddField(
				fieldPositionNumber = 0,
				fieldType = "Numeric",
				formPageNumber = 0);

			Form.save();

			Form.publishForm();
		}

		task ("When two entries are submitted using the form") {
			FormsAdminNavigator.gotoPublishedForm();

			FormViewBuilder.editText(
				fieldName = "Numeric",
				fieldValue = 5);

			FormPortlet.submitSuccessfully();

			Navigator.openURL();

			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Forms");

			FormsAdminNavigator.gotoEditFormByName(formName = "Form 1");

			FormsAdminNavigator.gotoPublishedForm();

			FormViewBuilder.editText(
				fieldName = "Numeric",
				fieldValue = 11);

			FormPortlet.submitSuccessfully();
		}

		task ("and When the admin views the Form Report / Summary tab") {
			Navigator.openURL();

			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Forms");

			FormsAdminNavigator.gotoEditFormByName(formName = "Form 1");

			FormsAdminNavigator.gotoEntries();
		}

		task ("Then the summary statistics for the Number fields display") {
			FormViewBuilder.viewSummaryEntryNumeric(
				key_averageValue = 8,
				key_maxValue = 11,
				key_minValue = 5,
				key_sumValue = 16);
		}
	}

}