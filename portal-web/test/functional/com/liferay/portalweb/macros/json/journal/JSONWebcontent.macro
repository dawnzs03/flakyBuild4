definition {

	macro addBasicWebContentLocalized {
		Variables.assertDefined(parameterList = ${groupName});

		var groupId = JSONWebcontentSetter.setGroupId(groupName = ${groupName});
		var contentXml = JSONWebcontentSetter.setContentXML(
			content = ${content},
			contentMap = ${contentMap});
		var descriptionMap = JSONWebcontentSetter.setDescriptionMap(
			description = ${description},
			descriptionMap = ${descriptionMap});
		var folderId = JSONWebcontentSetter.setFolderId(
			folderName = ${folderName},
			groupId = ${groupId});
		var serviceContext = JSONWebcontentSetter.setServiceContext(
			assetCategoryIds = ${assetCategoryIds},
			assetTagNames = ${assetTagNames},
			serviceContext = ${serviceContext},
			workflowAction = ${workflowAction});
		var titleMap = JSONWebcontentSetter.setTitleMap(
			title = ${title},
			titleMap = ${titleMap});

		JSONWebcontentAPI._addWebContent(
			contentXml = ${contentXml},
			descriptionMap = ${descriptionMap},
			folderId = ${folderId},
			groupId = ${groupId},
			serviceContext = ${serviceContext},
			titleMap = ${titleMap},
			userEmailAddress = ${userEmailAddress},
			userPassword = ${userPassword});
	}

	macro addFolder {
		Variables.assertDefined(parameterList = "${folderName},${groupName}");

		var groupId = JSONWebcontentSetter.setGroupId(
			groupName = ${groupName},
			site = ${site});

		var parentFolderId = JSONWebcontentSetter.setFolderId(
			folderName = ${parentFolderName},
			groupId = ${groupId});

		JSONWebcontentAPI._addFolder(
			folderDescription = ${folderDescription},
			folderName = ${folderName},
			groupId = ${groupId},
			parentFolderId = ${parentFolderId},
			userEmailAddress = ${userEmailAddress},
			userPassword = ${userPassword});
	}

	macro addWebContent {
		Variables.assertDefined(parameterList = "${content},${title}");

		if (!(isSet(groupId))) {
			var groupId = JSONWebcontentSetter.setGroupId(
				groupName = ${groupName},
				site = ${site});
		}

		var contentXml = JSONWebcontentSetter.setContentXML(
			content = ${content},
			source = ${source});
		var descriptionMap = JSONWebcontentSetter.setDescriptionMap(description = ${description});
		var folderId = JSONWebcontentSetter.setFolderId(
			folderName = ${folderName},
			groupId = ${groupId});
		var serviceContext = JSONWebcontentSetter.setServiceContext(
			assetCategoryIds = ${assetCategoryIds},
			assetTagNames = ${assetTagNames},
			serviceContext = ${serviceContext},
			workflowAction = ${workflowAction});
		var titleMap = JSONWebcontentSetter.setTitleMap(title = ${title});

		JSONWebcontentAPI._addWebContent(
			contentXml = ${contentXml},
			descriptionMap = ${descriptionMap},
			folderId = ${folderId},
			groupId = ${groupId},
			serviceContext = ${serviceContext},
			titleMap = ${titleMap},
			userEmailAddress = ${userEmailAddress},
			userPassword = ${userPassword});
	}

	macro deleteWebContent {
		Variables.assertDefined(parameterList = "${groupName},${title}");

		var groupId = JSONWebcontentSetter.setGroupId(
			groupName = ${groupName},
			site = ${site});
		var articleId = JSONWebcontentSetter.setArticleId(
			groupName = ${groupName},
			site = ${site},
			title = ${title});

		JSONWebcontentAPI._deleteWebContent(
			articleId = ${articleId},
			groupId = ${groupId});
	}

	macro getFolderIdByFolderName {
		Variables.assertDefined(parameterList = "${folderName},${groupName}");

		var groupId = JSONWebcontentSetter.setGroupId(groupName = ${groupName});

		var folderId = JSONWebcontentAPI._getFolderIdByFolderName(
			folderName = ${folderName},
			groupId = ${groupId});

		return ${folderId};
	}

	macro getFolderUuidByFolderName {
		Variables.assertDefined(parameterList = "${folderName},${groupName}");

		var groupId = JSONWebcontentSetter.setGroupId(
			groupName = ${groupName},
			site = ${site});

		var folderUuid = JSONWebcontentAPI._getFolderUuidByFolderName(
			folderName = ${folderName},
			groupId = ${groupId});

		return ${folderUuid};
	}

	macro getResourcePrimKeyByURLTitle {
		Variables.assertDefined(parameterList = "${groupName},${title}");

		var urlTitle = StringUtil.replace(${title}, " ", "-");

		var urlTitle = StringUtil.lowerCase(${urlTitle});

		var resourcePrimKey = JSONWebcontentAPI._getResourcePrimKeyByURLTitle(
			groupName = ${groupName},
			urlTitle = ${urlTitle});

		return ${resourcePrimKey};
	}

	macro moveWebContentToTrash {
		Variables.assertDefined(parameterList = "${groupName},${title}");

		var groupId = JSONWebcontentSetter.setGroupId(groupName = ${groupName});
		var articleId = JSONWebcontentSetter.setArticleId(
			groupName = ${groupName},
			title = ${title});

		JSONWebcontentAPI._moveWebContentToTrash(
			articleId = ${articleId},
			groupId = ${groupId});
	}

	macro restoreWebContentFromTrashViaResourcePrimKey {
		var resourcePrimKey = ${resourcePrimKey};
		var portalURL = JSONCompany.getPortalURL();
		var userLoginInfo = JSONUtil2.formatJSONUser();

		var curl = '''
			${portalURL}/api/jsonws/journal.journalarticle/restore-article-from-trash \
				-u ${userLoginInfo} \
				-d resourcePrimKey=${resourcePrimKey}
		''';

		com.liferay.poshi.runner.util.JSONCurlUtil.post(${curl});
	}

	macro updateStatus {
		Variables.assertDefined(parameterList = "${groupName},${statusKey},${title}");

		var articleId = JSONWebcontentSetter.setArticleId(
			groupName = ${groupName},
			title = ${title});
		var groupId = JSONWebcontentSetter.setGroupId(groupName = ${groupName});
		var status = JSONWebcontentSetter.setStatus(statusKey = ${statusKey});

		if (!(isSet(version))) {
			var version = "1.0";
		}

		JSONWebcontentAPI._updateStatus(
			articleId = ${articleId},
			groupId = ${groupId},
			status = ${status},
			version = ${version});
	}

}