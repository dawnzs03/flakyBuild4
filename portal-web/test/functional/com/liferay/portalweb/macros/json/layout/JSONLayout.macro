definition {

	macro addPrivateLayout {
		Variables.assertDefined(parameterList = ${layoutName});

		var friendlyURL = JSONLayoutSetter.setFriendlyURL(friendlyURL = ${friendlyURL});

		if (!(isSet(groupId))) {
			var groupId = JSONLayoutSetter.setGroupId(
				grandParentGroupName = ${grandParentGroupName},
				groupName = ${groupName},
				parentGroupName = ${parentGroupName},
				site = ${site});
		}

		var parentLayoutId = JSONLayoutSetter.setParentLayoutId(
			groupId = ${groupId},
			parentLayoutName = ${parentLayoutName},
			privateLayout = "true");
		var serviceContext = JSONLayoutSetter.setServiceContext(
			assetCategoryIds = ${assetCategoryIds},
			assetTagNames = ${assetTagNames},
			serviceContext = ${serviceContext},
			workflowAction = ${workflowAction});
		var type = JSONLayoutSetter.setType(type = ${type});

		var plid = JSONLayoutAPI._addLayout(
			friendlyURL = ${friendlyURL},
			groupId = ${groupId},
			layoutName = ${layoutName},
			parentLayoutId = ${parentLayoutId},
			privateLayout = "true",
			serviceContext = ${serviceContext},
			type = ${type});

		return ${plid};
	}

	macro addPublicLayout {
		Variables.assertDefined(parameterList = ${layoutName});

		var friendlyURL = JSONLayoutSetter.setFriendlyURL(friendlyURL = ${friendlyURL});

		if (!(isSet(groupId))) {
			var groupId = JSONLayoutSetter.setGroupId(
				grandParentGroupName = ${grandParentGroupName},
				groupName = ${groupName},
				parentGroupName = ${parentGroupName},
				site = ${site});
		}

		var parentLayoutId = JSONLayoutSetter.setParentLayoutId(
			groupId = ${groupId},
			parentLayoutName = ${parentLayoutName},
			privateLayout = "false");
		var serviceContext = JSONLayoutSetter.setServiceContext(
			assetCategoryIds = ${assetCategoryIds},
			assetTagNames = ${assetTagNames},
			serviceContext = ${serviceContext},
			workflowAction = ${workflowAction});
		var type = JSONLayoutSetter.setType(type = ${type});

		var plid = JSONLayoutAPI._addLayout(
			friendlyURL = ${friendlyURL},
			groupId = ${groupId},
			layoutName = ${layoutName},
			parentLayoutId = ${parentLayoutId},
			privateLayout = "false",
			serviceContext = ${serviceContext},
			type = ${type});

		return ${plid};
	}

	macro addWidgetToPrivateLayout {
		Variables.assertDefined(parameterList = "${layoutName},${widgetName}");

		if (!(isSet(groupId))) {
			var groupId = JSONLayoutSetter.setGroupId(
				grandParentGroupName = ${grandParentGroupName},
				groupName = ${groupName},
				parentGroupName = ${parentGroupName},
				site = ${site});
		}

		var layoutId = JSONLayoutSetter.setLayoutId(
			groupId = ${groupId},
			layoutName = ${layoutName},
			privateLayout = "true");
		var typeSettings = JSONLayoutSetter.setTypeSettings(
			groupId = ${groupId},
			layoutName = ${layoutName},
			privateLayout = "true",
			widgetName = ${widgetName});

		JSONLayoutAPI._updateTypeSettings(
			groupId = ${groupId},
			layoutId = ${layoutId},
			privateLayout = "true",
			typeSettings = ${typeSettings});
	}

	macro addWidgetToPublicLayout {
		Variables.assertDefined(parameterList = "${layoutName},${widgetName}");

		if (!(isSet(site))) {
			var site = "true";
		}

		if (!(isSet(groupId))) {
			var groupId = JSONLayoutSetter.setGroupId(
				grandParentGroupName = ${grandParentGroupName},
				groupName = ${groupName},
				parentGroupName = ${parentGroupName},
				site = ${site});
		}

		var layoutId = JSONLayoutSetter.setLayoutId(
			groupId = ${groupId},
			layoutName = ${layoutName},
			privateLayout = "false");
		var typeSettings = JSONLayoutSetter.setTypeSettings(
			column = ${column},
			groupId = ${groupId},
			layoutName = ${layoutName},
			privateLayout = "false",
			remoteAppEntryId = ${remoteAppEntryId},
			widgetName = ${widgetName});

		JSONLayoutAPI._updateTypeSettings(
			groupId = ${groupId},
			layoutId = ${layoutId},
			privateLayout = "false",
			typeSettings = ${typeSettings});
	}

	macro deletePublicLayout {
		Variables.assertDefined(parameterList = "${groupName},${layoutName}");

		var groupId = JSONLayoutSetter.setGroupId(groupName = ${groupName});

		var layoutId = JSONLayoutSetter.setLayoutId(
			groupId = ${groupId},
			layoutName = ${layoutName},
			privateLayout = "false");
		var serviceContext = JSONLayoutSetter.setServiceContext(
			assetCategoryIds = ${assetCategoryIds},
			assetTagNames = ${assetTagNames},
			serviceContext = ${serviceContext},
			workflowAction = ${workflowAction});

		JSONLayoutAPI._deleteLayout(
			groupId = ${groupId},
			layoutId = ${layoutId},
			privateLayout = "false",
			serviceContext = ${serviceContext});
	}

	macro getPageScopeIdByGroupName {
		Variables.assertDefined(parameterList = ${groupName});

		var groupId = JSONLayoutSetter.setGroupId(groupName = ${groupName});

		JSONLayoutAPI._getDefaultPlidByGroupId(
			groupId = ${groupId},
			privateLayout = "false");
	}

	macro getPlid {
		Variables.assertDefined(parameterList = "${groupName},${layoutName}");

		if (!(isSet(site))) {
			var site = "true";
		}

		var groupId = JSONLayoutSetter.setGroupId(
			groupName = ${groupName},
			portalURL = ${portalURL},
			site = ${site});

		if (!(isSet(privateLayout))) {
			var privateLayout = "false";
		}

		JSONLayoutAPI._getPlidByName(
			groupId = ${groupId},
			layoutName = ${layoutName},
			portalURL = ${portalURL},
			privateLayout = ${privateLayout});
	}

	macro publishLayout {
		Variables.assertDefined(parameterList = "${groupName},${layoutName}");

		var plid = JSONLayout.getPlid(
			groupName = ${groupName},
			layoutName = ${layoutName},
			privateLayout = ${privateLayout},
			site = ${site});

		JSONLayoutAPI._publishLayoutByPlid(plid = ${plid});
	}

	macro updateLayoutTemplateOfPublicLayout {
		Variables.assertDefined(parameterList = "${layoutName},${layoutTemplate}");

		if (!(isSet(site))) {
			var site = "true";
		}

		if (!(isSet(groupId))) {
			var groupId = JSONLayoutSetter.setGroupId(
				groupName = ${groupName},
				site = ${site});
		}

		var layoutId = JSONLayoutSetter.setLayoutId(
			groupId = ${groupId},
			layoutName = ${layoutName},
			privateLayout = "false");
		var typeSettings = JSONLayoutSetter.setTypeSettings(
			column = ${column},
			groupId = ${groupId},
			layoutName = ${layoutName},
			layoutTemplate = ${layoutTemplate},
			privateLayout = "false");

		JSONLayoutAPI._updateTypeSettings(
			groupId = ${groupId},
			layoutId = ${layoutId},
			privateLayout = "false",
			typeSettings = ${typeSettings});
	}

	macro updateTypeSettings {
		Variables.assertDefined(parameterList = "${groupName},${layoutName}");

		if (!(isSet(site))) {
			var site = "true";
		}

		if (!(isSet(privateLayout))) {
			var privateLayout = "false";
		}

		var groupId = JSONLayoutSetter.setGroupId(
			groupName = ${groupName},
			site = ${site});

		var layoutId = JSONLayoutSetter.setLayoutId(
			groupId = ${groupId},
			layoutName = ${layoutName},
			privateLayout = ${privateLayout});
		var typeSettings = JSONLayoutSetter.setTypeSettings(
			column = ${column},
			embeddedLayoutURL = ${embeddedLayoutURL},
			groupId = ${groupId},
			layoutName = ${layoutName},
			layoutTemplate = ${layoutTemplate},
			privateLayout = ${privateLayout});

		JSONLayoutAPI._updateTypeSettings(
			groupId = ${groupId},
			layoutId = ${layoutId},
			privateLayout = ${privateLayout},
			typeSettings = ${typeSettings});
	}

}