definition {

	macro _getFolderIdByFolderName {
		Variables.assertDefined(parameterList = ${name});

		var portalURL = JSONCompany.getPortalURL();

		if (!(isSet(repositoryId))) {
			var repositoryId = JSONGroupAPI._getSiteIdByGroupKey(groupName = ${groupName});
		}

		if (!(isSet(parentFolderId))) {
			var parentFolderId = 0;
		}

		var userLoginInfo = JSONUtil2.formatJSONUser();

		var curl = '''
			${portalURL}/api/jsonws/dlapp/get-folder \
				-u ${userLoginInfo} \
				-d repositoryId=${repositoryId} \
				-d parentFolderId=${parentFolderId} \
				-d name=${name}
		''';

		var folderId = JSONCurlUtil.post(${curl}, "$.[?(@['name'] == '${name}')]['folderId']");

		if (${folderId} == "") {
			fail("FAIL. Cannot find folder.");
		}
		else {
			return ${folderId};
		}
	}

	macro _getTypeIdByTypeName {
		Variables.assertDefined(parameterList = "${groupName},${documentTypeName}");

		if (!(isSet(site))) {
			var site = "true";
		}

		var portalURL = JSONCompany.getPortalURL();
		var groupId = JSONGroupAPI._getGroupIdByName(
			groupName = ${groupName},
			site = ${site});
		var userLoginInfo = JSONUtil2.formatJSONUser();

		var curl = '''
			${portalURL}/api/jsonws/dlfileentrytype/get-file-entry-types \
				-u ${userLoginInfo} \
				-d groupIds=${groupId}
		''';

		var typeId = JSONCurlUtil.post(${curl}, "$.[?(@['nameCurrentValue'] == '${documentTypeName}')]['fileEntryTypeId']");

		if (${typeId} == "") {
			fail("FAIL. Cannot find type.");
		}
		else {
			return ${typeId};
		}
	}

}