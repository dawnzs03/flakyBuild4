definition {

	macro addFragmentCollection {
		Variables.assertDefined(parameterList = ${name});

		var groupId = JSONFragmentSetter.setGroupId(
			groupKey = ${groupKey},
			groupName = ${groupName},
			site = ${site});

		JSONFragmentAPI._addFragmentCollection(
			description = ${description},
			groupId = ${groupId},
			name = ${name});
	}

	macro addSection {
		Variables.assertDefined(parameterList = "${collectionName},${name}");

		var groupId = JSONFragmentSetter.setGroupId(
			groupKey = ${groupKey},
			groupName = ${groupName},
			site = ${site});

		var collectionId = JSONFragmentSetter.setCollectionId(
			collectionName = ${collectionName},
			groupId = ${groupId});
		var configuration = JSONFragmentSetter.setConfiguration(configuration = ${configuration});
		var html = JSONFragmentSetter.setHTML(html = ${html});
		var status = JSONFragmentSetter.setStatus(fragmentStatus = ${fragmentStatus});
		var type = JSONFragmentSetter.setType(type = ${type});

		var fragmentEntryId = JSONFragmentAPI._addSection(
			collectionId = ${collectionId},
			configuration = ${configuration},
			groupId = ${groupId},
			html = ${html},
			name = ${name},
			status = ${status},
			type = ${type});

		return ${fragmentEntryId};
	}

	macro assertFragmentCollectionInGroup {
		Variables.assertDefined(parameterList = ${collectionName});

		var groupId = JSONFragmentSetter.setGroupId(
			groupKey = ${groupKey},
			groupName = ${groupName},
			site = ${site});

		var collectionNameResult = JSONFragmentAPI._getCollectionName(
			collectionName = ${collectionName},
			groupId = ${groupId});

		if (${collectionNameResult} == "") {
			fail("The collection ${collectionName} was not found.");
		}
	}

	macro assertFragmentCollectionNotInGroup {
		Variables.assertDefined(parameterList = ${collectionName});

		var groupId = JSONFragmentSetter.setGroupId(
			groupKey = ${groupKey},
			groupName = ${groupName},
			site = ${site});

		var collectionNameResult = JSONFragmentAPI._getCollectionName(
			collectionName = ${collectionName},
			groupId = ${groupId});

		if (${collectionNameResult} != "") {
			fail("The collection ${collectionName} was found.");
		}
	}

	macro assertFragmentInGroup {
		Variables.assertDefined(parameterList = "${collectionName},${fragmentName}");

		var groupId = JSONFragmentSetter.setGroupId(
			groupKey = ${groupKey},
			groupName = ${groupName},
			site = ${site});

		var fragmentCollectionId = JSONFragmentSetter.setCollectionId(
			collectionName = ${collectionName},
			groupId = ${groupId});

		var fragmentNameResult = JSONFragmentAPI._getFragmentName(
			fragmentCollectionId = ${fragmentCollectionId},
			fragmentName = ${fragmentName},
			groupId = ${groupId});

		if (${fragmentNameResult} == "") {
			fail("The fragment ${fragmentName} was not found.");
		}
	}

	macro assertFragmentNotInGroup {
		Variables.assertDefined(parameterList = "${collectionName},${fragmentName}");

		var groupId = JSONFragmentSetter.setGroupId(
			groupKey = ${groupKey},
			groupName = ${groupName},
			site = ${site});

		var fragmentCollectionId = JSONFragmentSetter.setCollectionId(
			collectionName = ${collectionName},
			groupId = ${groupId});

		var fragmentNameResult = JSONFragmentAPI._getFragmentName(
			fragmentCollectionId = ${fragmentCollectionId},
			fragmentName = ${fragmentName},
			groupId = ${groupId});

		if (${fragmentNameResult} != "") {
			fail("The fragment ${fragmentName} was found.");
		}
	}

	macro deleteFragmentCollection {
		Variables.assertDefined(parameterList = "${groupName},${name}");

		var groupId = JSONFragmentSetter.setGroupId(
			groupName = ${groupName},
			site = ${site});

		var collectionId = JSONFragmentSetter.setCollectionId(
			collectionName = ${name},
			groupId = ${groupId});

		JSONFragmentAPI._deleteCollection(collectionId = ${collectionId});
	}

}