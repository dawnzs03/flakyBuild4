definition {

	macro addFields {
		LexiconEntry.gotoAdd();

		for (var key_fieldItem : list ${key_fieldList}) {
			Check.checkNotVisible(
				checkboxName = ${key_fieldItem},
				locator1 = "Checkbox#ANY_CHECKBOX");
		}

		Button.clickSave();
	}

	macro assertDataSetEntry {
		for (var key_dataSetName : list ${key_dataSetNameList}) {
			AssertElementPresent(
				key_itemName = ${key_dataSetName},
				locator1 = "DataSet#TABLE_CELL");
		}
	}

	macro assertDataSetView {
		for (var key_dataSetViewName : list ${key_dataSetViewNameList}) {
			AssertElementPresent(
				entryName = ${key_dataSetViewName},
				locator1 = "DataSet#DATA_SET_VIEW_ENTRY_NAME");
		}
	}

	macro assertDataSetViewDescription {
		for (var key_dataSetViewDescription : list ${key_dataSetViewDescriptionList}) {
			AssertElementPresent(
				key_description = ${key_dataSetViewDescription},
				locator1 = "DataSet#DATA_SET_VIEW_DESCRIPTION");
		}
	}

	macro assertFieldsChecked {
		for (var key_fieldItem : list ${key_fieldList}) {
			Check.checkNotVisible(
				checkboxName = ${key_fieldItem},
				locator1 = "Checkbox#ANY_CHECKBOX");
		}
	}

	macro assertFieldsNotChecked {
		for (var key_fieldItem : list ${key_fieldList}) {
			AssertNotChecked.assertNotCheckedNotVisible(
				checkboxName = ${key_fieldItem},
				locator1 = "Checkbox#ANY_CHECKBOX");
		}
	}

	macro assertFieldsOnTable {
		AssertElementPresent(
			key_position = ${key_position},
			keyName = ${keyName},
			locator1 = "DataSet#FIELDS_TABLE");
	}

	macro assertSearchFilters {
		for (var key_filterType : list ${key_filterList}) {
			AssertElementPresent(
				locator1 = "DataSet#FILTER_BY_SELECT",
				value1 = ${key_filterList});
		}
	}

	macro changePagination {
		Click(locator1 = "DataSet#ITEMS_PER_PAGE_SELECT");

		MenuItem.click(menuItem = ${itemsPerPage});
	}

	macro changePaginationDefaultItems {
		Type(
			locator1 = "DataSet#PAGINATION_DEFAULT_ITEMS",
			value1 = ${defaultPagination});
	}

	macro changePaginationItems {
		Type(
			locator1 = "DataSet#PAGINATION_LIST_OF_ITEMS",
			value1 = ${paginationItems});
	}

	macro checkFields {
		for (var key_fieldItem : list ${key_fieldList}) {
			Check.checkNotVisible(
				checkboxName = ${key_fieldItem},
				locator1 = "Checkbox#ANY_CHECKBOX");
		}
	}

	macro createAndConfigureDataSetEntry {
		DataSetAdmin.goToDataSetAdminPage();

		DataSetAdmin.createDataSetEntryViaAPI(
			dataSetName = ${dataSetName},
			restApplication = ${restApplication},
			restEndpoint = ${restEndpoint},
			restSchema = ${restSchema});

		Refresh();

		DataSetAdmin.goToViews(dataSetName = ${dataSetName});

		DataSetAdmin.createDataSetView(
			description = ${dataSetViewDescription},
			key_name = ${dataSetViewName});

		DataSetAdmin.goToSpecificViewPage(
			dataSetName = ${dataSetName},
			key_viewName = ${dataSetViewName});

		if (isSet(key_fieldList)) {
			DataSetAdmin.goToTab(tabName = "Fields");

			DataSetAdmin.addFields(key_fieldList = ${key_fieldList});

			Button.clickSave();
		}

		if (isSet(key_ListItemsPerPage)) {
			DataSetAdmin.goToTab(tabName = "Pagination");

			Type(
				key_label = "List of Items per Page",
				locator1 = "Gmail#GMAIL_HTML_MODE_MESSAGE_QUICK_REPLY_FIELD",
				value1 = ${key_ListItemsPerPage});

			Type(
				key_type = "Default Items per Page",
				locator1 = "DataSet#EDIT_DATA_SET_VIEW",
				value1 = ${key_DefaultItemsperPage});

			Button.clickSave();
		}
	}

	macro createASort {
		LexiconEntry.gotoAdd();

		Select(
			locator1 = "DataSet#FIELD_SELECT",
			value1 = ${key_field});

		Select(
			locator1 = "DataSet#SORTING_SELECT",
			value1 = ${key_sorting});

		Click(locator1 = "DataSet#MODAL_SAVE_BUTTON");
	}

	macro createDataSet {
		if (isSet(key_name)) {
			var key_dataSetNameList = ${key_name};
		}

		for (var key_dataSetName : list ${key_dataSetNameList}) {
			LexiconEntry.gotoAdd();

			Type(
				locator1 = "TextInput#NAME",
				value1 = ${key_dataSetName});

			DataSetAdmin.selectProvider(key_type = ${key_type});

			WaitForVisible(
				locator1 = "ObjectPortlet#FIELD_LABEL_NAME",
				value1 = "REST Schema");

			PortletEntry.save();
		}
	}

	macro createDataSetEntryViaAPI {
		if (${restApplication} == "/data-set-manager/entries") {
			var restSchema = "FDSEntry";
			var restEndpoint = "/";
		}

		JSONDataSet._createDataSetEntry(
			dataSetName = ${dataSetName},
			restApplication = ${restApplication},
			restEndpoint = ${restEndpoint},
			restSchema = ${restSchema});
	}

	macro createDataSetView {
		if (isSet(key_name)) {
			var key_dataSetViewNameList = ${key_name};
		}

		for (var key_dataSetViewName : list ${key_dataSetViewNameList}) {
			LexiconEntry.gotoAdd();

			Type(
				locator1 = "TextInput#NAME",
				value1 = ${key_dataSetViewName});

			Type(
				locator1 = "DataSet#NEW_DATA_SET_VIEW_DESCRIPTION",
				value1 = ${description});

			PortletEntry.save();
		}
	}

	macro createFDSViewViaAPI {
		for (var key_dataSetViewName : list ${key_dataSetViewNameList}) {
			JSONDataSet._createFDSViewViaAPI(
				dataSetName = ${dataSetName},
				dataSetViewDescription = ${dataSetViewDescription},
				dataSetViewName = ${key_dataSetViewName});
		}
	}

	macro createFilters {
		for (var key_filterType : list ${key_filterList}) {
			LexiconEntry.gotoAdd();

			Select(
				locator1 = "DataSet#FILTER_BY_SELECT",
				value1 = ${key_filterType});

			Click(
				key_text = "Save",
				locator1 = "CP2ActivationKeys#KEY_DEACTIVATION_TERMS");
		}
	}

	macro deleteAllDataSetEntries {
		DataSetAdmin.goToDataSetAdminPage();

		if (IsElementPresent(key_itemName = "", locator1 = "DataSet#TABLE_CELL")) {
			JSONDataSet._deleteFDSEntry();

			Refresh();
		}

		AssertElementPresent(
			locator1 = "Message#EMPTY_STATE_INFO",
			value1 = "No Results Found");
	}

	macro deleteAllDataSetViews {
		var dataSetViewsIdList = JSONDataSet._getDataSetViewsIds();

		if (${dataSetViewsIdList} != "") {
			JSONDataSet._deleteFDSViews();
		}
		else {
			echo("No DataSets Views to be deleted");
		}
	}

	macro deleteDataSet {
		Click(
			key_entry = ${entry},
			locator1 = "ObjectPortlet#ENTRY_KEBAB_MENU");

		ClickNoError(locator1 = "ObjectPortlet#DELETE_ENTRY_BUTTON");

		AssertElementPresent(
			key_modalText = "Deleting a data set is an action that cannot be reversed. The content will be deleted and some data set fragments may not be displayed.",
			locator1 = "DataSet#DELETE_DATA_SET_MODAL_BODY");

		Button.clickDelete();
	}

	macro deleteDataSetView {
		Click(
			key_name = ${viewName},
			locator1 = "DataSet#DATA_SET_VIEW_ENTRY_KEBAB_MENU");

		ClickNoError(locator1 = "ObjectPortlet#DELETE_ENTRY_BUTTON");

		AssertElementPresent(
			key_modalText = "Deleting a data set view is an action that cannot be reversed. The content will be deleted and some data set fragments may not be displayed.",
			locator1 = "DataSet#DELETE_DATA_SET_MODAL_BODY");

		Button.clickDelete();
	}

	macro deleteDataSetViewsFields {
		Click(
			key_fieldName = ${fieldName},
			locator1 = "DataSet#VERTICAL_ELLIPSIS_BY_FIELDS_NAME");

		ClickNoError(locator1 = "ObjectPortlet#DELETE_ENTRY_BUTTON");

		AssertElementPresent(
			key_modalText = "Are you sure you want to delete this field? It will be removed immediately. Fragments using it will be affected. This action cannot be undone.",
			locator1 = "DataSet#DELETE_DATA_SET_MODAL_BODY");

		Button.clickDelete();

		Alert.viewSuccessMessage();
	}

	macro deleteDataSetViewViaAPI {
		var dataSetViewsIdList = JSONDataSet._getDataSetViewIdByName(dataSetViewsNameList = ${dataSetViewsNameList});

		echo(${dataSetViewsIdList});

		JSONDataSet._deleteFDSViews(dataSetViewsIdList = ${dataSetViewsIdList});

		Refresh();
	}

	macro deleteSorting {
		var key_rowPosition = ${key_rowPosition};

		Click(
			key_rowPosition = ${key_entryPosition},
			locator1 = "DataSet#ENTRY_ELLIPSIS_BUTTON_BY_POSITION");

		Click(
			key_itemName = "Delete",
			locator1 = "FormFields#FIELD_DROPDOWN_ITEM");

		Button.click(button = "Delete");

		Alert.viewSuccessMessage();
	}

	macro editSorting {
		var key_entryPosition = ${key_entryPosition};
		var key_sortingOption = ${key_sortingOption};

		Click(
			key_rowPosition = ${key_entryPosition},
			locator1 = "DataSet#ENTRY_ELLIPSIS_BUTTON_BY_POSITION");

		Click(
			key_itemName = "Edit",
			locator1 = "FormFields#FIELD_DROPDOWN_ITEM");

		Type(
			locator1 = "DataSet#SORTING_SELECT",
			value1 = ${key_sortingOption});

		Click(locator1 = "DataSet#MODAL_SAVE_BUTTON");

		Alert.viewSuccessMessage();
	}

	macro editView {
		Click(
			key_name = ${key_oldName},
			locator1 = "DataSet#DATA_SET_VIEW_ENTRY_KEBAB_MENU");

		MenuItem.click(menuItem = "Edit");

		Type(
			key_type = "Name",
			locator1 = "DataSet#EDIT_DATA_SET_VIEW",
			value1 = ${key_newName});

		Type(
			key_type = "Description",
			locator1 = "DataSet#EDIT_DATA_SET_VIEW",
			value1 = ${key_newDescription});

		PortletEntry.save();

		Navigator.gotoBack();
	}

	macro goToDataSetAdminPage {
		Navigator.openWithAppendToBaseURL(urlAppend = "group/control_panel/manage?p_p_id=com_liferay_frontend_data_set_views_web_internal_portlet_FDSViewsPortlet");
	}

	macro goToDataSetViewAdminPage {
		var dataSetEntryId = JSONDataSet._getDataSetEntryIdByName(dataSetName = ${dataSetName});

		Navigator.openWithAppendToBaseURL(urlAppend = "group/control_panel/manage?p_p_id=com_liferay_frontend_data_set_views_web_internal_portlet_FDSViewsPortlet&p_p_lifecycle=0&_com_liferay_frontend_data_set_views_web_internal_portlet_FDSViewsPortlet_mvcPath=%2Ffds_views.jsp&_com_liferay_frontend_data_set_views_web_internal_portlet_FDSViewsPortlet_fdsEntryId=${dataSetEntryId}");
	}

	macro goToSpecificViewPage {
		DataSetAdmin.goToDataSetViewAdminPage(dataSetName = ${dataSetName});

		Click(
			key_name = ${key_viewName},
			locator1 = "DataSet#DATA_SET_VIEW_ENTRY_KEBAB_MENU");

		MenuItem.click(menuItem = "Edit");
	}

	macro goToTab {
		if (isSet(dataSetViewName)) {
			Click(
				key_name = ${dataSetViewName},
				locator1 = "DataSet#DATA_SET_VIEW_ENTRY_KEBAB_MENU");

			Click(locator1 = "DataSet#VIEW_ENTRY_BUTTON");
		}

		Click(
			key_tabName = ${tabName},
			locator1 = "DataSet#VIEW_ANY_TAB");
	}

	macro goToViews {
		Click(
			key_entry = ${dataSetName},
			locator1 = "ObjectPortlet#ENTRY_KEBAB_MENU");

		Click(locator1 = "DataSet#VIEW_ENTRY_BUTTON");
	}

	macro searchField {
		WaitForElementPresent(locator1 = "DataSet#FIELDS_TAB_SEARCH");

		AssertElementPresent(locator1 = "Icon#BASIC_SEARCH");

		Type(
			locator1 = "DataSet#FIELDS_TAB_SEARCH",
			value1 = ${searchTerm});
	}

	macro searchFieldInModal {
		WaitForElementPresent(locator1 = "DataSet#MODAL_SEARCH");

		AssertElementPresent(locator1 = "Icon#BASIC_SEARCH");

		Type(
			locator1 = "DataSet#MODAL_SEARCH",
			value1 = ${searchTerm});

		if (!(isSet(modal))) {
			WaitForLiferayEvent.initializeLiferayEventLog();
		}
	}

	macro searchProvider {
		var searchTerm = ${key_provider};

		Click(
			dropdownLabel = "Choose an Option",
			locator1 = "ObjectField#ANY_DROPDOWN_LABEL");

		Type(
			locator1 = "MenuItem#SEARCH_FIELD",
			value1 = ${searchTerm});
	}

	macro selectFilters {
		Select(
			locator1 = "DataSet#FILTER_BY_SELECT",
			value1 = ${filterType});
	}

	macro selectPreselectedValue {
		Select(
			locator1 = "DataSet#SOURCE_OPTIONS_SELECT",
			value1 = ${picklist});

		Type(
			key_fieldName = "Select a default value for your filter.",
			locator1 = "ObjectCustomViews#FROM_DATE_INPUT",
			value1 = ${preselectType});

		Click(
			key_sortOption = ${key_sortOption},
			locator1 = "ObjectCustomViews#SORT_OPTION",
			value1 = ${key_sortOption});

		Click(
			key_text = "Save",
			locator1 = "CP2ActivationKeys#KEY_DEACTIVATION_TERMS");
	}

	macro selectProvider {
		Click(
			dropdownLabel = "Choose an Option",
			locator1 = "ObjectField#ANY_DROPDOWN_LABEL");

		Click(
			locator1 = "FrontendDataSet#SELECT_TYPE_PROVIDER",
			value1 = ${key_type});
	}

	macro uncheckFields {
		for (var key_fieldItem : list ${key_fieldList}) {
			Uncheck.uncheckNotVisible(
				checkboxName = ${key_fieldItem},
				locator1 = "Checkbox#ANY_CHECKBOX");
		}
	}

}