definition {

	macro assertEngineVendorAndVersions {
		AssertTextEquals.assertPartialText(
			locator1 = "SearchAdmin#SEARCH_ENGINE_VENDOR",
			value1 = ${engineVendor});

		AssertTextEquals.assertPartialText(
			locator1 = "SearchAdmin#CLIENT_VERSION",
			value1 = ${clientVersion});

		Panel.expandPanel(panel = "Nodes (1)");

		AssertTextEquals.assertPartialText(
			locator1 = "SearchAdmin#SERVER_VERSION",
			value1 = ${serverVersion});
	}

	macro executeReindex {
		SearchAdministration.openIndexActions();

		AssertTextEquals(
			locator1 = "Portlet#HEADER",
			value1 = "Search");

		if (isSet(reindexMode)) {
			Click(locator1 = "SearchAdmin#REINDEX_MODE_DROPDOWN");

			Click(
				key_reindexMode = ${reindexMode},
				locator1 = "SearchAdmin#REINDEX_MODE_DROPDOWN_ITEM");
		}

		if (${executionScope} == "All Instances") {
			Check.checkNotVisible(
				locator1 = "Radio#ANY",
				radioLabel = ${executionScope});

			AssertElementNotPresent(
				key_executionScope = "System",
				locator1 = "SearchAdmin#SELECTED_INSTANCE_INDEX_CHECKBOX");
		}
		else if (isSet(executionScope)) {
			Check.checkNotVisible(
				locator1 = "Radio#ANY",
				radioLabel = "Selected Instances");

			Check.checkNotVisible(
				key_executionScope = ${executionScope},
				locator1 = "SearchAdmin#SELECTED_INSTANCE_INDEX_CHECKBOX");
		}

		var searchEngineVendor = SearchAdministration.getSearchEngineVendor();

		while ((!(isSet(retryReindex)) || (${retryReindex} == "true")) && (maxIterations = "2")) {
			if (isSet(action)) {
				Click(
					key_action = ${action},
					locator1 = "SearchAdmin#EXECUTE_REINDEX_BUTTON");
			}
			else if (isSet(reindexMode)) {
				Click(
					key_action = "All Search Indexes",
					locator1 = "SearchAdmin#EXECUTE_REINDEX_BUTTON");
			}
			else {
				Click(
					key_action = "Reindex Search Indexes",
					locator1 = "SearchAdmin#EXECUTE_REINDEX_BUTTON");
			}

			if (IsElementPresent.isElementPresentNoSPARefresh(key_text = "Execute", locator1 = "Modal#MODAL_FOOTER_BUTTON")) {
				Click(
					key_text = "Execute",
					locator1 = "Modal#MODAL_FOOTER_BUTTON");
			}

			var retryReindex = SearchAdministration.waitForReindexFinished(waitForReindexRequest = "true");
		}
	}

	macro getSearchEngineVendor {
		var liferayHome = PropsUtil.get("liferay.home.dir.name");

		var solrDirExists = FileUtil.exists("${liferayHome}/solr-8.11.1");

		if (${solrDirExists} == "true") {
			return "Solr";
		}
		else {
			return "Elasticsearch";
		}
	}

	macro getServerVersion {
		SearchAdministration.openSearchAdmin();

		Panel.expandPanel(panel = "Nodes (1)");

		var serverVersion = selenium.getText("SearchAdmin#SERVER_VERSION");

		return ${serverVersion};
	}

	macro openFieldMappings {
		Navigator.openWithAppendToBaseURL(
			baseURL = ${baseURL},
			urlAppend = "group/control_panel/manage?p_p_id=com_liferay_portal_search_admin_web_portlet_SearchAdminPortlet&_com_liferay_portal_search_admin_web_portlet_SearchAdminPortlet_tabs1=field-mappings");
	}

	macro openIndexActions {
		Navigator.openWithAppendToBaseURL(
			baseURL = ${baseURL},
			urlAppend = "group/control_panel/manage?p_p_id=com_liferay_portal_search_admin_web_portlet_SearchAdminPortlet&_com_liferay_portal_search_admin_web_portlet_SearchAdminPortlet_tabs1=index-actions");
	}

	macro openSearchAdmin {
		Navigator.openWithAppendToBaseURL(
			baseURL = ${baseURL},
			urlAppend = "group/control_panel/manage?p_p_id=com_liferay_portal_search_admin_web_portlet_SearchAdminPortlet");
	}

	macro waitForReindexFinished {
		var searchEngineVendor = SearchAdministration.getSearchEngineVendor();

		if (contains(${searchEngineVendor}, "Elasticsearch")) {
			var port = Elasticsearch.getServerPort();
			var portalHostname = PropsUtil.get("portal.hostname");

			var curl = "http://${portalHostname}:${port}/_tasks";
		}

		var reindexElapsedTime = 0;
		var reindexStartTime = 0;
		var waitForReindexRequest = ${waitForReindexRequest};

		if (contains(${searchEngineVendor}, "Elasticsearch")) {
			if (${waitForReindexRequest} == "true") {
				while (!(contains(${elasticsearchTasks}, "indices:data/write/bulk")) && (${reindexStartTime} != 60)) {
					Pause.pauseNoSPARefresh(locator1 = 1000);

					var reindexStartTime = ${reindexStartTime} + 1;

					echo("Current Elasticsearch Tasks:");

					var elasticsearchTasks = JSONCurlUtil.get(${curl});
				}

				if (${reindexStartTime} == 60) {
					echo("Elasticsearch failed to receive reindex request after 60 seconds.");
				}
				else {
					echo("Started reindexing ${reindexStartTime} second(s) after clicking 'Execute'.");
				}
			}

			while (((contains(${elasticsearchTasks}, "indices:data/write/bulk") || (IsElementPresent.isElementPresentNoSPARefresh(locator1 = "Search#REINDEX_IN_PROGRESS_INDICATOR")) || (IsElementPresent.isElementPresentNoSPARefresh(locator1 = "//html[contains(@class,'lfr-spa-loading')]"))) && (${reindexElapsedTime} != 240)) && (maxIterations = "24")) {
				Pause.pauseNoSPARefresh(locator1 = 10000);

				var reindexElapsedTime = ${reindexElapsedTime} + 10;

				echo("Current Elasticsearch Tasks:");

				var elasticsearchTasks = JSONCurlUtil.get(${curl});
			}
		}
		else if (contains(${searchEngineVendor}, "Solr")) {
			while ((IsElementNotPresent(locator1 = "Search#REINDEX_IN_PROGRESS_INDICATOR")) && (${reindexStartTime} != 60)) {
				Pause.pauseNoSPARefresh(locator1 = 1000);

				var reindexStartTime = ${reindexStartTime} + 1;
			}

			if (${reindexStartTime} == 60) {
				echo("Solr failed to receive reindex request after 60 seconds.");
			}
			else {
				echo("Started reindexing ${reindexStartTime} second(s) after clicking 'Execute'.");
			}

			while ((((IsElementPresent.isElementPresentNoSPARefresh(locator1 = "Search#REINDEX_IN_PROGRESS_INDICATOR")) || (IsElementPresent.isElementPresentNoSPARefresh(locator1 = "//html[contains(@class,'lfr-spa-loading')]"))) && (${reindexElapsedTime} != 240)) && (maxIterations = "24")) {
				Pause.pauseNoSPARefresh(locator1 = 10000);

				var reindexElapsedTime = ${reindexElapsedTime} + 10;
			}
		}

		if ((${reindexElapsedTime} == 0) && (${waitForReindexRequest} == "true")) {
			echo("Elasticsearch failed to receive reindex request.");

			takeScreenshot();

			Refresh();

			return "true";
		}
		else if (${reindexElapsedTime} == 240) {
			echo("Reindex timed out after 240 seconds.");

			takeScreenshot();

			Refresh();

			return "true";
		}
		else {
			echo("Finished reindexing after ${reindexElapsedTime} seconds.");

			return "false";
		}
	}

}