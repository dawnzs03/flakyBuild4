@component-name = "portal-solutions"
definition {

	property osgi.modules.includes = "osb-site-initializer-customer-portal";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "OSB Site Initializer Customer Portal";

	var testSiteName = "Customer Portal Site";
	var testSiteURL = "customer-portal-site";
	var testSiteTamplate = "Liferay OSB Site Initializer Customer Portal";
	var testAccount = "Test Account QA 7.4";
	var testUser = "Test Test";
	var testUserFirstName = "Test";
	var testProduct = "DXP";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Customer Portal Site") {
			CustomerPortal.addCustomerPortalSite(siteName = ${testSiteName});
		}

		task ("Add test user access to all Accounts") {
			CustomerPortal.assignUserToOrganization();

			CustomerPortal.addUserToOneOrMoreAccounts(accountsList = ${testAccount});
		}

		task ("Login on OKTA") {
			CustomerPortal.loginOktaToUpdateCP();
		}

		task ("Go to Customer Portal Site") {
			ApplicationsMenu.gotoSite(key_site = ${testSiteName});

			CustomerPortal.waitCP20PageToLoad(userFirstName = ${testUserFirstName});
		}
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		CustomerPortal.customerPortalApisTearDown();

		JSONGroup.deleteGroupByName(groupName = ${testSiteName});

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Story ID: LPS-146061 | Test Summary: Verify success message when the Individual Key is downloaded."
	@ignore = "true"
	@priority = 5
	test AssertSuccessMessageFromIndividualKey {
		property portal.upstream = "quarantine";

		task ("Given I go to the test account") {
			CustomerPortal.search(searchItem = "NASA ICE");

			CustomerPortal.enterOnProject(title = "NASA ICE");
		}

		task ("And I click on DXP product") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = ${testProduct});
		}

		task ("And the key is select from the table") {
			CP2ActivationKeys.selectKeyCheckboxByEnvironmentName(environmentName = "Redacted");
		}

		task ("And clicks on the download button") {
			CustomerPortal.clickAtButton(text = "download");
		}

		task ("Then assert that the alert with the message 'Activation Key Was Downloaded Successfully' is visible") {
			CustomerPortal.viewAlert(alertText = "Activation key was downloaded successfully");
		}
	}

	@description = "Story ID: LPS-146061 | Test summary: Verify that user can see the correct option of download when they select two keys with different expiration dates"
	@ignore = "true"
	@priority = 5
	test AssertThatMultipleIndividualKeysNotAgregatedDownloadOptions {
		property portal.upstream = "quarantine";

		task ("Given I go to the test account") {
			CustomerPortal.search(searchItem = "NASA ICE");

			CustomerPortal.enterOnProject(title = "NASA ICE");
		}

		task ("And I click on DXP product") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = ${testProduct});
		}

		task ("When I select two keys from the table with diferent Expiration Date") {
			CP2ActivationKeys.selectKeyCheckboxByExpirationDate(
				date = "Sep 08, 2022",
				position = 1);

			CP2ActivationKeys.selectKeyCheckboxByExpirationDate(
				date = "DNE",
				position = 1);
		}

		task ("And click at the download button") {
			CustomerPortal.clickAtButton(text = "download");
		}

		task ("And the option 'Aggregate key single file' is disabled") {
			CP2ActivationKeys.assertDropdownItemIsDisabled(dropdownItem = "Aggregate Key single file");
		}

		task ("And the option 'Individual keys multiple files' is enabled") {
			CP2ActivationKeys.assertDropdownItemIsEnabled(dropdownItem = "Individual Keys multiple files");
		}

		task ("When click at the 'Individual keys multiple files' option") {
			CP2ActivationKeys.clickAtDropdownItem(dropdownItem = "Individual Keys multiple files");
		}

		task ("Then assert that the alert with the message 'Activation Key(s) was downloaded successfully as zip file.' is visible") {
			CustomerPortal.viewAlert(alertText = "Activation Key(s) was downloaded successfully as zip file.");
		}
	}

	@description = "Story ID: LPS-146061 | Test Summary: Verify that user can see the correct option of download when they select two keys with the same expiration date."
	@ignore = "true"
	@priority = 5
	test AssertThetMultipleIndividualKeysAgregatedDownloadOptions {
		property portal.upstream = "quarantine";

		task ("Given the user go to the test account") {
			CustomerPortal.search(searchItem = "NASA ICE");

			CustomerPortal.enterOnProject(title = "NASA ICE");
		}

		task ("And click on DXP product") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = ${testProduct});
		}

		task ("And filter the table by On-Premise key type") {
			CP2ActivationKeys.filterKeyTable(
				filterOption = "On-Premise",
				filterType = "Key Type");
		}

		task ("When select two keys from the table with same Expiration Date") {
			CP2ActivationKeys.selectKeyCheckboxByExpirationDate(
				date = "Sep 08, 2022",
				position = 1);

			CP2ActivationKeys.selectKeyCheckboxByExpirationDate(
				date = "Sep 08, 2022",
				position = 2);
		}

		task ("And click at the download button") {
			CustomerPortal.clickAtButton(text = "download");
		}

		task ("And assert the 'Aggregate key single file' option is enabled") {
			CP2ActivationKeys.assertDropdownItemIsEnabled(dropdownItem = "Aggregate Key single file");
		}

		task ("And click at the 'Aggregate key single file' option") {
			CP2ActivationKeys.clickAtDropdownItem(dropdownItem = "Aggregate Key single file");
		}

		task ("Then assert that the alert with the message 'Activation Key Was Downloaded Successfully' is visible") {
			CustomerPortal.viewAlert(alertText = "Activation Key was downloaded successfully");
		}
	}

}