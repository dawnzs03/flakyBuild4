definition {

	macro assertChangeRole {
		AssertElementPresent(
			key_email = ${email},
			key_role = ${role},
			locator1 = "CP2Utils#ROLE");
	}

	macro assertDropdownList {
		for (var options : list ${optionList}) {
			var key_option = ${options};

			AssertVisible(locator1 = "CP2Utils#DROPDOWN_OPTIONS");
		}
	}

	macro assertDropdownSubscriptionTermsList {
		Click(locator1 = "CP2Subscription#SUBSCRIPTION_TERM_DROPDOWN_BUTTON");

		AssertVisible(
			key_number = 0,
			key_options = "Jul 25, 2021 - Jul 24, 2022",
			locator1 = "CP2Subscription#DROPDOWN_OPTIONS");

		AssertVisible(
			key_number = 1,
			key_options = "Jul 25, 2022 - Jul 24, 2023",
			locator1 = "CP2Subscription#DROPDOWN_OPTIONS");

		AssertVisible(
			key_number = 2,
			key_options = "Jul 25, 2023 - Jul 24, 2024",
			locator1 = "CP2Subscription#DROPDOWN_OPTIONS");

		AssertVisible(
			key_number = 3,
			key_options = "Jul 25, 2024 - Jul 24, 2025",
			locator1 = "CP2Subscription#DROPDOWN_OPTIONS");

		AssertVisible(
			key_number = 4,
			key_options = "Jul 25, 2025 - Jul 24, 2026",
			locator1 = "CP2Subscription#DROPDOWN_OPTIONS");
	}

	macro assertNotChangeRole {
		AssertVisible(
			key_role = ${role},
			locator1 = "CP2Utils#ROLE");
	}

	macro assertOrganization {
		AssertElementPresent(
			key_text = ${text},
			locator1 = "CP2Utils#ANY_TEXT");
	}

	macro assertTextVisible {
		var key_text = ${text};

		AssertVisible(locator1 = "CP2Utils#MODAL_TEXT");
	}

	macro assertThatTheOrganizationIsNotPresent {
		AssertElementNotPresent(
			key_text = ${text},
			locator1 = "CP2Utils#ANY_TEXT");
	}

	macro assigneToRoleViaUsersTab {
		if (isSet(searchItem)) {
			Account.openAccountsAdmin();

			CustomerPortal.accountTableProject(title = ${testAccount});

			Navigator.gotoNavTab(navTab = "Users");

			CustomerPortal.search(searchItem = ${searchItem});

			KeyPress(
				locator1 = "CustomerPortalSite#SEARCH",
				value1 = "\ENTER");

			Account.goToEntryMenuItem(
				menuItem = "Assign Roles",
				rowEntry = ${accountUserName});

			SelectFrame(
				key_title = "Assign Roles",
				locator1 = "IFrame#MODAL_ANY");

			Check(
				key_tableEntry = ${accountRoleTitle},
				locator1 = "LexiconTable#TABLE_ENTRY_CHECKBOX");

			SelectFrameTop();

			Button.click(button = "Done");

			Alert.viewSuccessMessage();

			Account.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = ${accountRoleTitle},
				accountUserName = ${accountUserName});
		}
		else {
			Account.openAccountsAdmin();

			CustomerPortal.accountTableProject(title = ${testAccount});

			Account.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = ${accountRoleTitle},
				accountUserName = ${accountUserName});
		}
	}

	macro changeCardStatus {
		var key_text = ${text};

		Click(locator1 = "CustomerPortalSite#SVG_ACTIVATION_STATUS");

		AssertVisible(locator1 = "CustomerPortalSite#SVG_STATUS_OPTION");

		Click(locator1 = "CustomerPortalSite#SVG_STATUS_OPTION");

		CP2Utils.fillInTheProjectId(
			label = ${label},
			value = ${value});

		CustomerPortal.clickAtButton(text = "Confirm");
	}

	macro changeRole {
		Select(
			locator1 = "CP2Utils#SELECT_ROLE",
			value1 = ${role});
	}

	macro clickAtButtonManagerUsers {
		var key_product = ${product};

		Click(locator1 = "CP2Utils#BUTTON_MANAGE_USERS");
	}

	macro clickAtFilterMenu {
		Click.pauseClickAt(
			key_text = ${text},
			locator1 = "CustomerPortalSite#ANY_BUTTON");

		Click.clickNoWaitForVisible(
			key_checkbox = ${checkbox},
			key_menu = ${menu},
			locator1 = "CP2NavigationMenu#FILTER_CHECKBOX");
	}

	macro clickBreadcrumb {
		var key_project = ${project};

		Click(locator1 = "CP2Utils#SVG_DROPDOWN");

		CP2Utils.search(
			project = ${project},
			searchItem = ${project});

		Click(locator1 = "CP2Utils#SVG_DROPDOWN_LIST");
	}

	macro clickInTableKeyByName {
		Click(
			key_text = ${keyName},
			locator1 = "CP2ActivationKeys#RESPONSIVE_TABLE");
	}

	macro closeModal {
		Click(locator1 = "CP2Utils#CLOSE_BUTTON");
	}

	macro deactivateExistingKey {
		CP2ActivationKeys.selectKeyCheckboxByEnvironmentName(key_environmentName = ${environmentName});

		Button.click(button = "Deactivate");

		Button.click(button = "Confirm Deactivate Keys");

		Button.click(button = "Continue");

		Alert.viewSuccessMessage();
	}

	macro deleteActivationStatus {
		ApplicationsMenu.gotoPortlet(
			category = "Object",
			panel = "Control Panel",
			portlet = "Account Subscription Groups");

		CP2Utils.selectPaginationNumber(quantity = 40);

		var key_status = ${status};

		if (IsElementPresent(locator1 = "CustomerPortalSite#DND_TABLE_ELEMENT")) {
			CustomerPortal.viewCPObjectCustomInfo(position = ${position});

			CP2DXPCloudSetup.typeSetupDXPCloudInfoFields(
				label = "activationStatus",
				value = "");

			CP2DXPCloudSetup.typeSetupDXPCloudInfoFields(
				label = "manageContactsURL",
				value = "");

			Click(locator1 = "Button#SAVE");

			Alert.viewSuccessMessage();
		}
	}

	macro deleteSpecificObjectEntry {
		var key_status = ${entry};

		ApplicationsMenu.gotoPortlet(
			category = "Object",
			panel = "Control Panel",
			portlet = ${portlet});

		if (IsElementPresent(locator1 = "CustomerPortalSite#DND_TABLE_ELEMENT")) {
			ObjectPortlet.deleteEntry(entry = ${entry});
		}
	}

	macro fillInTheProjectId {
		Type(
			locator1 = "CustomerPortalSite#FIELD_VALUE",
			value1 = ${value});
	}

	macro fulfillGuestForm {
		CP2Utils.fulfillGuestFormFields(
			fieldInput = ${email},
			fieldName = "Contact Email Address",
			typeField = "true");

		CP2Utils.fulfillGuestFormFields(
			fieldInput = ${companyName},
			fieldName = "Company Name",
			typeField = "true");

		CP2Utils.fulfillGuestFormFields(
			fieldInput = ${supportRegion},
			fieldName = "Support Region");

		KeyPress(
			key_option = "Sup",
			locator1 = "CP2Utils#GUEST_FORM_OPTIONS",
			value1 = "\ENTER");

		CP2Utils.fulfillGuestFormFields(
			fieldInput = ${explainField},
			fieldName = "Please explain why you need a replacement activation key",
			typeField = "true");

		CP2Utils.fulfillGuestFormFields(
			fieldInput = ${typeOfServer},
			fieldName = "Type of Server");

		KeyPress(
			key_option = "Server",
			locator1 = "CP2Utils#GUEST_FORM_OPTIONS",
			value1 = "\ENTER");

		CP2Utils.fulfillGuestFormFields(
			fieldInput = ${clustered},
			fieldName = "Clustered?");

		KeyPress(
			key_option = "Clustered",
			locator1 = "CP2Utils#GUEST_FORM_OPTIONS",
			value1 = "\ENTER");

		Click.clickNoWaitForVisible(
			key_fieldName = "acknowledgement",
			locator1 = "Checkbox#CHECKBOX_NAME");

		if (isSet(submit)) {
			Button.click(button = "Submit");
		}
	}

	macro fulfillGuestFormFields {
		if (isSet(typeField)) {
			Type(
				key_fieldsname = ${fieldName},
				locator1 = "CP2Utils#GUEST_FORM_FIELDS",
				value1 = ${fieldInput});
		}
		else {
			Type(
				key_option = ${fieldName},
				locator1 = "CP2Utils#GUEST_FORM_OPTIONS",
				value1 = ${fieldInput});
		}
	}

	// Workaround for LPS-168369

	macro goToCustomerPortalSiteWithRefresh {
		ApplicationsMenu.gotoSite(key_site = "Customer Portal Site");

		Refresh();
	}

	macro goToDXPProductAndAssertAction {
		CP2NavigationMenu.goToProductActivation();

		CP2NavigationMenu.clickOnProductButton(product = "DXP");

		CP2Utils.onlySeeExportAllKeys(text = "Actions");
	}

	macro onboardingFlow {
		Button.click(button = "Start Project Setup");

		Button.click(button = "Skip for now");

		Button.click(button = "Skip for now");
	}

	macro onlySeeExportAllKeys {
		WaitForVisible(
			key_text = "Redacted",
			locator1 = "CP2ActivationKeys#RESPONSIVE_TABLE");

		CustomerPortal.clickAtButton(text = ${text});

		if (IsElementPresent(key_text = "Generate New", locator1 = "CP2ActivationKeys#ACTIONS_DROPDOWN")) {
			AssertVisible(
				key_action = "Export All Key Details (csv)",
				locator1 = "CP2ActivationKeys#ACTIONS_DROPDOWN");
		}
		else {
			for (var actions : list "Generate New,Deactivate") {
				AssertElementNotPresent(
					key_text = ${actions},
					locator1 = "CP2ActivationKeys#ACTIONS_DROPDOWN");
			}
		}
	}

	macro openActionMenu {
		Click(
			key_text = ${openUser},
			locator1 = "Icon#SPECIFIC_ELLIPSIS");

		MenuItem.click(menuItem = ${menuItem});
	}

	macro search {
		if (IsElementPresent(locator1 = "CP2Utils#PROJECT_SEARCH")) {
			Type(
				locator1 = "CP2Utils#PROJECT_SEARCH",
				value1 = ${searchItem});
		}
	}

	macro searchForKeyInTable {
		WaitForElementPresent(locator1 = "CustomerPortalSite#SEARCH");

		Type(
			locator1 = "CustomerPortalSite#SEARCH",
			value1 = ${environmentName});

		KeyPress(
			locator1 = "CustomerPortalSite#SEARCH",
			value1 = "\ENTER");
	}

	macro searchKeys {
		Click(locator1 = "CP2NavigationMenu#SEARCH_FILTER");

		Type(
			locator1 = "CP2NavigationMenu#SEARCH_FILTER",
			value1 = ${searchinput});

		KeyPress(
			locator1 = "CP2NavigationMenu#SEARCH_FILTER",
			value1 = "\ENTER");
	}

	macro selectPaginationNumber {
		if (IsElementPresent(locator1 = "CP2ActivationKeys#PAGINATION_BUTTON")) {
			Click(locator1 = "CP2ActivationKeys#PAGINATION_BUTTON");

			AssertVisible(
				key_quantity = ${quantity},
				locator1 = "CP2Utils#PAGINATION_BUTTON_ITEM");

			Click(
				key_quantity = ${quantity},
				locator1 = "CP2Utils#PAGINATION_BUTTON_ITEM");
		}
	}

	macro tearDownForCloudEntries {
		if (!(isSet(entry))) {
			var entry = "ERC-001";
		}

		if (!(isSet(entry1))) {
			var entry1 = "test@liferay.com";
		}

		if (!(isSet(portlet))) {
			var portlet = "DXP Cloud Environments";
		}

		if (!(isSet(portlet1))) {
			var portlet1 = "Admins DXP Cloud";
		}

		CustomerPortal.clearStatus(status = ${status});

		CP2Utils.deleteSpecificObjectEntry(
			entry = ${entry},
			portlet = ${portlet});

		CP2Utils.deleteSpecificObjectEntry(
			entry = ${entry1},
			portlet = ${portlet1});
	}

	macro typeSetupInfoFields {
		if (!(isSet(position))) {
			var position = 1;
		}

		var key_index = ${position};

		Type(
			locator1 = "CustomerPortalSite#SETUP_FIELDS",
			value1 = ${value});
	}

	macro unassignUserRole {
		Account.openAccountsAdmin();

		CustomerPortal.accountTableProject(title = ${testAccount});

		Account.unassignUserRole(
			accountRoleTitle = ${accountRoleTitle},
			accountUserName = ${accountUserName});
	}

	// Workaround for LPS-149449

	macro typeLinkForTheConsoleLiferayCloud {
		ApplicationsMenu.gotoPortlet(
			category = "Object",
			panel = "Control Panel",
			portlet = "Account Subscription Groups");

		// Refresh added due to portal instability

		Refresh();

		var key_status = ${status};

		Search.searchCP(searchTerm = ${key_status});

		if (IsElementPresent(key_accountName = ${key_status}, locator1 = "CP2Utils#ANY_ACCOUNT_ELLIPSIS_BUTTON")) {
			Click(
				key_accountName = ${key_status},
				locator1 = "CP2Utils#ANY_ACCOUNT_ELLIPSIS_BUTTON");

			MenuItem.click(menuItem = "View");

			// Refresh added due to portal instability

			Refresh();

			CP2DXPCloudSetup.typeSetupDXPCloudInfoFields(
				label = "manageContactsURL",
				value = "https://console.liferay.cloud");

			Click(locator1 = "Button#SAVE");

			Alert.viewSuccessMessage();
		}
	}

}