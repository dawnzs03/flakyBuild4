@component-name = "portal-solutions"
definition {

	property osgi.modules.includes = "osb-site-initializer-customer-portal";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "OSB Site Initializer Customer Portal";

	var testAccount = "Test Account LXC - SM";
	var testProduct = "LXC - SM";
	var testSiteName = "Customer Portal Site";
	var testSiteURL = "customer-portal-site";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Customer Portal Site") {
			CustomerPortal.addCustomerPortalSite(siteName = ${testSiteName});
		}

		task ("Add test user access to all Accounts") {
			CustomerPortal.assignUserToOrganization();

			CustomerPortal.addUserToOneOrMoreAccounts(accountsList = ${testAccount});
		}
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		CP2Utils.tearDownForCloudEntries();

		CustomerPortal.customerPortalTearDown();

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = ${testSiteName});
		}
	}

	@description = "Automation ID: LPS-146856 | Test Summary: Verify that when the status is active the page displays (Subtitle - Link - Link redirects to another page)"
	@priority = 4
	test AffirmAllTextAndLinksOnThePage {
		task ("Change the user role in the project") {
			Account.openAccountsAdmin();

			CustomerPortal.accountTableProject(title = ${testAccount});

			Account.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Administrator",
				accountUserName = "Test Test");

			Account.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Provisioning",
				accountUserName = "Test Test");
		}

		task ("Given I go to the test account") {
			CP2Utils.goToCustomerPortalSiteWithRefresh();

			CustomerPortal.search(searchItem = ${testAccount});

			CustomerPortal.enterOnProject(title = ${testAccount});
		}

		task ("Going through onboarding") {
			CP2Utils.onboardingFlow();
		}

		task ("Go to the product activation page, fill out the form and submit it") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = ${testProduct});

			CustomerPortal.clickOnFinishActivationButton();

			CP2DXPCloudSetup.typeAllSetupDXPCloudInfoFields(
				dataCenterRegion = "Frankfurt, Germany",
				email = "test@liferay.com",
				firstName = "FirstName",
				github = "GitHub User",
				lastName = "LastName",
				projectId = 001);

			CustomerPortal.clickAtButton(text = "Submit");
		}

		task ("Change the activation card status to Active") {
			CustomerPortal.activeStatusViaDropdown(
				dropdownItem = "Set to Active",
				value = 001);
		}

		task ("Assert that the activation card link has changed") {
			AssertElementPresent(
				locator1 = "CustomerPortalSite#PRODUCT_CONSOLE",
				value1 = "Go to Product Console");
		}

		task ("Access the link and affirm that a new page has opened") {
			CP2DXPCloudSetup.clickOnProductConsoleLink();

			SelectWindow(locator1 = "title=Log in | DXP Cloud");

			AssertElementPresent(locator1 = "CustomerPortalSite#YOUR_ACCOUNT");

			Navigator.closeWindow();
		}
	}

	@description = "Story ID: LPS-144183 | Test Summary: Verify if the status of the activation card can be changed in this way from In Progress to Active"
	@priority = 4
	test AssertChangeOfCardStatusToActive {
		task ("Given that I fill out and send the activation form for card LXC - SM") {
			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = ${testAccount});

			Account.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Administrator",
				accountUserName = "Test Test");

			Account.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Provisioning",
				accountUserName = "Test Test");

			ApplicationsMenu.gotoSite(key_site = ${testSiteName});

			CustomerPortal.search(searchItem = ${testAccount});

			CustomerPortal.enterOnProject(title = ${testAccount});

			Button.click(button = "Start Project Setup");

			Button.click(button = "Skip for now");

			CP2DXPCloudSetup.typeAllSetupDXPCloudInfoFields(
				dataCenterRegion = "Frankfurt, Germany",
				email = "test@liferay.com",
				firstName = "FirstName",
				github = "GitHub User",
				lastName = "LastName",
				projectId = 001);

			Button.click(button = "Submit");

			Button.click(button = "Done");
		}

		task ("And I go to the product page") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = ${testProduct});
		}

		task ("When I activate the card through the dropdown shown on the card") {
			CustomerPortal.activeStatusViaDropdown(
				dropdownItem = "Set to Active",
				value = 001);
		}

		task ("Then I should be able to assert that the status has changed to active") {
			CustomerPortal.viewActivationStatusCardChange(status = "Active");
		}
	}

	@description = "Story ID: LPS-144183 | Test Summary: Verify if you enter a different value for the confirmation ID and send the entry is automatically updated"
	@priority = 3
	test AssertThatTheConfirmationIDHasBeenUpdated {
		task ("Given that I fill out and send the activation form for card LXC - SM") {
			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = ${testAccount});

			Account.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Administrator",
				accountUserName = "Test Test");

			Account.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Provisioning",
				accountUserName = "Test Test");

			ApplicationsMenu.gotoSite(key_site = ${testSiteName});

			CustomerPortal.search(searchItem = ${testAccount});

			CustomerPortal.enterOnProject(title = ${testAccount});

			Button.click(button = "Start Project Setup");

			Button.click(button = "Skip for now");

			CP2DXPCloudSetup.typeAllSetupDXPCloudInfoFields(
				dataCenterRegion = "Frankfurt, Germany",
				email = "test@liferay.com",
				firstName = "FirstName",
				github = "GitHub User",
				lastName = "LastName",
				projectId = 001);

			Button.click(button = "Submit");

			Button.click(button = "Done");
		}

		task ("And I go to the product page") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = ${testProduct});
		}

		task ("And I activate the card through the dropdown shown on the card") {
			CustomerPortal.activeStatusViaDropdown(
				dropdownItem = "Set to Active",
				value = 022);
		}

		task ("When I go to the DXP Cloud Environments object") {
			ApplicationsMenu.gotoPortlet(
				category = "Object",
				panel = "Control Panel",
				portlet = "DXP Cloud Environments");
		}

		task ("Then I should be able to tell that the Project ID has been updated") {
			CustomerPortal.assertTextAtObjectTable(text = 022);
		}
	}

	@description = "Story ID: LPS-144183 | Test Summary: Verify if you cancel the pop-up the card status remains the same"
	@priority = 3
	test AssertThatTheStatusIsTheSameWhenCancelingAnAction {
		task ("Given that I fill out and send the activation form for card LXC - SM") {
			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = ${testAccount});

			Account.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Administrator",
				accountUserName = "Test Test");

			Account.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Provisioning",
				accountUserName = "Test Test");

			ApplicationsMenu.gotoSite(key_site = ${testSiteName});

			CustomerPortal.search(searchItem = ${testAccount});

			CustomerPortal.enterOnProject(title = ${testAccount});

			Button.click(button = "Start Project Setup");

			Button.click(button = "Skip for now");

			CP2DXPCloudSetup.typeAllSetupDXPCloudInfoFields(
				dataCenterRegion = "Frankfurt, Germany",
				email = "test@liferay.com",
				firstName = "FirstName",
				github = "GitHub User",
				lastName = "LastName",
				projectId = 001);

			Button.click(button = "Submit");

			Button.click(button = "Done");
		}

		task ("And I go to the product page") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = ${testProduct});
		}

		task ("When I cancel the card activation") {
			CustomerPortal.activeStatusViaDropdown(dropdownItem = "Set to Active");
		}

		task ("Then I should be able to assert that the card status has not changed") {
			CP2DXPCloudSetup.assertCardStatusChanged(status = "In Progress");
		}

		task ("Clear status") {
			CustomerPortal.clearStatus(status = "In-Progress");
		}
	}

	@description = "Automation ID: LPS-146843 | Test Summary: Verify that the Activation Form Card - DXP Cloud displays (Product logo - Subscription - Start Date - End Date - Page Subtitleis/Not Activated)"
	@ignore = "true"
	@priority = 4
	test AssertTheCardDetails {

		// Needs refactor

		task ("Go to CP2.0 and join a project") {
			CP2Utils.goToCustomerPortalSiteWithRefresh();

			CustomerPortal.enterOnProject(title = ${testAccount});
		}

		task ("Go to the product activation page") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = ${testProduct});
		}

		task ("View card details") {
			CustomerPortal.viewActivationStatusCardValue(
				dates = "Invalid Date - Invalid Date",
				productIcon = "dxp_icon",
				project = ${testAccount},
				status = "Not Activated",
				subtitle = "Almost there! Setup LXC - SM by finishing the activation form");
		}
	}

	@description = "Automation ID: LPS-146852 | Test Summary: Verify if when the status is 'In Progress' the page subtitle: 'Your LXC - SM environments are being set up and will be available soon' appears"
	@priority = 4
	test CanViewCaptionWhenTheStatusIsInProgress {
		task ("Change the user role in the project") {
			Account.openAccountsAdmin();

			CustomerPortal.accountTableProject(title = ${testAccount});

			Account.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Administrator",
				accountUserName = "Test Test");
		}

		task ("Go to CP2.0 and join a project") {
			CP2Utils.goToCustomerPortalSiteWithRefresh();

			CustomerPortal.enterOnProject(title = ${testAccount});
		}

		task ("Going through onboarding") {
			CP2Utils.onboardingFlow();
		}

		task ("Go to the product activation page, fill out the form and submit it") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = ${testProduct});

			CustomerPortal.clickOnFinishActivationButton();

			CP2DXPCloudSetup.typeAllSetupDXPCloudInfoFields(
				dataCenterRegion = "Frankfurt, Germany",
				email = "test@liferay.com",
				firstName = "FirstName",
				github = "GitHub User",
				lastName = "LastName",
				projectId = 001);

			CustomerPortal.clickAtButton(text = "Submit");
		}

		//task ("Assert the card legend change") {
		//	AssertElementPresent(
		//		locator1 = "CustomerPortalSite#CARD_SUBSCRIPTION",
		//		key_text = "Your LXC - SM environments are being set up and will be available soon");
		//}

	}

	@description = "Automation ID: LPS-146849 | Test Summary: Verify if Link 'Finish Activation' hidden to requestor and user roles"
	@priority = 5
	test NoLinkIsDisplayedWhenYouAreARequesterOrUserRoles {
		task ("Given the user go to CP2.0 and join a project") {
			CP2Utils.goToCustomerPortalSiteWithRefresh();

			CustomerPortal.enterOnProject(title = ${testAccount});
		}

		if (IsElementPresent(key_text = "Start Project Setup", locator1 = "Button#ANY")) {
			CP2Utils.onboardingFlow();
		}
		else {
			task ("When go to the product activation page") {
				CP2NavigationMenu.goToProductActivation();

				CP2NavigationMenu.clickOnProductButton(product = ${testProduct});
			}

			task ("Then assert that the Finish Activation link is not present on the card") {
				AssertElementNotPresent(
					locator1 = "CustomerPortalSite#FINISH_ACTIVATION",
					value1 = "Finish Activation");
			}
		}
	}

	@description = "Automation ID: LPS-146848 | Test Summary: Verify if Link 'Finish Activation' only visible to admin roles"
	@priority = 5
	test YouCanSeeTheActivationLinkIfYouAreAdmin {
		task ("Go to CP2.0 and join a project") {
			CP2Utils.goToCustomerPortalSiteWithRefresh();

			CustomerPortal.enterOnProject(title = ${testAccount});
		}

		task ("Go to the product activation page") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = ${testProduct});
		}

		task ("Assert that the card activation link is not shown") {
			AssertElementNotPresent(
				locator1 = "CustomerPortalSite#FINISH_ACTIVATION",
				value1 = "Finish Activation");
		}

		task ("Change the user role in the project") {
			Account.openAccountsAdmin();

			CustomerPortal.accountTableProject(title = ${testAccount});

			Account.addAssigneeToRoleViaUsersTab(
				accountRoleTitle = "Account Administrator",
				accountUserName = "Test Test");
		}

		task ("Go to CP2.0 and join a project") {
			CP2Utils.goToCustomerPortalSiteWithRefresh();

			CustomerPortal.enterOnProject(title = ${testAccount});
		}

		task ("Going through onboarding") {
			CP2Utils.onboardingFlow();
		}

		task ("Go to the product activation page") {
			CP2NavigationMenu.goToProductActivation();

			CP2NavigationMenu.clickOnProductButton(product = ${testProduct});
		}

		task ("Assert that the activation link is present on the card") {
			AssertElementPresent(
				locator1 = "CustomerPortalSite#FINISH_ACTIVATION",
				value1 = "Finish Activation");
		}
	}

}