@component-name = "OSB Site Initializer Partner Portal"
definition {

	property custom.properties = "feature.flag.LPS-135430=true";
	property osgi.modules.includes = "osb-site-initializer-partner-portal";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "OSB Site Initializer Partner Portal";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Partner Portal Site and connect with Salesforce") {
			PRMUtils.addSite();

			PRMUtils.connectWithSalesforce();
		}

		task ("Update the account with Salesforce fields") {
			JSONPRM.updateAccount();
		}

		task ("Assign the users to the account") {
			JSONAccountEntryUser.addExistUsertoAccount(
				accountEntryName = "Company Name 1",
				userEmailAddress = "pmu@partner.com");

			JSONAccountEntryUser.addExistUsertoAccount(
				accountEntryName = "Company Name 1",
				userEmailAddress = "cmm@liferaytest.com");
		}

		task ("Login with the Partner user and create an MDF Request") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "pmu@partner.com",
				userLoginFullName = "Partner Marketing User");

			var requestId = JSONPRM.createMDFRequest(
				accountEntryName = "Company Name 1",
				secondActivityName = "Activity Name 2",
				secondBudgetValueList = 1000,
				userEmailAddress = "pmu@partner.com");
		}

		task ("Login with the Manager user and approves the created MDF") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "cmm@liferaytest.com",
				userLoginFullName = "Channel Marketing Manager");

			JSONPRM.changeMDFStatus(
				mdfStatus = "Approved",
				requestId = ${requestId},
				userEmailAddress = "cmm@liferaytest.com");
		}

		task ("Login with the Partner user and create an MDF Claim") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "pmu@partner.com",
				userLoginFullName = "Partner Marketing User");

			PRMNavigator.openSitePage(pageName = "MDF Requests");

			PRMMDFRequest.goToMDF(campaignName = "Campaign Name");
		}
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			PRMUtils.tearDown();
		}
	}

	@description = "This is a test for LPS-181363. Verify that its possible to unselect an activity when editing"
	@priority = 5
	test CanUnselectClaimedActivity {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that the PMU creates a full claim with two activities") {
			PRMNavigator.openSitePage(pageName = "MDF Requests");

			PRMMDFRequest.goToMDF(campaignName = "Campaign Name");

			PRMMDFClaim.createNewClaim(
				activityIndex = "0,1",
				listLeads = "Document_1.xlsx",
				reimbursementInvoice = "Document_1.png",
				thirdInvoice = "Document_1.jpg");

			task ("The Claim ID is saved in a variable") {
				PRMMDFClaim.getClaimIdOnDetailPage(index = 1);
			}
		}

		task ("And the CMM changes the status to 'More Info Requested'") {
			JSONPRM.changeClaimStatus(
				claimId = ${staticClaimId1},
				claimStatus = "More Info Requested",
				userEmailAddress = "cmm@liferaytest.com");
		}

		task ("When the PMU goes to edit the created claim and unselect the first activity") {
			PRMNavigator.gotoClaim(claimId = ${staticClaimId1});

			PRMMDFClaim.editButton();

			PRMMDFClaim.activityCheckbox(activityIndex = 0);

			Button.clickSubmitButton();

			Alert.viewSuccessMessage();

			PRMNavigator.gotoClaim(claimId = ${staticClaimId1});
		}

		task ("Then the first activity will not be displayed on Claim Detail Page") {
			PRMMDFClaim.viewActivityNotPresent(activityName = "Activity Name 1");
		}

		task ("And the second activity will be displayed on Claim Detail Page") {
			PRMMDFClaim.viewActivityPresent(activityName = "Activity Name 2");
		}
	}

	@description = "This is a test for LPS-183234. Verify that the CFM can edit the claim in 'Claim Paid' status"
	@priority = 5
	test CFMCanEditClaimInClaimdPaidStatus {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that the PMU creates a new claim") {
			PRMNavigator.openSitePage(pageName = "MDF Requests");

			PRMMDFRequest.goToMDF(campaignName = "Campaign Name");

			PRMMDFClaim.createNewClaim(
				allContents = "Document_2.jpg",
				listLeads = "Document_1.xlsx",
				reimbursementInvoice = "Document_1.png",
				telemarketingMetrics = "Metrics Description",
				telemarketingScript = "Document_2.png",
				thirdInvoice = "Document_1.jpg");

			task ("The Claim ID is saved in a variable") {
				PRMMDFClaim.getClaimIdOnDetailPage(index = 1);
			}
		}

		task ("When the CFM goes to the created claim and change the status to 'Claim Paid") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "cfm@liferaytest.com",
				userLoginFullName = "Channel Finance Manager");

			JSONPRM.changeClaimStatus(
				claimId = ${staticClaimId1},
				claimStatus = "In Finance Review",
				userEmailAddress = "cmm@liferaytest.com");

			PRMNavigator.gotoClaim(claimId = ${staticClaimId1});

			PRMMDFClaim.changeClaimStatus(
				amountReceived = 500,
				checkNumber = 001,
				statusButton = "Claim Paid");
		}

		task ("And edit the claim, changing the activity attachment") {
			PRMMDFClaim.editButton();

			PRMMDFClaimEdit.editClaim(
				activityName = "Activity Name",
				newAttachment = "Document_2.jpg");
		}

		task ("And go to the claim detail page") {
			PRMNavigator.gotoClaim(claimId = ${staticClaimId1});

			PRMMDFClaim.activityCollapse(activityName = "Activity Name");
		}

		task ("Then the new attachment is displayed") {
			PRMMDFClaim.viewAttachmentPresent(attachmentName = "Document_2.jpg");
		}

		task ("And the old attachment isn't displayed") {
			PRMMDFClaim.viewAttachmentNotPresent(attachmentName = "Document_1.png");
		}
	}

	@description = "This is a test for LPS-183235. Verify that the CFM can edit the claim in 'In Finance Review' status"
	@priority = 5
	test CFMCanEditClaimInFinanceReviewStatus {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that the partner creates a new claim") {
			PRMNavigator.openSitePage(pageName = "MDF Requests");

			PRMMDFRequest.goToMDF(campaignName = "Campaign Name");

			PRMMDFClaim.createNewClaim(
				listLeads = "Document_1.xlsx",
				reimbursementInvoice = "Document_1.png",
				thirdInvoice = "Document_1.jpg");

			task ("The Claim ID is saved in a variable") {
				PRMMDFClaim.getClaimIdOnDetailPage(index = 1);
			}
		}

		task ("When the CFM goes to the created claim and change the status to 'In Finance Review") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "cfm@liferaytest.com",
				userLoginFullName = "Channel Finance Manager");

			JSONPRM.changeClaimStatus(
				claimId = ${staticClaimId1},
				claimStatus = "In Finance Review",
				userEmailAddress = "cmm@liferaytest.com");

			PRMNavigator.gotoClaim(claimId = ${staticClaimId1});
		}

		task ("And edit the claim, changing the activity attachment") {
			PRMMDFClaim.editButton();

			PRMMDFClaimEdit.editClaim(
				activityName = "Activity Name",
				newAttachment = "Document_2.jpg");
		}

		task ("And go to the claim detail page") {
			PRMNavigator.gotoClaim(claimId = ${staticClaimId1});

			PRMMDFClaim.activityCollapse(activityName = "Activity Name");
		}

		task ("Then the new attachment is displayed") {
			PRMMDFClaim.viewAttachmentPresent(attachmentName = "Document_2.jpg");
		}

		task ("And the old attachment isn't displayed") {
			PRMMDFClaim.viewAttachmentNotPresent(attachmentName = "Document_1.png");
		}
	}

	@description = "This is a test for LPS-183233. Verify that the CMM can edit the claim in 'Approved' status"
	@priority = 5
	test CMMCanEditClaimInApprovedStatus {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that the partner creates a new claim") {
			PRMNavigator.openSitePage(pageName = "MDF Requests");

			PRMMDFRequest.goToMDF(campaignName = "Campaign Name");

			PRMMDFClaim.createNewClaim(
				listLeads = "Document_1.xlsx",
				reimbursementInvoice = "Document_1.png",
				thirdInvoice = "Document_1.jpg");

			task ("The Claim ID is saved in a variable") {
				PRMMDFClaim.getClaimIdOnDetailPage(index = 1);
			}
		}

		task ("When the CMM goes to the created claim and change the status to 'Approved") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "cmm@liferaytest.com",
				userLoginFullName = "Channel Marketing Manager");

			JSONPRM.changeClaimStatus(
				claimId = ${staticClaimId1},
				claimStatus = "Approved",
				userEmailAddress = "cmm@liferaytest.com");

			PRMNavigator.gotoClaim(claimId = ${staticClaimId1});
		}

		task ("And edit the claim, changing the activity attachment") {
			PRMMDFClaim.editButton();

			PRMMDFClaimEdit.editClaim(
				activityName = "Activity Name",
				newAttachment = "Document_2.jpg");
		}

		task ("And go to the claim detail page") {
			PRMNavigator.gotoClaim(claimId = ${staticClaimId1});

			PRMMDFClaim.activityCollapse(activityName = "Activity Name");
		}

		task ("Then the new attachment is displayed") {
			PRMMDFClaim.viewAttachmentPresent(attachmentName = "Document_2.jpg");
		}

		task ("And the old attachment isn't displayed") {
			PRMMDFClaim.viewAttachmentNotPresent(attachmentName = "Document_1.png");
		}
	}

	@description = "This is a test for LPS-183238. Verify that the CMM can edit the claim in 'Canceled' status"
	@priority = 5
	test CMMCanEditClaimInCanceledStatus {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that the partner creates a new claim") {
			PRMNavigator.openSitePage(pageName = "MDF Requests");

			PRMMDFRequest.goToMDF(campaignName = "Campaign Name");

			PRMMDFClaim.createNewClaim(
				listLeads = "Document_1.xlsx",
				reimbursementInvoice = "Document_1.png",
				thirdInvoice = "Document_1.jpg");

			task ("The Claim ID is saved in a variable") {
				PRMMDFClaim.getClaimIdOnDetailPage(index = 1);
			}
		}

		task ("When the CMM goes to the created claim and change the status to 'Cancled") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "cmm@liferaytest.com",
				userLoginFullName = "Channel Marketing Manager");

			JSONPRM.changeClaimStatus(
				claimId = ${staticClaimId1},
				claimStatus = "Cancled",
				userEmailAddress = "cmm@liferaytest.com");

			PRMNavigator.gotoClaim(claimId = ${staticClaimId1});
		}

		task ("And edit the claim, changing the activity attachment") {
			PRMMDFClaim.editButton();

			PRMMDFClaimEdit.editClaim(
				activityName = "Activity Name",
				newAttachment = "Document_2.jpg");
		}

		task ("And go to the claim detail page") {
			PRMNavigator.gotoClaim(claimId = ${staticClaimId1});

			PRMMDFClaim.activityCollapse(activityName = "Activity Name");
		}

		task ("Then the new attachment is displayed") {
			PRMMDFClaim.viewAttachmentPresent(attachmentName = "Document_2.jpg");
		}

		task ("And the old attachment isn't displayed") {
			PRMMDFClaim.viewAttachmentNotPresent(attachmentName = "Document_1.png");
		}
	}

	@description = "This is a test for LPS-183236. Verify that the CMM can edit the claim in 'In Director Review' status"
	@priority = 5
	test CMMCanEditClaimInDirectorReviewStatus {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that the partner creates a new claim") {
			PRMNavigator.openSitePage(pageName = "MDF Requests");

			PRMMDFRequest.goToMDF(campaignName = "Campaign Name");

			PRMMDFClaim.createNewClaim(
				listLeads = "Document_1.xlsx",
				reimbursementInvoice = "Document_1.png",
				thirdInvoice = "Document_1.jpg");

			task ("The Claim ID is saved in a variable") {
				PRMMDFClaim.getClaimIdOnDetailPage(index = 1);
			}
		}

		task ("When the CMM goes to the created claim and change the status to 'In Director Review") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "cmm@liferaytest.com",
				userLoginFullName = "Channel Marketing Manager");

			JSONPRM.changeClaimStatus(
				claimId = ${staticClaimId1},
				claimStatus = "In Director Review",
				userEmailAddress = "cmm@liferaytest.com");

			PRMNavigator.gotoClaim(claimId = ${staticClaimId1});
		}

		task ("And edit the claim, changing the activity attachment") {
			PRMMDFClaim.editButton();

			PRMMDFClaimEdit.editClaim(
				activityName = "Activity Name",
				newAttachment = "Document_2.jpg");
		}

		task ("And go to the claim detail page") {
			PRMNavigator.gotoClaim(claimId = ${staticClaimId1});

			PRMMDFClaim.activityCollapse(activityName = "Activity Name");
		}

		task ("Then the new attachment is displayed") {
			PRMMDFClaim.viewAttachmentPresent(attachmentName = "Document_2.jpg");
		}

		task ("And the old attachment isn't displayed") {
			PRMMDFClaim.viewAttachmentNotPresent(attachmentName = "Document_1.png");
		}
	}

	@description = "This is a test for LPS-183237. Verify that the CMM can edit the claim in 'Rejected' status"
	@priority = 5
	test CMMCanEditClaimInRejectedStatus {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that the partner creates a new claim") {
			PRMNavigator.openSitePage(pageName = "MDF Requests");

			PRMMDFRequest.goToMDF(campaignName = "Campaign Name");

			PRMMDFClaim.createNewClaim(
				listLeads = "Document_1.xlsx",
				reimbursementInvoice = "Document_1.png",
				thirdInvoice = "Document_1.jpg");

			task ("The Claim ID is saved in a variable") {
				PRMMDFClaim.getClaimIdOnDetailPage(index = 1);
			}
		}

		task ("When the CMM goes to the created claim and change the status to 'Rejected") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "cmm@liferaytest.com",
				userLoginFullName = "Channel Marketing Manager");

			JSONPRM.changeClaimStatus(
				claimId = ${staticClaimId1},
				claimStatus = "Rejected",
				userEmailAddress = "cmm@liferaytest.com");

			PRMNavigator.gotoClaim(claimId = ${staticClaimId1});
		}

		task ("And edit the claim, changing the activity attachment") {
			PRMMDFClaim.editButton();

			PRMMDFClaimEdit.editClaim(
				activityName = "Activity Name",
				newAttachment = "Document_2.jpg");
		}

		task ("And go to the claim detail page") {
			PRMNavigator.gotoClaim(claimId = ${staticClaimId1});

			PRMMDFClaim.activityCollapse(activityName = "Activity Name");
		}

		task ("Then the new attachment is displayed") {
			PRMMDFClaim.viewAttachmentPresent(attachmentName = "Document_2.jpg");
		}

		task ("And the old attachment isn't displayed") {
			PRMMDFClaim.viewAttachmentNotPresent(attachmentName = "Document_1.png");
		}
	}

	@description = "This is a test for LPS-181360. Verify that the Edit button is not displayed to partner in status different from 'Draft' and 'Request More Info'"
	@priority = 5
	test EditButtonIsDisplayedInSpecificStatusToPartner {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		// Temporarily skip portal instances to get tests running for pending release. LRQA-80052

		task ("Given that a new claim is created") {
			PRMMDFClaim.createNewClaim(
				listLeads = "Document_1.xlsx",
				reimbursementInvoice = "Document_1.png",
				thirdInvoice = "Document_1.png");

			task ("The Claim ID is saved in a variable") {
				PRMMDFClaim.getClaimIdOnDetailPage(index = 1);
			}
		}

		task ("When the manager approves the created Claim") {
			JSONPRM.changeClaimStatus(
				claimId = ${staticClaimId1},
				claimStatus = "Approved",
				userEmailAddress = "cmm@liferaytest.com");
		}

		task ("And the partner goes to the approved claim") {
			PRMNavigator.gotoClaim(claimId = ${staticClaimId1});
		}

		task ("Then the 'Edit' button is not visible") {
			PRMMDFClaimEdit.buttonIsNotVisible();
		}

		task ("And when the manager moves the claim to Finance Review") {
			JSONPRM.changeClaimStatus(
				claimId = ${staticClaimId1},
				claimStatus = "In Finance Review",
				userEmailAddress = "cmm@liferaytest.com");
		}

		task ("And the partner goes to the claim") {
			PRMNavigator.gotoClaim(claimId = ${staticClaimId1});
		}

		task ("Then the 'Edit' button is not visible") {
			PRMMDFClaimEdit.buttonIsNotVisible();
		}

		task ("And when the manager moves the claim to Claim Paid") {
			JSONPRM.changeClaimStatus(
				claimId = ${staticClaimId1},
				claimStatus = "Claim Paid",
				userEmailAddress = "cmm@liferaytest.com");
		}

		task ("And the partner goes to the claim") {
			PRMNavigator.gotoClaim(claimId = ${staticClaimId1});
		}

		task ("Then the 'Edit' button is not visible") {
			PRMMDFClaimEdit.buttonIsNotVisible();
		}
	}

	@description = "This is a test for LPS-181362. Verify that is not possible to edit the MDF Claim when all required fields are not filled"
	@priority = 5
	test IsNotPossibleToEditClaimWithoutFillAllRequiredFields {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		// Temporarily skip portal instances to get tests running for pending release. LRQA-80052

		task ("Given that the partner creates a new claim") {
			PRMMDFClaim.createNewClaim(
				listLeads = "Document_1.xlsx",
				reimbursementInvoice = "Document_1.png",
				thirdInvoice = "Document_1.jpg");

			task ("The Claim ID is saved in a variable") {
				PRMMDFClaim.getClaimIdOnDetailPage(index = 1);
			}
		}

		task ("And the Manager approves the created Claim") {
			JSONPRM.changeClaimStatus(
				claimId = ${staticClaimId1},
				claimStatus = "More Info Requested",
				userEmailAddress = "cmm@liferaytest.com");
		}

		task ("And the partner goes to edit the approved claim") {
			PRMNavigator.gotoClaim(claimId = ${staticClaimId1});

			PRMMDFClaim.editButton();
		}

		task ("When the partner don't fill all mandatory fields of a new activity") {
			PRMMDFClaim.fillActivityFields(
				activityIndex = 1,
				listLeads = "Document_1.xlsx");
		}

		task ("Then the 'Submit' button remains disabled") {
			PRMMDFRequest.viewDisabledButton(buttonName = "Submit");
		}
	}

	@description = "This is a test for LPS-181359. Verify that the Partner can Edit a Claim in 'Draft' Status"
	@priority = 5
	test PartnerCanEditClaimInDraftStatus {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that a new claim is saved as draft") {
			PRMMDFClaim.createNewClaim(
				listLeads = "Document_1.xlsx",
				reimbursementInvoice = "Document_1.png",
				saveAsDraft = "true",
				thirdInvoice = "Document_1.png");

			task ("The Claim ID is saved in a variable") {
				PRMMDFClaim.getClaimIdOnDetailPage(index = 1);
			}
		}

		task ("And the partner goes to edit the claim") {
			PRMNavigator.gotoClaim(claimId = ${staticClaimId1});

			PRMMDFClaim.editButton();
		}

		task ("When the partner change one attachment of the budget") {
			PRMMDFClaimEdit.editClaim(
				activityName = "Activity Name",
				newAttachment = "Document_3.png");
		}

		task ("And go to the claim detail page") {
			PRMMDFClaimEdit.gotoClaimViaUI(claimId = ${staticClaimId1});
		}

		task ("And open the activity details") {
			PRMMDFClaim.activityCollapse(activityName = "Activity Name");
		}

		task ("Then the new attachment is displayed") {
			PRMMDFClaim.viewAttachmentPresent(attachmentName = "Document_3.png");
		}

		task ("And the old attachment isn't displayed") {
			PRMMDFClaim.viewAttachmentNotPresent(attachmentName = "Document_1.png");
		}
	}

	@description = "This is a test for LPS-181358. Verify that the Partner can Edit a Claim in 'Request More Info' Status"
	@priority = 5
	test PartnerCanEditClaimInRequestMoreInfoStatus {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		// Temporarily skip portal instances to get tests running for pending release. LRQA-80052

		task ("Given that a new claim is created") {
			PRMMDFClaim.createNewClaim(
				listLeads = "Document_1.xlsx",
				reimbursementInvoice = "Document_1.png",
				thirdInvoice = "Document_1.png");

			task ("The Claim ID is saved in a variable") {
				PRMMDFClaim.getClaimIdOnDetailPage(index = 1);
			}
		}

		task ("And the Manager approves the created Claim") {
			JSONPRM.changeClaimStatus(
				claimId = ${staticClaimId1},
				claimStatus = "More Info Requested",
				userEmailAddress = "cmm@liferaytest.com");
		}

		task ("And the partner goes to edit the approved claim") {
			PRMNavigator.gotoClaim(claimId = ${staticClaimId1});

			PRMMDFClaim.editButton();
		}

		task ("When the partner change one attachment of the budget") {
			PRMMDFClaimEdit.editClaim(
				activityName = "Activity Name",
				newAttachment = "Document_2.png");
		}

		task ("And go to the claim detail page") {
			PRMMDFClaimEdit.gotoClaimViaUI(claimId = ${staticClaimId1});
		}

		task ("And open the activity details") {
			PRMMDFClaim.activityCollapse(activityName = "Activity Name");
		}

		task ("Then the new attachment is displayed") {
			PRMMDFClaim.viewAttachmentPresent(attachmentName = "Document_2.png");
		}

		task ("And the old attachment isn't displayed") {
			PRMMDFClaim.viewAttachmentNotPresent(attachmentName = "Document_1.png");
		}
	}

}