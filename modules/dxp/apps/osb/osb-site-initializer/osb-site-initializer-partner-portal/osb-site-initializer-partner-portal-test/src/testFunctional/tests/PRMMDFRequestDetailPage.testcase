@component-name = "OSB Site Initializer Partner Portal"
definition {

	property custom.properties = "feature.flag.LPS-135430=true";
	property osgi.modules.includes = "osb-site-initializer-partner-portal";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "OSB Site Initializer Partner Portal";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Partner Portal Site and connect with Salesforce") {
			PRMUtils.addSite();

			PRMUtils.connectWithSalesforce();
		}

		task ("Update the account with Salesforce fields") {
			JSONPRM.updateAccount();
		}

		task ("Assign the users to the account") {
			JSONAccountEntryUser.addExistUsertoAccount(
				accountEntryName = "Company Name 1",
				userEmailAddress = "pmu@partner.com");

			JSONAccountEntryUser.addExistUsertoAccount(
				accountEntryName = "Company Name 1",
				userEmailAddress = "cmm@liferaytest.com");
		}

		task ("Go to Partner Portal and login with the created user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "pmu@partner.com",
				userLoginFullName = "Partner Marketing User");

			PRMUtils.gotoPRM();
		}

		task ("Create a new MDF Request") {
			JSONPRM.createMDFRequest(
				accountEntryName = "Company Name 1",
				budgetValueList = "3000,2000",
				campaignName = "Campaign Name 1");
		}
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			PRMUtils.tearDown();
		}
	}

	@description = "This is a test for LPS-182000. Verify that when an activity is claimed, the activity status changes to Claimed"
	@priority = 4
	test ViewActivityStatusWhenActivityIsClaimed {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that the CMM user is logged in and approves the created MDF") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "cmm@liferaytest.com",
				userLoginFullName = "Channel Marketing Manager");

			JSONPRM.changeMDFStatus(
				mdfStatus = "Approved",
				requestId = ${staticRequestId},
				userEmailAddress = "cmm@liferaytest.com");
		}

		task ("When the partner logs in and go to created MDF") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "pmu@partner.com",
				userLoginFullName = "Partner Marketing User");

			PRMNavigator.openSitePage(pageName = "MDF Requests");

			PRMMDFRequest.goToMDF(campaignName = "Campaign Name 1");
		}

		task ("And the Partner creates a new claim") {
			PRMMDFClaim.createNewClaim(
				listLeads = "Document_1.xlsx",
				reimbursementInvoice = "Document_1.png",
				thirdInvoice = "Document_1.png");
		}

		task ("Then the activity status will be updated to 'Claimed'") {
			PRMMDFRequest.viewActivityStatus(
				activityName = "Activity Name",
				statusType = "Claim",
				statusValue = "Claimed");
		}
	}

	@description = "This is a test for LPS-181999. Verify that when an MDf is approved, the activity status is Approved and Unclaimed"
	@priority = 4
	test ViewActivityStatusWhenMDFIsApproved {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that the CMM user is logged in and approves the created MDF") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "cmm@liferaytest.com",
				userLoginFullName = "Channel Marketing Manager");

			PRMNavigator.openSitePage(pageName = "MDF Requests");

			PRMMDFRequest.goToMDF(campaignName = "Campaign Name 1");

			PRMMDFRequest.changeMDFStatus(statusButton = "Approve");
		}

		task ("When the partner logs in and go to the created MDF") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "pmu@partner.com",
				userLoginFullName = "Partner Marketing User");

			PRMNavigator.openSitePage(pageName = "MDF Requests");

			PRMMDFRequest.goToMDF(campaignName = "Campaign Name 1");
		}

		task ("Then the activity status will be 'Approved' and 'Unclaimed'") {
			PRMMDFRequest.viewActivityStatus(
				activityName = "Activity Name",
				statusType = "Claim",
				statusValue = "Unclaimed");

			PRMMDFRequest.viewActivityStatus(
				activityName = "Activity Name",
				statusType = "Request",
				statusValue = "Approved");
		}
	}

	@description = "This is a test for LPS-181774. Verify that when an MDF is submitted, the activity status is Submitted and Unclaimed"
	@priority = 4
	test ViewActivityStatusWhenMDFIsSubmitted {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("When the partner go to the created MDF") {
			PRMNavigator.openSitePage(pageName = "MDF Requests");

			PRMMDFRequest.goToMDF(campaignName = "Campaign Name 1");
		}

		task ("Then the activity status will be 'Submitted' and 'Unclaimed") {
			PRMMDFRequest.viewActivityStatus(
				activityName = "Activity Name",
				statusType = "Claim",
				statusValue = "Unclaimed");

			PRMMDFRequest.viewActivityStatus(
				activityName = "Activity Name",
				statusType = "Request",
				statusValue = "Submitted");
		}
	}

}