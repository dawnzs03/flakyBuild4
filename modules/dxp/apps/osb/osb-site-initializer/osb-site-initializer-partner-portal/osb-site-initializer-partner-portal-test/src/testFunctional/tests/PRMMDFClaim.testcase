@component-name = "OSB Site Initializer Partner Portal"
definition {

	property custom.properties = "feature.flag.LPS-135430=true";
	property osgi.modules.includes = "osb-site-initializer-partner-portal";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "OSB Site Initializer Partner Portal";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Partner Portal Site and connect with Salesforce") {
			PRMUtils.addSite();

			PRMUtils.connectWithSalesforce();
		}

		task ("Update the account with Salesforce fields") {
			JSONPRM.updateAccount();
		}

		task ("Assign the users to the account") {
			JSONAccountEntryUser.addExistUsertoAccount(
				accountEntryName = "Company Name 1",
				userEmailAddress = "pmu@partner.com");

			JSONAccountEntryUser.addExistUsertoAccount(
				accountEntryName = "Company Name 1",
				userEmailAddress = "cmm@liferaytest.com");
		}

		task ("Login with the Partner user and go to Partner Portal") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "pmu@partner.com",
				userLoginFullName = "Partner Marketing User");

			PRMUtils.gotoPRM();
		}

		task ("Add a new MDF Request") {
			var requestId = JSONPRM.createMDFRequest(
				accountEntryName = "Company Name 1",
				secondActivityName = "Activity Name 2",
				secondBudgetValueList = 1000,
				userEmailAddress = "pmu@partner.com");

			JSONPRM.changeMDFStatus(
				mdfStatus = "Approved",
				requestId = ${requestId},
				userEmailAddress = "cmm@liferaytest.com");
		}
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			PRMUtils.tearDown();
		}
	}

	@description = "This is a test for LPS-175292. Verify that is possible to export all visible Claims"
	@priority = 4
	test CanExportAllVisibleClaims {
		property solutions.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		// Temporarily skip portal instances to get tests running for pending release. LRQA-80052

		task ("Given that the PMU goes to the created MDF") {
			PRMNavigator.openSitePage(pageName = "MDF Requests");

			PRMMDFRequest.goToMDF(campaignName = "Campaign Name");
		}

		task ("And creates two claims") {
			PRMMDFClaim.createNewClaim(
				listLeads = "Document_1.xlsx",
				reimbursementInvoice = "Document_1.png",
				thirdInvoice = "Document_1.png");

			PRMMDFClaim.createNewClaim(
				activityIndex = 1,
				listLeads = "Document_1.xlsx",
				reimbursementInvoice = "Document_1.png",
				thirdInvoice = "Document_1.png");
		}

		task ("When the CMM logs in and go to Claim Listing Page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "cmm@liferaytest.com",
				userLoginFullName = "Channel Marketing Manager");

			PRMNavigator.openSitePage(pageName = "MDF Claims");
		}

		task ("And export all visible Claims") {
			Button.click(button = "Export MDF Claim");
		}

		task ("Then the information about the visible MDF's will be inside the exported file") {
			var firstID = PRMMDFClaim.getClaimID(claimIndex = 1);
			var secondID = PRMMDFClaim.getClaimID(claimIndex = 2);

			PRMMDFRequest.viewExportedMDF(
				fileContentList = "${firstID},${secondID}",
				fileName = "MDF Claim.csv");
		}
	}

	@description = "This is a test for LPS-178119. Verify that is possible to export all visible Claims"
	@priority = 4
	test CanExportFilteredClaims {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		// Temporarily skip portal instances to get tests running for pending release. LRQA-80052

		task ("Given that a new account is created") {
			JSONPRM.updateAccount(accountName = "Company Name 2");

			JSONAccountEntryUser.addExistUsertoAccount(
				accountEntryName = "Company Name 2",
				userEmailAddress = "pmu@partner.com");

			JSONAccountEntryUser.addExistUsertoAccount(
				accountEntryName = "Company Name 2",
				userEmailAddress = "cmm@liferaytest.com");
		}

		task ("And a new MDF is created with a different account") {
			JSONPRM.createMDFRequest(
				accountEntryName = "Company Name 2",
				activityName = "Activity Name 3",
				campaignName = "Campaign Name 1",
				secondActivityName = "Activity Name 4",
				secondBudgetValueList = 1000);
		}

		task ("And the CMM user is logged in and goes to MDF listing page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "cmm@liferaytest.com",
				userLoginFullName = "Channel Marketing Manager");

			PRMNavigator.openSitePage(pageName = "MDF Requests");
		}

		task ("And the CMM approves the MDF's") {
			PRMNavigator.openSitePage(pageName = "MDF Requests");

			PRMMDFRequest.goToMDF(campaignName = "Campaign Name 1");

			PRMMDFRequest.changeMDFStatus(key_statusButton = "Approve");
		}

		task ("And the PMU logs in and go to Partner Portal") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "pmu@partner.com",
				userLoginFullName = "Partner Marketing User");

			PRMNavigator.openSitePage(pageName = "MDF Requests");
		}

		task ("And the PMU user makes two claims for 'Campaign Name' MDF") {
			PRMMDFRequest.goToMDF(campaignName = "Campaign Name");

			PRMMDFClaim.createNewClaim(
				listLeads = "Document_1.xlsx",
				reimbursementInvoice = "Document_1.png",
				thirdInvoice = "Document_1.png");

			PRMMDFClaim.createNewClaim(
				activityIndex = 1,
				listLeads = "Document_1.xlsx",
				reimbursementInvoice = "Document_1.png",
				thirdInvoice = "Document_1.png");
		}

		task ("And the PMU user makes two Claims for 'Campaign Name 1' MDF") {
			PRMNavigator.openSitePage(pageName = "MDF Requests");

			PRMMDFRequest.goToMDF(campaignName = "Campaign Name 1");

			PRMMDFClaim.createNewClaim(
				listLeads = "Document_1.xlsx",
				reimbursementInvoice = "Document_1.png",
				thirdInvoice = "Document_1.png");

			PRMMDFClaim.createNewClaim(
				activityIndex = 1,
				listLeads = "Document_1.xlsx",
				reimbursementInvoice = "Document_1.png",
				thirdInvoice = "Document_1.png");
		}

		task ("And the CMM user goes to Claim Listing Page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "cmm@liferaytest.com",
				userLoginFullName = "Channel Marketing Manager");

			PRMNavigator.openSitePage(pageName = "MDF Claims");
		}

		task ("When the CMM filters the Claims by account 'Company Name 1'") {
			PRMMDFClaim.filterClaimID(
				checkboxName = "Company Name 1",
				optionDropdown = "Partner");
		}

		task ("And export the filter results") {
			Button.click(button = "Export MDF Claim");
		}

		task ("Then the information about the filtered Claims will be inside the file") {
			PRMMDFRequest.viewExportedMDF(
				fileContentList = "Company Name 1",
				fileContentNotPresent = "Company Name 2",
				fileName = "MDF Claim.csv");
		}

		task ("When the CMM filters the Claims by account 'Company Name 2'") {
			Refresh();

			PRMMDFClaim.filterClaimID(
				checkboxName = "Company Name 2",
				optionDropdown = "Partner");
		}

		task ("And export the filter results") {
			Button.click(button = "Export MDF Claim");
		}

		task ("Then the information about the filtered Claims will be inside the file") {
			PRMMDFRequest.viewExportedMDF(
				fileContentList = "Company Name 2",
				fileContentNotPresent = "Company Name 1",
				fileName = "MDF Claim.csv");
		}
	}

	@description = "This is a test for LPS-178117. Verify that is possible to export all Claims searched."
	@priority = 4
	test CanExportSearchedClaims {
		property solutions.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		// Temporarily skip portal instances to get tests running for pending release. LRQA-80052

		task ("Given that the PMU goes to the created MDF") {
			PRMNavigator.openSitePage(pageName = "MDF Requests");

			PRMMDFRequest.goToMDF(campaignName = "Campaign Name");
		}

		task ("And creates two claims") {
			PRMMDFClaim.createNewClaim(
				listLeads = "Document_1.xlsx",
				reimbursementInvoice = "Document_1.png",
				thirdInvoice = "Document_1.png");

			PRMMDFClaim.createNewClaim(
				activityIndex = 1,
				listLeads = "Document_1.xlsx",
				reimbursementInvoice = "Document_1.png",
				thirdInvoice = "Document_1.png");
		}

		task ("When the CMM logs in and go to Partner Portal") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "cmm@liferaytest.com",
				userLoginFullName = "Channel Marketing Manager");

			PRMNavigator.openSitePage(pageName = "MDF Claims");
		}

		task ("And get the Claim Id's") {
			var firstID = PRMMDFClaim.getClaimID(claimIndex = 1);
			var secondID = PRMMDFClaim.getClaimID(claimIndex = 2);
		}

		task ("When the CMM search for the first ID") {
			PRMMDFClaim.searchClaim(claimID = ${firstID});
		}

		task ("And export the results") {
			Button.click(button = "Export MDF Claim");
		}

		task ("Then the information about the searched Claim should be inside the downloaded file") {
			PRMMDFRequest.viewExportedMDF(
				fileContentList = ${firstID},
				fileContentNotPresent = ${secondID},
				fileName = "MDF Claim.csv");
		}

		task ("When the CMM search for the second ID") {
			PRMMDFClaim.searchClaim(claimID = ${secondID});
		}

		task ("And export the results") {
			Button.click(button = "Export MDF Claim");
		}

		task ("Then the information about the searched Claim should be inside the downloaded file") {
			PRMMDFRequest.viewExportedMDF(
				fileContentList = ${secondID},
				fileContentNotPresent = ${firstID},
				fileName = "MDF Claim.csv");
		}
	}

	@description = "This is a test for LPS-175611. Verify that is possible to submit a full claim"
	@priority = 5
	test CanSubmitFullClaim {
		property solutions.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		// Temporarily skip portal instances to get tests running for pending release. LRQA-80052

		task ("Given that the PMU goes to the created MDF") {
			PRMNavigator.openSitePage(pageName = "MDF Requests");

			PRMMDFRequest.goToMDF(campaignName = "Campaign Name");
		}

		task ("When the PMU claim all MDF Activities") {
			PRMMDFClaim.createNewClaim(
				activityIndex = "0,1",
				listLeads = "Document_1.xls",
				reimbursementInvoice = "Document_1.png",
				thirdInvoice = "Document_1.pdf");
		}

		task ("Then the 'Claim Type' will be 'Full'") {
			PRMMDFClaim.viewClaimType(claimType = "Full");
		}
	}

	@description = "This is a test for LPS-173720. Verify that is possible to submit a partial claim"
	@priority = 5
	test CanSubmitPartialClaim {
		property solutions.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		// Temporarily skip portal instances to get tests running for pending release. LRQA-80052

		task ("Given that the PMU goes to the created MDF") {
			PRMNavigator.openSitePage(pageName = "MDF Requests");

			PRMMDFRequest.goToMDF(campaignName = "Campaign Name");
		}

		task ("When the PMU claims just one MDF Activity") {
			PRMMDFClaim.createNewClaim(
				listLeads = "Document_1.xls",
				reimbursementInvoice = "Document_1.png",
				thirdInvoice = "Document_1.pdf");
		}

		task ("Then the 'C'laim Type' will be 'Partial'") {
			PRMMDFClaim.viewClaimType(claimType = "Partial");
		}
	}

	@description = "This is a test for LPS-185927. Verify that when the MDF Claim is 'In Finance Review' status, the CFM can change to 'Claim Paid' status"
	@priority = 5
	test CFMCanChangeStatusToClaimPaid {
		property solutions.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that a new claim is created and approved") {
			PRMNavigator.gotoMDF(requestId = ${staticRequestId});

			PRMMDFClaim.createNewClaim(
				listLeads = "Document_1.xlsx",
				reimbursementInvoice = "Document_1.png",
				thirdInvoice = "Document_1.png");

			PRMMDFClaim.getClaimIdOnDetailPage(index = 1);
		}

		task ("And the CMM changes the claim status to 'In Finance Review'") {
			JSONPRM.changeClaimStatus(
				claimId = ${staticClaimId1},
				claimStatus = "In Finance Review",
				userEmailAddress = "cmm@liferaytest.com");
		}

		task ("And the CFM goes to the created claim") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "cfm@liferaytest.com",
				userLoginFullName = "Channel Finnance Manager");

			PRMNavigator.gotoClaim(claimId = ${staticClaimId1});
		}

		task ("When the CFM click on State Manager") {
			PRMMDFClaim.clickOnStateManager();
		}

		task ("Then the 'Claim Paid' option will be visible") {
			PRMMDFClaim.viewStatusOptionVisible(statusButton = "Claim Paid");
		}

		task ("And when the CFM change the status to 'Claim Paid'") {
			PRMMDFClaim.changeClaimStatus(
				amountReceived = 500,
				checkNumber = 001,
				statusButton = "Claim Paid");
		}

		task ("Then the claim summary will be updated with the added information") {
			PRMMDFClaim.viewClaimSummary(
				checkId = 001,
				paymentReceived = 500);
		}
	}

	@description = "This is a test for LPS-185929. Verify that when the MDF Claim is 'In Finance Review' status, the CMD can't change to 'Claim Paid' status"
	@priority = 5
	test CMDCannotChangeStatusToClaimPaid {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that a new claim is created and approved") {
			PRMNavigator.gotoMDF(requestId = ${staticRequestId});

			PRMMDFClaim.createNewClaim(
				listLeads = "Document_1.xlsx",
				reimbursementInvoice = "Document_1.png",
				thirdInvoice = "Document_1.png");

			PRMMDFClaim.getClaimIdOnDetailPage(index = 1);
		}

		task ("And the CFM goes to the created claim") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "cmd@liferaytest.com",
				userLoginFullName = "Channel Marketing Director");

			PRMNavigator.gotoClaim(claimId = ${staticClaimId1});
		}

		task ("And change the status to 'In Finance Review'") {
			PRMMDFClaim.changeClaimStatus(statusButton = "In Finance Review");
		}

		task ("When the CMD clicks again on the State Manager") {
			PRMMDFClaim.clickOnStateManager();
		}

		task ("Then the 'Claim Paid' option will be not visible") {
			PRMMDFClaim.viewStatusOptionNotVisible(statusButton = "Claim Paid");
		}
	}

	@description = "This is a test for LPS-185928. Verify that when the MDF Claim is 'In Finance Review' status, the CMM can't change to 'Claim Paid' status"
	@priority = 5
	test CMMCannotChangeStatusToClaimPaid {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that a new claim is created and approved") {
			PRMNavigator.gotoMDF(requestId = ${staticRequestId});

			PRMMDFClaim.createNewClaim(
				listLeads = "Document_1.xlsx",
				reimbursementInvoice = "Document_1.png",
				thirdInvoice = "Document_1.png");

			PRMMDFClaim.getClaimIdOnDetailPage(index = 1);
		}

		task ("And the CMM goes to the created claim") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "cmm@liferaytest.com",
				userLoginFullName = "Channel Marketing Manager");

			PRMNavigator.gotoClaim(claimId = ${staticClaimId1});
		}

		task ("And change the status to 'In Finance Review'") {
			PRMMDFClaim.changeClaimStatus(statusButton = "In Finance Review");
		}

		task ("When the CMM clicks again on the State Manager") {
			PRMMDFClaim.clickOnStateManager();
		}

		task ("Then the 'Claim Paid' option will be not visible") {
			PRMMDFClaim.viewStatusOptionNotVisible(statusButton = "Claim Paid");
		}
	}

	@description = "This is a test for LPS-179371. Verify that the Total Claim Amount reflects the value claimed per budget"
	@priority = 5
	test TotalClaimAmountReflectsBudgetValue {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		// Temporarily skip portal instances to get tests running for pending release. LRQA-80052

		task ("Given that the PMU goes to the created MDF") {
			PRMNavigator.openSitePage(pageName = "MDF Requests");

			PRMMDFRequest.goToMDF(campaignName = "Campaign Name");
		}

		task ("When the PMU goes to create a new Claim") {
			Button.click(button = "New Claim");

			PRMMDFClaim.fillActivityFields(
				listLeads = "Document_1.xls",
				thirdInvoice = "Document_1.pdf");
		}

		task ("Then the Total Claim Amount will be equals to 50% of the value claimed per budget") {
			task ("Get the budget amount value") {
				var invoiceAmount = PRMMDFRequest.getValueByFieldName(fieldName = "activities[0].budgets[0].invoiceAmount");
			}

			task ("Make a quotient of the Budget Amount Value Cost by 50% (2), which will result in the value that can be claimed") {
				var expectedTotalClaimAmountValue = ${invoiceAmount} / 2;
			}

			task ("Get the Total Claim Amount Value") {
				var currentTotalClaimAmountValue = PRMMDFRequest.getValueByFieldName(fieldName = "totalClaimAmount");
			}

			TestUtils.assertPartialEquals(
				actual = ${currentTotalClaimAmountValue},
				expected = ${expectedTotalClaimAmountValue});
		}
	}

}