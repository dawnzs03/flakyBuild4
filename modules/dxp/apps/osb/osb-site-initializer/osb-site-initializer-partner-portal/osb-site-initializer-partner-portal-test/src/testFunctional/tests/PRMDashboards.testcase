@component-name = "OSB Site Initializer Partner Portal"
definition {

	property custom.properties = "feature.flag.LPS-135430=true";
	property osgi.modules.includes = "osb-site-initializer-partner-portal";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "OSB Site Initializer Partner Portal";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Partner Portal Site and connect with Salesforce") {
			PRMUtils.addSite();

			PRMUtils.connectWithSalesforce();
		}

		task ("Update the account with Salesforce fields") {
			JSONPRM.updateAccount();
		}

		task ("Assign the users to the account") {
			JSONAccountEntryUser.addExistUsertoAccount(
				accountEntryName = "Company Name 1",
				userEmailAddress = "pmu@partner.com");

			JSONAccountEntryUser.addExistUsertoAccount(
				accountEntryName = "Company Name 1",
				userEmailAddress = "cmm@liferaytest.com");
		}

		task ("Go to Partner Portal and login with the created user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "cmm@liferaytest.com",
				userLoginFullName = "Channel Marketing Manager");

			PRMUtils.gotoPRM();
		}

		task ("Create a new MDF Request") {
			JSONPRM.createMDFRequest(
				accountEntryName = "Company Name 1",
				budgetValueList = "2000,2000",
				campaignName = "Campaign Name 1");
		}
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			PRMUtils.tearDown();
		}
	}

	@description = "This is a test for LPS-179357. Verify that the value of Approved Claims is displayed on MDF Dashboard"
	@priority = 4
	test ClaimApprovedValueAppearInDashboard {
		var budgetValue = 2000;

		task ("Given that the PMU get the current amount of the Claim MDF Value") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "pmu@partner.com",
				userLoginFullName = "Partner Marketing User");

			PRMUtils.gotoPRM();

			PRMNavigator.openSitePage(pageName = "Home");

			var initialValue = PRMDashboards.getLegendValue(
				chartName = "Request",
				legendName = "Claim Approved");
		}

		task ("And a new MDF Request is created and approved") {
			var requestId = JSONPRM.createMDFRequest(
				accountEntryName = "Company Name 1",
				budgetValueList = ${budgetValue},
				campaignName = "Campaign Name 1");

			JSONPRM.changeMDFStatus(
				mdfStatus = "Approved",
				requestId = ${requestId});
		}

		task ("And the PMU creates a new claim in the submitted MDF") {
			PRMNavigator.openSitePage(pageName = "MDF Requests");

			PRMMDFRequest.goToMDF(campaignName = "Campaign Name 1");

			PRMMDFClaim.createNewClaim(
				listLeads = "Document_1.xlsx",
				reimbursementInvoice = "Document_1.png",
				thirdInvoice = "Document_1.png");

			task ("The Claim ID is saved in a variable") {
				PRMMDFClaim.getClaimIdOnDetailPage(index = 1);
			}
		}

		task ("And the CMM changes the status to 'More Info Requested'") {
			JSONPRM.changeClaimStatus(
				claimId = ${staticClaimId1},
				claimStatus = "Approved",
				userEmailAddress = "cmm@liferaytest.com");
		}

		task ("When the PMU goes back to the MDF Dashboard and get the new amount of Claimed Approved value") {
			PRMNavigator.openSitePage(pageName = "Home");

			var newValue = PRMDashboards.getLegendValue(
				chartName = "Request",
				legendName = "Claim Approved");

			task ("Make a quotient of the Approved Claims Cost by 50% (2), which will result in the claim value") {
				var requestedValue = ${budgetValue} / 2;
			}

			task ("Make the sum of the initial value + approved value, to obtain the new value that must be in the dashboard") {
				var expectedValue = ${initialValue} + ${requestedValue};
			}
		}

		task ("Then the actual amount of Claim Approved value was increased") {
			TestUtils.assertEquals(
				actual = ${newValue},
				expected = ${expectedValue});
		}
	}

	@description = "This is a test for LPS-179914. Verify that the value of Approved MDFs are displayed on MDF Dashboard"
	@priority = 4
	test MDFApprovedValueAppearInDashboard {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		// Temporarily skip portal instances to get tests running for pending release. LRQA-80052

		var budgetValue = 2000;

		task ("Given I get the current amount of Approved MDF Value") {
			var initialValue = PRMDashboards.getLegendValue(
				chartName = "Request",
				legendName = "Approved");
		}

		task ("When I create a new MDF Request and approve it") {
			var requestId = JSONPRM.createMDFRequest(
				accountEntryName = "Company Name 1",
				budgetValueList = ${budgetValue},
				campaignName = "Campaign Name 1");

			JSONPRM.changeMDFStatus(
				mdfStatus = "Approved",
				requestId = ${requestId},
				userEmailAddress = "cmm@liferaytest.com");
		}

		task ("And I go back to Dashboard page and get the new amount of Approved MDF Value") {
			var newValue = PRMDashboards.getLegendValue(
				chartName = "Request",
				legendName = "Approved");

			task ("Make a quotient of the Total Activity Cost by 50% (2), which will result in the approved value") {
				var requestedValue = ${budgetValue} / 2;
			}

			task ("Make the sum of the initial value + approved value, to obtain the new value that must be in the dashboard") {
				var expectedValue = ${initialValue} + ${requestedValue};
			}
		}

		task ("Then the actual amount of approved MDF value was increased") {
			TestUtils.assertEquals(
				actual = ${newValue},
				expected = ${expectedValue});
		}
	}

	@description = "This is a test for LPS-180526. Verify that the value of Claimed MDFs are displayed on MDF Dashboard"
	@priority = 4
	test MDFClaimedValueAppearInDashboard {
		var budgetValue = 2000;

		task ("Given that the PMU get the current amount of the Claim MDF Value") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "pmu@partner.com",
				userLoginFullName = "Partner Marketing User");

			PRMUtils.gotoPRM();

			PRMNavigator.openSitePage(pageName = "Home");

			var initialValue = PRMDashboards.getLegendValue(
				chartName = "Request",
				legendName = "Claimed");
		}

		task ("And a new MDF Request is created and approved") {
			var requestId = JSONPRM.createMDFRequest(
				accountEntryName = "Company Name 1",
				budgetValueList = ${budgetValue},
				campaignName = "Campaign Name 1");

			JSONPRM.changeMDFStatus(
				mdfStatus = "Approved",
				requestId = ${requestId});
		}

		task ("And the PMU creates a new claim in the submitted MDF") {
			PRMNavigator.openSitePage(pageName = "MDF Requests");

			PRMMDFRequest.goToMDF(campaignName = "Campaign Name 1");

			PRMMDFClaim.createNewClaim(
				listLeads = "Document_1.xlsx",
				reimbursementInvoice = "Document_1.png",
				thirdInvoice = "Document_1.png");
		}

		task ("When the PMU goes back to the MDF Dashboard and get the new amount of Claimed value") {
			PRMNavigator.openSitePage(pageName = "Home");

			var newValue = PRMDashboards.getLegendValue(
				chartName = "Request",
				legendName = "Claimed");

			task ("Make a quotient of the Total Activity Cost by 50% (2), which will result in the claim value") {
				var requestedValue = ${budgetValue} / 2;
			}

			task ("Make the sum of the initial value + claim value, to obtain the new value that must be in the dashboard") {
				var expectedValue = ${initialValue} + ${requestedValue};
			}
		}

		task ("Then the actual amount of Claimed value was increased") {
			TestUtils.assertEquals(
				actual = ${newValue},
				expected = ${expectedValue});
		}
	}

	@description = "This is a test for LPS-177308. Verify that the value of Requested MDFs are displayed on MDF Dashboard"
	@priority = 4
	test MDFRequestedValueAppearInDashboard {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		// Temporarily skip portal instances to get tests running for pending release. LRQA-80052

		var budgetValue = 2000;

		task ("Given I get the current amount of requested MDF Value") {
			var initialValue = PRMDashboards.getLegendValue(
				chartName = "Request",
				legendName = "Requested");
		}

		task ("When I create a new MDF Request") {
			JSONPRM.createMDFRequest(
				accountEntryName = "Company Name 1",
				budgetValueList = ${budgetValue},
				campaignName = "Campaign Name 1");
		}

		task ("And I go back to Dashboard page and get the new amount of requested MDF Value") {
			var newValue = PRMDashboards.getLegendValue(
				chartName = "Request",
				legendName = "Requested");

			task ("Make a quotient of the Total Activity Cost by 50% (2), which will result in the requested value") {
				var requestedValue = ${budgetValue} / 2;
			}

			task ("Make the sum of the initial value + requested value, to obtain the new value that must be in the dashboard") {
				var expectedValue = ${initialValue} + ${requestedValue};
			}
		}

		task ("Then the actual amount of requested MDF value was increased") {
			TestUtils.assertEquals(
				actual = ${newValue},
				expected = ${expectedValue});
		}
	}

}