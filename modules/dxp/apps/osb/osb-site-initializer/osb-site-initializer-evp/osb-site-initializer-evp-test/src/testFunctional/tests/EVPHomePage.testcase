@component-name = "OSB Site Initializer EVP"
definition {

	var baseURL = PropsUtil.get("portal.url");

	property custom.properties = "feature.flag.LPS-169981=true";
	property osgi.modules.includes = "osb-site-initializer-evp";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "OSB Site Initializer EVP";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new EVP Site") {
			EVPUtils.addEVPSite();
		}
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		ObjectAdmin.deleteAllCustomObjectsViaAPI();

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "EVP Portal");
		}
	}

	@description = "LPS-161593 - Assert that Requests option only will be displayed to logged-in users."
	@priority = 4
	test CannotSeeRequestPageWithoutBeLoggedIn {
		task ("Given an employee with the employee user role") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "employee@liferay.com",
				userLoginFullName = "Employee User");

			EVPUtils.gotoEVP();
		}

		task ("and the employee can enter the Request page") {
			EVPNavigator.goToNavItem(navItem = "Request");

			EVPNavigator.assertActiveBreadcrumb(activeItem = "Request");
		}

		task ("When the employee logs out") {
			User.logoutPG();
		}

		task ("Then the employee should not be able to view the Request tab") {
			var portalURL = PropsUtil.get("portal.url");

			Navigator.openSpecificURL(url = "${portalURL}/web/evp-portal");

			EVPNavigator.navItemNotPresent(navItem = "Request");
		}
	}

	@description = "LPS-172661 - Verify clicking on News title will open a modal to display content."
	@priority = 3
	test CanSeeWholeNews {
		task ("Given an Employee user navigates to the EVP home page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "employee@liferay.com",
				userLoginFullName = "Employee User");

			EVPUtils.gotoEVP();
		}

		task ("When the user clicks into a News title") {
			EVPNavigator.selectNewsTitle(title = "New Business Webinar");
		}

		task ("Then a modal will appear with the News content") {
			AssertTextEquals(
				locator1 = "Modal#BODY",
				value1 = "Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.");
		}
	}

	@description = "LPS-172660 - Verify that 'Data on EVP' are showing dates according to dates in objects"
	@priority = 4
	test ReflectInEVPDataAfterEditObject {
		task ("Given that the Admin is on the EVP Homepage Data") {
			ApplicationsMenu.gotoPortlet(
				category = "Object",
				panel = "Control Panel",
				portlet = "EVP Homepage Data");
		}

		task ("When I change the Objects data") {
			ObjectAdmin.selectKebabMenuOption(kebabOption = "View");

			EVPUtils.editObjectEVP(
				employeesParticipated = 2000,
				grantMoneyDistributed = 8000000,
				numberOfNonprofitsServed = 1560,
				serviceHoursCompleted = 30000,
				yearsEVP = 8);
		}

		task ("Then I can See The same data on 'Data on EVP' Section") {
			EVPUtils.gotoEVP();

			EVPUtils.assertDataOnEVPValue(
				employeesParticipated = 2000,
				grantMoneyDistributed = "8M",
				numberOfNonprofitsServed = 1560,
				serviceHoursCompleted = 30000,
				yearsEVP = 8);
		}
	}

}