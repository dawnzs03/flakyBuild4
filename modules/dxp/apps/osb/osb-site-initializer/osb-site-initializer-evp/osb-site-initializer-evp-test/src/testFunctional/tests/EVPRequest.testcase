@component-name = "OSB Site Initializer EVP"
definition {

	var baseURL = PropsUtil.get("portal.url");

	property custom.properties = "feature.flag.LPS-169981=true";
	property osgi.modules.includes = "osb-site-initializer-evp";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "OSB Site Initializer EVP";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new EVP Site") {
			EVPUtils.addEVPSite();
		}

		task ("Add Liferay Manager Role to users can see Resquests and Organizations") {
			EVPUtils.addLiferayManagerUserRole();
		}

		task ("Navigate to EVP Site and Create a Organization and a Request") {
			EVPUtils.gotoEVP();

			EVPOrganization.goToCreateOrganization();

			EVPOrganization.fillOrganizationForm(
				bankingInfo = "Bank Test",
				city = "City Test",
				contactEmail = "test@liferay.com",
				contactName = "Contact Test",
				contactPhone = 12345,
				country = "Country Test",
				done = "true",
				organizationName = "Organization Test",
				organizationSite = "www.test.com.br",
				smallDescription = "Description Test",
				state = "State Test",
				street = "Street Test",
				taxId = 12345,
				zipCode = "12.345-67");

			EVPRequest.fillRequestForm(
				grantAmount = 20,
				grantRequestType = "Proposed",
				organization = "Organization Test",
				phoneNumber = 12345,
				requestBehalf = "Global/Local Poor",
				requestDescription = "Request Description Test",
				requestPurposes = "Basic Education",
				requestType = "Grant");
		}
	}

	tearDown {
		var testPortalInstance = PropsUtil.get("test.portal.instance");

		ObjectAdmin.deleteAllCustomObjectsViaAPI();

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONGroup.deleteGroupByName(groupName = "EVP Portal");
		}
	}

	@description = "LPS-164742 - Finance user can cancel the Payment Confirmation"
	@priority = 3
	test CanCancelPaymentConfirmation {
		task ("Given I have a created request in 'Awaiting Payment Confirmation' status") {
			EVPRequest.changeStatusToAwaitingPaymentConfirmation();
		}

		task ("And the Finance user are in the Payment Confirmation page") {
			EVPRequest.goToRequestOption(
				key_option = "Pay",
				organizationName = "Organization Test");

			EVPNavigator.assertActiveBreadcrumb(activeItem = "Payment Confirmation");
		}

		task ("When the financial user clicks on Cancel Button") {
			EVPRequest.confirmPayment(
				cancelButton = "true",
				dateFormat = "MMddYYYY",
				dateRange = 0,
				document = "Document_1.pdf",
				paymentDate = "true",
				paymentValue = 100);
		}

		task ("Then he can see that the Payment Confirmation was not saved and the status is still 'Awaiting Payment Confirmation'") {
			EVPUtils.viewStatus(
				organizationName = "Organization Test",
				status = "Awaiting Payment Confirmation");
		}
	}

	@description = "LPS-164742 - Finance user should Confirm Payment on requests that are on 'Awaiting Payment Confirmation' Status"
	@priority = 5
	test CanConfirmPayment {
		task ("Given I have a created request in 'Awaiting Payment Confirmation' status") {
			EVPRequest.changeStatusToAwaitingPaymentConfirmation();
		}

		task ("When the Finance user do the Payment Confirmation") {
			EVPRequest.goToRequestOption(
				key_option = "Pay",
				organizationName = "Organization Test");

			EVPNavigator.assertActiveBreadcrumb(activeItem = "Payment Confirmation");

			for (var fieldName : list "Request ID,EVP Payment Date,Payment Value,Upload File") {
				EVPRequest.verifyFieldsName(key_field = ${fieldName});
			}

			EVPRequest.confirmPayment(
				dateFormat = "MMddYYYY",
				dateRange = 0,
				document = "Document_1.pdf",
				paymentDate = "true",
				paymentValue = 100);
		}

		task ("Then he can see that the status change to 'Closed'") {
			EVPNavigator.goToNavItem(navItem = "Request");

			EVPUtils.viewStatus(
				organizationName = "Organization Test",
				status = "Closed");
		}

		task ("When he goes to Request details page") {
			EVPRequest.goToRequestOption(
				key_option = "Details",
				organizationName = "Organization Test");
		}

		task ("Then he can asset the Payment Confirmation date in details page") {
			EVPRequest.viewRequestDetails(paymentDate = ${paymentDate});
		}
	}

	@description = "LPS-180356 - Verify that  the 'phone number' field is enabled  if it's not registered and it is possible to fill this"
	@priority = 3
	test IsPossibleFillPhoneNumberField {
		task ("Given the Employee user doesn't have a phone number registered") {
			EVPUtils.gotoContactInformation(
				category = "User",
				contactUser = "Contact",
				enterUser = "Employee User",
				inforUser = "Contact Information",
				panel = "Control Panel",
				portlet = "Users and Organizations");

			EVPUtils.assertContactInformation(inforMessage = "This user does not have any phone numbers");
		}

		task ("When he goes to Create Request Form") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "employee@liferay.com",
				userLoginFullName = "Employee User");

			EVPUtils.gotoEVP();

			EVPRequest.goToCreateRequest();
		}

		task ("Then the 'phone number' field is enabled and He fill this") {
			EVPUtils.addUserPhoneNumber(
				assertNumber = 1234567890,
				key_number = 1234567890);
		}

		task ("Given the Employee user has a phone number registered") {
			EVPUtils.gotoContactInformation(
				category = "User",
				contactUser = "Contact",
				enterUser = "Employee User",
				inforUser = "Contact Information",
				panel = "Control Panel",
				portlet = "Users and Organizations");

			User.addContactInformation(
				contactType = "add-phone-number-link",
				number = 1234567890);
		}

		task ("When he goes to Create Request Form") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "employee@liferay.com",
				userLoginFullName = "Employee User");

			EVPUtils.gotoEVP();

			EVPRequest.goToCreateRequest();
		}

		task ("Then the 'phone number' field is disabled and it's not possible fill") {
			EVPUtils.assertNotAllowed(notAllowed = "Phone Number");
		}
	}

	@description = "LPS-177444 - Verify that "In flow" requests consume balance"
	@priority = 5
	test VerifyInFlowRequestsConsumeCap {
		task ("Given there is a organization created by a employee") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "employee@liferay.com",
				userLoginFullName = "Employee User");

			EVPUtils.gotoEVP();

			EVPOrganization.goToCreateOrganization();

			EVPOrganization.fillOrganizationForm(
				bankingInfo = "Bank Test",
				city = "City Test",
				contactEmail = "test@liferay.com",
				contactName = "Contact Test",
				contactPhone = 12345,
				country = "Country Test",
				createRequest = "true",
				organizationName = "Organization Test",
				organizationSite = "www.test.com.br",
				smallDescription = "Description Test",
				state = "State Test",
				street = "Street Test",
				taxId = 12345,
				zipCode = "12.345-67");
		}

		task ("When The employee user checks how much is his consume cap") {
			EVPNavigator.goToNavItem(navItem = "Request");

			EVPRequest.goToCreateRequest();

			AssertTextEquals.assertPartialText(
				key_value = 1000,
				locator1 = "EVPRequest#AVAILABLE_VALUE",
				value1 = 1000);
		}

		task ("And He creates some requests") {
			for (var requestNum : list "1,2,3") {
				var requestValue = 100;

				EVPRequest.goToCreateRequest();

				EVPRequest.fillRequestForm(
					grantAmount = ${requestValue},
					grantRequestType = "Proposed",
					organization = "Organization Test",
					phoneNumber = 12345,
					requestBehalf = "Global/Local Poor",
					requestDescription = "Request Description Test ${requestNum}",
					requestPurposes = "Basic Education",
					requestType = "Grant");
			}
		}

		task ("Then he can see that all in flow requests are cosuming the cap") {
			EVPNavigator.goToNavItem(navItem = "Request");

			EVPRequest.goToCreateRequest();

			AssertTextEquals.assertPartialText(
				key_value = 700,
				locator1 = "EVPRequest#AVAILABLE_VALUE",
				value1 = 700);
		}
	}

	@description = "LPS-181769 - Verify that a request of funds has 'Awaiting Approval on EVP' status when it's created"
	@priority = 5
	test VerifyStatusAfterCreatRequest {
		task ("Given that log as Employee user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "employee@liferay.com",
				userLoginFullName = "Employee User");
		}

		task ("And that the Employee user go to the request menu") {
			EVPUtils.gotoEVP();

			EVPRequest.goToCreateRequest();
		}

		task ("When The employee user creates a funds request") {
			EVPOrganization.goToCreateOrganization();

			EVPOrganization.fillOrganizationForm(
				bankingInfo = "Bank Test",
				city = "City Test",
				contactEmail = "test@liferay.com",
				contactName = "Contact Test",
				contactPhone = 12345,
				country = "Country Test",
				createRequest = "true",
				organizationName = "Organization Test",
				organizationSite = "www.test.com.br",
				smallDescription = "Description Test",
				state = "State Test",
				street = "Street Test",
				taxId = 12345,
				zipCode = "12.345-67");

			EVPRequest.fillRequestForm(
				grantAmount = 10,
				grantRequestType = "Proposed",
				organization = "Organization Test",
				phoneNumber = 12345,
				requestBehalf = "Global/Local Poor",
				requestDescription = "Request Description Test",
				requestPurposes = "Basic Education",
				requestType = "Grant");
		}

		task ("Then the Employee user can see the status on request listing") {
			EVPNavigator.goToNavItem(navItem = "Request");

			EVPUtils.viewStatus(
				organizationName = "Organization Test",
				status = "Awaiting Approval On EVP");
		}
	}

	@description = "LPS-164742 - The uploaded files are being stored on DM"
	@priority = 3
	test VerifyUploadedFileOnDM {
		task ("Given I have a created request in 'Awaiting Payment Confirmation' status") {
			EVPRequest.changeStatusToAwaitingPaymentConfirmation();
		}

		task ("When the Finance user do the Payment Confirmation") {
			EVPRequest.goToRequestOption(
				key_option = "Pay",
				organizationName = "Organization Test");

			EVPNavigator.assertActiveBreadcrumb(activeItem = "Payment Confirmation");

			for (var fieldName : list "Request ID,EVP Payment Date,Payment Value,Upload File") {
				EVPRequest.verifyFieldsName(key_field = ${fieldName});
			}

			EVPRequest.confirmPayment(
				dateFormat = "MMddYYYY",
				dateRange = 0,
				document = "Document_1.pdf",
				paymentDate = "true",
				paymentValue = 100);
		}

		task ("Then the Finance user can see the approved document in Documents and Media") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Documents and Media");

			DMNavigator.gotoFolder(dmFolderName = "EVPPaymentConfirmation");

			DMDocument.viewStatus(
				dmDocumentStatus = "Approved",
				dmDocumentTitle = "Document_1");
		}
	}

}