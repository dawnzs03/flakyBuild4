import com.bmuschko.gradle.docker.tasks.container.DockerCreateContainer
import com.bmuschko.gradle.docker.tasks.container.DockerRemoveContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStartContainer
import com.bmuschko.gradle.docker.tasks.container.DockerStopContainer
import com.bmuschko.gradle.docker.tasks.container.extras.DockerWaitHealthyContainer

buildscript {
	dependencies {
		classpath group: "com.bmuschko", name: "gradle-docker-plugin", version: "6.7.0"
		classpath group: "gradle.plugin.com.liferay", name: "gradle-plugins-app-docker", version: "latest.release"
	}

	repositories {
		maven {
			url "https://repository-cdn.liferay.com/nexus/content/groups/public"
		}
	}
}

apply plugin: "com.liferay.app.docker"
apply plugin: "com.liferay.root.defaults.plugin"
apply plugin: "com.liferay.yarn.defaults.plugin"

task checkDocker(type: DockerWaitHealthyContainer)
task copyDockerResources(type: Copy)
task createDocker(type: DockerCreateContainer)
task removeDocker(type: DockerRemoveContainer)
task startDocker(type: DockerStartContainer)
task stopDocker(type: DockerStopContainer)

def dockerContainerId = "faro"

ext.faroEnvironmentName = System.getenv().get("FARO_ENVIRONMENT_NAME") ?: "local"
ext.faroImageTag = project.hasProperty("docker.image.tag") ? project.getProperty("docker.image.tag") : "latest"

appDocker {
	imageName "liferay/com-liferay-osb-faro"
	imageTags = [faroEnvironmentName.equals("prd") ? "prd-" + new Date().format("yyyyMMdd") : faroImageTag]
	inputDir "osb-faro-docker/" + faroEnvironmentName

	onlyIf {
		false
	}
}

checkDocker {
	targetContainerId {
		dockerContainerId
	}
}

copyDockerResources {
	from "osb-faro-docker/common"
	into "${buildDir}/docker/common"
}

createDocker {
	dependsOn buildAppDockerImage, removeDocker

	containerName = dockerContainerId
	hostConfig.portBindings = ["8000:8000", "8080:8080", "11311:11311"]

	targetImageId {
		appDocker.imageName
	}

	def envFile = file("${rootDir}/local.env")

	if (envFile.exists()) {
		def props = new Properties()

		envFile.withInputStream {
			props.load(it)
		}

		props.each{
			withEnvVar(it.key, it.value)
		}
	}
}

buildAppDockerImage {
	images.add(appDocker.imageName + ":" + appDocker.imageTags[0])

	def LABEL_BUILD_DATE = ('git log -1 --format=%cd').execute().text.trim()
	def LABEL_VCS_REF = ('git rev-parse --short=7 HEAD').execute().text.trim()
	buildArgs = ['LABEL_BUILD_DATE': LABEL_BUILD_DATE, 'LABEL_VCS_REF': LABEL_VCS_REF]
}

docker {
	registryCredentials {
		password = System.getenv("DOCKER_PASSWORD")
		username = System.getenv("DOCKER_USERNAME")
	}
}

prepareAppDockerImageInputDir {
	finalizedBy copyDockerResources

	rename {
		String fileName ->

		if (fileName.endsWith(".jar")) {
			int pos = fileName.indexOf('-')

			if (pos != -1) {
				fileName = fileName.substring(0, pos) + ".jar"
			}
		}

		fileName
	}
}

pushAppDockerImage {
	enabled = false
}

removeDocker {
	force = true

	onError {
	}

	targetContainerId {
		dockerContainerId
	}
}

startDocker {
	finalizedBy {
		checkDocker
	}

	targetContainerId {
		dockerContainerId
	}
}

stopDocker {
	onError {
	}

	targetContainerId {
		dockerContainerId
	}
}

configure(project(":dxp:apps:osb:osb-faro:osb-faro-dependencies")) {
	task copyWedeployResources(type: Copy)
	task wedeploy(type: Exec)

	String deployDir = "../wedeploy/" + faroEnvironmentName + "/deploy"

	copyWedeployResources {
		doFirst {
			delete file(deployDir)
		}

		from configurations.compileOnly
		into deployDir
	}

	wedeploy {
		args "deploy", "--project", "ac-" + faroEnvironmentName
		dependsOn copyWedeployResources
		executable = "lcp"
		workingDir "../wedeploy/".concat(faroEnvironmentName)
	}
}

subprojects {
	afterEvaluate {
		task moveToDocker(type: Exec)

		deploy {
			doFirst {
				delete file(liferay.deployDir)
			}

			finalizedBy moveToDocker

			liferay {
				deployDir = new File("${rootDir}/dxp/apps/osb/osb-faro/build/deploy")
			}
		}

		moveToDocker {
			commandLine "docker", "cp", "-a", liferay.deployDir, dockerContainerId + ":/opt/liferay"
		}
	}

	tasks.all {
		Task task ->

		if (task.name == "baseline") {
			enabled = false
		}
		else if (task.name == "deployDependencies") {
			prepareAppDockerImageInputDir {
				from task.inputs.files
			}
		}
	}

	tasks.withType(Test) {
		maxHeapSize = "4096m"
	}
}