@component-name = "portal-workflow-ee"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property test.run.environment = "EE";
	property testray.main.component.name = "Kaleo Designer";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Workflow.tearDownSpecificWorkflowDefinition(workflowDefinitionTitle = "Edited Workflow Definition");

			Workflow.tearDownWorkflowDefinitions();
		}
	}

	@description = "Verify that, when the user adds a translation, the action reflects in the language selector"
	@priority = 4
	test AddedTranslationsAreDisplayedOnLanguageSelector {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.viewTranslationDropdown(translationOptionSelected = "en-us");

		ProcessBuilderKaleoDesignerReact.viewTranslationLanguageOptionPresent(
			currentTranslationOption = "en-us",
			translationOption = "ca_ES",
			translationStatus = "warning");

		ProcessBuilderKaleoDesignerReact.gotoManageTranslations();

		ProcessBuilderKaleoDesignerReact.deleteLanguage(translationOption = "Catalan");

		ProcessBuilderKaleoDesignerReact.clickButtonDone();

		ProcessBuilderKaleoDesignerReact.viewTranslationDropdown(translationOptionSelected = "en-us");

		ProcessBuilderKaleoDesignerReact.viewTranslationLanguageOptionNotPresent(
			currentTranslationOption = "en-us",
			translationOption = "ca_ES",
			translationStatus = "warning");

		ProcessBuilderKaleoDesignerReact.viewTranslationDropdown(translationOptionSelected = "en-us");

		ProcessBuilderKaleoDesignerReact.gotoManageTranslations();

		ProcessBuilderKaleoDesignerReact.addLanguage(translationOptionSelected = "ca-es");

		ProcessBuilderKaleoDesignerReact.clickButtonDone();

		ProcessBuilderKaleoDesignerReact.viewTranslationDropdown(translationOptionSelected = "en-us");

		ProcessBuilderKaleoDesignerReact.viewTranslationLanguageOptionPresent(
			currentTranslationOption = "en-us",
			translationOption = "ca_ES",
			translationStatus = "warning");
	}

	@description = "Verify that no notification is sent when admin role is removed from Single Approver"
	@priority = 5
	test AssertReceiveNotificationAfterEditSingleApprover {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that the Single Approver is assigned to the Blogs Entry") {
			Workflow.openWorkflowListView();

			Navigator.gotoNavItem(navItem = "Configuration");

			Workflow.configureWorkflow(
				workflowDefinition = "Single Approver",
				workflowResourceValue = "Blogs Entry");
		}

		task ("When the admin role is removed from the Single Approver task review") {
			Navigator.gotoNavItem(navItem = "Workflows");

			Workflow.gotoEditWorkflowDefinition(workflowDefinitionTitle = "Single Approver");

			ProcessBuilderKaleoDesignerReact.selectNodeByLabel(nodeLabel = "review");

			ProcessBuilderKaleoDesignerReact.deleteAssignment(roleName = "Administrator");

			ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

			Button.click(button = "Update");

			Alert.viewSuccessMessageText(successMessage = "Workflow updated successfully.");
		}

		task ("And when a blog entry is added") {
			JSONBlog.addEntry(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title");
		}

		task ("Then the asset creator does not receive notifications") {
			UserBar.gotoDropdownItem(dropdownItem = "Notifications");

			Notifications.viewNoNotificationEntry();
		}
	}

	@description = "Verify that Action can be added"
	@priority = 4
	test CanAddAction {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-20,-40");

		ProcessBuilderKaleoDesignerReact.viewAndFillActions(
			executionTypeOption = "On Entry",
			name = "Liferay Actions",
			script = '''import com.liferay.portal.kernel.workflow.WorkflowConstants;
                        import com.liferay.portal.kernel.workflow.WorkflowStatusManagerUtil;

                        WorkflowStatusManagerUtil.updateStatus(WorkflowConstants.getLabelStatus("approved"), workflowContext);''',
			singleAction = "true",
			type = "Groovy");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.viewPropertyValue(
			propertyName = "Actions",
			propertyValue = "Liferay Actions");
	}

	@description = "Verify that the user can add and edit Nodes into diagram by drag&drop: Condition"
	@priority = 5
	test CanAddAndEditConditionNode {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Condition",
			nodePosition = "0,-200");

		ProcessBuilderKaleoDesignerReact.editNodeInformationField(
			infoOption = "Label",
			infoValue = "Condition Node");

		ProcessBuilderKaleoDesignerReact.viewNodeInfo(
			labelValue = "Condition Node",
			nodeType = "condition");
	}

	@description = "Verify that the user can add and edit Nodes into diagram by drag&drop: End"
	@priority = 5
	test CanAddAndEditEndNode {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "End",
			nodePosition = "90,-300");

		ProcessBuilderKaleoDesignerReact.editNodeInformationField(
			infoOption = "Label",
			infoValue = "End Node");

		ProcessBuilderKaleoDesignerReact.viewNodeInfo(
			labelValue = "End Node",
			nodeType = "end");
	}

	@description = "Verify that the user can add and edit Nodes into diagram by drag&drop: Fork"
	@priority = 5
	test CanAddAndEditForkNode {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Fork",
			nodePosition = "-20,-40");

		ProcessBuilderKaleoDesignerReact.editNodeInformationField(
			infoOption = "Label",
			infoValue = "Fork Node");

		ProcessBuilderKaleoDesignerReact.viewNodeInfo(
			labelValue = "Fork Node",
			nodeType = "fork");
	}

	@description = "Verify that the user can add and Edit Nodes into diagram by drag&drop: Join"
	@priority = 5
	test CanAddAndEditJoinNode {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Join",
			nodePosition = "-20,-40");

		ProcessBuilderKaleoDesignerReact.editNodeInformationField(
			infoOption = "Label",
			infoValue = "Join Node");

		ProcessBuilderKaleoDesignerReact.viewNodeInfo(
			labelValue = "Join Node",
			nodeType = "join");
	}

	@description = "Verify that the user can add and edit Nodes into diagram by drag&drop: Join XOR"
	@priority = 5
	test CanAddAndEditJoinXorNode {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Join XOR",
			nodePosition = "-40,-200");

		ProcessBuilderKaleoDesignerReact.editNodeInformationField(
			infoOption = "Label",
			infoValue = "Join XOR Node");

		ProcessBuilderKaleoDesignerReact.viewNodeInfo(
			labelValue = "Join XOR Node",
			nodeType = "join-xor");
	}

	@description = "Verify that the user can add and edit Nodes into diagram by drag&drop: Start"
	@priority = 5
	test CanAddAndEditStartNode {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Start",
			nodePosition = "70,-200");

		ProcessBuilderKaleoDesignerReact.editNodeInformationField(
			infoOption = "Label",
			infoValue = "Start Node");

		ProcessBuilderKaleoDesignerReact.viewNodeInfo(
			labelValue = "Start Node",
			nodeType = "start");
	}

	@description = "Verify that the user can add and edit Nodes into diagram by drag&drop: State"
	@priority = 5
	test CanAddAndEditStateNode {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "State",
			nodePosition = "50,-420");

		ProcessBuilderKaleoDesignerReact.editNodeInformationField(
			infoOption = "Label",
			infoValue = "State Node");

		ProcessBuilderKaleoDesignerReact.viewNodeInfo(
			labelValue = "State Node",
			nodeType = "state");
	}

	@description = "Verify that the user can add and edit Nodes into diagram by drag&drop: Task"
	@priority = 5
	test CanAddAndEditTaskNode {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-20,-40");

		ProcessBuilderKaleoDesignerReact.editNodeInformationField(
			infoOption = "Label",
			infoValue = "Task Node");

		ProcessBuilderKaleoDesignerReact.viewNodeInfo(
			labelValue = "Task Node",
			nodeType = "task");

		ProcessBuilderKaleoDesignerReact.viewPanelNodePresent(nodeType = "task");
	}

	@description = "Verify that Assignment can be added"
	@priority = 4
	test CanAddAssignment {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-20,-100");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "task");

		ProcessBuilderKaleoDesignerReact.viewAndFillAssignments(
			assignmentType = "Resource Actions",
			resourceActionsText = "Test");

		ProcessBuilderKaleoDesignerReact.viewSelectedAssignments(selectedAssignments = "Resource Actions: Test");
	}

	@description = "Verify that the user can add Multiple Actions to the same node"
	@priority = 4
	test CanAddMultipleActions {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(nodeLabel = "Task");

		ProcessBuilderKaleoDesignerReact.viewAndFillActions(
			actionsTemplateValue = "Action Template",
			name = "Liferay Action",
			newAction = "true",
			newSection = "New Action",
			sectionOptionList = "1,2,3",
			type = "Groovy");

		ProcessBuilderKaleoDesignerReact.viewMultipleActionPresent(
			actionsTemplateValue = "Action Template",
			name = "Liferay Action",
			sectionOptionList = "1,2,3");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.viewPropertyValue(
			propertyName = "Actions",
			propertyValue = "Liferay Action 1,Liferay Action 2,Liferay Action 3");
	}

	@description = "Verify that the user can add multiple notifications"
	@priority = 4
	test CanAddMultipleNotifications {
		property portal.upstream = "quarantine";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(
			name = "Liferay Notification",
			newNotification = "true",
			newSection = "New Notification",
			notificationTemplateValue = "Liferay Template",
			notificationTypeOption = "Email",
			sectionOptionList = "1,2,");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.viewNotificationPresent(notificationName = "Liferay Notification 1,Liferay Notification 2");
	}

	@description = "Verify that the user can add multiple Timers to a task node"
	@priority = 4
	test CanAddMultipleTimers {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(nodeLabel = "Task");

		ProcessBuilderKaleoDesignerReact.addTimerWithSingleAction(
			actionName = "Liferay Timer 1",
			durationScale = "Minute",
			durationValue = 1,
			script = "Liferay Timer Template 1",
			scriptType = "Java");

		ProcessBuilderKaleoDesignerReact.addTimerWithSingleAction(
			actionName = "Liferay Timer 2",
			durationScale = "Minute",
			durationValue = 2,
			script = "Liferay Timer Template 2",
			scriptType = "Java");

		ProcessBuilderKaleoDesignerReact.addTimerWithSingleAction(
			actionName = "Liferay Timer 3",
			durationScale = "Minute",
			durationValue = 3,
			script = "Liferay Timer Template 3",
			scriptType = "Java");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.viewPropertyValue(
			propertyName = "Timer",
			propertyValue = "Duration: 1 minute");

		ProcessBuilderKaleoDesignerReact.viewPropertyValue(
			propertyName = "Timer",
			propertyValue = "Duration: 2 minute");

		ProcessBuilderKaleoDesignerReact.viewPropertyValue(
			propertyName = "Timer",
			propertyValue = "Duration: 3 minute");
	}

	@description = "Verify that is possible to add new languages"
	@priority = 3
	test CanAddNewLanguages {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.viewTranslationDropdown(translationOptionSelected = "en-us");

		ProcessBuilderKaleoDesignerReact.gotoManageTranslations();

		ProcessBuilderKaleoDesignerReact.deleteLanguage(translationOption = "Catalan");

		ProcessBuilderKaleoDesignerReact.viewLanguageOptionNotPresent(languageOption = "Catalan");

		ProcessBuilderKaleoDesignerReact.addLanguage(translationOptionSelected = "ca-es");

		ProcessBuilderKaleoDesignerReact.viewLanguageOptionPresent(languageOption = "Catalan");
	}

	@description = "Verify that Notification can be added"
	@priority = 4
	test CanAddNotification {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-20,-40");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(
			name = "Liferay Notification",
			newNotification = "true",
			notificationTemplateValue = "Notification Template",
			notificationTypeOption = "User Notification",
			singleAction = "true");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.viewPropertyValue(
			propertyName = "Notification",
			propertyValue = "Liferay Notification");
	}

	@description = "Verify that the user is able to add a Script to define the Action"
	@priority = 3
	test CanAddScriptToDefineAction {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-20,-40");

		ProcessBuilderKaleoDesignerReact.viewAndFillActions(
			executionTypeOption = "On Entry",
			name = "Liferay Actions",
			script = '''import com.liferay.portal.kernel.workflow.WorkflowConstants;
                        import com.liferay.portal.kernel.workflow.WorkflowStatusManagerUtil;

                        WorkflowStatusManagerUtil.updateStatus(WorkflowConstants.getLabelStatus("approved"), workflowContext);''',
			singleAction = "true",
			type = "Groovy");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoSideBarProperty(
			propertyName = "Actions",
			propertyValue = "Liferay Actions");

		ProcessBuilderKaleoDesignerReact.viewActionsInfo(actionsTemplateValue = "Action Script Template");
	}

	@description = "Verify that Timers can be added"
	@priority = 4
	test CanAddTimers {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-20,-40");

		ProcessBuilderKaleoDesignerReact.addTimerWithSingleAction(
			actionName = "Liferay Timer",
			durationScale = "Minute",
			durationValue = 2,
			script = "Timer Template",
			scriptType = "Java");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.viewPropertyValue(
			propertyName = "Timer",
			propertyValue = "Duration: 2 minute");
	}

	@description = "Verify that the user can add translations"
	@priority = 4
	test CanAddTranslations {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "Test title");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "end",
			connectorLabel = "Start-End Connector",
			connectorOut = "start",
			key_direction = "right");

		Button.clickPublish();

		ProcessBuilderKaleoDesignerReact.selectTranslationLanguage(key_locale = "pt_BR");

		for (var nodeTypes : list "start,end") {
			ProcessBuilderKaleoDesignerReact.selectNode(nodeType = ${nodeTypes});

			ProcessBuilderKaleoDesignerReact.editNodeInformationField(
				infoOption = "Label",
				infoValue = "pt_${nodeTypes}");
		}

		ProcessBuilderKaleoDesignerReact.editConnector(
			connectorLabel = "START-END CONNECTOR",
			connectorLabelEdit = "pt_Start-End Connector");

		ProcessBuilderKaleoDesignerReact.editWorkflowTitle(title = "pt_Workflow Definition");

		ProcessBuilderKaleoDesignerReact.openTranslationLanguageDropdown();

		AssertTextEquals(
			key_locale = "pt_BR",
			locator1 = "Translation#TRANSLATION_LANGUAGE_STATUS_LABEL",
			value1 = "Translated");
	}

	@description = "Verify that is possible to select Account role type for role assignments"
	@priority = 5
	test CanAssignAccountRole {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "0,0");

		ProcessBuilderKaleoDesignerReact.viewAndFillAssignments(
			assignmentType = "Role Type",
			roleTypeName = "Account",
			roleTypeRoleName = "Account Member");

		ProcessBuilderKaleoDesignerReact.viewSelectedAssignments(selectedAssignments = "Role Type: Account Member");
	}

	@description = "Verify that the user is able to assign the task node to multiple Role Types"
	@priority = 4
	test CanAssignMultipleRoleTypesToTaskNode {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "0,0");

		ProcessBuilderKaleoDesignerReact.viewAndFillAssignments(
			assignmentType = "Role Type",
			roleTypeName = "Organization",
			roleTypeRoleName = "Organization User");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "task");

		ProcessBuilderKaleoDesignerReact.gotoSideBarProperty(
			propertyName = "Assignments",
			propertyValue = "Role Type:Organization User");

		ProcessBuilderKaleoDesignerReact.addRoleTypeByPositionOnAssignments(
			assignmentType = "Role Type",
			newSection = "New Section",
			roleTypeName = "Account",
			roleTypeRoleName = "Account Member",
			sectionOptionList = 3);

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoSideBarProperty(
			propertyName = "Assignments",
			propertyValue = "Role Type:Organization User");

		ProcessBuilderKaleoDesignerReact.addRoleTypeByPositionOnAssignments(
			assignmentType = "Role Type",
			newSection = "New Section",
			roleTypeName = "Regular",
			roleTypeRoleName = "Owner",
			sectionOptionList = 4);

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoSideBarProperty(
			propertyName = "Assignments",
			propertyValue = "Role Type:Organization User");

		ProcessBuilderKaleoDesignerReact.viewSelectedRoleAssignmentsByPosition(
			inputOption = "Role",
			positonOption = 2,
			selectedRole = "Organization");

		ProcessBuilderKaleoDesignerReact.viewSelectedRoleAssignmentsByPosition(
			inputOption = "Role",
			positonOption = 3,
			selectedRole = "Account");

		ProcessBuilderKaleoDesignerReact.viewSelectedRoleAssignmentsByPosition(
			inputOption = "Role",
			positonOption = 4,
			selectedRole = "Organization");
	}

	@description = "Verify that the user is able to assign the task node to a single Role Type"
	@priority = 3
	test CanAssignSingleRoleTypeToTaskNode {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "0,0");

		ProcessBuilderKaleoDesignerReact.viewAndFillAssignments(
			assignmentType = "Role Type",
			roleTypeName = "Organization",
			roleTypeRoleName = "Organization User");

		ProcessBuilderKaleoDesignerReact.viewSelectedAssignments(selectedAssignments = "Role Type: Organization User");
	}

	@description = "Verify that the user is able to assign the task node to the Asset Creator"
	@priority = 4
	test CanAssignTaskNodeToAssetCreator {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "0,0");

		ProcessBuilderKaleoDesignerReact.viewAndFillAssignments(assignmentType = "Asset Creator");

		ProcessBuilderKaleoDesignerReact.viewSelectedAssignments(selectedAssignments = "Asset Creator");
	}

	@description = "Verify that the user is able to assign the task node to a Resource Action"
	@priority = 3
	test CanAssignTaskNodeToResourceActions {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "0,0");

		ProcessBuilderKaleoDesignerReact.viewAndFillAssignments(
			assignmentType = "Resource Actions",
			resourceActionsText = "Test");

		ProcessBuilderKaleoDesignerReact.viewSelectedAssignments(selectedAssignments = "Resource Actions: Test");
	}

	@description = "Verify that the user is able to assign the task node to a Role"
	@priority = 4
	test CanAssignTaskNodeToRole {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "0,0");

		ProcessBuilderKaleoDesignerReact.viewAndFillAssignments(
			assignmentType = "Role",
			roleName = "Asset Library Member");

		ProcessBuilderKaleoDesignerReact.viewSelectedAssignments(selectedAssignments = "Role: Asset Library Member");
	}

	@description = "Verify that the user is able to assign the task node to a specific User"
	@priority = 4
	test CanAssignTaskNodeToSpecificUser {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "0,0");

		ProcessBuilderKaleoDesignerReact.viewAndFillAssignments(
			assignmentType = "User",
			inputFieldId = "search",
			userScreenName = "Test");

		ProcessBuilderKaleoDesignerReact.viewSelectedAssignments(selectedAssignments = "User: Test");
	}

	@description = "LRQA-72980 - Verify that the user can cancel the deletion of a node by clicking on the Cancel button"
	@priority = 3
	test CanCancelDelete {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-20,-40");

		ProcessBuilderKaleoDesignerReact.deleteNodeByDeleteKey(
			cancel = "true",
			nodeType = "task",
			title = "Delete Task Node");
	}

	@description = "LPS-139387 - Verify that the user can cancel the deletion of a node by clicking on the X button"
	@priority = 3
	test CanCloseDeleteModal {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-20,-40");

		ProcessBuilderKaleoDesignerReact.deleteNodeByDeleteKey(
			close = "true",
			nodeType = "task",
			title = "Delete Task Node");
	}

	@description = "Verify that when the user click “X”, the Manage Translations window closes"
	@priority = 3
	test CanCloseManageTranslationsWindowOnXClick {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.viewTranslationDropdown(translationOptionSelected = "en-us");

		ProcessBuilderKaleoDesignerReact.gotoManageTranslations();

		ProcessBuilderKaleoDesignerReact.viewModalPresent(modalTitle = "Manage Translations");

		ProcessBuilderKaleoDesignerReact.closeModal();

		ProcessBuilderKaleoDesignerReact.viewModalNotPresent(modalTitle = "Manage Translations");
	}

	@description = "Verify that the user is able to complete the task through different types of users assigned at My Workflow Task"
	@priority = 4
	test CanCompleteTaskThroughDifferentUsersAssignments {
		property test.liferay.virtual.instance = "false";

		task ("Given two users with admin role") {
			for (var accountUser : list "1,2") {
				JSONUser.addUser(
					userEmailAddress = "userea${accountUser}@liferay.com",
					userFirstName = "userfn${accountUser}",
					userLastName = "userln${accountUser}",
					userScreenName = "usersn${accountUser}");

				JSONUser.setFirstPassword(
					agreeToTermsAndAnswerReminderQuery = "true",
					requireReset = "false",
					userEmailAddress = "userea${accountUser}@liferay.com");

				JSONRole.assignRoleToUser(
					roleTitle = "Administrator",
					userEmailAddress = "userea${accountUser}@liferay.com");
			}
		}

		task ("And given a workflow definition with node task assigned to the admin role") {
			Workflow.openWorkflowListView();

			Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

			ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
				nodeLabel = "Task",
				nodePosition = "-20,-40");

			ProcessBuilderKaleoDesignerReact.addConnector(
				connectorIn = "task",
				connectorLabel = "Start-Task Connector",
				connectorOut = "start",
				key_direction = "right");

			ProcessBuilderKaleoDesignerReact.addConnector(
				connectorIn = "end",
				connectorLabel = "Complete Task",
				connectorOut = "task",
				key_direction = "right");

			ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "task");

			ProcessBuilderKaleoDesignerReact.viewAndFillAssignments(
				assignmentType = "Role",
				roleName = "Administrator");

			PortletEntry.publish();
		}

		task ("And given that the workflow definition is assigned to the Blogs Entry") {
			Navigator.gotoBack();

			Navigator.gotoNavItem(navItem = "Configuration");

			Workflow.configureWorkflow(
				workflowDefinition = "New Workflow Definition",
				workflowResourceValue = "Blogs Entry");
		}

		task ("When two blog entries are added") {
			for (var blogNumber : list "1,2") {
				JSONBlog.addEntry(
					entryContent = "Blogs Entry ${blogNumber} Content",
					entryTitle = "Blogs Entry Title ${blogNumber}");
			}
		}

		task ("Then the task can be completed by each user") {
			for (var i : list "1,2") {
				User.logoutAndLoginPG(
					freeLogin = "true",
					userLoginEmailAddress = "userea${i}@liferay.com",
					userLoginFullName = "userfn${i} userln${i}");

				UserBar.gotoDropdownItem(dropdownItem = "My Workflow Tasks");

				Workflow.assignToMeTaskByActions(
					workflowAssetTitle = "Blogs Entry Title ${i}",
					workflowAssetType = "Blogs Entry",
					workflowTask = "Task");

				Workflow.approveTaskByActions(
					workflowAssetTitle = "Blogs Entry Title ${i}",
					workflowAssetType = "Blogs Entry",
					workflowDefinitionTask = "Complete Task",
					workflowTask = "Task");
			}
		}
	}

	@description = "Verify that the user can select and define an Action to be conducted once the timer expires"
	@priority = 3
	test CanConfigureActionAtTimers {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(nodeLabel = "Task");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-20,-40");

		ProcessBuilderKaleoDesignerReact.addTimerWithSingleAction(
			actionName = "Liferay Timer 1",
			durationScale = "Minute",
			durationValue = 2,
			script = "${userName} sent you a ${entryType} for review in the workflow.",
			scriptType = "Java");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoSideBarProperty(
			propertyName = "Timer",
			propertyValue = "Duration: 2 minute");

		AssertVisible(
			key_actionName = "Liferay Timer 1",
			locator1 = "ProcessBuilderKaleoDesignerReact#ACTIONS_NAME_ON_TIMERS_FIELD");
	}

	@description = "Verify that the user can add multiple Actions to Timers at task node"
	@priority = 3
	test CanConfigureMultipleActionsAtTimers {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(nodeLabel = "Task");

		ProcessBuilderKaleoDesignerReact.addTimerWithSingleAction(
			actionName = "Liferay Timer 1",
			durationScale = "Minute",
			durationValue = 2,
			script = "${userName} sent you a ${entryType} for review in the workflow.",
			scriptType = "Java");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoSideBarProperty(
			propertyName = "Timer",
			propertyValue = "Duration: 2 minute");

		ProcessBuilderKaleoDesignerReact.addActionToTimer(
			actionName = "Liferay Timer 2",
			script = "${userName} sent you a ${entryType} for review in the workflow.",
			scriptType = "Java");

		ProcessBuilderKaleoDesignerReact.addActionToTimer(
			actionName = "Liferay Timer 3",
			script = "${userName} sent you a ${entryType} for review in the workflow.",
			scriptType = "Java");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoSideBarProperty(
			propertyName = "Timer",
			propertyValue = "Duration: 2 minute");

		AssertVisible(
			key_actionName = "Liferay Timer 2",
			locator1 = "ProcessBuilderKaleoDesignerReact#ACTIONS_NAME_ON_TIMERS_FIELD");

		AssertVisible(
			key_actionName = "Liferay Timer 3",
			locator1 = "ProcessBuilderKaleoDesignerReact#ACTIONS_NAME_ON_TIMERS_FIELD");
	}

	@description = "Verify that the user can select and define an Reassignment to be conducted once the timer expires"
	@priority = 3
	test CanConfigureReassignmentAtTimers {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(nodeLabel = "Task");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-20,-40");

		ProcessBuilderKaleoDesignerReact.addTimerWithSingleAction(
			actionName = "Liferay Timer",
			actionType = "Reassignment",
			durationScale = "Minute",
			durationValue = 2);

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoSideBarProperty(
			propertyName = "Timer",
			propertyValue = "Duration: 2 minute");

		AssertVisible(
			key_selectorField = "Type",
			locator1 = "ProcessBuilderKaleoDesignerReact#PROPERTIES_SELECTORS",
			value1 = "Reassignment");
	}

	@description = "Verify that the user can create a Template for Notification"
	@priority = 4
	test CanCreateNotificationTemplate {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "end",
			connectorLabel = "Start-End Connector",
			connectorOut = "start",
			key_direction = "right");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(
			description = "Notification Description",
			name = "New Notification",
			newNotification = "true",
			notificationTemplateValue = "${userName} sent you a ${entryType} for review in the workflow.",
			notificationTypeOption = "User Notification",
			singleAction = "true",
			templateLanguageOption = "FreeMarker");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoNotification(notificationName = "New Notification");

		ProcessBuilderKaleoDesignerReact.viewNotificationInfo(notificationTemplateValue = "${userName} sent you a ${entryType} for review in the workflow.");

		Button.clickPublish();

		Navigator.gotoBack();

		Navigator.gotoNavItem(navItem = "Configuration");

		Workflow.configureWorkflow(
			workflowDefinition = "New Workflow Definition",
			workflowResourceValue = "Blogs Entry");

		JSONBlog.addEntry(
			entryContent = "Blogs Entry Content",
			entryTitle = "Blogs Entry Title");

		UserBar.gotoDropdownItem(dropdownItem = "Notifications");

		WorkflowAsset.viewNotification(contentBody = "Test Test sent you a Blogs Entry for review in the workflow.");
	}

	@description = "LPS-140056 - Verify that only one transition in the same direction from one node to the other can be created"
	@priority = 4
	test CanCreateOnlyOneTransitionInSameDirection {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "end",
			connectorLabel = "Start-End Connector1",
			connectorOut = "start",
			key_direction = "right");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "end",
			connectorOut = "start",
			key_direction = "right");

		ProcessBuilderKaleoDesignerReact.viewConnectorPresent(connectorLabel = "START-END CONNECTOR1");

		ProcessBuilderKaleoDesignerReact.viewConnectorNotPresent(connectorLabel = "TRANSITION LABEL");
	}

	@description = "Verify that user can create transition between nodes from the edge of node"
	@priority = 5
	test CanCreateTransition {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-20,-100");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "task",
			connectorLabel = "StartTaskConnector",
			connectorOut = "start",
			key_direction = "right");

		ProcessBuilderKaleoDesignerReact.viewConnectorPresent(connectorLabel = "STARTTASKCONNECTOR");
	}

	@description = "Verify that the user is able to input a Groovy script to define the assignment"
	@priority = 4
	test CanDefineAssignmentWithGroovyScript {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-0,0");

		ProcessBuilderKaleoDesignerReact.viewAndFillAssignments(
			assignmentType = "Scripted Assignment",
			groovyScript = "groovyScript = \"if(type == 'behaviorClarification') {invalidFields = true} else {invalidFields = false}\");");
	}

	@description = "Verify that the user is able to define the Resource Action"
	@priority = 3
	test CanDefineResourceAction {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(nodeLabel = "Task");

		ProcessBuilderKaleoDesignerReact.viewAndFillAssignments(
			assignmentType = "Resource Actions",
			resourceActionsText = "Test");

		ProcessBuilderKaleoDesignerReact.viewSelectedAssignments(selectedAssignments = "Resource Actions: Test");
	}

	@description = "Verify that the user can delete action with the trash icon at the bottom right corner"
	@priority = 4
	test CanDeleteAction {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-20,-40");

		ProcessBuilderKaleoDesignerReact.viewAndFillActions(
			executionTypeOption = "On Entry",
			name = "Liferay Actions",
			script = '''import com.liferay.portal.kernel.workflow.WorkflowConstants;
                        import com.liferay.portal.kernel.workflow.WorkflowStatusManagerUtil;

                        WorkflowStatusManagerUtil.updateStatus(WorkflowConstants.getLabelStatus("approved"), workflowContext);''',
			singleAction = "true",
			type = "Groovy");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.viewAndDeleteBySidebarProperty(
			propertyValue = "Liferay Actions",
			sidebarPropertyName = "Actions");

		ProcessBuilderKaleoDesignerReact.viewPropertyNotPresentOnSideBar(
			propertyName = "Actions",
			propertyValue = "Liferay Actions");
	}

	@description = "Verify that the user can delete actions inside Timers"
	@priority = 3
	test CanDeleteActionsAtTimers {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(nodeLabel = "Task");

		ProcessBuilderKaleoDesignerReact.addTimerWithSingleAction(
			actionName = "Liferay Timer 1",
			durationScale = "Minute",
			durationValue = 2,
			script = "${userName} sent you a ${entryType} for review in the workflow.",
			scriptType = "Java");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoSideBarProperty(
			propertyName = "Timer",
			propertyValue = "Duration: 2 minute");

		ProcessBuilderKaleoDesignerReact.addActionToTimer(
			actionName = "Liferay Timer 2",
			script = "${userName} sent you a ${entryType} for review in the workflow.",
			scriptType = "Java");

		ProcessBuilderKaleoDesignerReact.addActionToTimer(
			actionName = "Liferay Timer 3",
			script = "${userName} sent you a ${entryType} for review in the workflow.",
			scriptType = "Java");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoSideBarProperty(
			propertyName = "Timer",
			propertyValue = "Duration: 2 minute");

		ProcessBuilderKaleoDesignerReact.deleteTimerAction(actionName = "Liferay Timer 2");

		AssertVisible(
			key_actionName = "Liferay Timer 1",
			locator1 = "ProcessBuilderKaleoDesignerReact#ACTIONS_NAME_ON_TIMERS_FIELD");

		AssertVisible(
			key_actionName = "Liferay Timer 3",
			locator1 = "ProcessBuilderKaleoDesignerReact#ACTIONS_NAME_ON_TIMERS_FIELD");

		AssertElementNotPresent(
			key_actionName = "Liferay Timer 2",
			locator1 = "ProcessBuilderKaleoDesignerReact#ACTIONS_NAME_ON_TIMERS_FIELD");
	}

	@description = "Verify that the user can delete all actions with the trash icon at the top right corner"
	@priority = 3
	test CanDeleteAllActionsAtOnce {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(nodeLabel = "Task");

		ProcessBuilderKaleoDesignerReact.viewAndFillActions(
			actionsTemplateValue = "Action Template",
			name = "Liferay Action",
			newAction = "true",
			newSection = "New Action",
			sectionOptionList = "1,2,3",
			type = "Groovy");

		ProcessBuilderKaleoDesignerReact.viewMultipleActionPresent(
			actionsTemplateValue = "Action Template",
			name = "Liferay Action",
			sectionOptionList = "1,2,3");

		ProcessBuilderKaleoDesignerReact.deleteByTrashTopSidebar(
			modalMessage = "Are you sure you want to delete all actions and their settings?",
			sidebarPropertyName = "Actions");

		AssertElementPresent(
			key_propertyName = "Actions",
			locator1 = "ProcessBuilderKaleoDesignerReact#PROPERTIES_NEW_BUTTON");
	}

	@description = "Verify that the user can delete all Timers at once"
	@priority = 3
	test CanDeleteAllTimers {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(nodeLabel = "Task");

		ProcessBuilderKaleoDesignerReact.addTimerWithSingleAction(
			actionName = "Liferay Timer 1",
			durationScale = "Minute",
			durationValue = 1,
			script = "Timer Template 1",
			scriptType = "Java");

		ProcessBuilderKaleoDesignerReact.addTimerWithSingleAction(
			actionName = "Liferay Timer 2",
			durationScale = "Minute",
			durationValue = 2,
			script = "Timer Template 2",
			scriptType = "Java");

		ProcessBuilderKaleoDesignerReact.addTimerWithSingleAction(
			actionName = "Liferay Timer 3",
			durationScale = "Minute",
			durationValue = 3,
			script = "Timer Template 3",
			scriptType = "Java");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.deleteBySidebarCard(
			propertyValue = "Duration: 1 minute",
			sidebarCardName = "Timers");

		ProcessBuilderKaleoDesignerReact.viewTimerNotPresent(propertyValue = "Duration: 1 minute");

		ProcessBuilderKaleoDesignerReact.viewTimerNotPresent(propertyValue = "Duration: 2 minute");

		ProcessBuilderKaleoDesignerReact.viewTimerNotPresent(propertyValue = "Duration: 3 minute");
	}

	@description = "Verify that the user can delete Nodes of Condition"
	@priority = 4
	test CanDeleteConditionNode {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Condition",
			nodePosition = "-20,-100");

		ProcessBuilderKaleoDesignerReact.deleteNodeOrConnection(
			modalMessage = "Are you sure you want to delete the selected condition node?",
			nodeType = "condition",
			title = "Delete Condition Node");

		ProcessBuilderKaleoDesignerReact.viewPanelNodeNotPresent(nodeType = "condition");
	}

	@description = "Verify that the user can delete Nodes of End"
	@priority = 4
	test CanDeleteEndNode {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "end");

		ProcessBuilderKaleoDesignerReact.deleteNodeOrConnection(
			modalMessage = "Are you sure you want to delete the selected end node?",
			nodeType = "end",
			title = "Delete End Node");

		ProcessBuilderKaleoDesignerReact.viewPanelNodeNotPresent(nodeType = "end");
	}

	@description = "Verify that the user can delete Nodes of Fork"
	@priority = 4
	test CanDeleteForkNode {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Fork",
			nodePosition = "20,-500");

		ProcessBuilderKaleoDesignerReact.deleteNodeOrConnection(
			modalMessage = "Are you sure you want to delete the selected fork node?",
			nodeType = "fork",
			title = "Delete Fork Node");

		ProcessBuilderKaleoDesignerReact.viewPanelNodeNotPresent(nodeType = "fork");
	}

	@description = "Verify that the user can delete Nodes of Join"
	@priority = 4
	test CanDeleteJoinNode {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Join",
			nodePosition = "-80,-40");

		ProcessBuilderKaleoDesignerReact.deleteNodeOrConnection(
			modalMessage = "Are you sure you want to delete the selected join node?",
			nodeType = "join",
			title = "Delete Join Node");

		ProcessBuilderKaleoDesignerReact.viewPanelNodeNotPresent(nodeType = "join");
	}

	@description = "Verify that the user can delete Nodes of Join XOR"
	@priority = 4
	test CanDeleteJoinXORNode {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Join XOR",
			nodePosition = "-40,-200");

		ProcessBuilderKaleoDesignerReact.deleteNodeOrConnection(
			modalMessage = "Are you sure you want to delete the selected join xor node?",
			nodeType = "join-xor",
			title = "Delete Join Xor Node");

		ProcessBuilderKaleoDesignerReact.viewPanelNodeNotPresent(nodeType = "join-xor");
	}

	@description = "Verify that the user can delete all notifications configurations"
	@priority = 4
	test CanDeleteMultipleNotifications {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(
			name = "Liferay Notification",
			newNotification = "true",
			newSection = "New Notification",
			notificationTemplateValue = "Liferay Template",
			notificationTypeOption = "Email",
			sectionOptionList = "1,2,");

		ProcessBuilderKaleoDesignerReact.viewMultipleNotificationPresent(
			name = "Liferay Notification",
			notificationTemplateValue = "Liferay Template",
			notificationTypeOption = "Email",
			sectionOptionList = "1,2");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.viewPropertyValue(
			propertyName = "Notification",
			propertyValue = "Liferay Notification 1,Liferay Notification 2");

		ProcessBuilderKaleoDesignerReact.gotoNotification(notificationName = "Liferay Notification 1,Liferay Notification 2");

		ProcessBuilderKaleoDesignerReact.deleteByTrashTopSidebar(
			modalMessage = "Are you sure you want to delete all notifications and their settings?",
			sidebarPropertyName = "Notification");

		ProcessBuilderKaleoDesignerReact.viewNotificationNotPresent(notificationName = "Liferay Notification 1,Liferay Notification 2");
	}

	@description = "LPS-139387 - Verify that the user is able to delete a node using the Delete key"
	@priority = 4
	test CanDeleteNodeViaDeleteKey {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "20,-500");

		ProcessBuilderKaleoDesignerReact.deleteNodeByDeleteKey(
			delete = "true",
			nodeType = "task",
			title = "Delete Task Node");
	}

	@description = "LPS-139387 - Verify that the user is able to delete a node using the Delete icon in the sidebar"
	@priority = 4
	test CanDeleteNodeViaSidebar {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "20,-500");

		ProcessBuilderKaleoDesignerReact.deleteNodeOrConnection(
			modalMessage = "Are you sure you want to delete the selected task node?",
			nodeType = "task",
			title = "Delete Task Node");

		ProcessBuilderKaleoDesignerReact.viewPanelNodeNotPresent(nodeType = "task");
	}

	@description = "Verify that the user can delete notification role types"
	@priority = 3
	test CanDeleteNotificationRoleTypes {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "0,0");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(
			description = "Notification Description",
			name = "New Notification",
			newNotification = "true",
			notificationsRoleType = "Organization",
			notificationsRoleTypeRoleName = "Organization Administrator",
			notificationTemplateValue = "${userName} sent you a ${entryType} for review in the workflow.",
			notificationTypeOption = "User Notification",
			recipientTypeOption = "Role Type",
			singleAction = "true",
			templateLanguageOption = "FreeMarker");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoNotification(notificationName = "New Notification");

		ProcessBuilderKaleoDesignerReact.addRoleTypeInNotifications(
			newSection = "New Role Type",
			roleName = "Account Member",
			roleType = "Account");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoNotification(notificationName = "New Notification");

		ProcessBuilderKaleoDesignerReact.deleteRoleTypeInNotifications(index = 1);

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoNotification(notificationName = "New Notification");

		ProcessBuilderKaleoDesignerReact.viewRoleTypeNotPresentInSidebar(roleType = "Organization");
	}

	@description = "Verify that the user can delete a specific notification configuration"
	@priority = 5
	test CanDeleteSpecificNotification {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(
			name = "Liferay Notification",
			newNotification = "true",
			newSection = "New Notification",
			notificationTemplateValue = "Liferay Template",
			notificationTypeOption = "Email",
			sectionOptionList = "1,2,");

		ProcessBuilderKaleoDesignerReact.viewMultipleNotificationPresent(
			name = "Liferay Notification",
			notificationTemplateValue = "Liferay Template",
			notificationTypeOption = "Email",
			sectionOptionList = "1,2");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.viewPropertyValue(
			propertyName = "Notification",
			propertyValue = "Liferay Notification 1,Liferay Notification 2");

		ProcessBuilderKaleoDesignerReact.gotoNotification(notificationName = "Liferay Notification 1,Liferay Notification 2");

		ProcessBuilderKaleoDesignerReact.deleteByIconTrashSidebar(propertyValue = "Liferay Notification 1");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.viewNotificationNotPresent(notificationName = "Liferay Notification 1");
	}

	@description = "Verify that the user can delete Nodes of Start"
	@priority = 4
	test CanDeleteStartNode {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.deleteNodeOrConnection(
			modalMessage = "Are you sure you want to delete the selected start node?",
			nodeType = "start",
			title = "Delete Start Node");

		ProcessBuilderKaleoDesignerReact.viewPanelNodeNotPresent(nodeType = "start");
	}

	@description = "Verify that the user can delete Nodes of State"
	@priority = 4
	test CanDeleteStateNode {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "State",
			nodePosition = "50,-420");

		ProcessBuilderKaleoDesignerReact.deleteNodeOrConnection(
			modalMessage = "Are you sure you want to delete the selected state node?",
			nodeType = "state",
			title = "Delete State Node");

		ProcessBuilderKaleoDesignerReact.viewPanelNodeNotPresent(nodeType = "state");
	}

	@description = "Verify that the user can delete Nodes of Task"
	@priority = 4
	test CanDeleteTaskNode {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-20,-40");

		ProcessBuilderKaleoDesignerReact.deleteNodeOrConnection(
			modalMessage = "Are you sure you want to delete the selected task node?",
			nodeType = "task",
			title = "Delete Task Node");

		ProcessBuilderKaleoDesignerReact.viewPanelNodeNotPresent(nodeType = "task");
	}

	@description = "Verify that the user can delete the Timers"
	@priority = 4
	test CanDeleteTimers {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(nodeLabel = "Task");

		ProcessBuilderKaleoDesignerReact.addTimerWithSingleAction(
			actionName = "Liferay Timer 1",
			durationScale = "Minute",
			durationValue = 1,
			script = "Liferay Timer Template",
			scriptType = "Java");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.viewAndDeleteBySidebarProperty(
			propertyValue = "Duration: 1 minute",
			sidebarPropertyName = "Timers");

		AssertElementNotPresent(
			key_propertyName = "Timers",
			key_propertyValue = "Duration: 1 minute",
			locator1 = "ProcessBuilderKaleoDesignerReact#SIDEBAR_PROPERTY");
	}

	@description = "Verify that the user can delete A Timer clicking on trash icon in sidebar Timer Card"
	@priority = 3
	test CanDeleteTimersBySidebarCard {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(nodeLabel = "Task");

		ProcessBuilderKaleoDesignerReact.addTimerWithSingleAction(
			actionName = "Liferay Timer",
			durationScale = "Minute",
			durationValue = 2,
			script = "Liferay Timer Template",
			scriptType = "Java");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.deleteBySidebarCard(
			propertyValue = "Duration: 2 minute",
			sidebarCardName = "Timers");

		AssertElementNotPresent(
			key_propertyName = "Timers",
			key_propertyValue = "Duration: 2 minute",
			locator1 = "ProcessBuilderKaleoDesignerReact#SIDEBAR_PROPERTY");
	}

	@description = "Verify that is possible to delete translations"
	@priority = 3
	test CanDeleteTranslations {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.openTranslationLanguageDropdown();

		ProcessBuilderKaleoDesignerReact.gotoManageTranslations();

		ProcessBuilderKaleoDesignerReact.viewLanguagePresentAtManageTranslations(languageName = "Catalan (Spain)");

		ProcessBuilderKaleoDesignerReact.viewLanguagePresentAtManageTranslations(languageName = "French (France)");

		ProcessBuilderKaleoDesignerReact.viewLanguagePresentAtManageTranslations(languageName = "Swedish (Sweden)");

		ProcessBuilderKaleoDesignerReact.deleteLanguage(translationOption = "Catalan");

		ProcessBuilderKaleoDesignerReact.deleteLanguage(translationOption = "French");

		ProcessBuilderKaleoDesignerReact.deleteLanguage(translationOption = "Swedish");

		ProcessBuilderKaleoDesignerReact.viewLanguageNotPresentAtManageTranslations(languageName = "Catalan (Spain)");

		ProcessBuilderKaleoDesignerReact.viewLanguageNotPresentAtManageTranslations(languageName = "French (France)");

		ProcessBuilderKaleoDesignerReact.viewLanguageNotPresentAtManageTranslations(languageName = "Swedish (Sweden)");
	}

	@description = "Verify that the user can Delete a Draft workflow"
	@priority = 3
	test CanDeleteWorkflowDefinitionDraft {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		Workflow.saveDefinition(newKaleoDesigner = "True");

		Alert.viewSuccessMessageText(successMessage = "Workflow saved.");

		Workflow.openWorkflowListView();

		Workflow.viewDefinitionUnpublished(workflowDefinitionTitle = "New Workflow Definition");

		Workflow.deleteWorkflowDefinition(workflowDefinitionTitle = "New Workflow Definition");

		Workflow.viewDefinitionNotPresent(workflowDefinitionTitle = "New Workflow Definition");
	}

	@description = "Verify that the user is able to designate a Role Name at a Role Type"
	@priority = 3
	test CanDesignateRoleTypeRoleName {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "0,0");

		ProcessBuilderKaleoDesignerReact.viewAndFillAssignments(
			assignmentType = "Role Type",
			roleTypeName = "Regular",
			roleTypeRoleName = "Administrator");

		ProcessBuilderKaleoDesignerReact.viewSelectedAssignments(selectedAssignments = "Role Type: Administrator");
	}

	@description = "Verify that the user can edit the Action fields"
	@priority = 4
	test CanEditActionFields {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-20,-40");

		ProcessBuilderKaleoDesignerReact.viewAndFillActions(
			description = "Liferay Actions Description",
			executionTypeOption = "On Entry",
			name = "Liferay Actions",
			priorityValue = 2,
			script = '''import com.liferay.portal.kernel.workflow.WorkflowConstants;
                        import com.liferay.portal.kernel.workflow.WorkflowStatusManagerUtil;

                        WorkflowStatusManagerUtil.updateStatus(WorkflowConstants.getLabelStatus("approved"), workflowContext);''',
			singleAction = "true",
			type = "Groovy");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoSideBarProperty(
			propertyName = "Actions",
			propertyValue = "Liferay Actions");

		ProcessBuilderKaleoDesignerReact.viewAndFillActions(
			description = "Liferay Actions Description Edited",
			executionTypeOption = "On Exit",
			name = "Liferay Actions Edited",
			priorityValue = 10,
			script = '''import com.liferay.portal.kernel.workflow.WorkflowConstants;
                        import com.liferay.portal.kernel.workflow.WorkflowStatusManagerUtil;

                        WorkflowStatusManagerUtil.updateStatus(WorkflowConstants.getLabelStatus("repproved"), workflowContext);''',
			singleAction = "true",
			type = "Java");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoSideBarProperty(
			propertyName = "Actions",
			propertyValue = "Liferay Actions Edited");

		ProcessBuilderKaleoDesignerReact.viewActionsInfo(
			description = "Liferay Actions Description Edited",
			executionTypeOption = "On Exit",
			name = "Liferay Actions Edited",
			priorityValue = 10,
			script = '''import com.liferay.portal.kernel.workflow.WorkflowConstants;
                        import com.liferay.portal.kernel.workflow.WorkflowStatusManagerUtil;

                        WorkflowStatusManagerUtil.updateStatus(WorkflowConstants.getLabelStatus("repproved"), workflowContext);''',
			type = "Java");
	}

	@description = "Verify that the user can edit the Description of the Notification"
	@priority = 4
	test CanEditNotificationDescription {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(
			description = "Notification Description",
			name = "New Notification",
			newNotification = "true",
			notificationTemplateValue = "Notification Template",
			notificationTypeOption = "User Notification",
			singleAction = "true");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoNotification(notificationName = "New Notification");

		ProcessBuilderKaleoDesignerReact.viewNotificationInfo(notificationDescription = "Notification Description");

		ProcessBuilderKaleoDesignerReact.editNotification(description = "Notification Description Edited");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoNotification(notificationName = "New Notification");

		ProcessBuilderKaleoDesignerReact.viewNotificationInfo(notificationDescription = "Notification Description Edited");
	}

	@description = "Verify that the user can edit the Name of the Notification"
	@priority = 4
	test CanEditNotificationName {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(
			name = "Liferay Notification",
			newNotification = "true",
			notificationTemplateValue = "New Notification Template",
			notificationTypeOption = "Email",
			singleAction = "true");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.viewNotificationPresent(notificationName = "Liferay Notification");

		ProcessBuilderKaleoDesignerReact.gotoNotification(notificationName = "Liferay Notification");

		ProcessBuilderKaleoDesignerReact.viewNotificationInfo(notificationName = "Liferay Notification");

		ProcessBuilderKaleoDesignerReact.editNotification(name = "Liferay Notification Edited");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.viewNotificationPresent(notificationName = "Liferay Notification Edited");
	}

	@description = "Verify that the user can edit a Template for Notification"
	@priority = 4
	test CanEditNotificationTemplate {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(
			name = "New Notification",
			newNotification = "true",
			notificationTemplateValue = "Notification Template",
			notificationTypeOption = "Email",
			singleAction = "true",
			templateLanguageOption = "Text");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoNotification(notificationName = "New Notification");

		ProcessBuilderKaleoDesignerReact.viewNotificationInfo(notificationTemplateValue = "Notification Template");

		ProcessBuilderKaleoDesignerReact.editNotification(
			notificationTemplateValue = '''${userName} sent you a ${entryType} for review in the workflow. Go Check it!''',
			templateLanguageOption = "FreeMarker");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoNotification(notificationName = "New Notification");

		ProcessBuilderKaleoDesignerReact.viewNotificationInfo(notificationTemplateValue = '''${userName} sent you a ${entryType} for review in the workflow. Go Check it!''');
	}

	@description = "LPS-139387 - Verify that the user is able to view and edit the node's Label in the sidebar"
	@priority = 4
	test CanEditStepLabel {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-20,-40");

		ProcessBuilderKaleoDesignerReact.editNodeInformationField(
			infoOption = "Label",
			infoValue = "QA Test 2022");

		ProcessBuilderKaleoDesignerReact.viewNodeInfo(
			labelValue = "QA Test 2022",
			nodeType = "task");

		ProcessBuilderKaleoDesignerReact.viewSpecificNodeLabel(
			nodeLabel = "QA Test 2022",
			nodeType = "task");
	}

	@description = "LPS-139387 - Verify that the user is able to view and edit the nodes name in the sidebar"
	@priority = 4
	test CanEditStepName {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-20,-100");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "task");

		ProcessBuilderKaleoDesignerReact.viewFieldPresentOnSideBar(fieldName = "Node Name");

		ProcessBuilderKaleoDesignerReact.editNodeInformationField(
			infoOption = "Name",
			infoValue = "task_22");

		ProcessBuilderKaleoDesignerReact.viewNodeInfo(
			nameValue = "task_22",
			nodeType = "task");
	}

	@description = "Verify that the user can edit the Template Language of the Notification to FreeMarker"
	@priority = 4
	test CanEditTemplateLanguageToFreeMarker {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(
			name = "New Notification",
			newNotification = "true",
			notificationTemplateValue = "New Notification Template",
			notificationTypeOption = "User Notification",
			singleAction = "true",
			templateLanguageOption = "FreeMarker");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoNotification(notificationName = "New Notification");

		ProcessBuilderKaleoDesignerReact.viewNotificationInfo(notificationTemplateLanguage = "FreeMarker");
	}

	@description = "Verify that the user can edit the Template Language of the Notification to Text"
	@priority = 4
	test CanEditTemplateLanguageToText {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(
			name = "New Notification",
			newNotification = "true",
			notificationTemplateValue = "Notification Template",
			notificationTypeOption = "Email",
			singleAction = "true",
			templateLanguageOption = "Text");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoNotification(notificationName = "New Notification");

		ProcessBuilderKaleoDesignerReact.viewNotificationInfo(notificationTemplateLanguage = "Text");
	}

	@description = "Verify that the user can edit the Template Language of the Notification to Velocity"
	@priority = 4
	test CanEditTemplateLanguageToVelocity {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(
			name = "New Notification",
			newNotification = "true",
			notificationTemplateValue = "Notification Template",
			notificationTypeOption = "Email",
			singleAction = "true",
			templateLanguageOption = "Velocity");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoNotification(notificationName = "New Notification");

		ProcessBuilderKaleoDesignerReact.viewNotificationInfo(notificationTemplateLanguage = "Velocity");
	}

	@description = "Verify that the user can edit the Description of the Timer"
	@priority = 3
	test CanEditTimerDescription {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(nodeLabel = "Task");

		ProcessBuilderKaleoDesignerReact.addTimerWithSingleAction(
			actionName = "Liferay Timer Action",
			durationScale = "Minute",
			durationValue = 1,
			script = "Liferay Timer Template",
			scriptType = "Java",
			timerDescription = "Description of Workflow Timer");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoSideBarProperty(
			propertyName = "Timer",
			propertyValue = "Duration: 1 minute");

		ProcessBuilderKaleoDesignerReact.fillTimerInformation(timerDescription = "Description of Definition Timer");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoSideBarProperty(
			propertyName = "Timer",
			propertyValue = "Duration: 1 minute");

		ProcessBuilderKaleoDesignerReact.viewTimersInfo(description = "Description of Definition Timer");
	}

	@description = "Verify that the user can edit the Duration of the Timer"
	@priority = 4
	test CanEditTimerDuration {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-20,-40");

		ProcessBuilderKaleoDesignerReact.addTimerWithSingleAction(
			actionName = "Liferay Timer Action",
			durationScale = "Minute",
			durationValue = 1,
			script = "Liferay Timer Template",
			scriptType = "Java");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoSideBarProperty(
			propertyName = "Timer",
			propertyValue = "Duration: 1 minute");

		ProcessBuilderKaleoDesignerReact.fillTimerDuration(
			durationScale = "Minute",
			durationValue = 2);

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoSideBarProperty(
			propertyName = "Timer",
			propertyValue = "Duration: 2 minute");

		ProcessBuilderKaleoDesignerReact.viewTimersInfo(
			durationValue = 2,
			scaleTypeOption = "Minute");
	}

	@description = "Verify that the user can edit the Name of the Timer"
	@priority = 4
	test CanEditTimerName {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(nodeLabel = "Task");

		ProcessBuilderKaleoDesignerReact.addTimerWithSingleAction(
			actionName = "Liferay Timer Action",
			durationScale = "Minute",
			durationValue = 1,
			script = "Liferay Timer Template",
			scriptType = "Java",
			timerName = "Name of Workflow Timer");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoSideBarProperty(
			propertyName = "Timer",
			propertyValue = "Duration: 1 minute");

		ProcessBuilderKaleoDesignerReact.fillTimerInformation(timerName = "Name of Workflow Timer Edit");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoSideBarProperty(
			propertyName = "Timer",
			propertyValue = "Duration: 1 minute");

		ProcessBuilderKaleoDesignerReact.viewTimersInfo(name = "Name of Workflow Timer Edit");
	}

	@description = "Verify that the user can edit the Timers recurrence field"
	@priority = 3
	test CanEditTimerRecurrenceFields {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(nodeLabel = "Task");

		ProcessBuilderKaleoDesignerReact.addTimerWithSingleAction(
			actionName = "Liferay Timer",
			durationScale = "Minute",
			durationValue = 2,
			recurrence = "true",
			recurrenceDurationScale = "Hour",
			recurrenceDurationValue = 1,
			script = "Timer Template",
			scriptType = "Java");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoSideBarProperty(
			propertyName = "Timer",
			propertyValue = "Recurrence: 1 hour");

		ProcessBuilderKaleoDesignerReact.fillTimerDuration(
			recurrenceDurationScale = "Minute",
			recurrenceDurationValue = 5);

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		AssertTextEquals(
			key_propertyName = "Timer",
			key_propertyValue = "Recurrence: 5 minute",
			locator1 = "ProcessBuilderKaleoDesignerReact#SIDEBAR_PROPERTY",
			value1 = "Recurrence: 5 minute");
	}

	@description = "LPS-140056 - Verify that the user is able to edit the transition Name"
	@priority = 4
	test CanEditTransitionName {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "end",
			connectorLabel = "Start-End Connector",
			connectorOut = "start",
			key_direction = "right");

		ProcessBuilderKaleoDesignerReact.editConnector(
			connectorLabel = "START-END CONNECTOR",
			nodeName = "New Name");

		Button.clickPublish();

		ProcessBuilderKaleoDesignerReact.viewConnectorName(
			connectorLabel = "START-END CONNECTOR",
			nodeName = "New Name");
	}

	@description = "LPS-139387 - Verify that the user can hide/show the information area"
	@priority = 2
	test CanHideShowInformationArea {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Condition",
			nodePosition = "0,-200");

		ProcessBuilderKaleoDesignerReact.viewNodeInfo(
			defaultNameValue = "true",
			descriptionValue = "Execute conditional logic.",
			labelValue = "Condition",
			nodeType = "condition",
			scriptValue = '''returnValue = "Transition Name"''');

		ProcessBuilderKaleoDesignerReact.hideSidebarFields(property = "Information");

		ProcessBuilderKaleoDesignerReact.viewNodeInfoNotVisible(
			defaultNameValue = "true",
			descriptionValue = "Execute conditional logic.",
			labelValue = "Condition",
			nodeType = "condition",
			scriptValue = '''returnValue = "Transition Name"''');
	}

	@description = "LPS-139387 - Verify that when the user adds a translation to another language the user is able to localize the Step Label of the node."
	@priority = 4
	test CanLocalizeStepLabelWhenTranslated {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given adding a new workflow definition") {
			Workflow.openWorkflowListView();

			Workflow.addNewDefinition(workflowDefinitionTitle = "Test title");
		}

		task ("When translating the title and the node labels and save") {
			Translations.changeBaseLocale(
				currentBaseLocale = "en-us",
				newBaseLocale = "pt_BR");

			ProcessBuilderKaleoDesignerReact.editWorkflowTitle(title = "Titulo do teste");

			for (var nodeTypes : list "start,end") {
				ProcessBuilderKaleoDesignerReact.selectNode(nodeType = ${nodeTypes});

				ProcessBuilderKaleoDesignerReact.editNodeInformationField(
					infoOption = "Label",
					infoValue = "br_${nodeTypes}");
			}

			Workflow.saveDefinition(newKaleoDesigner = "True");
		}

		task ("Then assert the workflow title is saved as the default language and another language is also saved") {
			AssertElementPresent(
				locator1 = "TextInput#TITLE",
				value1 = "Test title");

			ProcessBuilderKaleoDesignerReact.viewTranslationLanguageStatus(
				newTranslationOption = "pt_BR",
				translationStatus = "success");

			Translations.changeBaseLocale(
				currentBaseLocale = "en-us",
				newBaseLocale = "pt_BR");

			AssertElementPresent(
				locator1 = "TextInput#TITLE",
				value1 = "Titulo do teste");

			for (var nodeLabels : list "br_start,br_end") {
				ProcessBuilderKaleoDesignerReact.viewNodeLabel(nodeLabel = ${nodeLabels});
			}
		}
	}

	@description = "LPS-140056 - Verify that the user is able to localize the label of the transition"
	@priority = 3
	test CanLocalizeTransitionLabel {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "end",
			connectorLabel = "Start-End Connector",
			connectorOut = "start",
			key_direction = "right");

		ProcessBuilderKaleoDesignerReact.viewConnectorPresent(connectorLabel = "START-END CONNECTOR");
	}

	@description = "Verify that the link to Manage Translations component is displayed"
	@priority = 4
	test CanManageTranslations {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.viewTranslationDropdown(translationOptionSelected = "en-us");

		ProcessBuilderKaleoDesignerReact.viewManageTranslationButton();
	}

	@description = "Verify that the user can move nodes in diagram by drag&drop in the middle of node"
	@priority = 4
	test CanMoveNode {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.viewNodePosition(
			nodeLabel = "Start",
			nodeType = "start",
			nodeXPosition = 300,
			nodeYPosition = 100);

		ProcessBuilderKaleoDesignerReact.dragAndDropDiagramNode(
			nodeLabel = "Start",
			nodePosition = "100,-50");

		ProcessBuilderKaleoDesignerReact.viewNodePosition(
			firstNodeXPosition = 300,
			firstNodeYPosition = 100,
			newPosition = "true",
			nodeLabel = "Start",
			nodeType = "start",
			nodeXPosition = 400,
			nodeYPosition = 50);
	}

	@description = "Verify that the user can't delete a Assignment through trash icon"
	@priority = 4
	test CanNotDeleteAssignmentByTrashIcon {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(nodeLabel = "Task");

		Click(locator1 = "ProcessBuilderKaleoDesignerReact#SELECTED_ASSIGNMENTS_VALUE");

		AssertNotEditable(
			key_text = "trash",
			locator1 = "Icon#ANY_DISABLED");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.viewPropertyPresentOnSideBar(
			propertyName = "Assignment",
			propertyValue = "Asset Creator");
	}

	@description = "Verify that is not possible to have multiple Start nodes"
	@priority = 4
	test CanNotHaveMultipleStartNode {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.uploadDefinition(workflowDefinitionFile = "invalid-start-workflow-definition.xml");

		ProcessBuilderKaleoDesignerReact.diagramSourceSwitchView();

		Button.clickPublish();

		Alert.viewErrorMessage(errorMessage = "The workflow has too many start nodes (state nodes Start 1 and Start 2 )");

		Navigator.gotoBack();

		Workflow.viewDefinitionNotPresent(workflowDefinitionTitle = "New Workflow Definition");
	}

	@description = "LPS-139388 - Verify that nodes behave correctly when we import a workflow with the same names for different elements"
	@ignore = "Test Stub"
	@priority = 4
	test CanNotImportProcessWithDuplicatedElementNames {

		// TODO LRQA-72988 CanNotImportProcessWithDuplicatedElementNames pending implementation

	}

	@description = "LPS-129928 - Verify that the collision detection between nodes are working after moving nodes on canvas"
	@priority = 3
	test CanNotPlaceNodeOverAnother {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given a workflow definition") {
			Workflow.openWorkflowListView();

			Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");
		}

		task ("When trying to drag the start node to the end node") {
			ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "start");

			ProcessBuilderKaleoDesignerReact.viewNodePosition(
				nodeLabel = "Start",
				nodeType = "start",
				nodeXPosition = 300,
				nodeYPosition = 100);

			ProcessBuilderKaleoDesignerReact.dragAndDropDiagramNode(
				nodeLabel = "Start",
				nodePosition = "5,300");
		}

		task ("Then the start node goes back to the same place") {
			ProcessBuilderKaleoDesignerReact.viewNodePosition(
				nodeLabel = "Start",
				nodeType = "start",
				nodeXPosition = 300,
				nodeYPosition = 100);
		}
	}

	@description = "Verify that the user can't Publish a workflow without transitions"
	@priority = 4
	test CanNotPublishWorkflowWithoutTransitions {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		Button.clickPublish();

		WaitForElementPresent(
			errorMessage = "The Start node must have an outgoing transition",
			locator1 = "Message#ERROR");

		Alert.viewErrorMessage(errorMessage = "The Start node must have an outgoing transition");

		Navigator.gotoBack();

		Workflow.viewDefinitionNotPresent(workflowDefinitionTitle = "New Workflow Definition");
	}

	@description = "LPS-139388 - Verify that is not possible to save a process with node ID not unique"
	@priority = 4
	test CanNotSaveProcessWithDuplicatedNodeName {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "start");

		var nodeNameValue = selenium.getElementValue("ProcessBuilderKaleoDesignerReact#NODE_NAME_GETTER");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "end");

		ProcessBuilderKaleoDesignerReact.editNodeInformationField(
			infoOption = "Name",
			infoValue = ${nodeNameValue});

		ProcessBuilderKaleoDesignerReact.viewSidebarFeedback(sidebarMessage = "A node with that name already exists. Enter a unique name.");

		Workflow.saveDefinition(newKaleoDesigner = "True");

		ProcessBuilderKaleoDesignerReact.viewDuplicatedIdAlert();
	}

	@description = "LPS-139388 - Verify that is not possible to save a process with the node ID not filled"
	@priority = 4
	test CanNotSaveProcessWithEmptyNodeName {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-20,-100");

		ProcessBuilderKaleoDesignerReact.editNodeInformationField(
			infoOption = "Name",
			infoValue = "");

		ProcessBuilderKaleoDesignerReact.viewRequiredField(
			requiredField = "nodeName",
			save = "true");
	}

	@description = "Verify that only the task node thas Assignments property"
	@priority = 3
	test CanOnlyViewAssignmentsAtTaskNode {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "0,0");

		ProcessBuilderKaleoDesignerReact.viewPropertyPresentOnSideBar(
			propertyName = "Assignment",
			propertyValue = "Asset Creator");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.viewPropertyNotPresentOnSideBar(
			propertyName = "Assignment",
			propertyValue = "Asset Creator");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "end");

		ProcessBuilderKaleoDesignerReact.viewPropertyNotPresentOnSideBar(
			propertyName = "Assignment",
			propertyValue = "Asset Creator");
	}

	@description = "LPS-139388 - Verify that, when all the parallel reviews are complete, the Join node will allow the instance to progress to the next step"
	@priority = 4
	test CanProgressToNextStepWhenParallelTasksCompleted {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given that a multi task process workflow definition is imported and published") {
			Workflow.openWorkflowListView();

			Workflow.addNewDefinition(workflowDefinitionTitle = "Multi Task Process");

			ProcessBuilderKaleoDesignerReact.uploadDefinition(workflowDefinitionFile = "multi-task-workflow-definition.xml");

			ProcessBuilderKaleoDesignerReact.diagramSourceSwitchView();

			Button.clickPublish();
		}

		task ("And given that the multi task process process workflow is assigned to the Blogs Entry") {
			Workflow.openWorkflowListView();

			Navigator.gotoNavItem(navItem = "Configuration");

			Workflow.configureWorkflow(
				workflowDefinition = "Multi Task Process",
				workflowResourceValue = "Blogs Entry");
		}

		task ("And given a blog entry") {
			JSONBlog.addEntry(
				entryContent = "Blogs Entry Content",
				entryTitle = "Blogs Entry Title");
		}

		task ("When all parallel reviews are complete") {
			UserBar.gotoDropdownItem(dropdownItem = "My Workflow Tasks");

			for (var i : list "task1,task2") {
				Workflow.assignToMeTaskByActions(
					workflowAssetTitle = "Blogs Entry Title",
					workflowAssetType = "Blogs Entry",
					workflowTask = ${i});

				Workflow.approveTaskByActions(
					workflowAssetTitle = "Blogs Entry Title",
					workflowAssetType = "Blogs Entry",
					workflowDefinitionTask = "join",
					workflowTask = ${i});
			}

			Workflow.assignToMeTaskByActions(
				workflowAssetTitle = "Blogs Entry Title",
				workflowAssetType = "Blogs Entry",
				workflowTask = "task3");

			Workflow.approveTaskByActions(
				workflowAssetTitle = "Blogs Entry Title",
				workflowAssetType = "Blogs Entry",
				workflowDefinitionTask = "connector31266",
				workflowTask = "task3");
		}

		task ("Then the Join node allows the instance to proceed to the next step") {
			WorkflowMetrics.goToWorkflowAllItemsByStatus(
				completedItemStatus = "Total Completed",
				workflowProcessName = "Multi Task Process");

			WaitForElementPresent(locator1 = "WorkflowAllItems#WORKFLOW_INSTANCE_ID");

			var getInstanceId = selenium.getText("WorkflowAllItems#WORKFLOW_INSTANCE_ID");

			Click(locator1 = "WorkflowAllItems#WORKFLOW_INSTANCE_ID");

			WorkflowMetricsAllItemsList.viewDetailsModal();

			WorkflowMetricsAllItemsList.goToTrackWorkflowlink();

			for (var i : list "task1,task2,task3,join") {
				WorkflowMetrics.viewCurrentNodeDoneIcon(currentNode = ${i});
			}
		}
	}

	@description = "Verify that the user can publish a definition with Condition node"
	@priority = 5
	test CanPublishWithConditionNode {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.uploadDefinition(workflowDefinitionFile = "process-with-condition-node-workflow-definition.xml");

		ProcessBuilderKaleoDesignerReact.diagramSourceSwitchView();

		ProcessBuilderKaleoDesignerReact.viewPanelNodePresent(nodeType = "condition");

		PortletEntry.publish();

		Alert.viewSuccessMessageText(successMessage = "Workflow published successfully.");
	}

	@description = "Verify that the user can publish a definition with Fork node"
	@priority = 5
	test CanPublishWithForkNode {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Fork",
			nodePosition = "100,-250");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-200,-250");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "State",
			nodePosition = "60,-550");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Join",
			nodePosition = "60,50");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "fork",
			connectorLabel = "Connector",
			connectorOut = "start",
			key_direction = "right");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "task",
			connectorLabel = "Connector",
			connectorOut = "fork",
			key_direction = "right");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "state",
			connectorLabel = "Connector",
			connectorOut = "fork",
			key_direction = "left");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "join",
			connectorLabel = "Connector",
			connectorOut = "task",
			key_direction = "right");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "join",
			connectorLabel = "Connector",
			connectorOut = "state",
			key_direction = "right");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "end",
			connectorLabel = "Connector",
			connectorOut = "join",
			key_direction = "right");

		PortletEntry.publish();

		Alert.viewSuccessMessageText(successMessage = "Workflow published successfully.");

		Workflow.openWorkflowListView();
	}

	@description = "Verify that the user can publish a definition with Join node"
	@priority = 5
	test CanPublishWithJoinNode {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition with Join");

		ProcessBuilderKaleoDesignerReact.uploadDefinition(workflowDefinitionFile = "process-with-join-node-workflow-definition.xml");

		ProcessBuilderKaleoDesignerReact.diagramSourceSwitchView();

		ProcessBuilderKaleoDesignerReact.viewPanelNodePresent(nodeType = "join");

		PortletEntry.publish();

		Alert.viewSuccessMessageText(successMessage = "Workflow published successfully.");

		Workflow.openWorkflowListView();

		Workflow.viewDefinitionPublished(workflowDefinitionTitle = "New Workflow Definition with Join");
	}

	@description = "Verify that the user can publish a definition with Join XOR node "
	@priority = 5
	test CanPublishWithJoinXORNode {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Fork",
			nodePosition = "100,-250");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-200,-250");

		ProcessBuilderKaleoDesignerReact.editNodeInformationField(
			infoOption = "Label",
			infoValue = "Task1");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(nodeLabel = "Task");

		ProcessBuilderKaleoDesignerReact.editNodeInformationField(
			infoOption = "Label",
			infoValue = "Task2");

		ProcessBuilderKaleoDesignerReact.dragAndDropDiagramNode(
			nodeLabel = "Task2",
			nodePosition = "60,-550");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Join XOR",
			nodePosition = "60,50");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "fork",
			connectorLabel = "Start-Fork Connector",
			connectorOut = "start",
			key_direction = "right");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorInLabel = "Task1",
			connectorLabel = "Fork-Task1 Connector",
			connectorOut = "fork",
			key_direction = "bottom",
			nodeType = "task");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorInLabel = "Task2",
			connectorLabel = "Fork-Task2 Connector",
			connectorOut = "fork",
			key_direction = "bottom",
			nodeType = "task");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "join-xor",
			connectorLabel = "join XOR-Task1 Connector",
			connectorOutLabel = "Task1",
			key_direction = "right");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "join-xor",
			connectorLabel = "join XOR-Task2 Connector",
			connectorOutLabel = "Task2",
			key_direction = "right");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "end",
			connectorLabel = "join XOR-end Connector",
			connectorOut = "join-xor",
			key_direction = "right");

		PortletEntry.publish();

		Alert.viewSuccessMessageText(successMessage = "Workflow published successfully.");

		Workflow.openWorkflowListView();

		Workflow.viewDefinitionPublished(workflowDefinitionTitle = "New Workflow Definition");
	}

	@description = "Verify that the user can publish a definition with State node"
	@priority = 5
	test CanPublishWithStateNode {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "State",
			nodePosition = "-200,-250");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "state",
			connectorLabel = "Start-State Connector",
			connectorOut = "start",
			key_direction = "right");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "end",
			connectorLabel = "State-End Connector",
			connectorOut = "state",
			key_direction = "top");

		PortletEntry.publish();

		Alert.viewSuccessMessageText(successMessage = "Workflow published successfully.");

		Workflow.openWorkflowListView();

		Workflow.viewDefinitionPublished(workflowDefinitionTitle = "New Workflow Definition");
	}

	@description = "Verify that the user can can publish a definition with Task node"
	@priority = 5
	test CanPublishWithTaskNode {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-200,-250");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "task",
			connectorLabel = "Start-Task Connector",
			connectorOut = "start",
			key_direction = "right");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "end",
			connectorLabel = "Task-end Connector",
			connectorOut = "task",
			key_direction = "top");

		PortletEntry.publish();

		Alert.viewSuccessMessageText(successMessage = "Workflow published successfully.");

		Workflow.openWorkflowListView();

		Workflow.viewDefinitionPublished(workflowDefinitionTitle = "New Workflow Definition");
	}

	@description = "Verify that the user can Publish workflow"
	@priority = 5
	test CanPublishWorkflow {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "end",
			connectorLabel = "Start Task Connector",
			connectorOut = "start",
			key_direction = "top");

		PortletEntry.publish();

		Alert.viewSuccessMessageText(successMessage = "Workflow published successfully.");

		Workflow.openWorkflowListView();

		Workflow.viewDefinitionPublished(workflowDefinitionTitle = "New Workflow Definition");
	}

	@description = "Verify that the user can publish a workflow with Timer configured"
	@priority = 5
	test CanPublishWorkflowWithTimerConfigured {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-200,-250");

		ProcessBuilderKaleoDesignerReact.addTimerWithSingleAction(
			actionName = "Liferay Timer",
			durationScale = "Minute",
			durationValue = 2,
			script = "Liferay Timer Template",
			scriptType = "Groovy");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.viewPropertyValue(
			propertyName = "Timer",
			propertyValue = "Duration: 2 minute");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "task",
			connectorLabel = "Start-Task Connector",
			connectorOut = "start",
			key_direction = "right");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "end",
			connectorLabel = "Task-End Connector",
			connectorOut = "task",
			key_direction = "top");

		PortletEntry.publish();

		Alert.viewSuccessMessageText(successMessage = "Workflow published successfully.");

		Workflow.openWorkflowListView();

		Workflow.viewDefinitionPublished(workflowDefinitionTitle = "New Workflow Definition");
	}

	@description = "Verify that the user can restore to a previous definition version in the Revision History tab"
	@priority = 5
	test CanRestorePreviousVersionAtRevisionHistoryTab {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		Workflow.saveDefinition();

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(nodeLabel = "Task");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "task",
			connectorLabel = "Start-Task Connector",
			connectorOut = "start",
			key_direction = "bottom");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "end",
			connectorLabel = "Task-End Connector",
			connectorOut = "task",
			key_direction = "bottom");

		Button.click(button = "Save");

		ProcessBuilderKaleoDesignerReact.gotoInfoWorkflowDefinition();

		Navigator.gotoNavTab(navTab = "Revision History");

		ProcessBuilderKaleoDesignerReact.restorePreviousVersion(number = 1);

		ProcessBuilderKaleoDesignerReact.viewPanelNodeNotPresent(nodeType = "task");

		ProcessBuilderKaleoDesignerReact.viewConnectorNotPresent(connectorLabel = "START-TASK CONNECTOR");

		ProcessBuilderKaleoDesignerReact.viewConnectorNotPresent(connectorLabel = "TASK-END CONNECTOR");
	}

	@description = "Verify that user can save a workflow not published"
	@priority = 5
	test CanSaveDefinitionNotPublished {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition Title");

		Workflow.saveDefinition(newKaleoDesigner = "True");

		Alert.viewSuccessMessageText(successMessage = "Workflow saved.");

		Workflow.openWorkflowListView();

		Workflow.viewDefinitionUnpublished(workflowDefinitionTitle = "New Workflow Definition Title");
	}

	@description = "Verify that the user can save an invalid workflow definition not published"
	@priority = 3
	test CanSaveInvalidWorkflowDefinitionNotPublished {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition Title");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "end");

		ProcessBuilderKaleoDesignerReact.deleteNodeOrConnection(
			modalMessage = "Are you sure you want to delete the selected end node?",
			nodeType = "end",
			title = "Delete End Node");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.deleteNodeOrConnection(
			modalMessage = "Are you sure you want to delete the selected start node?",
			nodeType = "start",
			title = "Delete Start Node");

		Workflow.saveDefinition();

		Workflow.openWorkflowListView();

		Workflow.viewDefinitionUnpublished(workflowDefinitionTitle = "New Workflow Definition Title");
	}

	@description = "Verify that the user can search languages"
	@priority = 3
	test CanSearchLanguages {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.viewTranslationDropdown(translationOptionSelected = "en-us");

		ProcessBuilderKaleoDesignerReact.gotoManageTranslations();

		ProcessBuilderKaleoDesignerReact.searchLanguage(languageName = "Netherlands");

		ProcessBuilderKaleoDesignerReact.viewSearchTranslationResultPresent(result = "Dutch (Netherlands)");
	}

	@description = "LPS-139387 - Verify that the user is able to see the Start and End nodes on the Diagram when creating a New Process"
	@priority = 4
	test CanSeeStartAndEndNodesByDefault {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "end");
	}

	@description = "Verify that the is able to select who receives the notification: Asset Creator"
	@priority = 5
	test CanSelectAssetCreatorAsNotificationRecipientType {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(
			name = "New Notification",
			newNotification = "true",
			notificationTemplateValue = "New Notification Template",
			notificationTypeOption = "Email",
			recipientTypeOption = "Asset Creator",
			singleAction = "true");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoNotification(notificationName = "New Notification");

		ProcessBuilderKaleoDesignerReact.viewNotificationInfo(notificationRecipientType = "Asset Creator");
	}

	@description = "Verify that the user can select Email as Notification type"
	@priority = 5
	test CanSelectEmailAsNotificationType {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(
			name = "New Notification",
			newNotification = "true",
			notificationTemplateValue = "New Notification Template",
			notificationTypeOption = "Email",
			singleAction = "true");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoNotification(notificationName = "New Notification");

		ProcessBuilderKaleoDesignerReact.viewNotificationInfo(notificationTypeName = "Email");
	}

	@description = "Verify that the user can select each node in Diagram"
	@priority = 4
	test CanSelectNodeOnDiagram {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(nodeLabel = "Task");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.viewSelectedNode(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "end");

		ProcessBuilderKaleoDesignerReact.viewSelectedNode(nodeType = "end");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "task");

		ProcessBuilderKaleoDesignerReact.viewSelectedNode(nodeType = "task");
	}

	@description = "Verify that the user can select On Assignment as Execution Type"
	@priority = 4
	test CanSelectOnAssignmentAsExecutionTypeAtActions {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-20,-40");

		ProcessBuilderKaleoDesignerReact.viewAndFillActions(
			actionsTemplateValue = "Action Template",
			executionTypeOption = "On Assignment",
			name = "Liferay Actions",
			script = '''import com.liferay.portal.kernel.workflow.WorkflowConstants;
                        import com.liferay.portal.kernel.workflow.WorkflowStatusManagerUtil;

                        WorkflowStatusManagerUtil.updateStatus(WorkflowConstants.getLabelStatus("approved"), workflowContext);''',
			singleAction = "true",
			type = "Groovy");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoSideBarProperty(
			propertyName = "Actions",
			propertyValue = "Liferay Actions");

		ProcessBuilderKaleoDesignerReact.viewActionsInfo(executionTypeOption = "On Assignments");
	}

	@description = "Verify that the user can select On Assignment as the time when the notification will be sent in a task"
	@priority = 4
	test CanSelectOnAssignmentAsExecutionTypeAtTaskNotifications {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-20,-100");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(
			executionTypeOption = "On Assignment",
			name = "Liferay Notification",
			newNotification = "true",
			notificationTemplateValue = "Notification Template",
			notificationTypeOption = "Email",
			singleAction = "true");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoNotification(notificationName = "Liferay Notification");

		ProcessBuilderKaleoDesignerReact.viewNotificationInfo(notificationExecutionType = "On Assignment");
	}

	@description = "Verify that the user can select On Entry as the time when the notification will be sent"
	@priority = 4
	test CanSelectOnEntryAsExecutionTypeAtNodeNotifications {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(
			executionTypeOption = "On Entry",
			name = "Liferay Notification",
			newNotification = "true",
			notificationTemplateValue = "Notification Template",
			notificationTypeOption = "Email",
			singleAction = "true");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoNotification(notificationName = "Liferay Notification");

		ProcessBuilderKaleoDesignerReact.viewNotificationInfo(notificationExecutionType = "On Entry");
	}

	@description = "Verify that the user can select On Entry as Execution Type"
	@priority = 4
	test CanSelectOnEntryExecutionTypeAtActions {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-20,-40");

		ProcessBuilderKaleoDesignerReact.viewAndFillActions(
			actionsTemplateValue = "Action Template",
			executionTypeOption = "On Entry",
			name = "Liferay Actions",
			script = '''import com.liferay.portal.kernel.workflow.WorkflowConstants;
                        import com.liferay.portal.kernel.workflow.WorkflowStatusManagerUtil;

                        WorkflowStatusManagerUtil.updateStatus(WorkflowConstants.getLabelStatus("approved"), workflowContext);''',
			singleAction = "true",
			type = "Groovy");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoSideBarProperty(
			propertyName = "Actions",
			propertyValue = "Liferay Actions");

		ProcessBuilderKaleoDesignerReact.viewActionsInfo(executionTypeOption = "On Entry");
	}

	@description = "Verify that the user can select On Exit as Execution Type"
	@priority = 4
	test CanSelectOnExitAsExecutionTypeAtActions {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-20,-40");

		ProcessBuilderKaleoDesignerReact.viewAndFillActions(
			actionsTemplateValue = "Action Template",
			executionTypeOption = "On Exit",
			name = "Liferay Actions",
			script = '''import com.liferay.portal.kernel.workflow.WorkflowConstants;
                        import com.liferay.portal.kernel.workflow.WorkflowStatusManagerUtil;

                        WorkflowStatusManagerUtil.updateStatus(WorkflowConstants.getLabelStatus("approved"), workflowContext);''',
			singleAction = "true",
			type = "Groovy");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoSideBarProperty(
			propertyName = "Actions",
			propertyValue = "Liferay Actions");

		ProcessBuilderKaleoDesignerReact.viewActionsInfo(executionTypeOption = "On Exit");
	}

	@description = "Verify that the user can select On Exit as the time when the notification will be sent"
	@priority = 4
	test CanSelectOnExitAsExecutionTypeAtNodeNotifications {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(
			executionTypeOption = "On Exit",
			name = "Liferay Notification",
			newNotification = "true",
			notificationTemplateValue = "Notification Template",
			notificationTypeOption = "Email",
			singleAction = "true");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoNotification(notificationName = "Liferay Notification");

		ProcessBuilderKaleoDesignerReact.viewNotificationInfo(notificationExecutionType = "On Exit");
	}

	@description = "Verify that the is able to select who receives the notification: Role"
	@priority = 5
	test CanSelectRoleAsNotificationRecipientType {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(
			name = "New Notification",
			newNotification = "true",
			notificationsRecipientTypeRoleName = "Account Manager",
			notificationTemplateValue = "New Notification Template",
			notificationTypeOption = "Email",
			recipientTypeOption = "Role",
			singleAction = "true");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoNotification(notificationName = "New Notification");

		ProcessBuilderKaleoDesignerReact.viewNotificationInfo(notificationRecipientType = "Role");
	}

	@description = "Verify that the is able to select who receives the notification: Scripted Recipient"
	@priority = 5
	test CanSelectScriptedRecipientAsNotificationRecipientType {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(
			name = "New Notification",
			newNotification = "true",
			notificationScript = '''returnValue = "Transition Name";''',
			notificationTemplateValue = '''${userName} sent you a ${entryType} for review in the workflow.''',
			notificationTypeOption = "User Notification",
			recipientTypeOption = "Scripted Recipient",
			singleAction = "true");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoNotification(notificationName = "New Notification");

		ProcessBuilderKaleoDesignerReact.viewNotificationInfo(notificationRecipientType = "Scripted Recipient");
	}

	@description = "Verify that the is able to select who receives the notification: Task Assignees"
	@priority = 5
	test CanSelectTaskAssigneesAsNotificationRecipientTypeAtTaskNode {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-20,-100");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(
			name = "New Notification",
			newNotification = "true",
			notificationTemplateValue = '''${userName} sent you a ${entryType} for review in the workflow.''',
			notificationTypeOption = "User Notification",
			recipientTypeOption = "Task Assignees",
			singleAction = "true");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoNotification(notificationName = "New Notification");

		ProcessBuilderKaleoDesignerReact.viewNotificationInfo(notificationRecipientType = "Task Assignees");
	}

	@description = "Verify that the user can select Email and User Notification as Notification type"
	@priority = 5
	test CanSelectUserNotificationAndEmailAsNotificationType {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(
			name = "Liferay Notification",
			newNotification = "true",
			notificationTemplateValue = "Notification Template",
			notificationTypeOption = "Email",
			singleAction = "true");

		Check.checkNotVisibleNoErrors(
			key_checkboxValue = "User Notification",
			locator1 = "ProcessBuilderKaleoDesignerReact#NOTIFICATION_TYPE_OPTIONS");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoNotification(notificationName = "Liferay Notification");

		ProcessBuilderKaleoDesignerReact.viewNotificationInfo(notificationTypeName = "Email");

		ProcessBuilderKaleoDesignerReact.viewNotificationInfo(notificationTypeName = "User Notification");
	}

	@description = "Verify that the user can select User Notification as Notification type"
	@priority = 5
	test CanSelectUserNotificationAsNotificationType {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(
			name = "New Notification",
			newNotification = "true",
			notificationTemplateValue = '''${userName} sent you a ${entryType} for review in the workflow.''',
			notificationTypeOption = "User Notification",
			singleAction = "true");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoNotification(notificationName = "New Notification");

		ProcessBuilderKaleoDesignerReact.viewNotificationInfo(notificationTypeName = "User Notification");
	}

	@description = "Verify that the user can set the Priority for the Action"
	@priority = 3
	test CanSetActionsPriority {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-20,-40");

		ProcessBuilderKaleoDesignerReact.viewAndFillActions(
			name = "Liferay Actions",
			priorityValue = 10,
			script = '''import com.liferay.portal.kernel.workflow.WorkflowConstants;
                        import com.liferay.portal.kernel.workflow.WorkflowStatusManagerUtil;

                        WorkflowStatusManagerUtil.updateStatus(WorkflowConstants.getLabelStatus("approved"), workflowContext);''',
			singleAction = "true",
			type = "Groovy");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.gotoSideBarProperty(
			propertyName = "Actions",
			propertyValue = "Liferay Actions");

		ProcessBuilderKaleoDesignerReact.viewActionsInfo(priorityValue = 10);
	}

	@description = "Verify that the user can set transition Default"
	@priority = 4
	test CanSetDefaultTransition {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "end",
			connectorLabel = "StartEndConnector",
			connectorOut = "start",
			key_direction = "bottom");

		ProcessBuilderKaleoDesignerReact.viewDefaultToggleStatus(
			connectorLabel = "STARTENDCONNECTOR",
			defaultStatus = "True");

		ProcessBuilderKaleoDesignerReact.clickDefaultToggle(defaultConnector = "False");

		ProcessBuilderKaleoDesignerReact.viewDefaultToggleStatus(
			connectorLabel = "STARTENDCONNECTOR",
			defaultStatus = "False");

		ProcessBuilderKaleoDesignerReact.clickDefaultToggle(defaultConnector = "True");

		ProcessBuilderKaleoDesignerReact.viewDefaultToggleStatus(
			connectorLabel = "STARTENDCONNECTOR",
			defaultStatus = "True");
	}

	@description = "Verify that the user can switch between Details and Revision Story Tab"
	@priority = 4
	test CanSwitchBetweenDetailsRevisionTabs {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		Workflow.saveDefinition(newKaleoDesigner = "True");

		ProcessBuilderKaleoDesignerReact.gotoInfoWorkflowDefinition();

		Navigator.gotoNavTab(navTab = "Revision History");

		ProcessBuilderKaleoDesignerReact.viewRevisionHistoryFieldsPresent();

		Navigator.gotoNavTab(navTab = "Details");

		ProcessBuilderKaleoDesignerReact.viewDetailsFieldsPresent();
	}

	@description = "Verify that the user can turn on the Timers recurrence mode"
	@priority = 4
	test CanTurnOnTimerRecurrenceMode {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(nodeLabel = "Task");

		ProcessBuilderKaleoDesignerReact.addTimerWithSingleAction(
			actionName = "Liferay Timer Action",
			durationScale = "Minute",
			durationValue = 2,
			recurrence = "true",
			recurrenceDurationScale = "Hour",
			recurrenceDurationValue = 1,
			script = "Liferay Timer Template",
			scriptType = "Java");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.viewPropertyValue(
			propertyName = "Timer",
			propertyValue = "Recurrence: 1 hour");
	}

	@description = "Verify that the Revision History tab display the definition current version"
	@priority = 3
	test CanViewCurrentVersionAtRevisionHistoryTab {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "end",
			connectorLabel = "Start-End Connector",
			connectorOut = "start",
			key_direction = "bottom");

		PortletEntry.publish();

		Alert.viewSuccessMessageText(successMessage = "Workflow published successfully.");

		ProcessBuilderKaleoDesignerReact.selectConnector(connectorLabel = "START-END CONNECTOR");

		ProcessBuilderKaleoDesignerReact.deleteNodeOrConnection(title = "Delete Transition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-200,-250");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "task",
			connectorLabel = "Start-Task Connector",
			connectorOut = "start",
			key_direction = "bottom");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "end",
			connectorLabel = "Task-End Connector",
			connectorOut = "task",
			key_direction = "bottom");

		Button.click(button = "Update");

		Alert.viewSuccessMessageText(successMessage = "Workflow updated successfully.");

		ProcessBuilderKaleoDesignerReact.gotoInfoWorkflowDefinition();

		Navigator.gotoNavTab(navTab = "Revision History");

		ProcessBuilderKaleoDesignerReact.viewCurrentVersionAtRevisionHistoryTab(number = 2);
	}

	@description = "Verify that the user can see the Assignments on Single Approver"
	@priority = 3
	test CanViewDefaultSingleApproverAssignments {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.gotoEditWorkflowDefinition(workflowDefinitionTitle = "Single Approver");

		ProcessBuilderKaleoDesignerReact.selectNodeByLabel(nodeLabel = "review");

		ProcessBuilderKaleoDesignerReact.gotoSideBarProperty(
			propertyName = "Assignments",
			propertyValue = "Account Administrator");

		ProcessBuilderKaleoDesignerReact.viewSelectedRoleAssignmentsByPosition(
			inputOption = "Role",
			positonOption = 2,
			selectedRole = "Account");

		ProcessBuilderKaleoDesignerReact.viewSelectedRoleAssignmentsByPosition(
			inputOption = "Role",
			positonOption = 3,
			selectedRole = "Account");

		ProcessBuilderKaleoDesignerReact.viewSelectedRoleAssignmentsByPosition(
			inputOption = "Role",
			positonOption = 4,
			selectedRole = "Asset Library");

		ProcessBuilderKaleoDesignerReact.viewSelectedRoleAssignmentsByPosition(
			inputOption = "Role",
			positonOption = 5,
			selectedRole = "Asset Library");

		ProcessBuilderKaleoDesignerReact.viewSelectedRoleAssignmentsByPosition(
			inputOption = "Role",
			positonOption = 6,
			selectedRole = "Asset Library");

		ProcessBuilderKaleoDesignerReact.viewSelectedRoleAssignmentsByPosition(
			inputOption = "Role",
			positonOption = 7,
			selectedRole = "Organization");

		ProcessBuilderKaleoDesignerReact.viewSelectedRoleAssignmentsByPosition(
			inputOption = "Role",
			positonOption = 8,
			selectedRole = "Organization");

		ProcessBuilderKaleoDesignerReact.viewSelectedRoleAssignmentsByPosition(
			inputOption = "Role",
			positonOption = 9,
			selectedRole = "Organization");

		ProcessBuilderKaleoDesignerReact.viewSelectedRoleAssignmentsByPosition(
			inputOption = "Role",
			positonOption = 10,
			selectedRole = "Regular");

		ProcessBuilderKaleoDesignerReact.viewSelectedRoleAssignmentsByPosition(
			inputOption = "Role",
			positonOption = 11,
			selectedRole = "Regular");

		ProcessBuilderKaleoDesignerReact.viewSelectedRoleAssignmentsByPosition(
			inputOption = "Role",
			positonOption = 12,
			selectedRole = "Site");

		ProcessBuilderKaleoDesignerReact.viewSelectedRoleAssignmentsByPosition(
			inputOption = "Role",
			positonOption = 13,
			selectedRole = "Site");

		ProcessBuilderKaleoDesignerReact.viewSelectedRoleAssignmentsByPosition(
			inputOption = "Role",
			positonOption = 14,
			selectedRole = "Site");
	}

	@description = "Verify that at the Details/Revision Story sidebar Header the definition Title is present"
	@priority = 3
	test CanViewDefinitionTitleAtInfoHeader {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "end",
			connectorLabel = "Start-End Connector",
			connectorOut = "start",
			key_direction = "bottom");

		PortletEntry.publish();

		Alert.viewSuccessMessageText(successMessage = "Workflow published successfully.");

		ProcessBuilderKaleoDesignerReact.gotoInfoWorkflowDefinition();

		ProcessBuilderKaleoDesignerReact.viewSidebarHeaderPresent(header = "New Workflow Definition");
	}

	@description = "LPS-129928 - Verify that when the user clicks on the Diagram view button the Diagram editor appears"
	@priority = 4
	test CanViewDiagramEditor {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.diagramSourceSwitchView();

		ProcessBuilderKaleoDesignerReact.viewSourceEditor();

		ProcessBuilderKaleoDesignerReact.diagramSourceSwitchView();

		ProcessBuilderKaleoDesignerReact.viewDiagramEditor(
			endLabelList = "End",
			startLabelList = "Start");
	}

	@description = "Verify that the Details tab displays the Created date, Last Modified and Total Modifications"
	@priority = 3
	test CanViewFieldsAtDetailsTab {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given publishing a new workflow with a transition from Start node to End node") {
			Workflow.openWorkflowListView();

			Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

			ProcessBuilderKaleoDesignerReact.addConnector(
				connectorIn = "end",
				connectorLabel = "Start-End Connector",
				connectorOut = "start",
				key_direction = "right");

			PortletEntry.publish();

			Alert.viewSuccessMessageText(successMessage = "Workflow published successfully.");
		}

		task ("When clicking on the information button on the published workflow") {
			ProcessBuilderKaleoDesignerReact.gotoInfoWorkflowDefinition();
		}

		task ("Then assert that the Created date, Last Modified and Total Modifications fields are displayed") {
			ProcessBuilderKaleoDesignerReact.viewDetailsFieldsPresent();
		}
	}

	@description = "Verify that the Revision History tab displays a list of the previous definition versions in descending order (3,2,1)"
	@priority = 4
	test CanViewPreviousVersionsListInOrderAtRevisionHistoryTab {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "end",
			connectorLabel = "Start-End Connector",
			connectorOut = "start",
			key_direction = "bottom");

		PortletEntry.publish();

		Alert.viewSuccessMessageText(successMessage = "Workflow published successfully.");

		ProcessBuilderKaleoDesignerReact.selectConnector(connectorLabel = "START-END CONNECTOR");

		ProcessBuilderKaleoDesignerReact.deleteNodeOrConnection(title = "Delete Transition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-200,-250");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "task",
			connectorLabel = "Start-Task Connector",
			connectorOut = "start",
			key_direction = "bottom");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "end",
			connectorLabel = "Task-End Connector",
			connectorOut = "task",
			key_direction = "bottom");

		Button.click(button = "Update");

		Alert.viewSuccessMessageText(successMessage = "Workflow updated successfully.");

		ProcessBuilderKaleoDesignerReact.gotoInfoWorkflowDefinition();

		Navigator.gotoNavTab(navTab = "Revision History");

		ProcessBuilderKaleoDesignerReact.restorePreviousVersion(number = 1);

		ProcessBuilderKaleoDesignerReact.viewCurrentVersionAtRevisionHistoryTab(number = 3);

		ProcessBuilderKaleoDesignerReact.viewRevisionHistoryVersion(number = 2);

		ProcessBuilderKaleoDesignerReact.viewRevisionHistoryVersion(number = 1);
	}

	@description = "Verify that the user can see a tooltip with 'Enter the comma separated resource actions (e.g. ADD, DELETE, UPDATE).' at Resource Actions "
	@priority = 2
	test CanViewResourceActionsTooltip {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-20,-40");

		ProcessBuilderKaleoDesignerReact.viewAndFillAssignments(
			assignmentType = "Resource Actions",
			resourceActionsText = "Test");

		ProcessBuilderKaleoDesignerReact.gotoSideBarProperty(
			propertyName = "Assignments",
			propertyValue = "Resource Actions:Test");

		ProcessBuilderKaleoDesignerReact.viewToolTip(tooltipMessage = "Enter the comma separated resource actions (e.g. ADD, DELETE, UPDATE).");

		/*ProcessBuilderKaleoDesignerReact.viewToolTipOverNameOnAssignments(
			label = "Resource Actions",
			tooltipOverName = "");*/
	}

	@description = "Verify that a Success alert appears when the user restore a definition version (Example: Success:Restored to Revision 'X')"
	@priority = 3
	test CanViewRestoreVersionSuccessAlert {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "end",
			connectorLabel = "Start-End Connector",
			connectorOut = "start",
			key_direction = "bottom");

		PortletEntry.publish();

		Alert.viewSuccessMessageText(successMessage = "Workflow published successfully.");

		ProcessBuilderKaleoDesignerReact.selectConnector(connectorLabel = "START-END CONNECTOR");

		ProcessBuilderKaleoDesignerReact.deleteNodeOrConnection(title = "Delete Transition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-200,-250");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "task",
			connectorLabel = "Start-Task Connector",
			connectorOut = "start",
			key_direction = "bottom");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "end",
			connectorLabel = "Task-End Connector",
			connectorOut = "task",
			key_direction = "bottom");

		Button.click(button = "Update");

		Alert.viewSuccessMessageText(successMessage = "Workflow updated successfully.");

		ProcessBuilderKaleoDesignerReact.gotoInfoWorkflowDefinition();

		Navigator.gotoNavTab(navTab = "Revision History");

		ProcessBuilderKaleoDesignerReact.restorePreviousVersion(number = 1);

		Alert.viewSuccessMessageText(successMessage = "Restored to Revision 1");
	}

	@description = "LPS-129928 - Verify that when the user clicks on the Source button the Source editor appears"
	@priority = 4
	test CanViewSourceEditor {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.diagramSourceSwitchView();

		ProcessBuilderKaleoDesignerReact.viewSourceEditor();
	}

	@description = "Verify that the user can see the Timers Recurrence tooltip with the value 'Repeat the action at a given duration until the workflow task is completed.'"
	@priority = 2
	test CanViewTimerRecurrenceFieldTooltip {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(nodeLabel = "Task");

		Click(
			key_propertyName = "Timer",
			locator1 = "ProcessBuilderKaleoDesignerReact#PROPERTIES_NEW_BUTTON");

		ProcessBuilderKaleoDesignerReact.viewToolTip(tooltipMessage = "Repeat the action at a given duration until the workflow task is completed.");
	}

	@description = "Verify that the user can view the Timer required fields"
	@priority = 3
	test CanViewTimersRequiredFields {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(nodeLabel = "Task");

		Click(
			key_propertyName = "Timer",
			locator1 = "ProcessBuilderKaleoDesignerReact#PROPERTIES_NEW_BUTTON");

		Select(
			key_index = 1,
			locator1 = "ProcessBuilderKaleoDesignerReact#TIMER_ACTION_SCRIPT_TYPE_INDEX",
			value1 = "Java");

		AssertVisible(
			key_requiredField = "name",
			locator1 = "ProcessBuilderKaleoDesignerReact#REQUIRED_FIELD");

		AssertVisible(
			key_requiredField = "script",
			locator1 = "ProcessBuilderKaleoDesignerReact#REQUIRED_FIELD");

		AssertVisible(
			key_requiredField = "timerScale",
			locator1 = "ProcessBuilderKaleoDesignerReact#REQUIRED_FIELD");

		AssertVisible(
			key_requiredField = "timerValue",
			locator1 = "ProcessBuilderKaleoDesignerReact#REQUIRED_FIELD");
	}

	@description = "Verify that on the Details tab, the Total Modifications field follows the number of times the definition was updated"
	@priority = 3
	test CanViewTotalModificationsAtDetailsTab {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "end",
			connectorLabel = "Start-End Connector",
			connectorOut = "start",
			key_direction = "bottom");

		PortletEntry.publish();

		Alert.viewSuccessMessageText(successMessage = "Workflow published successfully.");

		ProcessBuilderKaleoDesignerReact.gotoInfoWorkflowDefinition();

		ProcessBuilderKaleoDesignerReact.viewInformationDetailsPresent(
			fieldInformation = "1 Revision",
			fieldOption = "TOTAL MODIFICATIONS");

		Button.click(button = "Update");

		ProcessBuilderKaleoDesignerReact.viewInformationDetailsPresent(
			fieldInformation = "2 Revisions",
			fieldOption = "TOTAL MODIFICATIONS");

		Button.click(button = "Update");

		ProcessBuilderKaleoDesignerReact.viewInformationDetailsPresent(
			fieldInformation = "3 Revisions",
			fieldOption = "TOTAL MODIFICATIONS");
	}

	@description = "LPS-129928 - Verify that when the user makes changes to the Process Builder these changes are reflected in the XML code"
	@priority = 5
	test ChangesOnDiagramAreReflectedOnXML {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "Workflow Title");

		ProcessBuilderKaleoDesignerReact.diagramSourceSwitchView();

		ProcessBuilderKaleoDesignerReact.viewXMLSourceCodeSnippet(codeSnippet = "Start");

		ProcessBuilderKaleoDesignerReact.diagramSourceSwitchView();

		ProcessBuilderKaleoDesignerReact.selectNodeByLabel(nodeLabel = "Start");

		ProcessBuilderKaleoDesignerReact.editNodeInformationField(
			infoOption = "Label",
			infoValue = "Created");

		ProcessBuilderKaleoDesignerReact.diagramSourceSwitchView();

		ProcessBuilderKaleoDesignerReact.viewXMLSourceCodeSnippet(
			codeSnippet = "Created",
			codeSnippetNotPresent = "Start");
	}

	@description = "LPS-129928 - Verify that when the user makes changes to the XML code these changes are reflected in the Process Builder"
	@ignore = "Test Stub"
	@priority = 5
	test ChangesOnXMLAreReflectedOnDiagram {

		// TODO LRQA-72999 ChangesOnXMLAreReflectedOnDiagram pending implementation

	}

	@description = "Verify that Condition Node do not have Timers property"
	@priority = 4
	test ConditionHasNoTimersProperty {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Condition",
			nodePosition = "-20,-100");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "condition");

		ProcessBuilderKaleoDesignerReact.viewFieldNotPresentOnSideBar(fieldName = "Timers");
	}

	@description = "Verify that the Condition node must have at least two outgoing transitions"
	@priority = 4
	test ConditionMustHaveMoreThanOneTransition {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.uploadDefinition(workflowDefinitionFile = "invalid-condition-workflow-definition.xml");

		ProcessBuilderKaleoDesignerReact.diagramSourceSwitchView();

		Button.clickPublish();

		Alert.viewErrorMessage(errorMessage = "The Condition node must have at least 2 outgoing transitions");

		Navigator.gotoBack();

		Workflow.viewDefinitionNotPresent(workflowDefinitionTitle = "New Workflow Definition");
	}

	@description = "Verify that connectors can be deleted"
	@priority = 4
	test ConnectorCanBeDeleted {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "end",
			connectorLabel = "Start Task Connector",
			connectorOut = "start",
			key_direction = "top");

		ProcessBuilderKaleoDesignerReact.selectConnector(connectorLabel = "START TASK CONNECTOR");

		ProcessBuilderKaleoDesignerReact.deleteNodeOrConnection(title = "Delete Transition");

		ProcessBuilderKaleoDesignerReact.viewConnectorNotPresent(connectorLabel = "START TASK CONNECTOR");
	}

	@description = "Verify that the user can edit the connectors label"
	@priority = 4
	test ConnectorsLabelCanBeEdited {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "end",
			connectorLabel = "StartEndConnector",
			connectorOut = "start",
			key_direction = "bottom");

		ProcessBuilderKaleoDesignerReact.editConnector(
			connectorLabel = "STARTENDCONNECTOR",
			connectorLabelEdit = "EditedConnector");

		ProcessBuilderKaleoDesignerReact.viewConnectorPresent(connectorLabel = "EDITEDCONNECTOR");

		Workflow.saveDefinition(newKaleoDesigner = "True");

		Alert.viewSuccessMessageText(successMessage = "Workflow saved.");

		Workflow.openWorkflowListView();

		Workflow.gotoEditWorkflowDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.viewConnectorPresent(connectorLabel = "EDITEDCONNECTOR");
	}

	@description = "Verify that default label and ID for nodes are provided"
	@priority = 4
	test DefaultLabelAndIDAreProvided {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(nodeLabel = "Task");

		ProcessBuilderKaleoDesignerReact.viewNodeInfo(
			defaultNameValue = "true",
			labelValue = "Task",
			nodeType = "task");
	}

	@description = "Verify that default names for nodes are provided"
	@priority = 4
	test DefaultLabelsAreProvided {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.viewNodeLabel(nodeLabel = "Start");

		ProcessBuilderKaleoDesignerReact.viewNodeLabel(nodeLabel = "End");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Condition",
			nodePosition = "20,-300");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "20,100");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.viewNodeLabel(nodeLabel = "Condition");

		ProcessBuilderKaleoDesignerReact.viewNodeLabel(nodeLabel = "Task");
	}

	@description = "LPS-140056 - Verify that the changes on Default settings, for transitions, reflects on the diagram"
	@priority = 4
	test DefaultSettingsChangesReflectsOnDiagram {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "end",
			connectorOut = "start",
			key_direction = "top");

		ProcessBuilderKaleoDesignerReact.editConnector(
			connectorLabel = "TRANSITION LABEL",
			connectorLabelEdit = "LIFERAY LATAM");

		ProcessBuilderKaleoDesignerReact.viewConnectorPresent(connectorLabel = "LIFERAY LATAM");

		ProcessBuilderKaleoDesignerReact.viewDefaultToggleStatus(
			connectorLabel = "LIFERAY LATAM",
			defaultStatus = "True");

		ProcessBuilderKaleoDesignerReact.clickDefaultToggle(defaultConnector = "False");

		ProcessBuilderKaleoDesignerReact.viewDefaultToggleStatus(
			connectorLabel = "LIFERAY LATAM",
			defaultStatus = "False");
	}

	@description = "Publish workflow definition with no End Node And View Error Message"
	@priority = 4
	test DefinitionRequiresEndNodeToPublish {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "end");

		ProcessBuilderKaleoDesignerReact.deleteNodeOrConnection(title = "Delete End Node");

		Button.clickPublish();

		Alert.viewErrorMessage(errorMessage = "The Start node must have an outgoing transition");
	}

	@description = "Publish workflow definition with no start node and view error message"
	@priority = 4
	test DefinitionRequiresStartNodeToPublish {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.deleteNodeOrConnection(title = "Delete Start Node");

		Button.clickPublish();

		Alert.viewErrorMessage(errorMessage = "You must define a start node");

		Navigator.gotoBack();

		Workflow.viewDefinitionNotPresent(workflowDefinitionTitle = "New Workflow Definition");
	}

	@description = "Verify that, when the user deletes a translation, the action reflects in the language selector"
	@priority = 4
	test DeletedTranslationsAreNotDisplayedOnLanguageSelector {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.viewTranslationDropdown(translationOptionSelected = "en-us");

		ProcessBuilderKaleoDesignerReact.viewTranslationLanguageOptionPresent(
			currentTranslationOption = "en-us",
			translationOption = "ca_ES",
			translationStatus = "warning");

		ProcessBuilderKaleoDesignerReact.gotoManageTranslations();

		ProcessBuilderKaleoDesignerReact.deleteLanguage(translationOption = "Catalan");

		Button.clickDone();

		ProcessBuilderKaleoDesignerReact.viewTranslationLanguageOptionNotPresent(
			currentTranslationOption = "en-us",
			translationOption = "ca_ES");
	}

	@description = "LPS-129928 - Verify that when hovering the Process Builder view button the text Diagram view is displayed"
	@priority = 2
	test DiagramViewToolTipIsDisplayed {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.diagramSourceSwitchView();

		ProcessBuilderKaleoDesignerReact.viewSourceDiagramToolTipDisplayed(content = "Diagram View");
	}

	@description = "Verify that the Fork node must have at least two outgoing transitions"
	@priority = 4
	test ForkNodeMustHaveMoreThanOneTransition {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.uploadDefinition(workflowDefinitionFile = "invalid-fork-workflow-definition.xml");

		ProcessBuilderKaleoDesignerReact.diagramSourceSwitchView();

		Button.clickPublish();

		Alert.viewErrorMessage(errorMessage = "The Fork node must have at least 2 outgoing transitions");

		Navigator.gotoBack();

		Workflow.viewDefinitionNotPresent(workflowDefinitionTitle = "New Workflow Definition");
	}

	@description = "Verify that each fork node requires a join node"
	@priority = 4
	test ForkNodeRequiresJoinNode {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Fork",
			nodePosition = "-20,-300");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "fork",
			connectorLabel = "Transition Label",
			connectorOut = "start",
			key_direction = "top");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "end",
			connectorLabel = "Transition Label",
			connectorOut = "fork",
			key_direction = "top");

		Button.clickPublish();

		Alert.viewErrorMessage(errorMessage = "Each fork node requires a join node. Make sure all forks and joins are properly paired");

		Navigator.gotoBack();

		Workflow.viewDefinitionNotPresent(workflowDefinitionTitle = "New Workflow Definition");
	}

	@description = "Verify that each type of Node has Actions property"
	@priority = 4
	test HasActionsProperty {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.viewAndFillActions(
			executionTypeOption = "On Entry",
			name = "Liferay Actions 1",
			script = '''import com.liferay.portal.kernel.workflow.WorkflowConstants;
                        import com.liferay.portal.kernel.workflow.WorkflowStatusManagerUtil;

                        WorkflowStatusManagerUtil.updateStatus(WorkflowConstants.getLabelStatus("approved"), workflowContext);''',
			singleAction = "true",
			type = "Groovy");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "end");

		ProcessBuilderKaleoDesignerReact.viewAndFillActions(
			executionTypeOption = "On Entry",
			name = "Liferay Actions 2",
			script = '''import com.liferay.portal.kernel.workflow.WorkflowConstants;
                        import com.liferay.portal.kernel.workflow.WorkflowStatusManagerUtil;

                        WorkflowStatusManagerUtil.updateStatus(WorkflowConstants.getLabelStatus("approved"), workflowContext);''',
			singleAction = "true",
			type = "Groovy");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Join",
			nodePosition = "-0,-300");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "join");

		ProcessBuilderKaleoDesignerReact.viewAndFillActions(
			executionTypeOption = "On Entry",
			name = "Liferay Actions 3",
			script = '''import com.liferay.portal.kernel.workflow.WorkflowConstants;
                        import com.liferay.portal.kernel.workflow.WorkflowStatusManagerUtil;

                        WorkflowStatusManagerUtil.updateStatus(WorkflowConstants.getLabelStatus("approved"), workflowContext);''',
			singleAction = "true",
			type = "Groovy");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Join XOR",
			nodePosition = "-0,-200");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "join-xor");

		ProcessBuilderKaleoDesignerReact.viewAndFillActions(
			executionTypeOption = "On Entry",
			name = "Liferay Actions 4",
			script = '''import com.liferay.portal.kernel.workflow.WorkflowConstants;
                        import com.liferay.portal.kernel.workflow.WorkflowStatusManagerUtil;

                        WorkflowStatusManagerUtil.updateStatus(WorkflowConstants.getLabelStatus("approved"), workflowContext);''',
			singleAction = "true",
			type = "Groovy");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "State",
			nodePosition = "-0,-100");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "state");

		ProcessBuilderKaleoDesignerReact.viewAndFillActions(
			executionTypeOption = "On Entry",
			name = "Liferay Actions 5",
			script = '''import com.liferay.portal.kernel.workflow.WorkflowConstants;
                        import com.liferay.portal.kernel.workflow.WorkflowStatusManagerUtil;

                        WorkflowStatusManagerUtil.updateStatus(WorkflowConstants.getLabelStatus("approved"), workflowContext);''',
			singleAction = "true",
			type = "Groovy");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(nodeLabel = "Task");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "task");
	}

	@description = "Verify that each type of Node has Description property"
	@priority = 4
	test HasDescriptionProperty {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.viewNodeInfo(
			descriptionValue = "Begin a workflow.",
			nodeType = "start");

		ProcessBuilderKaleoDesignerReact.viewNodeInfo(
			descriptionValue = "Conclude the workflow.",
			nodeType = "end");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Fork",
			nodePosition = "20,-500");

		ProcessBuilderKaleoDesignerReact.viewNodeInfo(
			descriptionValue = "Split the workflow into multiple paths.",
			nodeType = "fork");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Condition",
			nodePosition = "20,100");

		ProcessBuilderKaleoDesignerReact.viewNodeInfo(
			descriptionValue = "Execute conditional logic.",
			nodeType = "condition");
	}

	@description = "Verify that each type of Node has Notifications property"
	@priority = 4
	test HasNotificationsProperty {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(newNotification = "true");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "end");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(newNotification = "true");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Fork",
			nodePosition = "20,-500");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "fork");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(newNotification = "true");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Condition",
			nodePosition = "20,-100");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "condition");

		ProcessBuilderKaleoDesignerReact.viewAndFillNotification(newNotification = "true");
	}

	@description = "LPS-141713 - Verify that the imported workflow definition is shown in the Process Builder"
	@priority = 4
	test ImportedProcessIsShownOnDiagram {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "Workflow Definition");

		ProcessBuilderKaleoDesignerReact.uploadDefinition(workflowDefinitionFile = "valid-imported-process-workflow-definition.xml");

		ProcessBuilderKaleoDesignerReact.diagramSourceSwitchView();

		ProcessBuilderKaleoDesignerReact.viewDiagramEditor(
			endLabelList = "Approve",
			joinLabelList = "Join",
			startLabelList = "Create",
			taskLabelList = "Analisis,Review");
	}

	@description = "LPS-129928 - Verify that the node coordinates are updated in Source when node is moved in diagram"
	@priority = 3
	test NodeCoordinatedAreUpdated {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "Workflow Definition");

		ProcessBuilderKaleoDesignerReact.diagramSourceSwitchView();

		ProcessBuilderKaleoDesignerReact.viewXMLSourceNodeCoordinate(
			coordinateX = 300,
			coordinateY = 100,
			lineX = 15,
			lineY = 16,
			nodeLabel = "Start");

		ProcessBuilderKaleoDesignerReact.diagramSourceSwitchView();

		ProcessBuilderKaleoDesignerReact.dragAndDropDiagramNode(
			nodeLabel = "Start",
			nodePosition = "90,50");

		ProcessBuilderKaleoDesignerReact.diagramSourceSwitchView();

		ProcessBuilderKaleoDesignerReact.viewXMLSourceNodeCoordinate(
			coordinateX = 390,
			coordinateY = 150,
			lineX = 15,
			lineY = 16,
			nodeLabel = "Start");
	}

	@description = "LPS-139387 - Verify that the node info is displayed when the node is selected"
	@priority = 4
	test NodeInfoIsDisplayedWhenNodeIsSelected {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "20,-500");

		ProcessBuilderKaleoDesignerReact.editNodeInformationField(
			infoOption = "Name",
			infoValue = "TaskId01");

		ProcessBuilderKaleoDesignerReact.viewNodeInfo(
			nameValue = "TaskId01",
			nodeType = "task");
	}

	@description = "LPS-139388 - Verify that the active node is highlighted on the diagram"
	@priority = 2
	test NodeIsHighlightedWhenActive {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-20,-40");

		ProcessBuilderKaleoDesignerReact.viewActiveNodeHighlighted(nodeType = "task");

		ProcessBuilderKaleoDesignerReact.viewInactiveNodeNotHighlighted(nodeType = "end");
	}

	@description = "Verify that the Role ID is a read only field"
	@priority = 3
	test NodeNameIsReadyOnly {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "0,0");

		ProcessBuilderKaleoDesignerReact.viewAndFillAssignments(
			assignmentType = "Role",
			roleName = "Administrator");

		ProcessBuilderKaleoDesignerReact.gotoSideBarProperty(
			propertyName = "Assignments",
			propertyValue = "Role:Administrator");

		ProcessBuilderKaleoDesignerReact.viewRoleIDDisabled();
	}

	@description = "LPS-129928 - Verify that the Publish button turns unavailable after the Workflow is published"
	@priority = 3
	test PublishButtonTurnsUnavailableAfterPublish {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "end",
			connectorLabel = "Start Task Connector",
			connectorOut = "start",
			key_direction = "top");

		PortletEntry.publish();

		ProcessBuilderKaleoDesignerReact.viewPublishButtonNotPresent();
	}

	@description = "Verify that a role name containing multi-byte characters can be used in the workflow"
	@priority = 4
	test RoleNameContainingMultibyteCharactersCanBeUsedInWorkflow {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given a regular role with multi-byte characters in the title") {
			JSONRole.addRegularRole(
				roleKey = "テスト",
				roleTitle = "test");
		}

		task ("and Given a workflow definition with node task") {
			Workflow.openWorkflowListView();

			Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

			ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
				nodeLabel = "Task",
				nodePosition = "-20,-40");

			ProcessBuilderKaleoDesignerReact.addConnector(
				connectorIn = "task",
				connectorLabel = "Start-Task Connector",
				connectorOut = "start",
				key_direction = "right");

			ProcessBuilderKaleoDesignerReact.addConnector(
				connectorIn = "end",
				connectorLabel = "Complete Task",
				connectorOut = "task",
				key_direction = "right");
		}

		task ("When publishing workflow definition with node task assigned to regular role with multibyte characters in title") {
			ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "task");

			ProcessBuilderKaleoDesignerReact.viewAndFillAssignments(
				assignmentType = "Role Type",
				roleTypeName = "Regular",
				roleTypeRoleName = "テスト");

			PortletEntry.publish();
		}

		task ("Then the workflow can be published successfully") {
			Alert.viewSuccessMessageText(successMessage = "Workflow published successfully.");
		}
	}

	@description = "Verify that the Single Approver Workflow comes with the Account Member and Account Administrator role names assigned"
	@priority = 4
	test SingleApproverComesWithAccountMemberAndAdmRoleName {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.gotoEditWorkflowDefinition(workflowDefinitionTitle = "Single Approver");

		ProcessBuilderKaleoDesignerReact.selectNodeByLabel(nodeLabel = "review");

		ProcessBuilderKaleoDesignerReact.gotoSideBarProperty(
			propertyName = "Assignments",
			propertyValue = "Role Type:Account Administrator");

		ProcessBuilderKaleoDesignerReact.viewRoleNamePresentInSidebar(roleName = "Account Member");

		ProcessBuilderKaleoDesignerReact.viewRoleNamePresentInSidebar(roleName = "Account Administrator");
	}

	@description = "Verify that the Single Approver Workflow comes with the Account role assigned"
	@priority = 5
	test SingleApproverComesWithAccountRole {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.gotoEditWorkflowDefinition(workflowDefinitionTitle = "Single Approver");

		ProcessBuilderKaleoDesignerReact.selectNodeByLabel(nodeLabel = "review");

		ProcessBuilderKaleoDesignerReact.gotoSideBarProperty(
			propertyName = "Assignments",
			propertyValue = "Account Administrator");

		ProcessBuilderKaleoDesignerReact.viewSelectedRoleAssignmentsByPosition(
			inputOption = "Role",
			positonOption = 2,
			selectedRole = "Account");
	}

	@description = "LPS-129928 - Verify that when hovering the Source button the text Source view is displayed"
	@priority = 2
	test SourceViewToolTipIsDisplayed {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.viewSourceDiagramToolTipDisplayed(content = "Source View");
	}

	@description = "Verify that Start node can't have incoming transition"
	@priority = 4
	test StartNodeCanNotHaveIncomingTransition {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-200,-250");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "end",
			connectorLabel = "Task End Connector",
			connectorOut = "task",
			direction = "bottom");

		ProcessBuilderKaleoDesignerReact.viewConnectorPresent(connectorLabel = "TASK END CONNECTOR");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "task");

		ProcessBuilderKaleoDesignerReact.addIncomingConnectorNotPossible(
			connectorIn = "start",
			connectorLabel = "Task Start Connector",
			connectorOut = "task",
			direction = "top");

		ProcessBuilderKaleoDesignerReact.viewConnectorNotPresent(connectorLabel = "TASK START CONNECTOR");
	}

	@description = "Verify that the Start Node must have an outgoing transition"
	@priority = 4
	test StartNodeMustHaveOutgoingTransition {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-20,-300");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "end",
			connectorLabel = "Transition Label",
			connectorOut = "task",
			key_direction = "top");

		Button.clickPublish();

		AssertElementPresent(
			locator1 = "Message#ERROR",
			value1 = "The Start node must have an outgoing transition");

		Navigator.gotoBack();

		Workflow.viewDefinitionNotPresent(workflowDefinitionTitle = "New Workflow Definition");
	}

	@description = "LPS-139387 - Verify that the user can not use the same name for more than one node"
	@priority = 5
	test StepIDIsUnique {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "start");

		var nodeNameValue = selenium.getElementValue("ProcessBuilderKaleoDesignerReact#NODE_NAME_GETTER");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "end");

		ProcessBuilderKaleoDesignerReact.editNodeInformationField(
			infoOption = "Name",
			infoValue = ${nodeNameValue});

		ProcessBuilderKaleoDesignerReact.viewSidebarFeedback(sidebarMessage = "A node with that name already exists. Enter a unique name.");
	}

	@description = "LPS-139387 - Verify that the Step Label is a required field"
	@priority = 3
	test StepLabelIsRequired {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-20,-40");

		ProcessBuilderKaleoDesignerReact.editNodeInformationField(
			infoOption = "Label",
			infoValue = " ");

		ProcessBuilderKaleoDesignerReact.viewRequiredField(
			requiredField = "nodeLabel",
			save = "true");
	}

	@description = "LPS-139387 - Verify that the Node Name is a required field"
	@priority = 3
	test StepNameIsRequired {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-20,-40");

		ProcessBuilderKaleoDesignerReact.editNodeInformationField(
			infoOption = "Name",
			infoValue = " ");

		ProcessBuilderKaleoDesignerReact.viewRequiredField(
			requiredField = "nodeName",
			save = "true");
	}

	@description = "Verify that the Task Node comes with Asset Creator Assignment as default"
	@priority = 3
	test TaskNodeComesWithAssetCreatorAssignmentAsDefault {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "0,0");

		ProcessBuilderKaleoDesignerReact.viewSelectedAssignments(selectedAssignments = "Asset Creator");
	}

	@description = "Verify that the Task node has Timers property"
	@priority = 4
	test TaskNodeHasTimersProperty {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Title");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-20,-100");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "task");

		ProcessBuilderKaleoDesignerReact.viewFieldPresentOnSideBar(fieldName = "Timers");
	}

	@description = "LPS-130000 - Verify that the transitions do not lose the reference when the Task ID is changed"
	@priority = 5
	test TransitionDoNotLoseReferenceOnTaskIDChange {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-200,-250");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "task",
			connectorLabel = "Start-Task Connector",
			connectorOut = "start",
			key_direction = "right");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "end",
			connectorLabel = "Task-End Connector",
			connectorOut = "task",
			key_direction = "right");

		ProcessBuilderKaleoDesignerReact.viewConnectorPresent(connectorLabel = "START-TASK CONNECTOR");

		ProcessBuilderKaleoDesignerReact.viewConnectorPresent(connectorLabel = "TASK-END CONNECTOR");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "task");

		ProcessBuilderKaleoDesignerReact.editNodeInformationField(
			infoOption = "Name",
			infoValue = "Liferay01");

		ProcessBuilderKaleoDesignerReact.viewConnectorPresent(connectorLabel = "START-TASK CONNECTOR");

		ProcessBuilderKaleoDesignerReact.viewConnectorPresent(connectorLabel = "TASK-END CONNECTOR");
	}

	@description = "LPS-130000 - Verify that the transitions do not lose the reference when the Task ID is changed"
	@priority = 5
	test TransitionIsDeletedWhenNodeIsDeleted {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-20,-40");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "task",
			connectorLabel = "Start-Task Connector",
			connectorOut = "start",
			key_direction = "right");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "end",
			connectorLabel = "Task-End Connector",
			connectorOut = "task",
			key_direction = "right");

		ProcessBuilderKaleoDesignerReact.selectNode(nodeType = "task");

		ProcessBuilderKaleoDesignerReact.deleteNodeOrConnection(title = "Delete Task Node");

		ProcessBuilderKaleoDesignerReact.viewPanelNodePresent(nodeType = "start");

		ProcessBuilderKaleoDesignerReact.viewPanelNodePresent(nodeType = "end");

		ProcessBuilderKaleoDesignerReact.viewPanelNodeNotPresent(nodeType = "task");

		ProcessBuilderKaleoDesignerReact.viewConnectorNotPresent(connectorLabel = "START-TASK CONNECTOR");

		ProcessBuilderKaleoDesignerReact.viewConnectorNotPresent(connectorLabel = "TASK-END CONNECTOR");
	}

	@description = "LPS-129928 - Verify that the translation dropdown closes when the user selects a language."
	@priority = 2
	test TranslationDropdownClosesAfterSelection {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.viewTranslationDropdown(translationOptionSelected = "en-us");

		Click(
			key_locale = "en_US",
			locator1 = "Translation#DROPDOWN_MENU_ITEM");

		AssertElementNotPresent(locator1 = "ProcessBuilderKaleoDesignerReact#TRANSLATION_DROPDOWN");
	}

	@description = "Publish workflow definition with Invalid Join Node And View Error Message"
	@priority = 3
	test ViewErrorMessageAfterPublishInvalidJoinDefinition {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.uploadDefinition(workflowDefinitionFile = "invalid-join-workflow-definition.xml");

		ProcessBuilderKaleoDesignerReact.diagramSourceSwitchView();

		Button.clickPublish();

		Alert.viewErrorMessage(errorMessage = "Fix the errors between the fork node Fork and join node Join");

		Navigator.gotoBack();

		Workflow.viewDefinitionNotPresent(workflowDefinitionTitle = "New Workflow Definition");
	}

	@description = "Publish workflow definition with Invalid JoinXOR Node And View Error Message"
	@priority = 3
	test ViewErrorMessageAfterPublishInvalidJoinXORDefinition {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.uploadDefinition(workflowDefinitionFile = "invalid-joinxor-workflow-definition.xml");

		ProcessBuilderKaleoDesignerReact.diagramSourceSwitchView();

		Button.clickPublish();

		Alert.viewErrorMessage(errorMessage = "Fix the errors between the fork node Fork and join node Join XOR");

		Navigator.gotoBack();

		Workflow.viewDefinitionNotPresent(workflowDefinitionTitle = "New Workflow Definition");
	}

	@description = "This is a use case for LPS-47352 and LPS-48912."
	@priority = 3
	test ViewWorkflowDefinitionButtons {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition Title");

		KaleoDesigner.viewButtons();
	}

	@description = "This is a use case for LPS-47352 and LPS-48912."
	@priority = 3
	test ViewWorkflowDefinitionButtonsViaKaleoFormsAdmin {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Navigator.openURL();

		ProductMenu.gotoPortlet(
			category = "Content & Data",
			portlet = "Kaleo Forms Admin");

		KaleoFormsAdmin.addFieldSet(
			kfFieldSetName = "Field Set Data Definition",
			kfProcessName = "Kaleo Forms Process");

		DynamicDataMapping.addField(
			field = "Text",
			fieldFieldLabel = "Text",
			fieldName = "Text");

		KaleoFormsAdmin.saveFieldSet();

		KaleoFormsAdmin.addProcess();

		KaleoFormsAdmin.addProcessDetails(
			kfProcessDescription = "Kaleo Forms Process Description",
			kfProcessName = "Kaleo Forms Process");

		KaleoFormsAdmin.next();

		KaleoFormsAdmin.chooseFieldSet(
			kfFieldSetName = "Field Set Data Definition",
			kfProcessName = "Kaleo Forms Process");

		KaleoFormsAdmin.next();

		KaleoFormsAdmin.addWorkflow(
			kfProcessName = "Kaleo Forms Process",
			workflowDefinitionTitle = "Workflow Definition Title");

		KaleoDesigner.viewButtons(cancelButton = "true");

		SelectFrameTop();

		KaleoFormsAdmin.viewPublishedWorkflowDefinitions();

		KaleoFormsAdmin.viewNoUnpublishedWorkflowDefinitions();
	}

	@description = "Verify that a message warning is displayed when the user adds another transition and selects it as default"
	@priority = 3
	test WarningIsDisplayedWhenNewTransitionDefault {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-200,-250");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "task",
			connectorLabel = "Transition Label",
			connectorOut = "start",
			key_direction = "top");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "end",
			connectorLabel = "Transition Label",
			connectorOut = "start",
			key_direction = "top");

		ProcessBuilderKaleoDesignerReact.clickDefaultToggle(defaultConnector = "True");

		Alert.viewWarningSpecific(warningMessage = "Default Was Changed:Your workflow may have changed because the default was changed.");
	}

	@description = "Verify that a message warning is not displayed when the user adds another transition and do not selects it as default"
	@priority = 3
	test WarningIsNotDisplayedWhenNewTransitionNotDefault {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		Workflow.openWorkflowListView();

		Workflow.addNewDefinition(workflowDefinitionTitle = "New Workflow Definition");

		ProcessBuilderKaleoDesignerReact.dragSidebarNodeAndMove(
			nodeLabel = "Task",
			nodePosition = "-200,-250");

		ProcessBuilderKaleoDesignerReact.backArrowOnSidebar();

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "task",
			connectorLabel = "Start-Task Connector",
			connectorOut = "start",
			key_direction = "right");

		ProcessBuilderKaleoDesignerReact.addConnector(
			connectorIn = "end",
			connectorLabel = "Start-End Connector",
			connectorOut = "start",
			key_direction = "right");

		ProcessBuilderKaleoDesignerReact.clickDefaultToggle(defaultConnector = "True");

		Alert.viewWarningSpecific(warningMessage = "Default Was Changed:Your workflow may have changed because the default was changed.");

		ProcessBuilderKaleoDesignerReact.clickDefaultToggle(defaultConnector = "False");

		Alert.viewWarningSpecificNotPresent(warningMessage = "Default Was Changed:Your workflow may have changed because the default was changed.");
	}

}