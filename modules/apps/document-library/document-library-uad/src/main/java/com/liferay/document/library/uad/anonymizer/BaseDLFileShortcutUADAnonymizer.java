/**
 * SPDX-FileCopyrightText: (c) 2000 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.liferay.document.library.uad.anonymizer;

import com.liferay.asset.kernel.model.AssetEntry;
import com.liferay.asset.kernel.service.AssetEntryLocalService;
import com.liferay.document.library.kernel.model.DLFileShortcut;
import com.liferay.document.library.kernel.service.DLFileShortcutLocalService;
import com.liferay.document.library.uad.constants.DLUADConstants;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.User;
import com.liferay.user.associated.data.anonymizer.DynamicQueryUADAnonymizer;

import org.osgi.service.component.annotations.Reference;

/**
 * Provides the base implementation for the document library file shortcut UAD anonymizer.
 *
 * <p>
 * This implementation exists only as a container for the default methods
 * generated by ServiceBuilder. All custom service methods should be put in
 * {@link DLFileShortcutUADAnonymizer}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @generated
 */
public abstract class BaseDLFileShortcutUADAnonymizer
	extends DynamicQueryUADAnonymizer<DLFileShortcut> {

	@Override
	public void autoAnonymize(
			DLFileShortcut dlFileShortcut, long userId, User anonymousUser)
		throws PortalException {

		if (dlFileShortcut.getUserId() == userId) {
			dlFileShortcut.setUserId(anonymousUser.getUserId());
			dlFileShortcut.setUserName(anonymousUser.getFullName());

			autoAnonymizeAssetEntry(dlFileShortcut, anonymousUser);
		}

		if (dlFileShortcut.getStatusByUserId() == userId) {
			dlFileShortcut.setStatusByUserId(anonymousUser.getUserId());
			dlFileShortcut.setStatusByUserName(anonymousUser.getFullName());
		}

		dlFileShortcutLocalService.updateDLFileShortcut(dlFileShortcut);
	}

	@Override
	public void delete(DLFileShortcut dlFileShortcut) throws PortalException {
		dlFileShortcutLocalService.deleteFileShortcut(dlFileShortcut);
	}

	@Override
	public Class<DLFileShortcut> getTypeClass() {
		return DLFileShortcut.class;
	}

	protected void autoAnonymizeAssetEntry(
		DLFileShortcut dlFileShortcut, User anonymousUser) {

		AssetEntry assetEntry = fetchAssetEntry(dlFileShortcut);

		if (assetEntry != null) {
			assetEntry.setUserId(anonymousUser.getUserId());
			assetEntry.setUserName(anonymousUser.getFullName());

			assetEntryLocalService.updateAssetEntry(assetEntry);
		}
	}

	@Override
	protected ActionableDynamicQuery doGetActionableDynamicQuery() {
		return dlFileShortcutLocalService.getActionableDynamicQuery();
	}

	@Override
	protected String[] doGetUserIdFieldNames() {
		return DLUADConstants.USER_ID_FIELD_NAMES_DL_FILE_SHORTCUT;
	}

	protected AssetEntry fetchAssetEntry(DLFileShortcut dlFileShortcut) {
		return assetEntryLocalService.fetchEntry(
			DLFileShortcut.class.getName(), dlFileShortcut.getFileShortcutId());
	}

	@Reference
	protected AssetEntryLocalService assetEntryLocalService;

	@Reference
	protected DLFileShortcutLocalService dlFileShortcutLocalService;

}