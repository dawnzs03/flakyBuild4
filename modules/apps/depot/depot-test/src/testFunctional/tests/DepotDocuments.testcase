@component-name = "portal-document-management"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Depot";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			JSONDepot.deleteDepot(depotName = "Test Depot Name");

			Site.tearDownCP();

			DMDocument.tearDownCP();

			DMFolder.tearDownCP();

			User.logoutPG();
		}
	}

	@description = "This ensures that a shortcut can be added to a depot."
	@priority = 3
	@refactordone
	test CanAccessShortcut {
		HeadlessSite.addSite(siteName = "Site Name");

		JSONDocument.addFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Site Name");

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DMDocument.addDMShortcutCP(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			siteName = "Site Name");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title");

		DMDocument.viewCP(dmDocumentTitle = "DM Document Title");
	}

	@description = "This ensures that a document with document type and metadata set can be added in a depot."
	@priority = 5
	@refactordone
	test CanAddDocumentTypeAndMetadata {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DMNavigator.gotoMetadataSets();

		DMMetadataSet.addTitle(metadataSetName = "DM Metadata Set Name");

		DataEngine.addField(
			fieldFieldLabel = "Text",
			fieldName = "Text");

		DDLDataDefinition.save();

		DMNavigator.gotoDocumentType();

		DMDocumentType.add(
			dmDocumentTypeDescription = "DM Document Type Description",
			dmDocumentTypeFieldNames = "Numeric",
			dmDocumentTypeName = "DM Document Type Name",
			metadataSetName = "DM Metadata Set Name");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DMDocument.addCP(
			dmDocumentDescription = "DM Document with DM Document Type Description",
			dmDocumentFile = "Document_1.doc",
			dmDocumentTitle = "DM Document Title",
			dmDocumentTypeName = "DM Document Type Name",
			numericField = 1234,
			textField = "Text");

		DepotNavigator.openToDMEntryInDepot(
			depotName = "Test Depot Name",
			dmDocumentTitle = "DM Document Title");

		DMDocument.viewDocumentTypePG(
			numericValue = 1234,
			textContent = "Text");
	}

	@description = "This ensures that a depot document can be copied to another folder."
	@priority = 5
	test CanCopyDocumentToOtherFolder {
		property custom.properties = "feature.flag.LPS-182512=true";

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		JSONFolder.addFolder(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "DM Folder Name",
			groupName = "Test Depot Name");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Test Depot Name",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DMDocument.copy(
			dmDocumentTitle = "DM Document Title",
			targetFolderName = "DM Folder Name");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		LexiconEntry.viewEntryName(rowEntry = "DM Document Title");

		DepotNavigator.openToDMFolder(
			depotName = "Test Depot Name",
			folderName = "DM Folder Name");

		LexiconEntry.viewEntryName(rowEntry = "DM Document Title");
	}

	@description = "This ensures that a depot folder can be copied to another folder."
	@priority = 5
	test CanCopyFolderToOtherFolder {
		property custom.properties = "feature.flag.LPS-182512=true";

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		JSONFolder.addFolder(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "DM Folder Name1",
			groupName = "Test Depot Name");

		JSONFolder.addFolder(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "DM Folder Name2",
			groupName = "Test Depot Name");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			folderName = "DM Folder Name1",
			groupName = "Test Depot Name",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DMFolder.copy(
			dmFolderName = "DM Folder Name1",
			targetFolderName = "DM Folder Name2");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		LexiconEntry.viewEntryName(rowEntry = "DM Folder Name1");

		DepotNavigator.openToDMFolder(
			depotName = "Test Depot Name",
			folderName = "DM Folder Name2");

		LexiconEntry.viewEntryName(rowEntry = "DM Folder Name1");

		DepotNavigator.openToDMFolder(
			depotName = "Test Depot Name",
			folderName = "DM Folder Name1",
			parentFolderName = "DM Folder Name2");

		LexiconEntry.viewEntryName(rowEntry = "DM Document Title");
	}

	@description = "This ensures that a folder can be deleted in a depot."
	@priority = 5
	@refactordone
	test CanDeleteFolder {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		JSONFolder.addFolder(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "DM Folder Name",
			groupName = "Test Depot Name");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DMFolder.deleteCP(dmFolderName = "DM Folder Name");

		DMDocument.viewDefault();
	}

	@description = "This test makes sure that all files are deleted when user selects all in a depot."
	@priority = 4
	@refactordone
	test CanDeleteMultipleImages {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DMDocument.addMultipleCP(dmDocumentFileList = "Document_1.doc,Document_2.jpg,Document_3.xls");

		PortletEntry.selectAll();

		Click(locator1 = "Icon#MOVE_TO_RECYCLE_BIN");

		Alert.viewSuccessMessage();

		DMDocument.viewDefault();
	}

	@description = "This test edits the title and description of a document in a depot."
	@e2e
	@priority = 5
	@refactordone
	test CanEditDocument {
		property portal.acceptance = "true";

		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DMDocument.addCP(
			displayPageTemplateDisabled = "true",
			dmDocumentDescription = "DM Document Description",
			dmDocumentFile = "Document_1.doc",
			dmDocumentTitle = "DM Document Title");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DMDocument.editCP(
			displayPageTemplateDisabled = "true",
			dmDocumentDescription = "DM Document Description",
			dmDocumentDescriptionEdit = "DM Document Description Edit",
			dmDocumentFileEdit = "Document_3.jpg",
			dmDocumentFileNameEdit = "Document_3.jpg",
			dmDocumentTitle = "DM Document Title",
			dmDocumentTitleEdit = "DM Document Title Edit");

		DMDocument.viewEditCP(
			dmDocumentFileName = "Document_3.jpg",
			dmDocumentTitleEdit = "DM Document Title Edit",
			dmDocumentVersionNumber = "2.0");
	}

	@description = "This ensures that a folder can be edited in a depot."
	@e2e
	@priority = 5
	@refactordone
	test CanEditFolder {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DMFolder.addCP(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "DM Folder Name");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DMFolder.editCP(
			dmFolderDescription = "DM Folder Description",
			dmFolderDescriptionEdit = "DM Folder Description Edit",
			dmFolderName = "DM Folder Name",
			dmFolderNameEdit = "DM Folder Name Edit");

		DMFolder.viewCP(dmFolderName = "DM Folder Name Edit");
	}

	@description = "This test makes sure that the documents can be filtered by category."
	@priority = 5
	test CanFilterByCategory {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		JSONCategory.addVocabulary(
			groupName = "Test Depot Name",
			site = "false",
			title = "Vocabulary Name");

		var categoryId1 = JSONCategory.addCategory(
			groupName = "Test Depot Name",
			site = "false",
			title = "Category1",
			vocabularyName = "Vocabulary Name");
		var categoryId2 = JSONCategory.addCategory(
			groupName = "Test Depot Name",
			site = "false",
			title = "Category2",
			vocabularyName = "Vocabulary Name");

		JSONDocument.addFileWithUploadedFile(
			assetCategoryIds = "${categoryId1},${categoryId2}",
			dmDocumentTitle = "DM Document Title 1",
			groupName = "Test Depot Name",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		JSONDocument.addFileWithUploadedFile(
			assetCategoryIds = ${categoryId2},
			dmDocumentTitle = "DM Document Title 2",
			groupName = "Test Depot Name",
			mimeType = "application/msword",
			sourceFileName = "Document_2.doc");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		ManagementBar.setFilterAndOrder(filterBy = "Categories...");

		DMDocument.selectFilterItems(categories = "Category1");

		DMDocument.viewFilterSummaryResults(
			filterScope = "Category: Category1",
			searchResults = "1 Result");

		LexiconEntry.viewEntryName(rowEntry = "DM Document Title 1");

		LexiconEntry.viewNoEntry(rowEntry = "DM Document Title 2");

		ManagementBar.setFilterAndOrder(filterBy = "Categories...");

		DMDocument.selectFilterItems(
			categories = "Category2",
			clearAll = "true");

		DMDocument.viewFilterSummaryResults(
			filterScope = "Category: Category2",
			searchResults = "2 Results");

		LexiconEntry.viewEntryName(rowEntry = "DM Document Title 1");

		LexiconEntry.viewEntryName(rowEntry = "DM Document Title 2");
	}

	@description = "This test makes sure that the documents can be filtered by extension."
	@priority = 5
	test CanFilterByExtension {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "DM Document Title 1",
			groupName = "Test Depot Name",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentTitle = "DM Document Title 2",
			groupName = "Test Depot Name",
			mimeType = "image/jpeg",
			sourceFileName = "Document_2.jpg");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		ManagementBar.setFilterAndOrder(filterBy = "Extension...");

		DMDocument.viewFilterByDetails(
			category = "Image (1 Item),Text (1 Item)",
			subcategory = "jpg,doc");

		DMDocument.selectFilterItems(categories = "Text (1 Item)");

		LexiconEntry.viewEntryName(rowEntry = "DM Document Title 1");

		LexiconEntry.viewNoEntry(rowEntry = "DM Document Title 2");

		ManagementBar.setFilterAndOrder(
			active = "true",
			filterBy = "Extension...");

		DMDocument.selectFilterItems(
			categories = "Image (1 Item)",
			clearAll = "true");

		LexiconEntry.viewNoEntry(rowEntry = "DM Document Title 1");

		LexiconEntry.viewEntryName(rowEntry = "DM Document Title 2");
	}

	@description = "This test makes sure that the documents can be filtered by tag."
	@priority = 5
	test CanFilterByTag {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		JSONDocument.addFileWithUploadedFile(
			assetTagNames = "tag1,tag2",
			dmDocumentTitle = "DM Document Title 1",
			groupName = "Test Depot Name",
			mimeType = "application/msword",
			sourceFileName = "Document_1.doc");

		JSONDocument.addFileWithUploadedFile(
			assetTagNames = "tag2",
			dmDocumentTitle = "DM Document Title 2",
			groupName = "Test Depot Name",
			mimeType = "application/msword",
			sourceFileName = "Document_2.doc");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		ManagementBar.setFilterAndOrder(filterBy = "Tags...");

		DMDocument.selectTags(tagNameList = "tag1");

		LexiconEntry.viewEntryName(rowEntry = "DM Document Title 1");

		LexiconEntry.viewNoEntry(rowEntry = "DM Document Title 2");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		ManagementBar.setFilterAndOrder(filterBy = "Tags...");

		DMDocument.selectTags(tagNameList = "tag2");

		LexiconEntry.viewEntryName(rowEntry = "DM Document Title 1");

		LexiconEntry.viewEntryName(rowEntry = "DM Document Title 2");
	}

	@description = "This ensures that a document can be moved to a folder in a depot."
	@priority = 5
	@refactordone
	test CanMoveDocumentToFolder {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		JSONDocument.addFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Test Depot Name");

		JSONFolder.addFolder(
			dmFolderDescription = "DM Folder Description",
			dmFolderName = "DM Folder Name",
			groupName = "Test Depot Name");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DMDocument.moveToFolderCP(
			dmDocumentTitle = "DM Document Title",
			dmFolderName = "DM Folder Name");

		DMDocument.viewMovedToFolderCP(
			dmDocumentTitle = "DM Document Title",
			dmFolderName = "DM Folder Name");

		DepotNavigator.openToDMEntryInDepot(
			depotName = "Test Depot Name",
			dmDocumentTitle = "DM Document Title",
			folderName = "DM Folder Name");

		DMDocument.viewCP(
			dmDocumentTitle = "DM Document Title",
			dmFolderName = "DM Folder Name",
			locationFieldName = "true");
	}

	@description = "This ensures that document can be restored to a depot."
	@priority = 5
	@refactordone
	test CanRestoreDocument {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		JSONDocument.addFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "DM Document Title",
			groupName = "Test Depot Name");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DMDocument.deleteCP(dmDocumentTitle = "DM Document Title");

		DMDocument.viewDefault();

		DepotNavigator.openDepotRecycleBinAdmin(depotName = "Test Depot Name");

		RecycleBin.restoreCP(
			assetName = "DM Document Title",
			assetRestoreLocation = "Home",
			assetType = "Document");

		DepotNavigator.openDepotDocumentsAndMediaAdmin(depotName = "Test Depot Name");

		DMNavigator.gotoDocumentCP(dmDocumentTitle = "DM Document Title");

		DMDocument.viewCP(dmDocumentTitle = "DM Document Title");
	}

	@description = "This ensures that the friendly URL of a document created on a depot will be updated automatically if it duplicates the existing one on the depot."
	@priority = 4
	test FriendlyURLDuplicatingDepotDocIsAutomaticallyChanged {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1",
			groupName = "Test Depot Name",
			mimeType = "text/txt",
			sourceFileName = "Document_1.txt");

		DepotNavigator.openToAddDMEntry(depotName = "Test Depot Name");

		DMDocument.editDocument(
			dmDocumentFile = "Document_2.txt",
			dmDocumentTitle = "Document_2");

		DMDocument.editFriendlyURL(friendlyURLEdit = "document_1");

		Alert.viewWarningSpecific(warningMessage = "Warning:The friendly URL document_1 was changed to document_1-1 to ensure uniqueness.");

		DepotNavigator.openToEditDMEntryInDepot(
			depotName = "Test Depot Name",
			dmDocumentTitle = "Document_2");

		DMDocument.viewEntryInEdit(friendlyURL = "document_1-1");
	}

	@description = "This ensures that the friendly URL of a document created on a depot will be updated automatically if it duplicates the one in the recycle bin of the depot."
	@priority = 3
	test FriendlyURLDuplicatingDepotRecycleBinDocIsAutomaticallyChanged {
		JSONDepot.addDepot(
			depotDescription = "This is the description of a depot",
			depotName = "Test Depot Name");

		JSONDocument.addFileWithUploadedFile(
			dmDocumentDescription = "DM Document Description",
			dmDocumentTitle = "Document_1",
			groupName = "Test Depot Name",
			mimeType = "application/excel",
			sourceFileName = "Document_1.xls");

		JSONDocument.moveToRecycleBin(
			dmDocumentTitle = "Document_1",
			groupName = "Test Depot Name",
			site = "false");

		DepotNavigator.openToAddDMEntry(depotName = "Test Depot Name");

		DMDocument.editDocument(
			dmDocumentFile = "Document_2.xls",
			dmDocumentTitle = "Document_2");

		DMDocument.editFriendlyURL(friendlyURLEdit = "document_1");

		Alert.viewWarningSpecific(warningMessage = "Warning:The friendly URL document_1 was changed to document_1-1 to ensure uniqueness.");

		DepotNavigator.openToEditDMEntryInDepot(
			depotName = "Test Depot Name",
			dmDocumentTitle = "Document_2");

		DMDocument.viewEntryInEdit(friendlyURL = "document_1-1");
	}

}