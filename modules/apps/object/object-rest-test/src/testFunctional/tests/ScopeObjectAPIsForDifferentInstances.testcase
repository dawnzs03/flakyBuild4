@component-name = "portal-headless"
definition {

	property custom.properties = "include-and-override=portal-liferay-online.properties";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Headless";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginUI();

		task ("Given an OAuth application with headless scopes is created on default instance") {
			OAuth2.openOAuth2Admin();

			OAuth2ForObject.addOAuth2Application();

			var defaultInstanceToken = OAuth2ForObject.createTokenWithOAuth2Scopes(
				resourceCheckList = "Liferay.Headless.Portal.Instances.everything,Liferay.Object.Admin.REST.everything",
				resourcePanels = "Liferay.Headless.Portal.Instances,Liferay.Object.Admin.REST");
		}

		task ("And Given a new virtual instances www.able.com is created") {
			HeadlessPortalInstanceAPI.addPortalInstance(
				domain = "liferay.com",
				portalInstanceId = "www.able.com",
				token = ${defaultInstanceToken},
				virtualHost = "www.able.com");
		}

		task ("And Given an OAuth application with headless scopes is created on www.able.com") {
			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@liferay.com");

			OAuth2.openOAuth2Admin(baseURL = "http://www.able.com:8080");

			OAuth2ForObject.addOAuth2Application();

			var virtualInstanceToken = OAuth2ForObject.createTokenWithOAuth2Scopes(
				baseURL = "http://www.able.com:8080",
				resourceCheckList = "Liferay.Headless.Portal.Instances.everything,Liferay.Object.Admin.REST.everything",
				resourcePanels = "Liferay.Headless.Portal.Instances,Liferay.Object.Admin.REST");
		}

		task ("And Given objectDefinition Test with site scope and new field name is created and published in default instance") {
			ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "Test",
				en_US_plural_label = "Tests",
				name = "Test",
				requiredStringFieldName = "name",
				scope = "site",
				token = ${defaultInstanceToken});
		}

		task ("And Given objectDefinition University with default company scope and new field location is created and published in www.able.com") {
			ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "Test",
				en_US_plural_label = "Tests",
				name = "Test",
				requiredStringFieldName = "location",
				token = ${virtualInstanceToken},
				virtualHost = "www.able.com");
		}
	}

	tearDown {
		OAuth2.openOAuth2Admin();

		var defaultInstanceToken = OAuth2ForObject.createTokenWithOAuth2Scopes(
			resourceCheckList = "Liferay.Headless.Portal.Instances.everything,Liferay.Object.Admin.REST.everything",
			resourcePanels = "Liferay.Headless.Portal.Instances,Liferay.Object.Admin.REST");

		ObjectAdmin.deleteObjectViaAPI(
			objectName = "Test",
			token = ${defaultInstanceToken});

		OAuth2.deleteApplication(applicationName = "OAuth Application");

		ApplicationsMenu.gotoPortlet(
			category = "System",
			panel = "Control Panel",
			portlet = "Virtual Instances");

		PortalInstances.deleteCP(virtualHost = "www.able.com");

		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@priority = 4
	test CanCreateObjectEntryByScopeKey {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("When I use postScopeScopeKey and scopeKey to create an object entry in default instance") {
			var defaultInstanceToken = OAuth2ForObject.createTokenWithOAuth2Scopes(
				resourceCheckList = "C_Test.everything,liferay-json-web-services.everything",
				resourcePanels = "C_Test,Portal Services");

			CustomObjectAPI.createObjectEntryWithFields(
				en_US_plural_label = "tests",
				fieldName = "name",
				fieldValue = "Object Entry in Default Instance",
				scopeKey = "true",
				token = ${defaultInstanceToken});
		}

		task ("Then the object entry created successfully") {
			var responseToParse = CustomObjectAPI.getObjectEntries(
				en_US_plural_label = "tests",
				scopeKey = "true",
				token = ${defaultInstanceToken});

			var actualValue = JSONUtil.getWithJSONPath(${responseToParse}, "$.totalCount");

			TestUtils.assertEquals(
				actual = ${actualValue},
				expected = 1);
		}
	}

	@priority = 4
	test CanCreateObjectEntryInVirtualInstance {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("When I use postTest to create an object entry in www.able.com instance") {
			var virtualInstanceToken = OAuth2ForObject.createTokenWithOAuth2Scopes(
				baseURL = "http://www.able.com:8080",
				resourceCheckList = "C_Test.everything",
				resourcePanels = "C_Test");

			CustomObjectAPI.createObjectEntryWithFields(
				en_US_plural_label = "tests",
				fieldName = "location",
				fieldValue = "Object Entry in Virtual Instance",
				token = ${virtualInstanceToken},
				virtualHost = "www.able.com");
		}

		task ("Then the object entry with location created successfully") {
			var responseToParse = ObjectDefinitionAPI.getObjectEntries(
				en_US_plural_label = "tests",
				token = ${virtualInstanceToken},
				virtualHost = "www.able.com");

			var actualValue = JSONUtil.getWithJSONPath(${responseToParse}, "$.items[*].location");

			TestUtils.assertEquals(
				actual = ${actualValue},
				expected = "Object Entry in Virtual Instance");
		}
	}

	@priority = 4
	test CanIncludeObjectFieldInAPIExplorer {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given navigate to www.able.com:8080/o/c/tests") {
			APIExplorer.navigateToOpenAPI(
				api = "c",
				version = "tests",
				virtualHost = "www.able.com");
		}

		task ("When expand postTest") {
			Click(
				locator1 = "OpenAPI#API_METHOD",
				method = "postTest",
				service = "Test");
		}

		task ("Then location field exists and name does not exist in postTest body") {
			AssertTextEquals.assertPartialText(
				locator1 = "OpenAPI#REQUEST_BODY",
				method = "postTest",
				value1 = "\"location\":");
		}

		task ("And Then location field exists and name does not exist in Test schema") {
			IsTextNotEqual(
				locator1 = "OpenAPI#REQUEST_BODY",
				method = "postTest",
				value1 = "\"name\":");
		}
	}

	@priority = 4
	test CanScopeObjectByInstanceInExportTask {
		property custom.properties = "feature.flag.COMMERCE-8087=true";
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("And Given an object definition Student with a custom field is created and published on virtual instance") {
			var virtualInstanceToken = OAuth2ForObject.createTokenWithOAuth2Scopes(
				baseURL = "http://www.able.com:8080",
				resourceCheckList = "Liferay.Headless.Portal.Instances.everything,Liferay.Object.Admin.REST.everything",
				resourcePanels = "Liferay.Headless.Portal.Instances,Liferay.Object.Admin.REST");

			ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "Student",
				en_US_plural_label = "Students",
				name = "Student",
				requiredStringFieldName = "name",
				token = ${virtualInstanceToken},
				virtualHost = "www.able.com");
		}

		task ("When create an export task on default instance") {
			ImportExport.openImportExportAdmin();

			ImportExport.gotoExport();
		}

		task ("Then C_Student is not in the available Entity Type list") {
			AssertTextNotPresent(value1 = "C_Student (v1_0 - Liferay Object REST)");
		}
	}

}