@component-name = "portal-object"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Object";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		ObjectAdmin.deleteAllCustomObjectsViaAPI();

		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}

		ObjectAdmin.deleteAllCommerceOrdersAndSitesViaAPI();
	}

	@description = "LPS-178405 - Verify if actions works with oldValue function when trigger is On After Delete (Add an Object Entry)"
	@priority = 4
	test CanCreateActionAddAnObjectEntryUsingOldValueWithOnAfterDeleteTrigger {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given two custom objects with a text field") {
			for (var letters : list "A,B") {
				ObjectAdmin.addObjectViaAPI(
					labelName = "Custom Object ${letters} 178405",
					objectName = "CustomObject${letters}178405",
					pluralLabelName = "Custom Objects ${letters} 178405");
			}

			for (var letters : list "A,B") {
				ObjectAdmin.addObjectFieldViaAPI(
					fieldBusinessType = "Text",
					fieldLabelName = "Custom Field",
					fieldName = "customObjectField",
					fieldType = "String",
					isRequired = "false",
					objectName = "CustomObject${letters}178405");

				ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject${letters}178405");
			}
		}

		task ("And given the custom objects has a On Afer Delete Trigger action") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object A 178405");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Custom Action",
				active = "true",
				fieldName = "Custom Field",
				inputExpression = "oldValue('customObjectField') == 'Entry Test'",
				inputMethod = "true",
				inputValue = "Works!",
				objectLabel = "Custom Object B 178405",
				thenAction = "Add an Object Entry",
				whenAction = "On After Delete");
		}

		task ("When an entry is created and then deleted") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObjectA178405",
				value = "Entry Test");

			ObjectAdmin.deleteObjectEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObjectA178405",
				value = "Entry Test");
		}

		task ("Then the action will be triggered after deleting an entry.") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObjectB178405");

			ObjectPortlet.viewEntry(entry = "Works!");
		}
	}

	@description = "LPS-175200 - Verify if actions works with oldValue function when trigger is On After Update (Add an Object Entry) using Picklist field."
	@priority = 5
	test CanCreateActionAddAnObjectEntryUsingOldValueWithOnAfterUpdateTrigger {
		property portal.acceptance = "true";

		task ("Given a picklist is added via API") {
			Picklist.addPicklistViaAPI(picklistName = "Status");

			Picklist.addPicklistItemViaAPI(
				itemKey = "open",
				itemName = "Open",
				picklistName = "Status");

			Picklist.addPicklistItemViaAPI(
				itemKey = "inProgress",
				itemName = "In Progress",
				picklistName = "Status");
		}

		task ("And given a object is created") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 175200",
				objectName = "CustomObject175200",
				pluralLabelName = "Custom Objects 175200");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Text Field",
				fieldName = "customTextField",
				fieldType = "String",
				isRequired = "true",
				objectName = "CustomObject175200");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 175200");

			ObjectAdmin.goToFieldsTab();

			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Custom Picklist Field",
				fieldPicklist = "Status",
				fieldType = "Picklist");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject175200");
		}

		task ("And given an action with oldValue function is created") {
			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Custom Action",
				active = "true",
				fieldName = "Custom Text Field",
				inputExpression = "oldValue('customPicklistField') == 'open'",
				inputMethod = "true",
				inputValue = "Object entry added",
				objectLabel = "Custom Object 175200",
				thenAction = "Add an Object Entry",
				whenAction = "On After Update");
		}

		task ("When the entry is added with picklist value Open") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customTextField",
				objectName = "CustomObject175200",
				value = "Entry Test");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject175200");

			ObjectPortlet.viewEntryDetails(entry = "Entry Test");

			ObjectAdmin.changePicklistFieldEntry(
				entrySelected = "Choose an Option",
				newPicklistOption = "Open");

			PortletEntry.save();
		}

		task ("And when the picklist value is edited") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject175200");

			ObjectPortlet.viewEntryDetails(entry = "Open");

			ObjectAdmin.changePicklistFieldEntry(
				entrySelected = "Open",
				newPicklistOption = "In Progress");

			PortletEntry.save();
		}

		task ("Then the action runs with oldValue function") {
			ObjectAdmin.openObjectAdmin();

			ObjectAdmin.goToCustomObject(objectName = "CustomObject175200");

			ObjectPortlet.viewEntry(entry = "Object entry added");
		}
	}

	@description = "LPS-175197 - Verify if actions works with oldValue function when trigger is On After Add (Notification) using any field."
	@priority = 5
	test CanCreateActionNotificationUsingOldValueWithOnAfterAddTrigger {
		property portal.acceptance = "true";
		property test.smtp.server.enabled = "true";

		task ("Given a notification template is created") {
			Notifications.goToNotificationTemplateAdmin();

			ObjectNotifications.addNewNotificationTemplate(
				emailBody = "Email Body",
				entryTo = "test@liferay.com",
				fromAddress = "test@liferay.com",
				fromName = "Test Test",
				name = "Email Template",
				notificationType = "Email",
				subject = "Subject Test");

			PortletEntry.save();
		}

		task ("And given an object with a field is created") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 175197",
				objectName = "CustomObject175197",
				pluralLabelName = "Custom Objects 175197");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject175197");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject175197");
		}

		task ("And given a notification action with the trigger (On After Add) is created and the oldValue function is used in the condition tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 175197");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Notification action when entry is added",
				active = "true",
				inputExpression = '''isEmpty(oldValue("customField"))''',
				notificationName = "Email Template",
				objectLabel = "Custom Object 175197",
				thenAction = "Notification",
				whenAction = "On After Add");
		}

		task ("When an entry is added") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject175197");

			ObjectPortlet.addSingleFieldEntryViaUI(entry = "Entry Test");
		}

		task ("Then the action is triggered and the notification is sent") {
			MockMock.viewMail(
				asset = "Subject Test",
				content = "Email Body",
				recipient = "test@liferay",
				sender = "Test Test",
				subject = "Subject Test");
		}
	}

	@description = "LPS-175192 - Verify if actions works with oldValue function when trigger is On After Delete (Notification) using any field."
	@priority = 5
	test CanCreateActionNotificationUsingOldValueWithOnAfterDeleteTrigger {
		property portal.acceptance = "true";
		property test.smtp.server.enabled = "true";

		task ("Given a notification template is created") {
			Notifications.goToNotificationTemplateAdmin();

			ObjectNotifications.addNewNotificationTemplate(
				emailBody = "Email Body",
				entryTo = "test@liferay.com",
				fromAddress = "test@liferay.com",
				fromName = "Test Test",
				name = "Email Template",
				notificationType = "Email",
				subject = "Subject Test");

			PortletEntry.save();
		}

		task ("And given an object with a field is created") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 175192",
				objectName = "CustomObject175192",
				pluralLabelName = "Custom Objects 175192");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject175192");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject175192");
		}

		task ("And given a notification action with the trigger (On After Delete) is created and the oldValue function is used in the condition tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 175192");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Notification action when entry is deleted",
				active = "true",
				inputExpression = '''oldValue("customField") == "Entry Test"''',
				notificationName = "Email Template",
				objectLabel = "Custom Object 175192",
				thenAction = "Notification",
				whenAction = "On After Delete");
		}

		task ("When an entry is added and then deleted") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject175192");

			ObjectPortlet.addSingleFieldEntryViaUI(entry = "Entry Test");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject175192");

			ObjectPortlet.deleteEntry(entry = "Entry Test");
		}

		task ("Then the action is triggered and the notification is sent") {
			MockMock.viewMail(
				asset = "Subject Test",
				content = "Email Body",
				recipient = "test@liferay",
				sender = "Test Test",
				subject = "Subject Test");
		}
	}

	@description = "LPS-175191 - Verify if actions works with oldValue function when trigger is On After Update (Notification) using any field"
	@priority = 5
	test CanCreateActionNotificationUsingOldValueWithOnAfterUpdateTrigger {
		property portal.acceptance = "true";
		property test.smtp.server.enabled = "true";

		task ("Given a notification template is created") {
			Notifications.goToNotificationTemplateAdmin();

			ObjectNotifications.addNewNotificationTemplate(
				emailBody = "Email Body",
				entryTo = "test@liferay.com",
				fromAddress = "test@liferay.com",
				fromName = "Test Test",
				name = "Email Template",
				notificationType = "Email",
				subject = "Subject Test");

			PortletEntry.save();
		}

		task ("And given an object with a field is created") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 175191",
				objectName = "CustomObject175191",
				pluralLabelName = "Custom Objects 175191");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject175191");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject175191");
		}

		task ("And given an action with the trigger (On After Update) are created and the oldValue function is used in the condition tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 175191");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Notification action when entry is updated",
				active = "true",
				inputExpression = '''oldValue("customField") == "Entry Test"''',
				notificationName = "Email Template",
				objectLabel = "Custom Object 175191",
				thenAction = "Notification",
				whenAction = "On After Update");
		}

		task ("When an entry is added and updated") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customField",
				objectName = "CustomObject175191",
				value = "Entry Test");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject175191");

			ObjectPortlet.viewEntryDetails(entry = "Entry Test");

			ObjectAdmin.editEntryName(newEntryValue = "Entry Test Edited");
		}

		task ("Then the action is triggered and the notification is sent") {
			MockMock.viewMail(
				asset = "Subject Test",
				content = "Email Body",
				recipient = "test@liferay",
				sender = "Test Test",
				subject = "Subject Test");
		}
	}

	@description = "LPS-178410 - Verify if actions works with oldValue function when trigger is On After Update (Notification) in Account System"
	@priority = 4
	test CanCreateActionNotificationUsingOldValueWithOnAfterUpdateTriggerOnAccountObject {
		property test.smtp.server.enabled = "true";

		task ("Given a notification template is created") {
			Notifications.goToNotificationTemplateAdmin();

			ObjectNotifications.addNewNotificationTemplate(
				emailBody = "Email Body",
				entryTo = "test@liferay.com",
				fromAddress = "test@liferay.com",
				fromName = "Test Test",
				name = "Email Template",
				notificationType = "Email",
				subject = "Subject Test");

			PortletEntry.save();
		}

		task ("And given a notification action with the trigger (On After Update) is created and the oldValue function is used for the Account Name") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Account");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Notification action when account is updated",
				active = "true",
				inputExpression = '''oldValue("name") ==  "Accounts Name Test"''',
				notificationName = "Email Template",
				objectLabel = "Account",
				thenAction = "Notification",
				whenAction = "On After Update");

			WaitForElementPresent(
				key_actionLabel = "Notification action when account is updated",
				locator1 = "ObjectAdmin#VIEW_ACTIONS_LABEL");
		}

		task ("When an account is added and then edited") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Accounts Name Test",
				accountEntryType = "Person");

			Account.openAccountsAdmin();

			Account.editCP(
				accountName = "Accounts Name Test",
				accountNameEdit = "Accounts Name Test Edited");
		}

		task ("Then the action is triggered and the notification is sent") {
			MockMock.viewMail(
				asset = "Subject Test",
				content = "Email Body",
				recipient = "test@liferay",
				sender = "Test Test",
				subject = "Subject Test");
		}
	}

	@description = "LPS-178415 - Verify if actions works with oldValue function when trigger is On After Update (Notification) in User System Object"
	@priority = 4
	test CanCreateActionNotificationUsingOldValueWithOnAfterUpdateTriggerOnUserObject {
		property test.smtp.server.enabled = "true";

		task ("Given: A notification template is created") {
			Notifications.goToNotificationTemplateAdmin();

			ObjectNotifications.addNewNotificationTemplate(
				emailBody = "Email Body",
				entryTo = "test@liferay.com",
				fromAddress = "test@liferay.com",
				fromName = "Test Test",
				name = "Email Template",
				notificationType = "Email",
				subject = "Subject Test");

			PortletEntry.save();
		}

		task ("And given a notification action with trigger (On After Update) and oldValue function is used in the condition tab for first name") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "User");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Notification action when first name is edited",
				active = "true",
				inputExpression = '''oldValue("givenName") ==  "userfn"''',
				notificationName = "Email Template",
				objectLabel = "User",
				thenAction = "Notification",
				whenAction = "On After Update");
		}

		task ("When a user is added and then the first name is edited") {
			JSONUser.addUser(
				userEmailAddress = "userea1@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");

			User.openUsersAdmin();

			UserNavigator.gotoUser(userScreenName = "usersn");

			User.editUserInformation(userFirstNameEdit = "edituserfn");
		}

		task ("Then the action is triggered and the notification is sent") {
			MockMock.viewMail(
				asset = "Subject Test",
				content = "Email Body",
				recipient = "test@liferay",
				sender = "Test Test",
				subject = "Subject Test");
		}
	}

	@description = "LPS-175198 - Verify if actions works with oldValue function when trigger is On Order Status Update (Notification) with order status field"
	@priority = 5
	test CanCreateActionNotificationUsingOldValueWithOnOrderStatusUpdateInSystemObject {
		property portal.acceptance = "true";
		property test.smtp.server.enabled = "true";

		task ("Given a notification template is created") {
			Notifications.goToNotificationTemplateAdmin();

			ObjectNotifications.addNewNotificationTemplate(
				emailBody = "Email Body",
				entryTo = "test@liferay.com",
				fromAddress = "test@liferay.com",
				fromName = "Test Test",
				name = "Email Template",
				notificationType = "Email",
				subject = "Subject Test");

			PortletEntry.save();
		}

		task ("And given an Action is created") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Commerce Order");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Notification action when the order is updated",
				active = "true",
				inputExpression = '''oldValue("orderStatus") == 1''',
				notificationName = "Email Template",
				thenAction = "Notification",
				whenAction = "On Order Status Update");
		}

		task ("And given an account, minium site and an order is created") {
			CommerceJSONAccountsAPI._addCommerceAccount(
				accountName = "Account Name",
				accountType = "Business");

			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			ApplicationsMenu.gotoSite(site = "Minium");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 1);

			Refresh();

			CommerceCheckout.gotoCheckout();

			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = 1,
				productUnitPrice = 24,
				shippingMethod = "Standard");
		}

		task ("When the user changes the order status.") {
			CommerceOrders.openOrdersAdmin();

			CommerceNavigator.gotoOrderEntryViaAdmin(status = "Pending");

			Click(
				key_text = "Accept Order",
				locator1 = "Link#ANY");

			// Workaround for LPS-193383

			CommerceOrders.openOrdersAdmin();

			Click.clickNoMouseOverNoWaitForVisible(locator1 = "CommerceNavigation#SELECT_ALL_CHECKBOX");

			ClickNoError(locator1 = "Button#TRASH_ENABLED");

			AssertConfirm.assertPartialConfirmation(value1 = "Are you sure you want to delete all selected orders?");

			CommerceUtilities.checkSuccessAlertAppearsAndDisappears();
		}

		task ("Then the action is triggered and the notification is sent") {
			MockMock.viewMail(
				asset = "Subject Test",
				content = "Email Body",
				recipient = "test@liferay",
				sender = "Test Test",
				subject = "Subject Test");
		}
	}

	@description = "LPS-175182 - Verify if actions works with oldValue function when trigger is On After Update (Update an object Entry) using any field"
	@priority = 5
	test CanCreateActionUpdateAnObjectEntryUsingOldValueWithOnAfterUpdateTrigger {
		property portal.acceptance = "true";

		task ("Given an object with a field is created") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 175182",
				objectName = "CustomObject175182",
				pluralLabelName = "Custom Objects 175182");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject175182");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject175182");
		}

		task ("When an action is created and the oldValue function is used in the condition tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 175182");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Custom Action",
				actionName = "CustomAction",
				active = "true",
				fieldName = "Custom Field",
				inputExpression = '''oldValue("customField") == "Entry Test"''',
				inputMethod = "true",
				inputValue = "Object entry updated",
				objectLabel = "Custom Object 175182",
				thenAction = "Update an Object Entry",
				whenAction = "On After Update");
		}

		task ("Then the object entry is updated when the condition is met") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customField",
				objectName = "CustomObject175182",
				value = "Entry Test");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject175182");

			ObjectPortlet.viewEntryDetails(entry = "Entry Test");

			ObjectAdmin.editEntryName(newEntryValue = "Entry Test Edited");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject175182");

			ObjectPortlet.viewEntry(entry = "Object entry updated");
		}
	}

	@description = "LPS-175185 - Verify if actions works with oldValue function when trigger is On After Add (Add an Object Entry) using Picklist field"
	@priority = 5
	test CanCreateActionUsingOldValueWithOnAfterAddTrigger {
		property portal.acceptance = "true";

		task ("Given a picklist with two items is created (via API)") {
			Picklist.addPicklistViaAPI(picklistName = "Status");

			Picklist.addPicklistItemViaAPI(
				itemKey = "open",
				itemName = "Open",
				picklistName = "Status");

			Picklist.addPicklistItemViaAPI(
				itemKey = "closed",
				itemName = "Closed",
				picklistName = "Status");
		}

		task ("And given an object with two fields is created") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 175185",
				objectName = "CustomObject175185",
				pluralLabelName = "Custom Objects 175185");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Text Field",
				fieldName = "customTextField",
				fieldType = "String",
				isRequired = "true",
				objectName = "CustomObject175185");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Picklist",
				fieldLabelName = "Custom Picklist Field",
				fieldName = "customPicklistField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject175185",
				picklistName = "Status");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject175185");
		}

		task ("When an action is created and The oldValue function is used on the condition tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 175185");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Custom Action",
				actionName = "CustomAction",
				active = "true",
				fieldName = "Custom Text Field",
				inputExpression = '''isEmpty(oldValue("customPicklistField"))''',
				inputMethod = "true",
				inputValue = "Object entry added",
				objectLabel = "Custom Object 175185",
				thenAction = "Add an Object Entry",
				whenAction = "On After Add");
		}

		task ("Then the object entry is added when the condition is met") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject175185");

			ObjectPortlet.addSingleFieldEntryViaUI(entry = "Entry Test");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject175185");

			ObjectPortlet.viewEntry(entry = "Object entry added");
		}
	}

	@description = "LPS-175201 - Verify if is possible create a validation using the oldValue function with the Text Field using a system object"
	@priority = 5
	test CanCreateValidationUsingOldValueFunctionInSystemObject {
		property ci.retries.disabled = "true";
		property portal.acceptance = "true";

		task ("Given an account is created with a custom validation using the oldValue function") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Accounts Name",
				accountEntryType = "Business");

			Account.openAccountsAdmin();

			WaitForElementPresent(
				key_rowEntry = "Accounts Name",
				locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME");

			LexiconEntry.gotoEntry(rowEntry = "Accounts Name");

			Account.gotoAssigneeTab(assigneeTab = "Addresses");

			Account.addAddress(
				addressCity = "Diamond Bar",
				addressCountry = "United States",
				addressName = "Name Test",
				addressPostalCode = 91765,
				addressRegion = "California",
				addressStreet1 = "1400 Montefino Ave",
				addressType = "Billing");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Postal Address");

			ObjectAdmin.goToValidationsTab();

			ObjectCustomValidation.addObjectValidation(
				validationName = "Custom Validation",
				validationType = "Expression Builder");

			ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

			ObjectCustomValidation.activeValidation();

			ObjectCustomValidation.gotoTab(tabName = "Conditions");

			ObjectCustomValidation.insertScriptOnValidation(scriptValidation = "oldValue('Name') == 'Test'");

			ObjectCustomValidation.addErrorMessage(errorMessage = "Invalid Value");

			PortletEntry.save();
		}

		task ("When the address from created account is edited") {
			Account.openAccountsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Accounts Name");

			Account.gotoAssigneeTab(assigneeTab = "Addresses");

			LexiconEntry.gotoEntry(rowEntry = "Name Test");

			Account._inputAddressDetails(
				addressCity = "Diamond Bar",
				addressCountry = "United States",
				addressName = "Name Test 2",
				addressPostalCode = 91765,
				addressRegion = "California",
				addressStreet1 = "1400 Montefino Ave",
				addressType = "Billing");

			PortletEntry.save();
		}

		task ("Then the error message appears on the log") {
			AssertConsoleTextPresent(value1 = "Invalid Value");
		}
	}

	@description = "LPS-175196 - Verify if is possible create a validation using the oldValue function using the Picklist field"
	@priority = 5
	test CanCreateValidationUsingOldValueFunctionWithPicklistField {
		property portal.acceptance = "true";

		task ("Given a picklist with two items is created (via API)") {
			Picklist.addPicklistViaAPI(picklistName = "Status");

			Picklist.addPicklistItemViaAPI(
				itemKey = "open",
				itemName = "Open",
				picklistName = "Status");

			Picklist.addPicklistItemViaAPI(
				itemKey = "inProgress",
				itemName = "In Progress",
				picklistName = "Status");
		}

		task ("And given an object with a field is created") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 175196",
				objectName = "CustomObject175196",
				pluralLabelName = "Custom Objects 175196");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Picklist",
				fieldLabelName = "Custom Picklist Field",
				fieldName = "customPicklistField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject175196",
				picklistName = "Status");
		}

		task ("And given a custom validation with expression builder is created and the object is published") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 175196");

			ObjectAdmin.goToValidationsTab();

			ObjectCustomValidation.addObjectValidation(
				validationName = "Custom Validation",
				validationType = "Expression Builder");

			ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

			ObjectCustomValidation.gotoTab(tabName = "Conditions");

			ObjectCustomValidation.insertScriptOnValidation(scriptValidation = '''oldValue("customPicklistField") == "open"''');

			ObjectCustomValidation.addErrorMessage(errorMessage = "Invalid Value.");

			PortletEntry.save();

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject175196");
		}

		task ("When an entry is created") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject175196");

			ObjectAdmin.addObjectPicklistFieldEntryViaUI(picklistOption = "Open");
		}

		task ("And when the validation toggle is active") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 175196");

			ObjectAdmin.goToValidationsTab();

			ObjectCustomValidation.gotoCustomValidation(validationName = "Custom Validation");

			ObjectCustomValidation.activeValidation();

			PortletEntry.save();
		}

		task ("Then the validation condition is met and the entry can be updated") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject175196");

			ObjectPortlet.viewEntryDetails(entry = "Open");

			ObjectAdmin.changePicklistFieldEntry(
				entrySelected = "Open",
				newPicklistOption = "In Progress");

			PortletEntry.save();

			ObjectAdmin.goToCustomObject(objectName = "CustomObject175196");

			ObjectPortlet.viewEntry(entry = "In Progress");
		}
	}

	@description = "Verify an action with an oldValue function sends an email when the order payment status is updated"
	@priority = 4
	test CanSendEmailWhenPaymentStatusIsUpdated {
		property portal.upstream = "quarantine";
		property test.smtp.server.enabled = "true";

		task ("Given an email notification template") {
			Notifications.goToNotificationTemplateAdmin();

			ObjectNotifications.addNewNotificationTemplate(
				emailBody = "Email Body",
				entryTo = "test@liferay.com",
				fromAddress = "test@liferay.com",
				fromName = "Test Test",
				name = "Notification Template",
				notificationType = "Email",
				subject = "Subject Test");

			PortletEntry.save();
		}

		task ("And given an action that uses the oldValue function and sends an email when the order payment status is updated") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Commerce Order");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.addObjectActionViaUI(
				actionLabel = "Action Name",
				active = "true",
				inputExpression = '''oldValue("orderStatus") == 1''',
				notificationName = "Notification Template",
				thenAction = "Notification",
				whenAction = "On Payment Status Update");
		}

		task ("And given an account, Minium site, and a commerce order") {
			CommerceJSONAccountsAPI._addCommerceAccount(
				accountName = "Account Name",
				accountType = "Business");

			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

			ApplicationsMenu.gotoSite(site = "Minium");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 1);

			CommerceCheckout.gotoCheckout();

			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = 1,
				productUnitPrice = 24,
				shippingMethod = "Standard");
		}

		task ("When the payment status is updated and the oldValue of the order status is Pending") {
			CommerceOrders.openOrdersAdmin();

			CommerceNavigator.gotoOrderEntryViaAdmin(status = "Pending");

			CommerceEntry.gotoMenuTab(menuTab = "Payments");

			CommercePaymentStatus.editPaymentStatus(statusValue = "Authorized");
		}

		task ("Then the action is triggered and an email is sent") {

			// Workaround for LPS-193383

			CommerceOrders.openOrdersAdmin();

			Click.clickNoMouseOverNoWaitForVisible(locator1 = "CommerceNavigation#SELECT_ALL_CHECKBOX");

			ClickNoError(locator1 = "Button#TRASH_ENABLED");

			AssertConfirm.assertPartialConfirmation(value1 = "Are you sure you want to delete all selected orders?");

			CommerceUtilities.checkSuccessAlertAppearsAndDisappears();

			MockMock.viewMail(
				asset = "Subject Test",
				content = "Email Body",
				recipient = "test@liferay",
				sender = "Test Test",
				subject = "Subject Test");
		}
	}

}