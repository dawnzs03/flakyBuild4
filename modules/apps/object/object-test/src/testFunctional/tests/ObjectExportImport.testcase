@component-name = "portal-object"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Object";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		ObjectAdmin.deleteAllCustomObjectsViaAPI();

		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "LPS-142175 - Verify the field values persist for object entries with 100 fields"
	@priority = 3
	test AssertFieldValuesPersist {
		task ("Given a custom object with 100 fields") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 187390",
				objectName = "CustomObject187390",
				pluralLabelName = "Custom Objects 187390");

			for (var textIndex : list "Simple,A,B,C,D,E,F,G,H,I") {
				ObjectAdmin.addObjectFieldViaAPI(
					fieldBusinessType = "Text",
					fieldLabelName = "Text ${textIndex}",
					fieldName = "text${textIndex}",
					fieldType = "String",
					isRequired = "false",
					objectName = "CustomObject187390");
			}

			for (var integerIndex : list "Simple,A,B,C,D,E,F,G,H,I") {
				ObjectAdmin.addObjectFieldViaAPI(
					fieldBusinessType = "Integer",
					fieldLabelName = "Integer ${integerIndex}",
					fieldName = "integer${integerIndex}",
					fieldType = "Integer",
					isRequired = "false",
					objectName = "CustomObject187390");
			}

			for (var precisionDecimalIndex : list "Label,A,B,C,D,E,F,G,H,I") {
				ObjectAdmin.addObjectFieldViaAPI(
					fieldBusinessType = "PrecisionDecimal",
					fieldLabelName = "Precision Decimal ${precisionDecimalIndex}",
					fieldName = "precisionDecimal${precisionDecimalIndex}",
					fieldType = "BigDecimal",
					isRequired = "false",
					objectName = "CustomObject187390");
			}

			for (var booleanIndex : list "Label,A,B,C,D,E,F,G,H,I") {
				ObjectAdmin.addObjectFieldViaAPI(
					fieldBusinessType = "Boolean",
					fieldLabelName = "Boolean ${booleanIndex}",
					fieldName = "boolean${booleanIndex}",
					fieldType = "Boolean",
					isRequired = "false",
					objectName = "CustomObject187390");
			}

			for (var dateIndex : list "Label,A,B,C,D,E,F,G,H,I") {
				ObjectAdmin.addObjectFieldViaAPI(
					fieldBusinessType = "Date",
					fieldLabelName = "Date ${dateIndex}",
					fieldName = "date${dateIndex}",
					fieldType = "Date",
					isRequired = "false",
					objectName = "CustomObject187390");
			}

			for (var dateTimeIndex : list "Label,A,B,C,D,E,F,G,H,I") {
				ObjectAdmin.addObjectFieldViaAPI(
					fieldBusinessType = "DateTime",
					fieldLabelName = "DateTime ${dateTimeIndex}",
					fieldName = "dateTime${dateTimeIndex}",
					fieldType = "DateTime",
					isRequired = "false",
					objectName = "CustomObject187390",
					timeStorageOption = "convertToUTC");
			}

			for (var longTextIndex : list "Label,A,B,C,D,E,F,G,H,I") {
				ObjectAdmin.addObjectFieldViaAPI(
					fieldBusinessType = "LongText",
					fieldLabelName = "LongText ${longTextIndex}",
					fieldName = "longText${longTextIndex}",
					fieldType = "Clob",
					isRequired = "false",
					objectName = "CustomObject187390");
			}

			for (var decimalIndex : list "Simple,A,B,C,D,E,F,G,H,I") {
				ObjectAdmin.addObjectFieldViaAPI(
					fieldBusinessType = "Decimal",
					fieldLabelName = "Decimal ${decimalIndex}",
					fieldName = "decimal${decimalIndex}",
					fieldType = "Double",
					isRequired = "false",
					objectName = "CustomObject187390");
			}

			for (var longIntegerIndex : list "Label,A,B,C,D,E,F,G,H,I") {
				ObjectAdmin.addObjectFieldViaAPI(
					fieldBusinessType = "LongInteger",
					fieldLabelName = "LongInteger ${longIntegerIndex}",
					fieldName = "longInteger${longIntegerIndex}",
					fieldType = "Long",
					isRequired = "false",
					objectName = "CustomObject187390");
			}

			for (var richTextIndex : list "Label,A,B,C,D,E,F,G,H,I") {
				ObjectAdmin.addObjectFieldViaAPI(
					fieldBusinessType = "RichText",
					fieldLabelName = "RichText ${richTextIndex}",
					fieldName = "richText${richTextIndex}",
					fieldType = "Clob",
					isRequired = "false",
					objectName = "CustomObject187390");
			}

			Picklist.addPicklistViaAPI(picklistName = "Status");

			for (var statusName : list "open,review,closed") {
				Picklist.addPicklistItemViaAPI(
					itemKey = ${statusName},
					itemName = ${statusName},
					picklistName = "Status");
			}

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 187390");

			ObjectAdmin.goToFieldsTab();

			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Picklist",
				fieldPicklist = "Status",
				fieldType = "Picklist");

			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Picklist State Manager",
				fieldPicklist = "Status",
				fieldType = "Picklist",
				itemName = "open",
				markAsState = "true");

			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Multiselect Picklist",
				fieldPicklist = "Status",
				fieldType = "Multiselect Picklist");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject187390");
		}

		task ("And given the object definition is exported") {
			ObjectAdmin.openObjectAdmin();

			ObjectExportImport.exportObject(
				objectLabel = "Custom Object 187390",
				objectName = "CustomObject187390");
		}

		task ("And given the object definition is deleted in portal") {
			ObjectAdmin.deleteObjectViaAPI(objectName = "CustomObject187390");
		}

		task ("And given the object definition is imported") {
			ObjectExportImport.importObject(
				objectFileName = "ImportedObjectWith100Fields",
				objectName = "CustomObject187390");

			ObjectPortlet.selectCustomObject(label = "Custom Object 187390");

			ObjectAdmin.publishObjectViaUI();
		}

		task ("When the user creates an object entry with each field type filled") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject187390");

			LexiconEntry.gotoAdd();

			ObjectPortlet.typeCustomField(
				customField = "Text Simple",
				entry = "Simple text");

			ObjectPortlet.typeCustomField(
				customField = "Integer Simple",
				entry = 24680);

			ObjectPortlet.typeCustomField(
				customField = "Precision Decimal Label",
				entry = "1.23");

			Click.clickAtNotVisible(locator1 = "ObjectAdmin#ENTRY_BOOLEAN_CHECKBOX");

			Type(
				locator1 = "ObjectPortlet#VIEW_EMPTY_LABEL_IN_DATE_ENTRY",
				value1 = "01/01/2024");

			Type(
				locator1 = "ObjectPortlet#VIEW_EMPTY_LABEL_IN_DATE_TIME_ENTRY",
				value1 = "10/10/2024 08:00 AM");

			FormViewBuilder.editClobText(fieldLong = "Long text test");

			ObjectPortlet.typeCustomField(
				customField = "Decimal Simple",
				entry = "13.579");

			ObjectPortlet.typeCustomField(
				customField = "LongInteger Label",
				entry = 1234567890);

			ObjectAutoGenerated.typeAndSelectTextOnRichText(text = "Rich text test");

			Click(locator1 = "ObjectAdmin#ENTRY_CHOOSE_OPTIONS_MULTIPICKLIST");

			for (var picklistOption : list "review,closed") {
				MenuItem.clickNoError(menuItem = ${picklistOption});
			}

			PortletEntry.save();
		}

		task ("Then the field values persists on the page and on the table") {
			for (var values : list "Simple text,24680,1.23,13.579,1234567890,open,01/01/2024,10/10/2024 08:00 AM") {
				AssertElementPresent(
					fieldLabel = ${values},
					locator1 = "CreateObject#FIELD_VALUE");
			}

			AssertElementPresent(
				checkboxName = "Boolean",
				locator1 = "Checkbox#ANY_CHECKBOX_CHECKED");

			AssertElementPresent(
				key_clobType = "Long text test",
				locator1 = "ObjectAdmin#VIEW_CLOB_TYPE_TEXT_ENTRY");

			SelectFrame.selectFrameNoLoading(locator1 = "CKEditor#BODY_FIELD_IFRAME");

			ObjectAutoGenerated.assertFormatTypeOnRichText(
				richText = "Rich text test",
				specificType = ".",
				type = "p");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject187390");

			for (var asserts : list "Simple text,24680,1.23,Yes,Long text test,13.579,Yes,1234567890,Rich text test,open") {
				ObjectPortlet.viewEntry(entry = ${asserts});
			}

			ObjectPortlet.viewEntry(entry = "review, closed");

			ObjectPortlet.viewEntry(entry = "Jan 1, 2024");

			ObjectPortlet.viewEntry(entry = "Oct 10, 2024, 8:00 AM");
		}
	}

	@description = "LPS-142175 - Verify it is possible to cancel importing an object"
	@ignore = "Test Stub"
	@priority = 4
	test CanCancelImport {
		ObjectAdmin.openObjectAdmin();

		Click(locator1 = "ObjectAdmin#KEBAB_MENU");

		MenuItem.click(menuItem = "Import Object Definition");

		var filePath = TestCase.getDependenciesDirPath(fileName = "ImportedSimpleObject.json");

		UploadFile(
			locator1 = "TextInput#FILE",
			value1 = ${filePath});

		Button.clickCancel();

		AssertElementNotPresent(locator1 = "IFrame#MODAL_BODY");

		AssertElementNotPresent(
			key_labelName = "Imported Simple Object",
			locator1 = "CreateObject#OBJECT_NAME");
	}

	@description = "LPS-142175 - Verify it is possible to clear the JSON file on the import dialog"
	@priority = 4
	test CanClearJsonFile {
		ObjectAdmin.openObjectAdmin();

		Click(locator1 = "ObjectAdmin#KEBAB_MENU");

		MenuItem.click(menuItem = "Import Object Definition");

		var filePath = TestCase.getDependenciesDirPath(fileName = "ImportedSimpleObject.json");

		UploadFile(
			locator1 = "TextInput#FILE",
			value1 = ${filePath});

		Button.click(button = "Clear");

		AssertElementNotPresent(
			fieldName = "JSON File",
			locator1 = "ObjectAdmin#OBJECT_IMPORT_FIELDS",
			valueName = "ImportedSimpleObject.json");
	}

	@description = "LPS-142175 - Verify if it is possible to export the data structure from a custom objects"
	@priority = 5
	test CanExportDataStructure {
		property portal.acceptance = "true";

		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 146357",
			objectName = "CustomObject146357",
			pluralLabelName = "Custom Objects 146357");

		ObjectAdmin.openObjectAdmin();

		ObjectExportImport.exportObject(
			objectLabel = "Custom Object 146357",
			objectName = "CustomObject146357");
	}

	@description = "LPS-142175 - Verify it's possible to export an object with Actions"
	@priority = 4
	test CanExportObjectWithAction {
		ObjectAdmin.addObjectViaAPI(
			labelName = "Custom Object 184",
			objectName = "CustomObject184",
			pluralLabelName = "Custom Objects 184");

		ObjectAdmin.openObjectAdmin();

		ObjectPortlet.selectCustomObject(label = "Custom Object 184");

		ObjectAdmin.goToActionsTab();

		ObjectAdmin.addObjectActionViaUI(
			actionLabel = "Action Label",
			actionName = "ActionName",
			thenAction = "Webhook",
			urlAction = "http://localhost:8080",
			whenAction = "On After Add");

		ObjectAdmin.openObjectAdmin();

		ObjectExportImport.exportObject(
			objectLabel = "Custom Object 184",
			objectName = "CustomObject184");
	}

	@description = "LPS-161893 - Verify that it's possible to export an object entry with aggregation field"
	@priority = 4
	test CanExportObjectWithAggregationField {
		task ("Given: A custom object with a self-relationship") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 161893",
				objectName = "CustomObject161893",
				pluralLabelName = "Custom Objects 161893");

			ObjectAdmin.addObjectRelationshipViaAPI(
				objectName_1 = "CustomObject161893",
				objectName_2 = "CustomObject161893",
				relationshipLabel = "Relationship",
				relationshipName = "relationship",
				relationshipType = "oneToMany");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject161893");
		}

		task ("When: An Aggregation field is added to the custom object from the Fields tab") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 161893");

			ObjectAdmin.goToFieldsTab();

			ObjectAdmin.addObjectFieldViaUI(
				field = "ID",
				fieldLabel = "Custom Aggregation",
				fieldType = "Aggregation",
				function = "Max",
				relationship = "Relationship");
		}

		task ("Then: The custom object with a self-relationship and Aggregation field can be exported") {
			ObjectAdmin.openObjectAdmin();

			ObjectExportImport.exportObject(
				objectLabel = "Custom Object 161893",
				objectName = "CustomObject161893");
		}
	}

	@description = "LPS-142175 - Verify it's possible to export imported object with custom views"
	@priority = 4
	test CanImportAndExportCustomViewsStructure {
		task ("When import object with custom views") {
			ObjectExportImport.importObject(
				objectFileName = "ImportedObjectWithCustomViews",
				objectName = "ImportedObjectWithCustomViews170541");

			AssertElementPresent(
				key_labelName = "Imported Object With Custom Views",
				locator1 = "CreateObject#OBJECT_NAME");
		}

		task ("Then the imported object with custom views can be exported") {
			ObjectAdmin.openObjectAdmin();

			ObjectExportImport.exportObject(
				objectLabel = "Imported Object With Custom Views",
				objectName = "ImportedObjectWithCustomViews");
		}
	}

	@description = "LPS-142175 - Verify it's possible to export imported object with state"
	@priority = 4
	test CanImportAndExportStateManagerStructure {
		task ("When import object with state") {
			ObjectExportImport.importObject(
				objectFileName = "ImportedObjectWithState",
				objectName = "ImportedObjectWithState170543");

			AssertElementPresent(
				key_labelName = "Imported Object With State",
				locator1 = "CreateObject#OBJECT_NAME");
		}

		task ("Then the state is present on the object") {
			ObjectPortlet.selectCustomObject(label = "Imported Object With State");

			ObjectAdmin.goToStateManagerTab();

			ObjectAdmin.goToFieldsDetails(label = "Field Picklist");

			AssertElementPresent(
				key_stateName = "PicklistItemTest",
				locator1 = "ObjectAdmin#VIEW_STATE_NAME");
		}

		task ("Then the imported object with state can be exported") {
			ObjectAdmin.openObjectAdmin();

			ObjectExportImport.exportObject(
				objectLabel = "Imported Object With State",
				objectName = "ImportedObjectWithState");
		}
	}

	@description = "LPS-142175 - Verify it's possible to export imported object with validation structure"
	@priority = 4
	test CanImportAndExportValidationStructure {
		task ("When import object with validation") {
			ObjectExportImport.importObject(
				objectFileName = "ImportedObjectWithValidation",
				objectName = "ImportedObjectWithValidation170542");

			AssertElementPresent(
				key_labelName = "Imported Object With Validation",
				locator1 = "CreateObject#OBJECT_NAME");
		}

		task ("Then the imported object with validation can be exported") {
			ObjectAdmin.openObjectAdmin();

			ObjectExportImport.exportObject(
				objectLabel = "Imported Object With Validation",
				objectName = "ImportedObjectWithValidation");
		}
	}

	@description = "LPS-142175 - Verify if it is possible to import the data structure to a custom objects"
	@priority = 5
	test CanImportDataStructure {
		property portal.acceptance = "true";

		ObjectExportImport.importObject(
			objectFileName = "ImportedSimpleObject",
			objectName = "ImportedSimpleObject146358");

		AssertElementPresent(
			key_labelName = "Imported Simple Object",
			locator1 = "CreateObject#OBJECT_NAME");
	}

	@description = "LPS-142175 - Verify it is possible to maintain Fields after importing an Object"
	@priority = 4
	test CanImportFields {
		ObjectExportImport.importObject(
			objectFileName = "ImportedObjectWithField",
			objectName = "ImportedObjectWithField146361");

		AssertElementPresent(
			key_labelName = "Imported Object With Field",
			locator1 = "CreateObject#OBJECT_NAME");

		ObjectPortlet.selectCustomObject(label = "Imported Object With Field");

		ObjectAdmin.goToFieldsTab();

		ObjectAdmin.assertObjectField(
			key_fieldLabel = "Custom Field",
			key_fieldType = "Text");
	}

	@description = "LPS-142175 - Verify it is possible to maintain Layouts after importing an Object"
	@priority = 4
	test CanImportLayouts {
		ObjectExportImport.importObject(
			objectFileName = "ImportedObjectWithLayout",
			objectName = "ImportedObjectWithLayout146360");

		AssertElementPresent(
			key_labelName = "Imported Object With Layout",
			locator1 = "CreateObject#OBJECT_NAME");

		ObjectPortlet.selectCustomObject(label = "Imported Object With Layout");

		ObjectAdmin.goToLayoutsTab();

		ObjectAdmin.assertObjectLayout(layoutLabel = "Layout");
	}

	@description = "LPS-142175 - Verify it's possible to import object with Actions"
	@priority = 4
	test CanImportObjectWithAction {
		task ("When import object with action") {
			ObjectExportImport.importObject(
				objectFileName = "ImportedObjectWithAction",
				objectName = "ImportedObjectWithAction160652");
		}

		task ("Then assert the imported file is present") {
			AssertElementPresent(
				key_labelName = "Imported Object With Action",
				locator1 = "CreateObject#OBJECT_NAME");
		}
	}

	@description = "LPS-142175 - Verify it is possible to import the same object more then one time"
	@priority = 4
	test CanImportSameObjectMoreThanOnce {
		ObjectExportImport.importObject(
			objectFileName = "ImportedSimpleObject",
			objectName = "ImportedSimpleObject146367A");

		ObjectExportImport.importObject(
			objectFileName = "ImportedSimpleObject",
			objectName = "ImportedSimpleObject146367B");

		AssertElementPresent(
			key_index = 1,
			key_labelName = "Imported Simple Object",
			locator1 = "CreateObject#OBJECT_NAME_INDEX");

		AssertElementPresent(
			key_index = 2,
			key_labelName = "Imported Simple Object",
			locator1 = "CreateObject#OBJECT_NAME_INDEX");
	}

	@description = "LPS-142175 - Verify it's possible to maintain Scope after importing an Object"
	@priority = 4
	test CanImportScope {
		ObjectExportImport.importObject(
			objectFileName = "ImportedObjectWithScope",
			objectName = "ImportedObjectWithScope146370");

		AssertElementPresent(
			key_labelName = "Imported Object With Scope",
			locator1 = "CreateObject#OBJECT_NAME");

		ObjectPortlet.selectCustomObject(label = "Imported Object With Scope");

		AssertTextEquals(
			locator1 = "ObjectAdmin#SELECT_OBJECT_SCOPE",
			value1 = "Company");

		AssertTextEquals(
			locator1 = "CreateObject#PANEL_LINK",
			value1 = "Control Panel > Object");
	}

	@description = "LPS-142175 - Verify it is not possible to maintain Relationships after importing an Object"
	@priority = 4
	test CannotImportRelationships {
		ObjectExportImport.importObject(
			objectFileName = "ImportedObjectWithRelationship",
			objectName = "ImportedObjectWithRelationship146359");

		AssertElementPresent(
			key_labelName = "Imported Object With Relationship",
			locator1 = "CreateObject#OBJECT_NAME");

		ObjectPortlet.selectCustomObject(label = "Imported Object With Relationship");

		ObjectAdmin.gotoRelationshipsTab();

		AssertTextEquals(
			locator1 = "Message#EMPTY_STATE_INFO",
			value1 = "No Results Found");
	}

	@description = "LPS-142175 - Verify it is possible to publish an imported custom object"
	@ignore = "Test Stub"
	@priority = 4
	test CanPublishImportedObject {
		ObjectExportImport.importObject(
			objectFileName = "ImportedObjectWithField",
			objectName = "ImportedObjectWithField146365");

		AssertElementPresent(
			key_labelName = "Imported Object With Field",
			locator1 = "CreateObject#OBJECT_NAME");

		ObjectPortlet.selectCustomObject(label = "Imported Object With Field");

		PortletEntry.publish();

		ObjectAdmin.openObjectAdmin();

		AssertTextEquals(
			key_label = "Imported Object With Field",
			locator1 = "ObjectAdmin#OBJECT_STATUS",
			value1 = "Approved");
	}

	@description = "LPS-142175 - Verify that an imported custom object is created with Draft Status"
	@priority = 4
	test ImportedObjectIsDraft {
		ObjectExportImport.importObject(
			objectFileName = "ImportedSimpleObject",
			objectName = "ImportedSimpleObject146363");

		AssertElementPresent(
			key_labelName = "Imported Simple Object",
			locator1 = "CreateObject#OBJECT_NAME");

		AssertTextEquals(
			key_label = "Imported Simple Object",
			locator1 = "ObjectAdmin#OBJECT_STATUS",
			value1 = "Draft");
	}

}