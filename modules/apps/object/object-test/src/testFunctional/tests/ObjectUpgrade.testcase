@component-name = "portal-upgrades"
definition {

	property portal.release = "true";
	property portal.upstream = "quarantine";
	property test.liferay.virtual.instance = "false";
	property testray.component.names = "Object";
	property testray.main.component.name = "Upgrades Object";

	setUp {
		SignIn.signIn();

		var portalURL = PropsUtil.get("portal.url");

		AssertLocation(value1 = "${portalURL}/web/guest?SM_USER=test@liferay.com");

		SearchAdministration.executeReindex();
	}

	@ignore = "Test Stub"
	@priority = 5
	test ViewActionWithNotificationAfterUpgrade7413U33 {
		property data.archive.type = "data-archive-object";
		property database.types = "mariadb,mysql,postgresql,sqlserver";
		property portal.version = "7.4.13.u33";

		task ("Given Custom Object1 and Object Actions") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object1");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.viewObjectAction(
				actionLabel = "Custom Action",
				actionName = "Custom Action",
				active = "Yes",
				inputExpression = "customFieldText == 'Notification Test'",
				notificationName = "Notification Template",
				objectLabel = "Notification",
				status = "Success",
				thenAction = "Notification",
				viewEntry = "Custom Action",
				whenAction = "On After Add");
		}

		task ("When an object entry for Custom Object1 (Notification Test) is made and assert the action is triggered") {
			Navigator.openURL();

			ProductMenu.gotoPortlet(
				category = "Content & Data",
				panel = "Site Administration",
				portlet = "Custom Objects1");

			LexiconEntry.gotoAdd();

			Type(
				key_text = "",
				locator1 = "TextInput#ANY",
				value1 = "Notification Test");

			Button.clickSave();

			ProductMenu.gotoPortlet(
				category = "Content & Data",
				panel = "Site Administration",
				portlet = "Custom Objects1");

			MockMock.viewMail(
				asset = "Subject",
				content = "Email Body",
				recipient = "test@liferay",
				sender = "Test Test",
				subject = "Subject");

			MockMock.deleteMail(
				deleteAll = "true",
				newTab = "true");

			Close.closeWindow();
		}

		task ("And when user edits Custom Action name and Expression Builder condition and asserts action ran and received notification") {
			Navigator.openURL();

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object1");

			ObjectAdmin.goToActionsTab();

			ObjectAdmin.editObjectAction(
				actionLabel = "Update Custom Action",
				inputExpression = "customFieldText == 'Update Notification Test'",
				viewEntry = "Custom Action");

			Navigator.openURL();

			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Custom Objects1");

			LexiconEntry.gotoAdd();

			Type(
				key_text = "",
				locator1 = "TextInput#ANY",
				value1 = "Update Notification Test");

			Button.clickSave();

			ProductMenu.gotoPortlet(
				category = "Content & Data",
				panel = "Site Administration",
				portlet = "Custom Objects1");

			MockMock.viewMail(
				asset = "Subject",
				content = "Email Body",
				recipient = "test@liferay",
				sender = "Test Test",
				subject = "Subject");
		}

		task ("Then the user is able to delete the action") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object1");

			ObjectAdmin.goToActionsTab();

			Click(
				key_objectLabel = "Custom Action",
				locator1 = "ObjectAdmin#OBJECT_KEBAB_MENU");

			MenuItem.clickNoError(menuItem = "Delete");
		}
	}

	@priority = 5
	test ViewObjectDefinitionDetailsAfterUpgrade7413U33 {
		property data.archive.type = "data-archive-object";
		property database.types = "mariadb,mysql,postgresql,sqlserver";
		property portal.version = "7.4.13.u33";

		task ("View an Object Definition Details after Upgrade") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object1");

			AssertTextEquals(
				locator1 = "CreateObject#OBJECT_LABEL",
				value1 = "Custom Object1");

			AssertTextEquals(
				locator1 = "CreateObject#OBJECT_PLURAL_LABEL",
				value1 = "Custom Objects1");

			AssertElementPresent(
				locator1 = "CreateObject#TITLE_FIELD",
				value1 = "Custom Field Text");

			AssertTextEquals(
				locator1 = "ObjectAdmin#SELECT_OBJECT_SCOPE",
				value1 = "Site");

			AssertTextEquals(
				locator1 = "CreateObject#PANEL_LINK",
				value1 = "Site Administration > Content & Data");

			AssertChecked.assertCheckedNotVisible(locator1 = "ObjectPortlet#VIEW_WIDGET_IN_PAGE_BUILDER_TOGGLE");
		}

		task ("Edit an Object Definition Details after Upgrade") {
			ObjectAdmin.goToDetailsTab();

			CreateObject.editLabel(labelName = "Custom Object1 Edit After Upgrade");

			CreateObject.editPluralLabel(pluralLabelName = "Custom Objects1 Edit After Upgrade");

			Uncheck.uncheckToggleSwitch(locator1 = "ObjectPortlet#VIEW_WIDGET_IN_PAGE_BUILDER_TOGGLE");

			CreateObject.saveObject();
		}

		task ("Delete an Object Definition after Upgrade") {
			ObjectAdmin.gotoRelationshipsTab();

			ObjectAdmin.deleteRelationshipViaUI(
				relationshipLabel = "MTM - Custom Object",
				relationshipName = "mTMCustomObject");

			ObjectAdmin.deleteRelationshipViaUI(
				relationshipLabel = "OTM - System Object",
				relationshipName = "oTMSystemObject");

			ObjectAdmin.openObjectAdmin();

			ObjectAdmin.deleteCustomObjectViaUI(
				labelName = "Custom Object1 Edit After Upgrade",
				objectName = "CustomObject1");

			AssertElementNotPresent(
				locator1 = "ObjectAdmin#OBJECT_LABEL",
				value1 = "Custom Object1 Edit After Upgrade");
		}
	}

	@priority = 5
	test ViewObjectEntryAfterUpgrade7413U33 {
		property data.archive.type = "data-archive-object";
		property database.types = "mariadb,mysql,postgresql,sqlserver";
		property portal.version = "7.4.13.u33";

		task ("View Object Entry after Upgrade") {
			Navigator.openURL();

			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Custom Objects1",
				site = "Liferay DXP");

			ObjectPortlet.viewEntryDetails(entry = "Notification Test");

			Navigator.gotoNavTab(navTab = "Account Tab");

			ObjectPortlet.viewEntry(entry = "Account Test");

			Navigator.gotoNavTab(navTab = "Custom Object2 Tab");

			ObjectPortlet.viewEntry(entry = "Document_1.jpg");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject2");

			ObjectPortlet.viewEntry(entry = "Document_1.jpg");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject3");

			for (var columns : list "Custom Field Boolean,Custom Field Date,Custom Field Decimal,Custom Field Integer,Custom Field Long Integer,Custom Field Long Text,Custom Field Picklist,Custom Field Precision Decimal,Custom Field Rich Text") {
				AssertElementPresent(
					key_column = ${columns},
					locator1 = "ObjectPortlet#ENTRY_COLUMN");
			}

			for (var entries : list "Yes,5.5,123456789,1234567890123456,Picklist Item 1,3.1415,Rich Text Entry") {
				ObjectPortlet.viewEntry(entry = ${entries});
			}

			ObjectPortlet.viewEntry(entry = "Jan 1, 1970");

			ObjectPortlet.viewEntry(entry = "Lorem ipsum dolor sit amet, an senserit appellantur vis, ea usu facilis admodum facilisi. Doctus admodum maiorum duo ex, dignissim reformidans ut mei, at his cibo eloquentiam. Has ei unum legimus constituto, stet labore has et. No audire pertinacia pri, vix possit vocibus facilisi eu.");
		}

		task ("Edit Object Entry after Upgrade") {
			ObjectPortlet.viewEntryDetails(entry = "Rich Text Entry");

			Uncheck.uncheckNotVisible(
				checkboxName = "Custom Field Boolean",
				locator1 = "Checkbox#ANY_CHECKBOX");

			ObjectPortlet.typeCustomField(
				customField = "Custom Field Decimal",
				entry = "7.4");

			ObjectPortlet.typeCustomField(
				customField = "Custom Field Precision Decimal",
				entry = "1.2345");

			ObjectPortlet.typeCustomField(
				customField = "Custom Field Integer",
				entry = 987654321);

			ObjectPortlet.typeCustomField(
				customField = "Custom Field Long Integer",
				entry = 6543210123456789);

			Type(
				key_text = "LongText",
				locator1 = "TextArea#ANY",
				value1 = "Lorem ipsum dolor sit amet, an senserit appellantur vis, ea usu facilis admodum facilisi. Doctus admodum maiorum duo ex, dignissim reformidans ut mei, at his cibo eloquentiam. Has ei unum legimus constituto, stet labore has et. No audire pertinacia pri, vix possit vocibus facilisi eu. - Edit After Upgrade");

			FormFields.editDate(
				fieldName = "customFieldDate",
				fieldValue = "06/15/2023");

			ObjectAdmin.changePicklistFieldEntry(
				entrySelected = "Picklist Item 1",
				newPicklistOption = "Picklist Item 2");

			Type(
				locator1 = "CKEditor#BODY_FIELD_IFRAME",
				value1 = "Rich Text Entry - Edit After Upgrade");

			PortletEntry.save();

			ObjectAdmin.goToCustomObject(objectName = "CustomObject3");

			for (var entries : list "No,7.4,987654321,6543210123456789,Picklist Item,1.2345,Rich Text Entry - Edit After Upgrade") {
				ObjectPortlet.viewEntry(entry = ${entries});
			}

			ObjectPortlet.viewEntry(entry = "Jun 15, 2023");

			ObjectPortlet.viewEntry(entry = "Lorem ipsum dolor sit amet, an senserit appellantur vis, ea usu facilis admodum facilisi. Doctus admodum maiorum duo ex, dignissim reformidans ut mei, at his cibo eloquentiam. Has ei unum legimus constituto, stet labore has et. No audire pertinacia pri, vix possit vocibus facilisi eu. - Edit After Upgrade");
		}

		task ("Delete Object Entry after Upgrade") {
			ObjectPortlet.deleteEntry(entry = "Rich Text Entry - Edit After Upgrade");

			ObjectPortlet.assertEntryNotPresent(entry = "Rich Text Entry - Edit After Upgrade");
		}
	}

	@priority = 5
	test ViewObjectFieldAfterUpgrade7413U33 {
		property data.archive.type = "data-archive-object";
		property database.types = "mariadb,mysql,postgresql,sqlserver";
		property portal.version = "7.4.13.u33";

		var index = 0;
		var listLabelOriginal = ListUtil.newListFromString("Custom Field Long Integer,Custom Field Date,Custom Field Integer,Custom Field Precision Decimal,Custom Field Decimal,Custom Field Rich Text,Custom Field Boolean,Custom Field Long Text,Custom Field Picklist");
		var listLabelUpdated = ListUtil.newListFromString("Custom Field Long Integer Updated,Custom Field Date Updated,Custom Field Integer Updated,Custom Field Precision Decimal Updated,Custom Field Decimal Updated,Custom Field Rich Text Updated,Custom Field Boolean Updated,Custom Field Long Text Updated,Custom Field Picklist Updated");
		var listFieldType = ListUtil.newListFromString("LongInteger,Date,Integer,PrecisionDecimal,Decimal,RichText,Boolean,LongText,Picklist");

		task ("Given an Custom Object and all fields are present after Upgrade") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object3");

			ObjectAdmin.goToFieldsTab();

			for (var fieldLabel : list ${listLabelOriginal}) {
				for (var fieldType : list ${listFieldType}) {
					ObjectAdmin.assertObjectField(
						fieldLabel = ${fieldLabel},
						fieldType = ${fieldType});
				}
			}
		}

		task ("When edits are made to the Custom Object's fields after Upgrade") {
			for (var label : list ${listLabelOriginal}) {
				var content = ListUtil.get(${listLabelUpdated}, ${index});

				ObjectAdmin.goToFieldsDetails(label = ${label});

				ObjectField.typeLabel(content = ${content});

				ObjectField.save();

				var index = ${index} + 1;

				var index = StringUtil.valueOf(${index});
			}
		}

		task ("Then all labels are updated in the existing object entry when navigating to Custom Objects3 portlet") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject3");

			for (var columns : list ${listLabelUpdated}) {
				AssertElementPresent(
					key_column = ${columns},
					locator1 = "ObjectPortlet#ENTRY_COLUMN");
			}
		}
	}

	@priority = 5
	test ViewObjectLayoutAfterUpgrade7413U33 {
		property data.archive.type = "data-archive-object";
		property database.types = "mariadb,mysql,postgresql,sqlserver";
		property portal.version = "7.4.13.u33";

		task ("View Object Layout after Upgrade") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object1");

			ObjectAdmin.goToLayoutsTab();

			ObjectAdmin.selectSpecificKebabMenuOption(
				kebabOption = "Edit",
				objectLabel = "Custom Layout");

			ObjectAdmin.goToLayoutTabOnLayouts();

			for (var tabName : list "Field Tab,Account Tab,Custom Object2 Tab") {
				AssertElementPresent(
					key_fieldTabName = ${tabName},
					locator1 = "ObjectAdmin#FIELD_TAB_NAME");
			}

			ObjectAdmin.assertBlockIsPresent(fieldBlockName = "Block 1");

			for (var fieldName : list "Custom Field Text,OTM - System Object,MTM - Custom Object") {
				AssertElementPresent(
					key_fieldName = ${fieldName},
					locator1 = "ObjectAdmin#LAYOUT_FIELD_NAME");
			}

			Navigator.openURL();

			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Custom Objects1",
				site = "Liferay DXP");

			ObjectPortlet.viewEntryDetails(entry = "Notification Test");

			for (var tabName : list "Field Tab,Account Tab,Custom Object2 Tab") {
				AssertElementPresent(
					key_tabName = ${tabName},
					locator1 = "ObjectAdmin#OBJECT_ANY_TAB");
			}
		}

		task ("Edit Object Layout After Upgrade") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object1");

			ObjectAdmin.goToLayoutsTab();

			ObjectAdmin.selectSpecificKebabMenuOption(
				kebabOption = "Edit",
				objectLabel = "Custom Layout");

			SelectFrame(locator1 = "IFrame#IFRAME");

			Type(
				locator1 = "ObjectAdmin#LAYOUT_BASIC_INFO_NAME_FIELD",
				value1 = "Custom Layout Edit After Upgrade");

			PortletEntry.save();

			AssertElementPresent(
				key_name = "Custom Layout Edit After Upgrade",
				locator1 = "CreateObject#SELECT_OBJECT_FIELD_IN_TABLE");
		}

		task ("Delete Object Layout After Upgrade") {
			ObjectAdmin.selectSpecificKebabMenuOption(
				kebabOption = "Delete",
				objectLabel = "Custom Layout Edit After Upgrade");

			AssertElementNotPresent(
				key_name = "Custom Layout Edit After Upgrade",
				locator1 = "CreateObject#SELECT_OBJECT_FIELD_IN_TABLE");

			Navigator.openURL();

			ProductMenu.gotoPortlet(
				category = "Content & Data",
				portlet = "Custom Objects1",
				site = "Liferay DXP");

			ObjectPortlet.viewEntryDetails(entry = "Notification Test");

			for (var tabName : list "Field Tab,Account Tab,Custom Object2 Tab") {
				AssertElementNotPresent(
					key_tabName = ${tabName},
					locator1 = "ObjectAdmin#OBJECT_ANY_TAB");
			}
		}
	}

	@priority = 5
	test ViewObjectRelationshipAfterUpgrade7413U33 {
		property data.archive.type = "data-archive-object";
		property database.types = "mariadb,mysql,postgresql,sqlserver";
		property portal.version = "7.4.13.u33";

		task ("View Object Relationships after Upgrade") {
			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object1");

			ObjectAdmin.gotoRelationshipsTab();

			AssertElementPresent(
				key_label = "MTM - Custom Object",
				key_relatedObject = "CustomObject2",
				locator1 = "ObjectRelationships#OPTIONS_TAB_RELATIONSHIPS_LABEL_AND_RELATED_OBJECT");

			AssertElementPresent(
				key_relationHierarchy = "Parent",
				key_relationType = "oneToMany",
				locator1 = "ObjectRelationships#OPTIONS_TAB_RELATIONSHIPS_TYPE_AND_HIERARCHY");

			AssertElementPresent(
				key_label = "OTM - System Object",
				key_relatedObject = "AccountEntry",
				locator1 = "ObjectRelationships#OPTIONS_TAB_RELATIONSHIPS_LABEL_AND_RELATED_OBJECT");

			AssertElementPresent(
				key_relationHierarchy = "Parent",
				key_relationType = "manyToMany",
				locator1 = "ObjectRelationships#OPTIONS_TAB_RELATIONSHIPS_TYPE_AND_HIERARCHY");
		}

		task ("Edit Object Relationships after Upgrade") {
			ObjectAdmin.goToRelationshipsDetails(fieldName = "MTM - Custom Object");

			CreateObject.editLabel(labelName = "MTM - Custom Object Edit After Upgrade");

			PortletEntry.save();

			ObjectAdmin.goToRelationshipsDetails(fieldName = "OTM - System Object");

			CreateObject.editLabel(labelName = "OTM - System Object Edit After Upgrade");

			PortletEntry.save();

			AssertElementPresent(
				key_name = "MTM - Custom Object Edit After Upgrade",
				locator1 = "CreateObject#SELECT_OBJECT_FIELD_IN_TABLE");

			AssertElementPresent(
				key_name = "OTM - System Object Edit After Upgrade",
				locator1 = "CreateObject#SELECT_OBJECT_FIELD_IN_TABLE");
		}

		task ("Delete Object Relationships after Upgrade") {
			ObjectAdmin.deleteRelationshipViaUI(
				relationshipLabel = "MTM - Custom Object Edit After Upgrade",
				relationshipName = "mTMCustomObject");

			ObjectAdmin.deleteRelationshipViaUI(
				relationshipLabel = "OTM - System Object",
				relationshipName = "oTMSystemObject");

			AssertElementNotPresent(
				key_label = "MTM - Custom Object Edit After Upgrade",
				locator1 = "ObjectAdmin#RELATIONSHIP_LABEL");

			AssertElementNotPresent(
				key_label = "OTM - System Object Edit After Upgrade",
				locator1 = "ObjectAdmin#RELATIONSHIP_LABEL");
		}
	}

	@priority = 5
	test ViewPicklistAfterUpgrade7413U33 {
		property data.archive.type = "data-archive-object";
		property database.types = "mariadb,mysql,postgresql,sqlserver";
		property portal.version = "7.4.13.u33";

		task ("View a Picklist after Upgrade") {
			Picklist.gotoPicklists();

			WaitForElementPresent(
				key_picklistName = "Custom Picklist",
				locator1 = "Picklist#VIEW_PICKLIST");

			Picklist.optionsPicklist(
				menuItem = "View",
				picklistName = "Custom Picklist");

			SelectFrame(locator1 = "Picklist#IFRAME_PICKLIST_MODAL");

			for (var itemNumber : list "1,2,3") {
				Picklist.assertPicklistItem(
					picklistItemKey = "picklistItem${itemNumber}",
					picklistItemName = "Picklist Item ${itemNumber}");
			}
		}

		task ("Edit a Picklist and items") {
			SelectFrameTop();

			Picklist.updatePicklistName(picklistName = "Custom Picklist Edit After Upgrade");

			Type(
				key_text = "External Reference Code",
				locator1 = "TextInput#ANY",
				value1 = "ERC Edit After Upgrade");

			PortletEntry.save();

			Picklist.optionsPicklist(
				menuItem = "View",
				picklistName = "Custom Picklist Edit After Upgrade");

			for (var itemNumber : list "1,2,3") {
				Picklist.updatePicklistItemName(
					itemkey = "picklistItem${itemNumber}",
					newItemName = "Picklist Item ${itemNumber} Edit After Upgrade");

				PortletEntry.save();
			}
		}

		task ("Add a new item to the existing Picklist and create a brand new Picklist") {
			Picklist.addPicklistItemViaUI(picklistItemName = "New Picklist Item");

			PortletEntry.save();

			Picklist.gotoPicklists();

			Picklist.addPicklistViaUI(picklistName = "Custom Picklist Add After Upgrade");

			Picklist.gotoPicklistView(picklistName = "Custom Picklist Add After Upgrade");

			for (var itemNumber : list "1,2") {
				Picklist.addPicklistItemViaUI(picklistItemName = "Picklist After Upgrade Item ${itemNumber}");

				PortletEntry.save();
			}
		}

		task ("Delete items from both Picklists") {
			Picklist.optionsPicklistItem(
				itemKey = "picklistAfterUpgradeItem2",
				menuItem = "Delete");

			PortletEntry.save();

			SelectFrameTop();

			Picklist.gotoPicklistView(picklistName = "Custom Picklist Edit After Upgrade");

			Picklist.optionsPicklistItem(
				itemKey = "picklistItem2",
				menuItem = "Delete");

			PortletEntry.save();
		}

		task ("Delete any Custom Objects that use a picklist and then delete all picklists") {
			ObjectAdmin.openObjectAdmin();

			ObjectAdmin.deleteCustomObjectViaUI(
				labelName = "Custom Object3",
				objectName = "CustomObject3");

			Picklist.gotoPicklists();

			for (var picklistName : list "Custom Picklist Add After Upgrade,Custom Picklist Edit After Upgrade") {
				Picklist.optionsPicklist(
					menuItem = "Delete",
					picklistName = ${picklistName});

				AssertElementNotPresent(
					key_picklistName = ${picklistName},
					locator1 = "Picklist#VIEW_PICKLIST");
			}
		}
	}

}