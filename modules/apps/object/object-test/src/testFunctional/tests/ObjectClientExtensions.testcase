@component-name = "portal-object"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Object";

	static var clientExtensionSamples = "";
	static var companyWebId = "";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		var companyWebId = JSONCompany.getWebId();
	}

	tearDown {
		if (isSet(clientExtensionSamples)) {
			for (var clientExtension : list ${clientExtensionSamples}) {
				AntCommands.runCommand("build-test-liferay-sample-workspace.xml", "undeploy-workspace-client-extension -Dvirtual.instance.id=${companyWebId} -Dworkspace.client.extension.name=${clientExtension}");
			}

			var clientExtensionSamples = "";
		}

		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "LPS-179367 - Verify CRUD functionality with a created custom object definition using a client extension as the storage type"
	@priority = 5
	test AssertCRUDWithClientExtensionAsStorageType {
		property custom.properties = "feature.flag.LPS-135430=true";

		task ("Given Liferay Sample Batch and Liferay Sample Etc Spring Boot are deployed into the current virtual instance") {
			for (var clientExtension : list "liferay-sample-batch,liferay-sample-etc-spring-boot") {
				AntCommands.runCommand("build-test-liferay-sample-workspace.xml", "deploy-workspace-client-extension -Dvirtual.instance.id=${companyWebId} -Dworkspace.client.extension.name=${clientExtension}");
			}
		}

		task ("and Given a custom object definition with the storage type set to client extension") {
			AntCommands.runCommand("build-test-liferay-sample-workspace.xml", "start-liferay-sample-etc-spring-boot -Dvirtual.instance.id=${companyWebId}");

			ObjectAdmin.openObjectAdmin();

			ObjectAdmin.addObjectWithStorageType(
				fieldLabelName = "Proxy Custom Object",
				pluralLabelName = "Proxy Custom Object",
				storageType = "Liferay Sample Etc Spring Boot Object Entry Manager 1");

			ObjectPortlet.selectCustomObject(label = "Proxy Custom Object");

			CreateObject.selectPanelCategoryKey(panelCategoryKey = "Control Panel > Object");

			CreateObject.saveObject();
		}

		task ("and Given a text field") {
			ObjectAdmin.goToFieldsTab();

			ObjectAdmin.addObjectFieldViaUI(
				fieldLabel = "Custom Field",
				fieldType = "Text");

			ObjectAdmin.publishObjectViaAPI(objectName = "ProxyCustomObject");
		}

		task ("When the user navigates to the object") {
			ObjectAdmin.goToCustomObject(objectName = "ProxyCustomObject");
		}

		task ("Then the user is able to create and read entries") {
			ObjectPortlet.addSingleFieldEntryViaUI(entry = "objectEntryManager Entry");

			ObjectAdmin.goToCustomObject(objectName = "ProxyCustomObject");

			AssertElementPresent(
				key_entry = "objectEntryManager Entry",
				locator1 = "ObjectPortlet#ENTRY_VALUE");
		}

		task ("and Then the user is able to update entries") {
			ObjectPortlet.viewEntryDetails(entry = "objectEntryManager Entry");

			Type(
				locator1 = "ObjectAdmin#ENTRY_STRING_VALUE_FIELD",
				value1 = "objectEntryManager Entry Updated");

			PortletEntry.save();

			AssertElementPresent(
				key_entry = "objectEntryManager Entry Updated",
				locator1 = "ObjectPortlet#ENTRY_VALUE");
		}

		task ("and Then the user is able to delete entries") {
			ObjectPortlet.deleteEntry(entry = "objectEntryManager Entry Updated");

			AssertElementNotPresent(
				key_entry = "objectEntryManager Entry Updated",
				locator1 = "ObjectPortlet#ENTRY_VALUE");
		}
	}

	@description = "LPS-179377 - Verify an action can be created using an action client extension"
	@priority = 5
	test CanTriggerAction {
		task ("Given Liferay Sample Batch and Liferay Sample Etc Spring Boot are deployed into the current virtual instance") {
			for (var clientExtension : list "liferay-sample-batch,liferay-sample-etc-spring-boot") {
				AntCommands.runCommand("build-test-liferay-sample-workspace.xml", "deploy-workspace-client-extension -Dvirtual.instance.id=${companyWebId} -Dworkspace.client.extension.name=${clientExtension}");
			}
		}

		task ("and Given an object entry") {
			AntCommands.runCommand("build-test-liferay-sample-workspace.xml", "start-liferay-sample-etc-spring-boot -Dvirtual.instance.id=${companyWebId}");

			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "field1",
				objectName = "Sample",
				value = "Entry A");
		}

		task ("When the user updates the object entry") {
			ObjectAdmin.goToCustomObject(objectName = "Sample");

			ObjectPortlet.viewEntryDetails(entry = "Entry A");

			Type(
				locator1 = "ObjectAdmin#ENTRY_STRING_VALUE_FIELD",
				value1 = "Entry Updated");

			PortletEntry.save();

			ObjectAdmin.goToCustomObject(objectName = "Sample");

			AssertElementPresent(
				key_entry = "Entry Updated",
				locator1 = "ObjectPortlet#ENTRY_VALUE");
		}

		task ("Then the action is triggered and the object entry DTO structure is returned in the console log") {
			var objectId = JSONObject.getObjectId(objectName = "Sample");

			AssertConsoleTextPresent(value1 = "objectDefinitionId: ${objectId}");

			AssertConsoleTextPresent(value1 = "objectActionTriggerKey: onAfterUpdate");

			AssertConsoleTextPresent(value1 = "values: {field1: Entry Updated}");
		}
	}

}