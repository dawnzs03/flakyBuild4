definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Object";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		ObjectAdmin.deleteAllCustomObjectsViaAPI();

		JSONUser.tearDownNonAdminUsers();

		var testPortalInstance = PropsUtil.get("test.portal.instance");

		if (${testPortalInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "LPS-176582 - Verify the object entries can be anonymized"
	@priority = 5
	test CanAnonymizeObjectEntries {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property portal.acceptance = "true";

		task ("Given a custom object and an object entry") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 186468",
				objectName = "CustomObject186468",
				pluralLabelName = "Custom Objects 186468");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject186468");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject186468");

			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject186468",
				value = "Entry A");
		}

		task ("And given a user with permission to add object entries") {
			JSONUser.addUserWithRole(
				roleTitle = "Administrator",
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");
		}

		task ("And given several object entries added by the user") {
			for (var entryName : list "B,C,D,E") {
				ObjectAdmin.addObjectSingleFieldEntryViaAPI(
					fieldName = "customObjectField",
					objectName = "CustomObject186468",
					userEmailAddress = "userea@liferay.com",
					value = "Entry ${entryName}");
			}
		}

		task ("When the admin user anonymizes the user's personal data in Users and Organizations") {
			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Users and Organizations");

			User.deletePersonalDataCP(
				userFirstName = "userfn",
				userLastName = "userln");

			GDPR.filterByApplications(
				applicationItemsCount = 4,
				applications = "Objects",
				totalItemsCount = 4);

			PortletEntry.selectAll();

			Click(locator1 = "Icon#TOOLBAR_ELLIPSIS");

			MenuItem.clickNoError(menuItem = "Anonymize");

			Confirm.acceptAlert();

			Confirm.dismissAlert();
		}

		task ("Then the author of the entries created by the user is Anonymous Anonymous") {
			User.openUsersAdmin();

			User.activateCP(
				userName = "userfn userln",
				userScreenName = "usersn");

			ObjectAdmin.goToCustomObject(objectName = "CustomObject186468");

			for (var key_order : list "2,3,4,5") {
				AssertElementPresent(
					key_entry = "Anonymous Anonymous",
					key_order = ${key_order},
					locator1 = "ObjectPortlet#ENTRY_VALUE_BY_POSITION");
			}
		}
	}

	@description = "LPS-176582 - Verify that the entries of a object can be deleted"
	@priority = 5
	test CanDeleteObjectEntries {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property portal.acceptance = "true";

		task ("Given a custom object in a M:M relationship with itself") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 186467",
				objectName = "CustomObject186467",
				pluralLabelName = "Custom Objects 186467");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject186467");

			ObjectAdmin.addObjectRelationshipViaAPI(
				objectName_1 = "CustomObject186467",
				objectName_2 = "CustomObject186467",
				relationshipLabel = "Relationship",
				relationshipName = "relationship",
				relationshipType = "manyToMany");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject186467");
		}

		task ("And given a custom layout that contains the relationship") {
			ObjectAdmin.addObjectLayoutViaAPI(
				layoutName = "Layout Name",
				objectName = "CustomObject186467");

			ObjectAdmin.openObjectAdmin();

			ObjectPortlet.selectCustomObject(label = "Custom Object 186467");

			CreateObject.selectTitleField(fieldLabel = "Custom Field");

			CreateObject.saveObject();

			ObjectAdmin.goToLayoutsTab();

			ObjectAdmin.selectKebabMenuOption(kebabOption = "Edit");

			ObjectAdmin.markLayoutAsDefault();

			ObjectAdmin.goToLayoutTabOnLayouts();

			ObjectAdmin.addTabFieldsOnLayout(
				blockName = "Block 1",
				columnsNumber = 1,
				fieldList = "Custom Field",
				tabName = "Field Tab");

			ObjectAdmin.addTabRelationshipsOnLayout(
				relationshipsLabelName = "Relationship",
				tabName = "Relationship Tab");

			PortletEntry.save();
		}

		task ("And given an object entry, Entry A") {
			ObjectAdmin.addObjectSingleFieldEntryViaAPI(
				fieldName = "customObjectField",
				objectName = "CustomObject186467",
				value = "Entry A");
		}

		task ("And given a user with permission to add and view object entries") {
			JSONUser.addUserWithRole(
				roleTitle = "Administrator",
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");
		}

		task ("And given four object entries added by the user, Entry B, Entry C, Entry D and Entry E") {
			for (var entryName : list "B,C,D,E") {
				ObjectAdmin.addObjectSingleFieldEntryViaAPI(
					fieldName = "customObjectField",
					objectName = "CustomObject186467",
					userEmailAddress = "userea@liferay.com",
					value = "Entry ${entryName}");
			}
		}

		task ("And given Entry A and Entry B are related") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject186467");

			ObjectPortlet.viewEntryDetails(entry = "Entry A");

			ObjectAdmin.gotoRelationshipsTab();

			CreateObject.addRelationshipAndSelectEntry(titleFieldName = "Entry B");
		}

		task ("And given Entry C and Entry D are related") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject186467");

			ObjectPortlet.viewEntryDetails(entry = "Entry C");

			ObjectAdmin.gotoRelationshipsTab();

			CreateObject.addRelationshipAndSelectEntry(titleFieldName = "Entry D");

			Refresh();
		}

		task ("When the admin user deletes the user's personal data and reactivates the user in Users and Organizations") {
			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Users and Organizations");

			User.deletePersonalDataCP(
				userFirstName = "userfn",
				userLastName = "userln");

			GDPR.filterByApplications(
				applicationItemsCount = 4,
				applications = "Objects",
				totalItemsCount = 4);

			PortletEntry.selectAll();

			Click(locator1 = "Icon#TOOLBAR_ELLIPSIS");

			MenuItem.clickNoError(menuItem = "Delete");

			AssertConfirm.assertConfirmationNoError(value1 = "Are you sure you want to delete the selected items?");

			Confirm.dismissAlert();

			User.openUsersAdmin();

			User.activateCP(
				userName = "userfn userln",
				userScreenName = "usersn");
		}

		task ("Then the entries created by the user are no longer present") {
			ObjectAdmin.goToCustomObject(objectName = "CustomObject186467");

			for (var entryName : list "B,C,D,E") {
				ObjectPortlet.assertEntryNotPresent(entry = "Entry ${entryName}");
			}
		}
	}

	@description = "LPS-176582 - Verify a user's personal data can be exported"
	@priority = 5
	test CanExportObjectEntries {
		property custom.properties = "jsonws.web.service.paths.excludes=";
		property portal.acceptance = "true";

		task ("Given a custom object") {
			ObjectAdmin.addObjectViaAPI(
				labelName = "Custom Object 186452",
				objectName = "CustomObject186452",
				pluralLabelName = "Custom Objects 186452");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Custom Field",
				fieldName = "customObjectField",
				fieldType = "String",
				isRequired = "false",
				objectName = "CustomObject186452");

			ObjectAdmin.publishObjectViaAPI(objectName = "CustomObject186452");
		}

		task ("And given a user with permission to add object entries") {
			JSONUser.addUserWithRole(
				roleTitle = "Administrator",
				userEmailAddress = "userea@liferay.com",
				userFirstName = "userfn",
				userLastName = "userln",
				userScreenName = "usersn");
		}

		task ("And given several object entries added by the user") {
			for (var entryNumber : list "1,2,3") {
				ObjectAdmin.addObjectSingleFieldEntryViaAPI(
					fieldName = "customObjectField",
					objectName = "CustomObject186452",
					userEmailAddress = "userea@liferay.com",
					value = "Entry ${entryNumber}");
			}
		}

		task ("When the admin user exports the personal data of the user in Users and Organizations") {
			ApplicationsMenu.gotoPortlet(
				category = "Users",
				panel = "Control Panel",
				portlet = "Users and Organizations");

			User.exportPersonalDataCP(
				userFirstName = "userfn",
				userLastName = "userln");

			GDPR.addExportProcessCP(
				applications = "Objects",
				userFirstName = "userfn",
				userLastName = "userln");

			GDPR.downloadExportedPersonalData(applications = "Objects");

			MenuItem.click(menuItem = "Download (2 KB)");

			DownloadTempFile();
		}

		task ("Then a file is downloaded containing the user's data") {
			ImportExport.assertDownloadedFileName(downloadedFile = "UAD_userfn+userln_com.liferay.object.service*");
		}
	}

}