@component-name = "portal-object"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Object";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		ObjectAdmin.deleteAllCustomObjectsViaAPI();

		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "LPS-162131 Verify CRUD functionality with a created custom object using Salesforce as the storage type"
	@priority = 5
	test AssertCRUDWithCreatedCustomObject {
		property portal.acceptance = "true";

		task ("Given portal configured with Salesforce") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Feature Flags",
				configurationName = "Beta",
				configurationScope = "Virtual Instance Scope");

			Check.checkToggleSwitch(
				key_featureFlag = "LPS-135430",
				locator1 = "ToggleSwitch#ENABLE_BETA_TOGGLE_SWITCH");

			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Third Party",
				configurationName = "Salesforce Integration",
				configurationScope = "Site Scope");

			ObjectSalesforce.configureSalesforce();
		}

		task ("And given a created custom object with the storage type set to Salesforce") {
			ObjectAdmin.openObjectAdmin();

			ObjectAdmin.addObjectWithStorageType(
				fieldLabelName = "Poshi Test",
				pluralLabelName = "Poshi Tests",
				storageType = "Salesforce");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Title",
				fieldName = "title",
				fieldType = "String",
				isRequired = "false",
				objectName = "PoshiTest");

			ObjectAdmin.publishObjectViaAPI(objectName = "PoshiTest");
		}

		task ("And given the object's external reference code matches a Salesforce custom object") {
			ObjectPortlet.selectCustomObject(label = "Poshi Test");

			CreateObject.selectPanelCategoryKey(panelCategoryKey = "Control Panel > Object");

			CreateObject.saveObject();

			ObjectAdmin.editExternalReferenceCode(externalReferenceCode = "Poshi_Test__c");
		}

		task ("And given a text field whose external reference code matches a custom field from the Salesforce custom object") {
			ObjectAdmin.goToFieldsTab();

			ObjectAdmin.goToFieldsDetails(label = "Title");

			PortletEntry.inputText(
				fieldLabel = "External Reference Code",
				text = "Title__c");

			CreateObject.saveObject();
		}

		task ("When user navigates to the object") {
			ObjectAdmin.goToCustomObject(objectName = "PoshiTest");
		}

		task ("Then the user is able to read entries") {
			AssertElementPresent(
				key_entry = "CanCreateObjectEntry",
				locator1 = "ObjectPortlet#ENTRY_VALUE");

			AssertElementPresent(
				key_entry = "CanViewEntryFromSalesforceEdited",
				locator1 = "ObjectPortlet#ENTRY_VALUE");

			AssertElementPresent(
				key_entry = "CanDeleteObjectEntry",
				locator1 = "ObjectPortlet#ENTRY_VALUE");
		}

		task ("And then the user is able to create entries") {
			ObjectPortlet.addSingleFieldEntryViaUI(entry = "New Entry 162131");

			Navigator.gotoBack();

			AssertElementPresent(
				key_entry = "New Entry 162131",
				locator1 = "ObjectPortlet#ENTRY_VALUE");
		}

		task ("And then the user is able to update entries") {
			ObjectPortlet.viewEntryDetails(entry = "New Entry 162131");

			Type(
				locator1 = "ObjectAdmin#ENTRY_STRING_VALUE_FIELD",
				value1 = "Entry 162131 Updated");

			PortletEntry.save();

			Navigator.gotoBack();

			AssertElementPresent(
				key_entry = "Entry 162131 Updated",
				locator1 = "ObjectPortlet#ENTRY_VALUE");
		}

		task ("And then the user is able to delete entries") {
			ObjectPortlet.deleteEntry(entry = "Entry 162131 Updated");

			AssertElementNotPresent(
				key_entry = "Entry 162131 Updated",
				locator1 = "ObjectPortlet#ENTRY_VALUE");
		}
	}

	@description = "LPS-185429 Verify CRUD functionality with a created standard object using Salesforce as the storage type"
	@priority = 5
	test AssertCRUDWithCreatedStandardObject {
		property portal.acceptance = "true";

		task ("Given portal configured with Salesforce") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Feature Flags",
				configurationName = "Beta",
				configurationScope = "Virtual Instance Scope");

			Check.checkToggleSwitch(
				key_featureFlag = "LPS-135430",
				locator1 = "ToggleSwitch#ENABLE_BETA_TOGGLE_SWITCH");

			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Third Party",
				configurationName = "Salesforce Integration",
				configurationScope = "Site Scope");

			ObjectSalesforce.configureSalesforce();
		}

		task ("And given a created custom object with the storage type set to Salesforce") {
			ObjectAdmin.openObjectAdmin();

			ObjectAdmin.addObjectWithStorageType(
				fieldLabelName = "Contact",
				pluralLabelName = "Contacts",
				storageType = "Salesforce");

			ObjectPortlet.selectCustomObject(label = "Contact");

			CreateObject.selectPanelCategoryKey(panelCategoryKey = "Control Panel > Object");

			CreateObject.saveObject();

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Email",
				fieldName = "email",
				fieldType = "String",
				isRequired = "false",
				objectName = "Contact");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "First Name",
				fieldName = "firstName",
				fieldType = "String",
				isRequired = "false",
				objectName = "Contact");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Last Name",
				fieldName = "lastName",
				fieldType = "String",
				isRequired = "true",
				objectName = "Contact");

			ObjectAdmin.addObjectFieldViaAPI(
				fieldBusinessType = "Text",
				fieldLabelName = "Phone",
				fieldName = "phone",
				fieldType = "String",
				isRequired = "false",
				objectName = "Contact");

			ObjectAdmin.publishObjectViaAPI(objectName = "Contact");
		}

		task ("And given the object's external reference code matches a Salesforce standard object") {
			ObjectAdmin.editExternalReferenceCode(externalReferenceCode = "Contact");
		}

		task ("And given several text fields whose external reference codes match fields from the Salesforce standard object") {
			ObjectAdmin.goToFieldsTab();

			ObjectAdmin.goToFieldsDetails(label = "Email");

			PortletEntry.inputText(
				fieldLabel = "External Reference Code",
				text = "Email");

			CreateObject.saveObject();

			ObjectAdmin.goToFieldsDetails(label = "First Name");

			PortletEntry.inputText(
				fieldLabel = "External Reference Code",
				text = "FirstName");

			CreateObject.saveObject();

			ObjectAdmin.goToFieldsDetails(label = "Last Name");

			PortletEntry.inputText(
				fieldLabel = "External Reference Code",
				text = "LastName");

			CreateObject.saveObject();

			ObjectAdmin.goToFieldsDetails(label = "Phone");

			PortletEntry.inputText(
				fieldLabel = "External Reference Code",
				text = "Phone");

			CreateObject.saveObject();
		}

		task ("When the user navigates to the object") {
			ObjectAdmin.goToCustomObject(objectName = "Contact");
		}

		task ("Then the user is able to read entries") {
			AssertElementPresent(
				key_entry = "test.user@liferay.com",
				locator1 = "ObjectPortlet#ENTRY_VALUE");

			AssertElementPresent(
				key_entry = "hello.world.edit@gmail.com",
				locator1 = "ObjectPortlet#ENTRY_VALUE");

			AssertElementPresent(
				key_entry = "upgraded.contact@liferay.com",
				locator1 = "ObjectPortlet#ENTRY_VALUE");

			AssertElementPresent(
				key_entry = "a@liferay.com",
				locator1 = "ObjectPortlet#ENTRY_VALUE");
		}

		task ("And then the user is able to create entries") {
			LexiconEntry.gotoAdd();

			PortletEntry.inputText(
				fieldLabel = "Last Name",
				text = "New Entry 185429");

			CreateObject.saveObject();

			Navigator.gotoBack();

			AssertElementPresent(
				key_entry = "New Entry 185429",
				locator1 = "ObjectPortlet#ENTRY_VALUE");
		}

		task ("And then the user is able to update entries") {
			ObjectPortlet.viewEntryDetails(entry = "New Entry 185429");

			PortletEntry.inputText(
				fieldLabel = "Last Name",
				text = "Entry 185429 Updated");

			CreateObject.saveObject();

			Navigator.gotoBack();

			AssertElementPresent(
				key_entry = "Entry 185429 Updated",
				locator1 = "ObjectPortlet#ENTRY_VALUE");
		}

		task ("And then the user is able to delete entries") {
			ObjectPortlet.deleteEntry(entry = "Entry 185429 Updated");

			AssertElementNotPresent(
				key_entry = "Entry 185429 Updated",
				locator1 = "ObjectPortlet#ENTRY_VALUE");
		}
	}

	@description = "LPS-185427 Verify CRUD functionality with an imported custom object using Salesforce as the storage type"
	@priority = 5
	test AssertCRUDWithImportedCustomObject {
		property portal.acceptance = "true";

		task ("Given portal configured with Salesforce") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Feature Flags",
				configurationName = "Beta",
				configurationScope = "Virtual Instance Scope");

			Check.checkToggleSwitch(
				key_featureFlag = "LPS-135430",
				locator1 = "ToggleSwitch#ENABLE_BETA_TOGGLE_SWITCH");

			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Third Party",
				configurationName = "Salesforce Integration",
				configurationScope = "Site Scope");

			ObjectSalesforce.configureSalesforce();
		}

		task ("And given an imported custom object whose external reference code matches a Salesforce custom object") {
			ObjectExportImport.importObject(
				objectFileName = "ImportedCustomObjectWithSalesforceStorageType",
				objectName = "PoshiTest");

			ObjectAdmin.publishObjectViaAPI(objectName = "PoshiTest");
		}

		task ("When the user navigates to the object") {
			ObjectAdmin.goToCustomObject(objectName = "PoshiTest");
		}

		task ("Then the user is able to read entries") {
			AssertElementPresent(
				key_entry = "CanCreateObjectEntry",
				locator1 = "ObjectPortlet#ENTRY_VALUE");

			AssertElementPresent(
				key_entry = "CanViewEntryFromSalesforceEdited",
				locator1 = "ObjectPortlet#ENTRY_VALUE");

			AssertElementPresent(
				key_entry = "CanDeleteObjectEntry",
				locator1 = "ObjectPortlet#ENTRY_VALUE");
		}

		task ("And then the user is able to create entries") {
			ObjectPortlet.addSingleFieldEntryViaUI(entry = "New Entry 185427");

			ObjectAdmin.goToCustomObject(objectName = "PoshiTest");

			AssertElementPresent(
				key_entry = "New Entry",
				locator1 = "ObjectPortlet#ENTRY_VALUE");
		}

		task ("And then the user is able to update entries") {
			ObjectPortlet.viewEntryDetails(entry = "New Entry 185427");

			Type(
				locator1 = "ObjectAdmin#ENTRY_STRING_VALUE_FIELD",
				value1 = "Entry 185427 Updated");

			PortletEntry.save();

			ObjectAdmin.goToCustomObject(objectName = "PoshiTest");

			AssertElementPresent(
				key_entry = "Entry 185427 Updated",
				locator1 = "ObjectPortlet#ENTRY_VALUE");
		}

		task ("And then the user is able to delete entries") {
			ObjectPortlet.deleteEntry(entry = "Entry 185427 Updated");

			AssertElementNotPresent(
				key_entry = "Entry 185427 Updated",
				locator1 = "ObjectPortlet#ENTRY_VALUE");
		}
	}

	@description = "LPS-185428 Verify CRUD functionality with an imported standard object using Salesforce as the storage type"
	@priority = 5
	test AssertCRUDWithImportedStandardObject {
		property portal.acceptance = "true";

		task ("Given the DXP configured with Salesforce") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Feature Flags",
				configurationName = "Beta",
				configurationScope = "Virtual Instance Scope");

			Check.checkToggleSwitch(
				key_featureFlag = "LPS-135430",
				locator1 = "ToggleSwitch#ENABLE_BETA_TOGGLE_SWITCH");

			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Third Party",
				configurationName = "Salesforce Integration",
				configurationScope = "Site Scope");

			ObjectSalesforce.configureSalesforce();
		}

		task ("And given an imported standard object with storage type as Salesforce") {
			ObjectExportImport.importObject(
				objectFileName = "ImportedStandardObjectWithSalesforceStorageType",
				objectName = "Contact");

			ObjectAdmin.publishObjectViaAPI(objectName = "Contact");
		}

		task ("When navigates to the object") {
			ObjectAdmin.goToCustomObject(objectName = "Contact");
		}

		task ("Then is possible to read entries") {
			AssertElementPresent(
				key_entry = "a@liferay.com",
				locator1 = "ObjectPortlet#ENTRY_VALUE");

			AssertElementPresent(
				key_entry = "123-456-7890",
				locator1 = "ObjectPortlet#ENTRY_VALUE");

			AssertElementPresent(
				key_entry = "World",
				locator1 = "ObjectPortlet#ENTRY_VALUE");

			AssertElementPresent(
				key_entry = "Guest",
				locator1 = "ObjectPortlet#ENTRY_VALUE");
		}

		task ("And then the user is able to create entries") {
			LexiconEntry.gotoAdd();

			PortletEntry.inputText(
				fieldLabel = "Last Name",
				text = "New Entry 185428");

			CreateObject.saveObject();

			Navigator.gotoBack();

			AssertElementPresent(
				key_entry = "New Entry 185428",
				locator1 = "ObjectPortlet#ENTRY_VALUE");
		}

		task ("And then the user is able to update entries") {
			ObjectPortlet.viewEntryDetails(entry = "New Entry 185428");

			PortletEntry.inputText(
				fieldLabel = "Last Name",
				text = "Entry 185428 Updated");

			CreateObject.saveObject();

			Navigator.gotoBack();

			AssertElementPresent(
				key_entry = "Entry 185428 Updated",
				locator1 = "ObjectPortlet#ENTRY_VALUE");
		}

		task ("And then the user is able to delete entries") {
			ObjectPortlet.deleteEntry(entry = "Entry 185428 Updated");

			AssertElementNotPresent(
				key_entry = "Entry 185428 Updated",
				locator1 = "ObjectPortlet#ENTRY_VALUE");
		}
	}

}