@component-name = "portal-commerce"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false${line.separator}feature.flag.COMMERCE-9410=true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Shopping Experience";

	setUp {
		CommerceConfiguration.commerceSetUp(
			minium = "true",
			moneyOrder = "true");

		task ("Setup: Create an account with a buyer user") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "COMMERCE-12066 | As a content editor specialist, I want to be able to map Order Items basic information when building a DPT of Commerce Order type"
	@priority = 5
	test CanMapOrderItemBasicInformation {
		property portal.acceptance = "true";

		task ("Given an order with 2 skus is created") {
			CommerceJSONAccountsAPI._addCommerceAccountAddress(
				accountEntryName = "Commerce Account",
				city = "Test City",
				countryISOCode = "US",
				name = "Test Address",
				street1 = "Test Street",
				zip = "Test Zip Code");

			CommerceJSONDeliveryCart._addCommerceCart(
				accountEntryName = "Commerce Account",
				billingAddressName = "Test Address",
				cartItems = "MIN93016A:2,MIN55861:5",
				shippingAddressName = "Test Address",
				shippingOption = "Standard Delivery");

			var orderId = CommerceJSONOrdersAPI._getCommerceOrder();

			CommerceJSONDeliveryCart._postCommerceCartCheckout(cartId = ${orderId});
		}

		task ("And a new Display Page Template for Commerce Order is created") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Commerce Order",
				displayPageTemplateEntryName = "Test Commerce Order Display Page Template",
				groupName = "Minium");
		}

		task ("And a Collection Display fragment is deployed on the page") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "minium");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Test Commerce Order Display Page Template");

			CommerceDisplayPageTemplates.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display",
				index = 1);

			CommerceDisplayPageTemplates.editCollectionDisplay(
				fragmentName = "Collection Display",
				index = 1,
				infoItemRelatedListProviderName = "Order Items");
		}

		task ("And a Heading fragment is deployed to map Basic Information fields") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "",
				fragmentName = "Heading");
		}

		task ("And an order is set for the preview") {
			DisplayPageTemplate.selectPreviewItem(
				assetTitle = ${orderId},
				assetType = "Document");
		}

		task ("And all order item fields to check are set") {
			var fieldsValuesList = ListUtil.newListFromString("Brake Fluid:U-Joint,2:5,MIN93016A:MIN55861,12:");
			var productThumbnailURLs = "";
			var productURLs = "";

			for (var productName : list "Brake Fluid,U-Joint") {
				var productThumbnailURLs = CommerceJSONDeliveryOrderAPI.getPlacedOrderItemsFieldByOrderId(
					jsonPath = "$..['thumbnail']",
					placedOrderId = ${orderId});
				var productURL = CommerceJSONProductsAPI.getProductField(
					jsonPath = "$.['urls'].['en_US']",
					productName = ${productName});

				var productURLs = "${productURLs}:${productURL}";
			}

			ListUtil.add(${fieldsValuesList}, ${productThumbnailURLs});

			ListUtil.add(${fieldsValuesList}, ${productURLs});
		}

		task ("When an order item field is mapped to the Heading fragment") {
			var index = 0;

			for (var fieldName : list "Name,Quantity,SKU,Options,Thumbnail URL,URL") {
				CommerceDisplayPageTemplates.mapEditableTextToField(
					field = ${fieldName},
					fragmentName = "Heading",
					index = 1);

				task ("Then the field value is shown for each order item") {
					var fieldValuesList = ListUtil.get(${fieldsValuesList}, ${index});

					var fieldValue1 = StringUtil.extractFirst(${fieldValuesList}, ":");
					var fieldValue2 = StringUtil.extractLast(${fieldValuesList}, ":");

					CommerceDisplayPageTemplates.viewMappedFragmentsText(fragmentsTextList = "${fieldValue1},${fieldValue2}");

					var index = ${index} + 1;
				}
			}
		}
	}

	@description = "COMMERCE-12066 | As a content editor specialist, I want to be able to map Order Items detailed information when building a DPT of Commerce Order type"
	@priority = 5
	test CanMapOrderItemDetailedInformation {
		property portal.acceptance = "true";

		task ("Given an order is created") {
			CommerceJSONAccountsAPI._addCommerceAccountAddress(
				accountEntryName = "Commerce Account",
				city = "Test City",
				countryISOCode = "US",
				name = "Test Address",
				street1 = "Test Street",
				zip = "Test Zip Code");

			CommerceJSONDeliveryCart._addCommerceCart(
				accountEntryName = "Commerce Account",
				billingAddressName = "Test Address",
				cartItems = "MIN93015:1",
				shippingAddressName = "Test Address",
				shippingOption = "Standard Delivery");

			var orderId = CommerceJSONOrdersAPI._getCommerceOrder();

			CommerceJSONDeliveryCart._postCommerceCartCheckout(cartId = ${orderId});
		}

		task ("And a new Display Page Template for Commerce Order is created") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Commerce Order",
				displayPageTemplateEntryName = "Test Commerce Order Display Page Template",
				groupName = "Minium");
		}

		task ("And a Collection Display fragment is deployed on the page") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "minium");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Test Commerce Order Display Page Template");

			CommerceDisplayPageTemplates.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display",
				index = 1);

			CommerceDisplayPageTemplates.editCollectionDisplay(
				fragmentName = "Collection Display",
				index = 1,
				infoItemRelatedListProviderName = "Order Items");
		}

		task ("And a Heading fragment is deployed to map Basic Information fields") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "",
				fragmentName = "Heading");
		}

		task ("And an order is set for the preview") {
			DisplayPageTemplate.selectPreviewItem(
				assetTitle = ${orderId},
				assetType = "Document");
		}

		task ("And all order item fields to check are set") {
			var fieldsValuesList = ListUtil.newListFromString("${orderId},en_US,Test Test");
			var id = CommerceJSONDeliveryOrderAPI.getPlacedOrderItemsFieldByOrderId(
				jsonPath = "$..['id']",
				placedOrderId = ${orderId});

			ListUtil.add(${fieldsValuesList}, ${id});

			var orderResponse = CommerceJSONOrdersAPI._getOrderById(orderId = ${orderId});

			for (var field : list "createDate,modifiedDate") {
				var timeString = JSONUtil.getWithJSONPath(${orderResponse}, "$..['${field}']");

				var timeString = DateUtil.format(${timeString}, "yyyy-MM-dd'T'HH:mm:ss'Z'", "M/d/yy h:m a");

				ListUtil.add(${fieldsValuesList}, ${timeString});
			}
		}

		task ("When an order item field is mapped to the Heading fragment") {
			var index = 0;

			for (var fieldName : list "Order ID,Default LanguageId,Author Name,Order Item ID,Create Date,Modified Date") {
				CommerceDisplayPageTemplates.mapEditableTextToField(
					field = ${fieldName},
					fragmentName = "Heading",
					index = 1);

				task ("Then the field value is shown for each order item") {
					var fieldValuesList = ListUtil.get(${fieldsValuesList}, ${index});

					CommerceDisplayPageTemplates.viewMappedFragmentsText(fragmentsTextList = ${fieldValuesList});

					var index = ${index} + 1;
				}
			}
		}
	}

	@description = "COMMERCE-12066 | As a content editor specialist, I want to be able to map Order Items pricing information when building a DPT of Commerce Order type"
	@priority = 5
	test CanMapOrderItemPricingInformation {
		property portal.acceptance = "true";

		var fieldsValuesList = ListUtil.newListFromString("$ 21.00,$ 18.90,$ 3.78,$ 34.02");

		task ("Given a 10% discount is applied to a sku") {
			CommerceJSONDiscountsAPI._addDiscount(
				active = "true",
				level = "L1",
				percentageLevel1 = 10,
				productSKUs = "MIN93018",
				target = "skus",
				title = "Test Discount",
				usePercentage = "true");
		}

		task ("And an order is created") {
			CommerceJSONAccountsAPI._addCommerceAccountAddress(
				accountEntryName = "Commerce Account",
				city = "Test City",
				countryISOCode = "US",
				name = "Test Address",
				street1 = "Test Street",
				zip = "Test Zip Code");

			CommerceJSONDeliveryCart._addCommerceCart(
				accountEntryName = "Commerce Account",
				billingAddressName = "Test Address",
				cartItems = "MIN93018:2",
				shippingAddressName = "Test Address",
				shippingOption = "Standard Delivery");

			var orderId = CommerceJSONOrdersAPI._getCommerceOrder();

			CommerceJSONDeliveryCart._postCommerceCartCheckout(cartId = ${orderId});
		}

		task ("And a new Display Page Template for Commerce Order is created") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Commerce Order",
				displayPageTemplateEntryName = "Test Commerce Order Display Page Template",
				groupName = "Minium");
		}

		task ("And a Collection Display fragment is deployed on the page") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "minium");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Test Commerce Order Display Page Template");

			CommerceDisplayPageTemplates.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display",
				index = 1);

			CommerceDisplayPageTemplates.editCollectionDisplay(
				fragmentName = "Collection Display",
				index = 1,
				infoItemRelatedListProviderName = "Order Items");
		}

		task ("And a Heading fragment is deployed to map Basic Information fields") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "",
				fragmentName = "Heading");
		}

		task ("And an order is set for the preview") {
			DisplayPageTemplate.selectPreviewItem(
				assetTitle = ${orderId},
				assetType = "Document");
		}

		task ("When an order item field is mapped to the Heading fragment") {
			var index = 0;

			for (var fieldName : list "Unit Price,Promo Price,Discount,Total price") {
				CommerceDisplayPageTemplates.mapEditableTextToField(
					field = ${fieldName},
					fragmentName = "Heading",
					index = 1);

				task ("Then the field value is shown for each order item") {
					var fieldValuesList = ListUtil.get(${fieldsValuesList}, ${index});

					CommerceDisplayPageTemplates.viewMappedFragmentsText(fragmentsTextList = ${fieldValuesList});

					var index = ${index} + 1;
				}
			}
		}
	}

	@description = "This is a test to check the COMMERCE-12060. As an admin I want the Order Item fragment to display correctly the options for the product bundles"
	@priority = 5
	test CanOrderItemCorrectlyShowOptionsProductBundles {
		property portal.acceptance = "true";

		task ("Given a product bundle is created") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "Hoses");

			CommerceEntry.gotoMenuTab(menuTab = "Options");

			CommerceProductOptions.editProductOption(
				key_option = "Package Quantity",
				key_priceType = "Static",
				productOptionPriceType = "true");

			CommerceOptions.setDeltaPrice(
				deltaPrice = 50,
				key_index = 6,
				key_optionIndex = 6,
				productSKU = "MIN93015");
		}

		task ("And an order is created using the product bundle") {
			CommerceJSONAccountsAPI._addCommerceAccountAddress(
				accountEntryName = "Commerce Account",
				city = "Test City",
				countryISOCode = "US",
				name = "Test Address",
				street1 = "Test Street",
				zip = "Test Zip Code");

			CommerceJSONDeliveryCart._addCommerceCart(
				accountEntryName = "Commerce Account",
				billingAddressName = "Test Address",
				cartItems = "MIN93022A:1",
				shippingAddressName = "Test Address",
				shippingOption = "Standard Delivery");

			var orderId = CommerceJSONOrdersAPI._getCommerceOrder();
		}

		task ("And a new Display Page Template for Commerce Order is created") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Commerce Order",
				displayPageTemplateEntryName = "Test Commerce Order Display Page Template",
				groupName = "Minium");
		}

		task ("And a Collection Display fragment is deployed on the page") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "minium");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Test Commerce Order Display Page Template");

			CommerceDisplayPageTemplates.addFragment(
				collectionName = "Content Display",
				fragmentName = "Collection Display",
				index = 1);

			CommerceDisplayPageTemplates.editCollectionDisplay(
				fragmentName = "Collection Display",
				index = 1,
				infoItemRelatedListProviderName = "Order Items");
		}

		task ("And a Heading fragment is deployed to map Basic Information fields") {
			PageEditor.addFragmentToCollectionDisplay(
				collectionName = "Basic Components",
				entryTitle = "",
				fragmentName = "Heading");
		}

		task ("And an order is set for the preview") {
			DisplayPageTemplate.selectPreviewItem(
				assetTitle = ${orderId},
				assetType = "Document");
		}

		task ("When the order item field is mapped to the Heading fragment to show the options") {
			CommerceDisplayPageTemplates.mapEditableTextToField(
				field = "Options",
				fragmentName = "Heading",
				index = 1);
		}

		task ("Then only one of the products shows a link to the option") {
			CommerceDisplayPageTemplates.viewMappedFragmentsText(fragmentsTextList = "6,");
		}
	}

	@description = "Verify that order fields values are mapped to fragments."
	@priority = 5
	test CanUseCommerceOrderFieldsWithFragments {
		property portal.acceptance = "true";

		task ("Given buyer user logs in and completes an order with checkout") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 1);

			CommerceCheckout.gotoCheckoutViaMiniCart();

			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = 1,
				productUnitPrice = 24,
				shippingMethod = "Standard");

			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");
		}

		task ("And a new Commerce Order type display page template with fragments is created and mapped with the order related fields") {
			CommerceDisplayPageTemplates.addMappedDisplayPageTemplateEntry(
				contentType = "Commerce Order",
				displayPageName = "Test Commerce Order Display Page Template",
				fieldsList = "Account Name,Order Status,User Name,Formatted Total Amount,Approved",
				fragmentName = "Heading",
				groupName = "Minium",
				siteURLKey = "minium");
		}

		task ("And 'Select Other Item...' is clicked from the dropdown of 'Preview With' and the placed order is chosen from the Orders tab") {
			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Test Commerce Order Display Page Template");

			Click(locator1 = "ControlMenu#DISPLAY_PAGE_PREVIEW_ITEM_SELECTOR");

			DropdownMenuItem.click(menuItem = "Select Other Item");

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

			var orderId = CommerceJSONOrdersAPI._getCommerceOrder();

			Click(
				key_entryName = ${orderId},
				locator1 = "ObjectAdmin#VIEW_ENTRY_NAME_ON_PAGE");
		}

		task ("Then it is verified that the mapped fragments for that order are listed") {
			SelectFrameTop();

			for (var entry : list "Commerce Account,1,Buyer User,$ 39.00,true") {
				AssertElementPresent(
					key_text = ${entry},
					locator1 = "Fragment#EDITABLE_FIELD_CONTENT");
			}
		}
	}

	@description = "COMMERCE-12266 | Verify that is possible to change and save the display template in Placed Order widget"
	@priority = 5
	test CanUseDifferentDisplayTemplateForPlacedOrderWidget {
		property portal.acceptance = "true";

		task ("Given a Placed Order Template") {
			ApplicationsMenu.gotoSite(site = "Minium");

			ProductMenu.gotoPortlet(
				category = "Design",
				portlet = "Templates");

			Navigator.gotoNavTab(navTab = "Widget Templates");

			LexiconEntry.gotoAdd();

			Button.clickMore();

			ScrollWebElementIntoView(
				key_menuItem = "Placed Orders Template",
				locator1 = "MenuItem#ANY_MENU_ITEM");

			MenuItem.click(menuItem = "Placed Orders Template");

			SiteAdmin.viewPortletTitle(portletTitle = "Add Placed Orders Template");

			PortletEntry.inputName(name = "Placed Orders Test ADT");

			PortletEntry.save();

			AssertTextEquals(
				key_rowEntry = "Placed Orders Test ADT",
				locator1 = "ContentRow#ENTRY_CONTENT_ENTRY_NAME",
				value1 = "Placed Orders Test ADT");
		}

		task ("When the admin open the configure section for the Placed Order widget") {
			ApplicationsMenu.gotoSite(site = "Minium");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Placed Orders");

			Portlet.gotoPortletOptions(
				portletName = "Placed Orders",
				portletOption = "Configuration");
		}

		task ("And use the template created before instead of the Default one") {
			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

			Select(
				locator1 = "Select#DISPLAY_TEMPLATE",
				value1 = "Placed Orders Test ADT");

			PortletEntry.save();
		}

		task ("Then after saving the Placed order configurations the changes are maintained") {
			Alert.viewSuccessMessage();

			IFrame.closeFrame();

			Portlet.gotoPortletOptions(
				portletName = "Placed Orders",
				portletOption = "Configuration");

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

			AssertSelectedLabel(
				locator1 = "Select#DISPLAY_TEMPLATE",
				value1 = "Placed Orders Test ADT");
		}
	}

}