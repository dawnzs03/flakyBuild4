@component-name = "portal-commerce"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Shopping Experience";

	setUp {
		CommerceConfiguration.commerceSetUp(minium = "true");
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "Test for COMMERCE-11398. As a B2X site guest user, I want to be able to search for a product"
	@priority = 5
	test CanB2XGuestUsersSearchProducts {
		property portal.acceptance = "true";

		task ("Given the channel Site Type is set to B2X") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			Select(
				key_fieldLabel = "Commerce Site Type",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "B2X");

			Button.clickSave();
		}

		task ("And the View permission of Catalog page for Guest is checked") {
			PagesAdmin.openPagesAdmin(siteURLKey = "minium");

			PagesAdmin.gotoPageEllipsisMenuItem(
				menuItem = "Permissions",
				pageName = "Catalog");

			Role.definePermissionPG(
				permissionDefinitionKey = "CONFIGURATION_PERMISSIONS_VIEW_CHECKBOX",
				roleTitle = "guest");
		}

		task ("When a guest user navigates to the Minium catalog page") {
			User.logoutPG();

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/catalog");
		}

		task ("And the guest searches for a product") {
			CommerceNavigator.searchCatalog(productName = "U-Joint");
		}

		task ("Then the results of the search are returned") {
			for (var productName : list "U-Joint,Ball Joints") {
				AssertElementPresent(
					key_productName = ${productName},
					locator1 = "CommerceAccelerators#PRODUCT_CARD_NAME");
			}

			AssertElementNotPresent(
				key_value = 3,
				locator1 = "CommerceAccelerators#ASSERT_PRODUCT_CARD");
		}

		task ("When the guest searches for a product using double quotes") {
			var productName = '''"U-Joint"''';

			CommerceNavigator.searchCatalog(productName = ${productName});
		}

		task ("Then the results of the search are returned") {
			AssertElementPresent(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_NAME");

			AssertElementNotPresent(
				key_productName = "Ball Joints",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_NAME");

			AssertElementNotPresent(
				key_value = 2,
				locator1 = "CommerceAccelerators#ASSERT_PRODUCT_CARD");
		}
	}

}