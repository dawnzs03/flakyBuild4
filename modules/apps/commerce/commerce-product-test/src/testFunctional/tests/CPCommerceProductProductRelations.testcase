@component-name = "portal-commerce"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Product Info Management";

	setUp {
		CommerceConfiguration.commerceSetUp(storeFront = "true");
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "This is a test for COMMERCE-6062. AddAProductRelations"
	@priority = 3
	test AddAProductRelations {
		property portal.acceptance = "false";

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Simple T-Shirt",
			productType = "Simple");

		Click(locator1 = "Icon#BACK");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Shoes",
			productType = "Simple");

		Click(locator1 = "Icon#BACK");

		AppBuilderAdmin.searchByItem(itemName = "Simple T-Shirt");

		CommerceNavigator.gotoEntry(entryName = "Simple T-Shirt");

		CommerceEntry.gotoMenuTab(menuTab = "Product Relations");

		for (var valueList : list "Up-Sell,Cross-Sell,Related,Accessories,Spare") {
			CommerceRelations.addAnyProductRelation(
				key_product = "Shoes",
				key_relation = "${valueList} Product");

			AssertElementPresent(
				key_productName = "Shoes",
				key_value = ${valueList},
				locator1 = "CommerceEntry#VALUE_PRODUCT_RELATIONS");
		}
	}

	@description = "This is a test for COMMERCE-11085. Can delete a product related to another product"
	@priority = 3
	test CanDeleteProductWithRelations {
		property portal.acceptance = "false";

		task ("Given a Minium Site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And a product is related to another product") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "ABS Sensor");

			CommerceEntry.gotoMenuTab(menuTab = "Product Relations");

			CommerceRelations.addAnyProductRelation(
				key_product = "U-Joint",
				key_relation = "Up-Sell Product");

			AssertElementPresent(
				key_productName = "U-Joint",
				key_value = "Up-Sell",
				locator1 = "CommerceEntry#VALUE_PRODUCT_RELATIONS");
		}

		task ("When the admin deletes the related product") {
			CommerceProducts.openProductsAdmin();

			CommerceNavigator.searchEntry(entryName = "U-Joint");

			Click.clickNoMouseOverNoWaitForVisible(
				key_productName = "U-Joint",
				locator1 = "CommerceEntry#PRODUCT_ENTRY_CHECKBOX");

			AssertElementPresent(locator1 = "Button#TRASH_ENABLED");
		}

		task ("Then the product is successfully deleted") {
			ClickNoError(locator1 = "Button#TRASH_ENABLED");

			CommerceNavigator.searchEntry(entryName = "U-Joint");

			AssertElementNotPresent(
				key_entryName = "U-Joint",
				locator1 = "CommerceNavigation#ENTRY_NAME");
		}
	}

	@description = "This is a test for COMMERCE-6064. EditAProductRelations"
	@priority = 5
	test EditAProductRelations {
		property portal.acceptance = "true";

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		WaitForElementPresent(locator1 = "CommerceNavigation#EMPTY_SEARCH_CONTAINER");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Simple T-Shirt",
			productType = "Simple");

		Click(locator1 = "Icon#BACK");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Shoes",
			productType = "Simple");

		Click(locator1 = "Icon#BACK");

		AppBuilderAdmin.searchByItem(itemName = "Simple T-Shirt");

		CommerceNavigator.gotoEntry(entryName = "Simple T-Shirt");

		CommerceEntry.gotoMenuTab(menuTab = "Product Relations");

		CommerceRelations.addAnyProductRelation(
			key_product = "Shoes",
			key_relation = "Up-Sell Product");

		CommerceRelations.productRelationSetPriority(
			priorityValue = 1,
			productNameRelation = "Shoes");

		AssertElementPresent(
			key_productName = "Shoes",
			key_value = 1,
			locator1 = "CommerceEntry#VALUE_PRODUCT_RELATIONS");
	}

	@description = "This is a test for COMMERCE-6063. RemoveAProductRelations"
	@priority = 3
	test RemoveAProductRelations {
		property portal.acceptance = "false";

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Simple T-Shirt",
			productType = "Simple");

		Click(locator1 = "Icon#BACK");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Shoes",
			productType = "Simple");

		Click(locator1 = "Icon#BACK");

		CommerceNavigator.gotoEntry(entryName = "Simple T-Shirt");

		CommerceEntry.gotoMenuTab(menuTab = "Product Relations");

		for (var valueList : list "Up-Sell,Cross-Sell,Related,Accessories,Spare") {
			CommerceRelations.addAnyProductRelation(
				key_product = "Shoes",
				key_relation = "${valueList} Product");
		}

		for (var number : list "1,2,3,4,5") {
			Click(
				key_entryName = "Shoes",
				locator1 = "CommerceEntry#ENTRY_MENU_DROPDOWN_BUTTON");

			Click(
				filterOption = "Delete",
				locator1 = "ContentDashboard#FILTER_BY_OPTION");

			AssertElementPresent(locator1 = "Message#SUCCESS");
		}

		for (var valueList : list "Up-Sell,Cross-Sell,Related,Accessories,Spare") {
			AssertElementNotPresent(
				key_productName = "Shoes",
				key_value = ${valueList},
				locator1 = "CommerceEntry#VALUE_PRODUCT_RELATIONS");
		}
	}

	@description = "This is a test for COMMERCE-8308. SearchProductRelations"
	@priority = 5
	test SearchProductRelations {
		property portal.acceptance = "true";

		CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		AppBuilderAdmin.searchByItem(itemName = "Turbocharger");

		CommerceNavigator.gotoEntry(entryName = "Turbocharger");

		CommerceEntry.gotoMenuTab(menuTab = "Media");

		for (var number : list "106,107,108") {
			CommerceEntry.checkImageName(uploadFileName = "Minium_ProductImage_${number}.png");
		}

		CommerceEntry.gotoMenuTab(menuTab = "Visibility");

		for (var nameList : list "Channels,Account Groups") {
			CommerceEntry.assertCheckedSpecificToggle(name = ${nameList});
		}

		CommerceEntry.gotoMenuTab(menuTab = "Product Relations");

		Click(locator1 = "Button#PLUS");

		Click(
			key_selectAction = "Add Up-Sell Product",
			locator1 = "FormViewBuilder#FIELD_ELLIPSIS_ACTION_FIELDSET");

		SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_IFRAME");

		AppBuilderAdmin.searchByItem(itemName = "Turbocharger");

		AssertElementPresent(
			key_entry = "Turbocharger",
			locator1 = "CommerceNavigation#TD_ANY_ENTRY_NAME");

		CommerceNavigator.clearSearchBar();

		AssertElementNotPresent(
			key_entry = "Turbocharger",
			locator1 = "CommerceNavigation#TD_ANY_ENTRY_NAME");

		Click(
			key_pageNumber = 3,
			locator1 = "CommerceNavigation#PAGINATION_ANY_PAGE");

		AssertElementPresent(
			key_entry = "Turbocharger",
			locator1 = "CommerceNavigation#TD_ANY_ENTRY_NAME");
	}

}