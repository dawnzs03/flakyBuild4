@component-name = "portal-commerce"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false${line.separator}feature.flag.COMMERCE-11028=true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Shopping Experience";

	setUp {
		CommerceConfiguration.commerceSetUp(minium = "true");

		task ("Setup: Create an account with a buyer user") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "COMMERCE-11551 | As a buyer user, I want to be able to add to cart a 'Price on Application' sku via Quick Add to Cart"
	@priority = 5
	test CanAddPriceOnApplicationSkuViaQuickAdd {
		property portal.acceptance = "true";

		task ("Given the admin navigates to a product's sku details") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "U-Joint");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoTableListEntry(entryName = "MIN55861");
		}

		task ("And the admin marks the sku as 'Price on Application'") {
			CommerceSKUs.editSkuPricing(priceOnApplication = "true");
		}

		task ("When the buyer adds the 'Price on Application' product via Quick Add to Cart") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceAcceleratorsInitializer.createNewOrderFromAccountSelectorDropdown();

			CommerceNavigator.gotoMiniCart();

			FrontStore.quickAddToCartSearchAndSelectItem(orderItemSku = "MIN55861");

			Click(locator1 = "CommerceAccelerators#QUICK_ADD_TO_CART_BUTTON");
		}

		task ("Then the product is successfully added to the cart") {
			AssertElementPresent(
				key_cartItemName = "U-Joint",
				locator1 = "CommerceAccelerators#MINI_CART_ITEM_NAME");

			// Add assertions for the pricing following COMMERCE-11276

		}
	}

	@description = "COMMERCE-11507. As an admin user with permission to manage quotes, I want to be able to mark a quote as processed in the order's admin page"
	@priority = 5
	test CanAdminUsersWithManageQuotePermissionProcessQuote {
		property portal.acceptance = "true";

		task ("Given 'Allow Request a Quote on a Fully Priced Cart' is enabled for the site") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			Check.checkToggleSwitch(
				key_toggleSwitchLabel = "Request a Quote",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			Button.clickSave();
		}

		task ("And an Operations Manager user is created Manage Quotes permission") {
			JSONUser.addUserWithRole(
				roleTitle = "Operations Manager",
				userEmailAddress = "om@liferay.com",
				userFirstName = "Operations",
				userLastName = "Manager",
				userScreenName = "operationsmanager");
		}

		task ("And the buyer user requests a quote for an order") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 1);

			var orderId = selenium.getText("CommerceEntry#ACTIVE_ORDER_ID");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Pending Orders");

			Click(
				key_orderAuthor = "Buyer User",
				locator1 = "CommerceAccelerators#ORDERS_ENTRY_VIEW_BUTTON");

			CommerceOrders.createQuoteRequest(
				quoteRequestValue = "I kindly request a quote for this product.",
				requestAQuoteInOpenOrdersPage = "true");
		}

		task ("When the operations manager navigate to the order's admin page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "om@liferay.com",
				userLoginFullName = "Operations Manager");

			CommerceOrders.openOrdersAdmin();

			CommerceNavigator.gotoOrderEntryViaAdmin(status = "Quote Requested");
		}

		task ("Then the user is not able to mark a quote as processed") {
			AssertElementNotPresent(
				key_index = "Quote Processed",
				locator1 = "WorkflowMetrics#SEARCH_FIELD_MAPPINGS_METRICS_INDEXES");
		}

		task ("And the step tracker shows 'Quote Requested' as active step") {
			AssertElementPresent(
				key_stepLabel = "Quote Requested",
				locator1 = "CommerceOrders#STEP_TRACKER_ACTIVE_STEP");

			AssertElementPresent(
				key_stepLabel = "Quote Processed",
				locator1 = "CommerceOrders#STEP_TRACKER_INACTIVE_STEP");
		}

		task ("When the Operations Manager role is given the Manage Quotes permission") {
			Permissions.definePermissionViaJSONAPI(
				resourceAction = "MANAGE_QUOTES",
				resourceName = "com.liferay.commerce.order",
				roleTitle = "Operations Manager");
		}

		task ("Then the user is able to mark a quote as processed") {
			Refresh();

			AssertElementPresent(
				key_index = "Quote Processed",
				locator1 = "WorkflowMetrics#SEARCH_FIELD_MAPPINGS_METRICS_INDEXES");

			Click(
				key_index = "Quote Processed",
				locator1 = "WorkflowMetrics#SEARCH_FIELD_MAPPINGS_METRICS_INDEXES");
		}

		task ("And the step tracker shows 'Quote Processed' as active step") {
			for (var status : list "Quote Requested,Quote Processed") {
				AssertElementPresent(
					key_stepLabel = ${status},
					locator1 = "CommerceOrders#STEP_TRACKER_COMPLETED_STEP");
			}
		}

		task ("And the buyer can see the 'Quote Processed' status on the order") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Placed Orders");

			AssertElementPresent(
				key_entry = ${orderId},
				key_status = "Quote Processed",
				locator1 = "CommerceOrders#PLACED_ORDERS_LIST_STATUS");

			Click(
				key_orderAuthor = "Buyer User",
				locator1 = "CommerceAccelerators#ORDERS_ENTRY_VIEW_BUTTON");

			AssertElementPresent(
				key_status = "Quote Processed",
				locator1 = "CommerceOrders#PLACED_ORDERS_DETAILS_STATUS");
		}
	}

	@description = "COMMERCE-11030. Verify that the Request a Quote button is visible in the Mini Cart and in the Order's Details Page."
	@priority = 5
	test CanAssertRequestAQuoteButtonIsVisible {
		property portal.acceptance = "true";

		task ("Given 'Allow Request a Quote on a Fully Priced Cart' is enabled for the site") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			Check.checkToggleSwitch(
				key_toggleSwitchLabel = "Request a Quote",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			Button.clickSave();
		}

		task ("When the buyer user adds a product to the cart") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 1);
		}

		task ("Then the 'Request a Quote' button is visible in the Mini Cart") {
			CommerceNavigator.gotoMiniCart();

			AssertElementPresent(
				key_text = "Request a Quote",
				locator1 = "Button#ANY");
		}

		task ("And after clicking the button, it is visible also in the Order's Details Page") {
			Button.click(button = "Request a Quote");

			var activeOrderId = selenium.getText("CommerceEntry#ACTIVE_ORDER_ID");

			WaitForElementPresent(locator1 = "CommerceOrders#PENDING_ORDERS_ORDER_ID");

			var openOrderId = selenium.getText("CommerceOrders#PENDING_ORDERS_ORDER_ID");

			TestUtils.assertEquals(
				actual = ${activeOrderId},
				expected = ${openOrderId});

			AssertElementPresent(
				key_text = "Request a Quote",
				locator1 = "Button#ANY");
		}
	}

	@description = "COMMERCE-11296. As buyer, I can verify that, after submitting a quote request, I will be redirected to Open Order's Page once Reorder button is clicked."
	@priority = 5
	test CanBeRedirectedToOpenOrdersUponClickingReorderButton {
		property portal.acceptance = "true";

		task ("Given 'Allow Request a Quote on a Fully Priced Cart' is enabled for the site") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			Check.checkToggleSwitch(
				key_toggleSwitchLabel = "Request a Quote",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			Button.clickSave();
		}

		task ("When the buyer user requests a quote for an order") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 1);

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Pending Orders");

			Click(
				key_orderAuthor = "Buyer User",
				locator1 = "CommerceAccelerators#ORDERS_ENTRY_VIEW_BUTTON");

			CommerceOrders.createQuoteRequest(
				quoteRequestValue = "I kindly request a quote for this product.",
				requestAQuoteInOpenOrdersPage = "true");
		}

		task ("Then upon clicking the 'Reorder' button, is redirected to Open Order's Page to start the checkout or request a quote for the new order") {
			Click(
				key_text = "Reorder",
				locator1 = "Button#ANY");

			CommerceUtilities.checkSuccessAlertAppearsAndDisappears();

			var orderIds = CommerceJSONOrdersAPI._getCommerceOrderIds(orderCount = 2);

			var quoteRequestedOrderId = StringUtil.extractFirst(${orderIds}, ",");
			var openOrderId = StringUtil.extractLast(${orderIds}, ",");

			TestUtils.assertNotEquals(
				actual = ${openOrderId},
				expected = ${quoteRequestedOrderId});

			AssertElementPresent(
				key_text = "Request a Quote",
				locator1 = "Button#ANY");

			AssertElementPresent(
				key_text = "Checkout",
				locator1 = "Button#ANY");
		}
	}

	@description = "COMMERCE-11277. As a buyer user, I can create a Quote Request in the Open Order's Details Page by entering a personal message."
	@priority = 5
	test CanCreateQuoteRequest {
		property portal.acceptance = "true";

		task ("Given 'Allow Request a Quote on a Fully Priced Cart' is enabled for the site") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			Check.checkToggleSwitch(
				key_toggleSwitchLabel = "Request a Quote",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			Button.clickSave();
		}

		task ("And the buyer user clicks the 'Request a Quote' button in the Mini Cart") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 1);

			CommerceNavigator.gotoMiniCart();

			Button.click(button = "Request a Quote");
		}

		task ("When the buyer clicks again the 'Request a Quote' button in the Open Order Details Page") {
			Click(
				buttonId = "requestQuote",
				locator1 = "Button#BUTTON_ID");
		}

		task ("Then the a modal named Request a Quote is shown") {
			AssertElementPresent(
				key_title = "Request a Quote",
				locator1 = "CommerceFrontStore#MODAL_TITLE");
		}

		task ("When the buyer submits the request after writing a message in the note area") {
			CommerceOrders.createQuoteRequest(quoteRequestValue = "I kindly request a quote for this product.");
		}

		task ("Then the quote request is placed with the status 'Quote Requested' in the Placed Order's Details Page") {
			AssertElementPresent(
				key_status = "Quote Requested",
				locator1 = "CommerceOrders#PLACED_ORDERS_DETAILS_STATUS");
		}

		task ("Then the quote request cannot be edited") {
			Click.javaScriptClick(locator1 = "CommerceFrontStore#ORDER_PAGES_NOTES_BUTTON");

			AssertTextNotPresent(
				locator1 = "CommerceAccelerators#PORTLET_CONTENT",
				value1 = "Edit");
		}
	}

	@description = "This is a test for COMMERCE-11703. When both Price List and Promotion Discovery Method are set to Hierarchy and a promotion is marked as 'Price On Application', then the lower Price List can win over Promotion"
	@priority = 5
	test CanLowerPriceListWinOverPromotionHierarchySetting {
		property portal.acceptance = "true";

		task ("Given two price lists for MIN93015. $30 for the first price list with priority 1 and $40 for the second one with priority 0") {
			CommerceJSONPriceListsAndPromotionsAPI._addPriceList(
				catalogName = "Minium",
				currencyCode = "USD",
				priceListName = "Test Price List 1",
				priority = 1);

			CommerceJSONPriceListsAndPromotionsAPI._addPriceList(
				catalogName = "Minium",
				currencyCode = "USD",
				priceListName = "Test Price List 2",
				priority = 0);

			CommerceJSONPriceListsAndPromotionsAPI._addPriceListEntry(
				entryPrice = 40,
				priceListName = "Test Price List 1",
				productSKU = "MIN93015");

			CommerceJSONPriceListsAndPromotionsAPI._addPriceListEntry(
				entryPrice = 30,
				priceListName = "Test Price List 2",
				productSKU = "MIN93015");
		}

		task ("And a Promotion is created for Minium and on the SKU MIN93015 marked as 'Price On Application'") {
			CommercePromotions.openPromotionsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Base Promotion");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceNavigator.gotoEntry(entryName = "MIN93015");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceSKUs.setSkuPricing(priceOnApplication = "true");

			Button.clickSave();
		}

		task ("When the buyer navigates to the Minium Catalog page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("Then the product costs 40 USD of the price list") {
			CommerceNavigator.searchEntry(entryName = "ABS Sensor");

			AssertTextEquals.assertPartialText(
				key_productName = "ABS Sensor",
				locator1 = "CommerceEntry#PRODUCT_CARD_LIST_PRICE",
				value1 = "$ 40.00");
		}

		task ("When the admin adds another Promotion, configured with priority 1 on the SKU MIN93015 with a Promo price of 10$") {
			CommerceJSONPriceListsAndPromotionsAPI._addPromotion(
				catalogName = "Minium",
				currencyCode = "USD",
				priority = 1,
				promotionName = "Test Promotion 1");

			CommerceJSONPriceListsAndPromotionsAPI._addPromotionEntry(
				entryPrice = 10,
				productSKU = "MIN93015",
				promotionName = "Test Promotion 1");
		}

		task ("Then the product ABS Sensor has a base price of 40$ but with a promo of 10$") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/catalog");

			CommerceNavigator.searchEntry(entryName = "ABS Sensor");

			FrontStore.assertPromoPrice(
				basePrice = "40.00",
				productName = "ABS Sensor",
				promoPrice = "10.00");
		}
	}

	@description = "This is a test for COMMERCE-11704. When both Price List and Promotion Discovery Method are set to lowest, and the promotion is marked as 'Price On Application' and with a lower price than price lists, then the lower Price Promotion can win over Price List"
	@priority = 4
	test CanLowerPricePromotionWinOverPriceListLowestSetting {
		property osgi.module.configuration.file.names = "com.liferay.commerce.pricing.configuration.CommercePricingConfiguration.config";
		property osgi.module.configurations = "commercePriceListDiscovery=\"lowest\"${line.separator}commercePromotionDiscovery=\"lowest\"";
		property portal.acceptance = "false";

		task ("Given two price lists for MIN93015. $30 for the first price list with priority 1 and $40 for the second one with priority 0") {
			CommerceJSONPriceListsAndPromotionsAPI._addPriceList(
				catalogName = "Minium",
				currencyCode = "USD",
				priceListName = "Test Price List 1",
				priority = 1);

			CommerceJSONPriceListsAndPromotionsAPI._addPriceList(
				catalogName = "Minium",
				currencyCode = "USD",
				priceListName = "Test Price List 2",
				priority = 0);

			CommerceJSONPriceListsAndPromotionsAPI._addPriceListEntry(
				entryPrice = 30,
				priceListName = "Test Price List 1",
				productSKU = "MIN93015");

			CommerceJSONPriceListsAndPromotionsAPI._addPriceListEntry(
				entryPrice = 40,
				priceListName = "Test Price List 2",
				productSKU = "MIN93015");
		}

		task ("And a Promotion with priority 0 is created for Minium and on the SKU MIN93015 marked as 'Price On Application'") {
			CommercePromotions.openPromotionsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Base Promotion");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceNavigator.gotoEntry(entryName = "MIN93015");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceSKUs.setSkuPricing(priceOnApplication = "true");

			Button.clickSave();
		}

		task ("When the admin adds another Promotion, configured with priority 1 on the SKU MIN93015 with a Promo price of 10$") {
			CommerceJSONPriceListsAndPromotionsAPI._addPromotion(
				catalogName = "Minium",
				currencyCode = "USD",
				priority = 1,
				promotionName = "Test Promotion 1");

			CommerceJSONPriceListsAndPromotionsAPI._addPromotionEntry(
				entryPrice = 10,
				productSKU = "MIN93015",
				promotionName = "Test Promotion 1");
		}

		task ("When the buyer navigates to the Minium Catalog page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("Then the product costs 10 USD of the promotion which wins over the 30 USD price list") {
			CommerceNavigator.searchEntry(entryName = "ABS Sensor");

			FrontStore.assertPromoPrice(
				basePrice = "30.00",
				productName = "ABS Sensor",
				promoPrice = "10.00");
		}
	}

	@description = "This is a test for COMMERCE-11705. When both Price List and Promotion Discovery Method are set to Hierarchy, a price list is marked as 'Price On Application' and a higher price list than a promotion, then the lower Promotion can win over Price List"
	@priority = 4
	test CanLowerPromotionWinOverPriceListHierarchySetting {
		property portal.acceptance = "false";

		task ("Given two price lists for MIN93015. The first price list with priority 1 is marked as 'Price On Application' and $20 for the second one with priority 0") {
			CommerceJSONPriceListsAndPromotionsAPI._addPriceList(
				catalogName = "Minium",
				currencyCode = "USD",
				priceListName = "Test Price List 1",
				priority = 1);

			CommerceJSONPriceListsAndPromotionsAPI._addPriceList(
				catalogName = "Minium",
				currencyCode = "USD",
				priceListName = "Test Price List 2",
				priority = 0);

			CommercePriceLists.openPriceListsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test Price List 1");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceRelations.assignSingleRelationToProductsEntry(
				entryName = "MIN93015",
				title = "Add SKUs");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceNavigator.gotoEntry(entryName = "MIN93015");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceSKUs.setSkuPricing(priceOnApplication = "true");

			Button.clickSave();

			CommerceJSONPriceListsAndPromotionsAPI._addPriceListEntry(
				entryPrice = 20,
				priceListName = "Test Price List 2",
				productSKU = "MIN93015");
		}

		task ("And a Promotion is created for Minium and on the SKU MIN93015 with 10$ as a promo price") {
			CommerceJSONPriceListsAndPromotionsAPI._addPromotionEntry(
				entryPrice = 10,
				productSKU = "MIN93015",
				promotionName = "Minium Base Promotion");
		}

		task ("When the buyer navigates to the Minium Catalog page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("Then the product costs 10 USD of the promotion which wins over the POA price list") {
			CommerceNavigator.searchEntry(entryName = "ABS Sensor");

			FrontStore.assertPromoPrice(
				basePrice = "Price on Application",
				productName = "ABS Sensor",
				promoPrice = "10.00");
		}
	}

	@description = "This is a test for COMMERCE-11712. When both Price List and Promotion Discovery Method are set to lowest, a price list is marked as 'Price On Application' and with two lower price promotions than price lists, then the lower Promotion can win over Price List"
	@priority = 4
	test CanLowerPromotionWinOverPriceListLowestSetting {
		property osgi.module.configuration.file.names = "com.liferay.commerce.pricing.configuration.CommercePricingConfiguration.config";
		property osgi.module.configurations = "commercePriceListDiscovery=\"lowest\"${line.separator}commercePromotionDiscovery=\"lowest\"";
		property portal.acceptance = "false";

		task ("Given two price lists for MIN93015. $30 for the first price list with priority 1 and the second one with priority 0 is marked as 'Price On Application'") {
			CommerceJSONPriceListsAndPromotionsAPI._addPriceList(
				catalogName = "Minium",
				currencyCode = "USD",
				priceListName = "Test Price List 1",
				priority = 1);

			CommerceJSONPriceListsAndPromotionsAPI._addPriceList(
				catalogName = "Minium",
				currencyCode = "USD",
				priceListName = "Test Price List 2",
				priority = 0);

			CommerceJSONPriceListsAndPromotionsAPI._addPriceListEntry(
				entryPrice = 30,
				priceListName = "Test Price List 1",
				productSKU = "MIN93015");

			CommercePriceLists.openPriceListsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test Price List 2");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceRelations.assignSingleRelationToProductsEntry(
				entryName = "MIN93015",
				title = "Add SKUs");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceNavigator.gotoEntry(entryName = "MIN93015");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceSKUs.setSkuPricing(priceOnApplication = "true");

			Button.clickSave();
		}

		task ("And two promotions for Minium on the SKU MIN93015. A Promo price of $20 for the first price list with priority 1 and $10 for the second one") {
			CommerceJSONPriceListsAndPromotionsAPI._addPromotion(
				catalogName = "Minium",
				currencyCode = "USD",
				priority = 1,
				promotionName = "Test Promotion 1");

			CommerceJSONPriceListsAndPromotionsAPI._addPromotionEntry(
				entryPrice = 20,
				productSKU = "MIN93015",
				promotionName = "Test Promotion 1");

			CommerceJSONPriceListsAndPromotionsAPI._addPromotionEntry(
				entryPrice = 10,
				productSKU = "MIN93015",
				promotionName = "Minium Base Promotion");
		}

		task ("When the buyer navigates to the Minium Catalog page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("Then the product costs 10 USD of the promo which wins over the higher 30 USD price list") {
			CommerceNavigator.searchEntry(entryName = "ABS Sensor");

			FrontStore.assertPromoPrice(
				basePrice = "30.00",
				productName = "ABS Sensor",
				promoPrice = "10.00");
		}
	}

	@description = "COMMERCE-11548 | As an admin user, I want to be able to mark/unmark a sku as 'Price on Application'"
	@priority = 5
	test CanMarkSkuAsPriceOnApplication {
		property portal.acceptance = "true";

		task ("Given the admin navigates to a product's sku details") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "U-Joint");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoTableListEntry(entryName = "MIN55861");
		}

		task ("When the admin marks the sku as 'Price on Application'") {
			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			MouseOver(
				key_label = "Price on Application",
				locator1 = "CommerceEntry#LABEL_TOOLTIP_ICON");

			VerifyElementPresent(
				key_label = "Price on Application",
				key_text = "Do not set a base price for this product and instead require that buyers request a quote.",
				locator1 = "CommerceEntry#LABEL_TOOLTIP_TEXT");

			CommerceSKUs.setSkuPricing(priceOnApplication = "true");

			Button.clickPublish();
		}

		task ("Then the pricing fields are greyed out") {
			for (var text : list "Base Price,Promotion Price,Cost") {
				AssertElementPresent(
					key_text = ${text},
					locator1 = "CommerceEntry#ANY_TEXT_INPUT_DISABLED");
			}

			Click(locator1 = "Icon#CLOSE");

			SelectFrame.selectFrameTop();
		}

		task ("And 'Price on Application' is shown as the active price") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			AssertElementPresent(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_PRICE_ON_APPLICATION");
		}

		task ("When the admin unmarks the sku as 'Price on Application'") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "U-Joint");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoTableListEntry(entryName = "MIN55861");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceSKUs.setSkuPricing(priceOnApplication = "false");

			Button.clickPublish();
		}

		task ("Then the pricing fields are not greyed out") {
			for (var text : list "Base Price,Promotion Price,Cost") {
				AssertElementPresent(
					key_text = ${text},
					locator1 = "TextInput#ANY");
			}

			Click(locator1 = "Icon#CLOSE");

			SelectFrame.selectFrameTop();
		}

		task ("And the base price is shown as the active price") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			AssertElementNotPresent(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_PRICE_ON_APPLICATION");

			AssertTextEquals.assertPartialText(
				key_productName = "U-Joint",
				locator1 = "CommerceEntry#PRODUCT_CARD_LIST_PRICE",
				value1 = "$ 24.00");
		}
	}

	@description = "COMMERCE-11726 | As an admin user, I want to not be able to override a Price List with a 'Price on Application' set for the sku"
	@priority = 5
	test CannotSkuPriceOnApplicationSetOverridePriceList {
		property portal.acceptance = "true";

		task ("Given the admin navigates to a product's sku details") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "U-Joint");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoTableListEntry(entryName = "MIN55861");
		}

		task ("And the admin marks the sku as 'Price on Application'") {
			CommerceSKUs.editSkuPricing(priceOnApplication = "true");
		}

		task ("When a new price list is created") {
			CommerceJSONPriceListsAndPromotionsAPI._addPriceList(
				catalogName = "Minium",
				currencyCode = "USD",
				priceListName = "Test Price List");
		}

		task ("And a price list entry is created for the same sku") {
			CommerceJSONPriceListsAndPromotionsAPI._addPriceListEntry(
				entryPrice = 20,
				priceListName = "Test Price List",
				productSKU = "MIN55861");
		}

		task ("Then the SKU costs 20 USD of the price list") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			AssertTextEquals.assertPartialText(
				key_productName = "U-Joint",
				locator1 = "CommerceEntry#PRODUCT_CARD_LIST_PRICE",
				value1 = "$ 20.00");

			AssertElementNotPresent(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_PRICE_ON_APPLICATION");
		}

		task ("When the price list is removed") {
			CommerceJSONPriceListsAndPromotionsAPI._deleteCommercePriceList(priceListName = "Test Price List");
		}

		task ("Then 'Price on Application' is shown as the active price") {
			Refresh();

			AssertElementPresent(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_PRICE_ON_APPLICATION");

			AssertTextNotEquals.assertNotPartialText(
				key_productName = "U-Joint",
				locator1 = "CommerceEntry#PRODUCT_CARD_LIST_PRICE",
				value1 = "$ 20.00");
		}
	}

	@description = "COMMERCE-11726 | As an admin user, I want to not be able to override a Promotion with a 'Price on Application' set for the sku"
	@priority = 5
	test CannotSkuPriceOnApplicationSetOverridePromotion {
		property portal.acceptance = "true";

		task ("Given the admin navigates to a product's sku details") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "U-Joint");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoTableListEntry(entryName = "MIN55861");
		}

		task ("And the admin marks the sku as 'Price on Application'") {
			CommerceSKUs.editSkuPricing(priceOnApplication = "true");
		}

		task ("When a new promotion is created") {
			CommerceJSONPriceListsAndPromotionsAPI._addPromotion(
				catalogName = "Minium",
				currencyCode = "USD",
				promotionName = "Test Promotion");
		}

		task ("And a promotion entry is created for the same sku") {
			CommerceJSONPriceListsAndPromotionsAPI._addPromotionEntry(
				entryPrice = 20,
				productSKU = "MIN55861",
				promotionName = "Test Promotion");
		}

		task ("Then the SKU costs 20 USD of the promotion price") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			FrontStore.assertPromoPrice(
				basePrice = "Price on Application",
				productName = "U-Joint",
				promoPrice = "20.00");
		}

		task ("When the promotion is removed") {
			CommerceJSONPriceListsAndPromotionsAPI._deleteCommercePriceList(priceListName = "Test Promotion");
		}

		task ("Then 'Price on Application' is shown as the active price") {
			Refresh();

			AssertElementPresent(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_PRICE_ON_APPLICATION");

			AssertTextNotEquals.assertNotPartialText(
				key_productName = "U-Joint",
				locator1 = "CommerceEntry#PRODUCT_CARD_LIST_PRICE",
				value1 = "$ 20.00");
		}
	}

	@description = "This is a test for COMMERCE-11687. Can't checkout directly when a Price On Application Product with other normal products are in the carts, a quote must be submitted"
	@priority = 5
	test CanPreventPriceOnApplicationProductBeDirectlyCheckoutTogetherWithANormalProduct {
		property portal.acceptance = "true";

		task ("Given the admin enables the toggle 'Price on Application' for a product's SKU on the Test Price List 1") {
			CommerceJSONPriceListsAndPromotionsAPI._addPriceList(
				catalogName = "Minium",
				currencyCode = "USD",
				priceListName = "Test Price List 1");

			CommercePriceLists.openPriceListsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test Price List 1");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceRelations.assignSingleRelationToProductsEntry(
				entryName = "MIN55861",
				title = "Add SKUs");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceNavigator.gotoEntry(entryName = "MIN55861");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceSKUs.setSkuPricing(priceOnApplication = "true");

			Button.clickSave();
		}

		task ("When the buyer adds two normal and one marked as 'Price on Application' products to the cart") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			for (var productName : list "U-Joint,Mount,Torque Converters") {
				FrontStore.addInitializerProductToCart(
					productName = ${productName},
					productQuantity = 1);
			}
		}

		task ("Then the buyer can't go directly with the checkout, a quote must be submitted") {
			CommerceNavigator.gotoMiniCart();

			AssertElementPresent(
				key_text = "Request a Quote",
				locator1 = "Button#ANY");

			AssertElementPresent(
				key_text = "Submit",
				locator1 = "Button#ANY_DISABLED");

			CommerceOrders.createQuoteRequest(
				quoteRequestValue = "I kindly request a quote for this product.",
				requestAQuoteInMiniCart = "true",
				requestAQuoteInOpenOrdersPage = "true");

			AssertLocation.assertPartialLocation(value1 = "web/minium/placed-orders");

			AssertElementPresent(
				key_status = "Quote Requested",
				locator1 = "CommerceOrders#PLACED_ORDERS_DETAILS_STATUS");
		}
	}

	@description = "COMMERCE-11728 As an admin user, I want to be able to override a Price on Application' set for the sku with a price list"
	@priority = 5
	test CanPriceListPriceOverrideSkuPriceOnApplicationSet {
		property portal.acceptance = "true";

		task ("Given the admin navigates to a product's sku details") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "U-Joint");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoTableListEntry(entryName = "MIN55861");
		}

		task ("And the admin marks the sku as 'Price on Application'") {
			CommerceSKUs.editSkuPricing(priceOnApplication = "true");
		}

		task ("When a new price list and promotion are created") {
			CommerceJSONPriceListsAndPromotionsAPI._addPriceList(
				catalogName = "Minium",
				currencyCode = "USD",
				priceListName = "Test Price List");

			CommerceJSONPriceListsAndPromotionsAPI._addPromotion(
				catalogName = "Minium",
				currencyCode = "USD",
				promotionName = "Test Promotion");
		}

		task ("And a price list and promotion entries are created for the same sku") {
			CommerceJSONPriceListsAndPromotionsAPI._addPriceListEntry(
				entryPrice = 20,
				priceListName = "Test Price List",
				productSKU = "MIN55861");

			CommerceJSONPriceListsAndPromotionsAPI._addPromotionEntry(
				entryPrice = 0,
				productSKU = "MIN55861",
				promotionName = "Test Promotion");
		}

		task ("Then the 20$ price inside the price list is shown as the active price") {
			var key_productName = "U-Joint";

			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			AssertElementNotPresent(locator1 = "CommerceAccelerators#PRODUCT_CARD_PRICE_ON_APPLICATION");

			AssertTextEquals.assertPartialText(
				locator1 = "CommerceEntry#PRODUCT_CARD_LIST_PRICE",
				value1 = "$ 20.00");
		}
	}

	@description = "This is a test for COMMERCE-11684. Buyer can use Price on Application on Price List with eligible account"
	@priority = 4
	test CanPriceListUsePriceOnApplicationAccountEligibility {
		property portal.acceptance = "false";

		task ("Given a second account with buyer 2 is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account 2",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer2@liferay.com",
				userFirstName = "Buyer2",
				userLastName = "User2",
				userRole = "Buyer",
				userScreenName = "buyeruser2",
				userSiteMembership = "Minium");
		}

		task ("And an Account Group is created and contains Account 2") {
			JSONAccountGroup.addAccountGroup(
				accountGroupDescription = "This is an Account Group.",
				accountGroupName = "Account Group Name");

			AccountGroups.openAccountGroupsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Group Name");

			AccountGroups.addAssignee(
				accountGroupName = "Account Group Name",
				assigneeNames = "Commerce Account 2");
		}

		task ("And the admin enables the toggle 'Price on Application' for a product's SKU on the Test Price List 1") {
			CommerceJSONPriceListsAndPromotionsAPI._addPriceList(
				catalogName = "Minium",
				currencyCode = "USD",
				priceListName = "Test Price List 1");

			CommercePriceLists.openPriceListsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test Price List 1");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceRelations.assignSingleRelationToProductsEntry(
				entryName = "MIN55861",
				title = "Add SKUs");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceNavigator.gotoEntry(entryName = "MIN55861");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceSKUs.setSkuPricing(priceOnApplication = "true");

			Button.clickSave();
		}

		task ("And the admin sets up the account eligibility for Commerce Account") {
			CommercePriceLists.openPriceListsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test Price List 1");

			CommerceEntry.gotoMenuTab(menuTab = "Eligibility");

			CommerceEntry.setEntryEligibility(accountsEligibility = "Commerce Account");
		}

		task ("When the buyer for Commerce Account navigates to the Minium Catalog page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("Then the product is marked as Price on Application") {
			AssertElementPresent(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_PRICE_ON_APPLICATION");
		}

		task ("But if buyer2 for Commerce Account 2 navigates to the Minium Catalog page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer2@liferay.com");
		}

		task ("Then the product is not marked as Price on Application") {
			AssertElementNotPresent(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_PRICE_ON_APPLICATION");
		}

		task ("When the admin sets up the account group eligibility for Account Group Name that contains Commerce Account 2") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			CommercePriceLists.openPriceListsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test Price List 1");

			CommerceEntry.gotoMenuTab(menuTab = "Eligibility");

			CommerceEntry.setEntryEligibility(accountGroupsEligibility = "Account Group Name");
		}

		task ("And buyer2 for Commerce Account 2 navigates to the Minium Catalog page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer2@liferay.com");
		}

		task ("Then the product is marked as Price on Application") {
			AssertElementPresent(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_PRICE_ON_APPLICATION");
		}

		task ("But if the buyer for Commerce Account navigates to the Minium Catalog page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("Then the product is not marked as Price on Application") {
			AssertElementNotPresent(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_PRICE_ON_APPLICATION");
		}
	}

	@description = "This is a test for COMMERCE-11685. Buyer can use Price on Application on Price List with eligible channel"
	@priority = 4
	test CanPriceListUsePriceOnApplicationChannelEligibility {
		property portal.acceptance = "false";

		task ("Given a Minium 2 with account 2 is created and associated with the buyer") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(
				siteName = "Minium 2",
				siteTemplateName = "Minium");

			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account 2",
				accountType = "Business",
				createNewAccount = "true",
				existingUser = "true",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium 2");
		}

		task ("And the admin enables the toggle 'Price on Application' for a product's SKU on the Test Price List 1") {
			CommerceJSONPriceListsAndPromotionsAPI._addPriceList(
				catalogName = "Minium",
				currencyCode = "USD",
				priceListName = "Test Price List 1");

			CommercePriceLists.openPriceListsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test Price List 1");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceRelations.assignSingleRelationToProductsEntry(
				entryName = "MIN55861",
				title = "Add SKUs");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceNavigator.gotoEntry(entryName = "MIN55861");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceSKUs.setSkuPricing(priceOnApplication = "true");

			Button.clickSave();
		}

		task ("And the admin sets up the channel eligibility for Minium Portal") {
			CommercePriceLists.openPriceListsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test Price List 1");

			CommerceEntry.gotoMenuTab(menuTab = "Eligibility");

			CommerceEntry.setEntryEligibility(channelsEligibility = "Minium Portal");
		}

		task ("When the buyer navigates to the Minium Catalog page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("Then the product is marked as Price on Application") {
			AssertElementPresent(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_PRICE_ON_APPLICATION");
		}

		task ("When the buyer navigates to the Minium 2 Catalog page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium-2");
		}

		task ("Then the product is not marked as Price on Application") {
			AssertElementNotPresent(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_PRICE_ON_APPLICATION");
		}
	}

	@description = "This is a test for COMMERCE-11686. Buyer can use Price on Application on Price List with eligible order type"
	@priority = 4
	test CanPriceListUsePriceOnApplicationOrderType {
		property portal.acceptance = "false";

		task ("Given two active order types are created") {
			for (var orderTypeNumber : list "1,2") {
				CommerceJSONOrdersAPI._addOrderType(
					active = "true",
					orderTypeDescription = "Test Order Type ${orderTypeNumber} Description",
					orderTypeName = "Order Type ${orderTypeNumber}");
			}
		}

		task ("And the admin enables the toggle 'Price on Application' for a product's SKU on the Test Price List 1") {
			CommerceJSONPriceListsAndPromotionsAPI._addPriceList(
				catalogName = "Minium",
				currencyCode = "USD",
				priceListName = "Test Price List 1");

			CommercePriceLists.openPriceListsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test Price List 1");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceRelations.assignSingleRelationToProductsEntry(
				entryName = "MIN55861",
				title = "Add SKUs");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceNavigator.gotoEntry(entryName = "MIN55861");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceSKUs.setSkuPricing(priceOnApplication = "true");

			Button.clickSave();
		}

		task ("And the admin sets up the order type eligibility for Order Type 1") {
			CommercePriceLists.openPriceListsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test Price List 1");

			CommerceEntry.gotoMenuTab(menuTab = "Eligibility");

			CommerceEntry.setEntryEligibility(orderTypesEligibility = "Order Type 1");
		}

		task ("When the buyer creates a new order using Order Type 1 from the pending orders page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceAcceleratorsInitializer.createNewOrderFromPendingOrders(orderType = "Order Type 1");
		}

		task ("Then the product is marked as Price on Application") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/catalog");

			AssertElementPresent(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_PRICE_ON_APPLICATION");
		}

		task ("But if the buyer creates a new order using Order Type 2 from the pending orders page") {
			CommerceAcceleratorsInitializer.createNewOrderFromPendingOrders(orderType = "Order Type 2");
		}

		task ("Then the product is not marked as Price on Application") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/catalog");

			AssertElementNotPresent(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_PRICE_ON_APPLICATION");
		}
	}

	@description = "This is a test for COMMERCE-11696. If the Price on Application is enabled in the price list with high priority, the buyer can see the product marked as Price on Application, but if the priority is switched, the product is not marked"
	@priority = 5
	test CanPriorityInteractWithPriceLists {
		property portal.acceptance = "true";

		task ("Given two price lists for MIN55861 and priority 1 for the first price list and priority 0 for the second one") {
			CommerceJSONPriceListsAndPromotionsAPI._addPriceList(
				catalogName = "Minium",
				currencyCode = "USD",
				priceListName = "Test Price List 1",
				priority = 1);

			CommerceJSONPriceListsAndPromotionsAPI._addPriceList(
				catalogName = "Minium",
				currencyCode = "USD",
				priceListName = "Test Price List 2",
				priority = 0);

			for (var priceListName : list "Test Price List 1,Test Price List 2") {
				CommercePriceLists.openPriceListsAdmin();

				CommerceNavigator.gotoEntry(entryName = ${priceListName});

				CommerceEntry.gotoMenuTab(menuTab = "Entries");

				CommerceRelations.assignSingleRelationToProductsEntry(
					entryName = "MIN55861",
					title = "Add SKUs");
			}
		}

		task ("And the admin enables the toggle 'Price on Application' for the SKU on the Test Price List 1") {
			CommercePriceLists.openPriceListsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test Price List 1");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceNavigator.gotoEntry(entryName = "MIN55861");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceSKUs.setSkuPricing(priceOnApplication = "true");

			Button.clickSave();
		}

		task ("When the buyer navigates to the Minium Catalog page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("Then the product is marked as Price on Application") {
			AssertElementPresent(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_PRICE_ON_APPLICATION");
		}

		task ("But if the admin inverts the priority for the two price lists created before") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			CommercePriceLists.openPriceListsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test Price List 1");

			Type(
				locator1 = "CommerceEntry#PRIORITY_FIELD",
				value1 = 0);

			Button.click(button = "Publish");

			CommercePriceLists.openPriceListsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test Price List 2");

			Type(
				locator1 = "CommerceEntry#PRIORITY_FIELD",
				value1 = 1);

			Button.click(button = "Publish");
		}

		task ("Then the product is not marked as Price on Application") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			AssertElementNotPresent(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_PRICE_ON_APPLICATION");
		}
	}

	@description = "COMMERCE-11727 As an admin user, I want to be able to override a Price on Application' set for the sku with a promotion"
	@priority = 5
	test CanPromotionPriceOverrideSkuPriceOnApplicationSet {
		property portal.acceptance = "true";

		task ("Given the admin navigates to a product's sku details") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "U-Joint");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoTableListEntry(entryName = "MIN55861");
		}

		task ("And the admin marks the sku as 'Price on Application'") {
			CommerceSKUs.editSkuPricing(priceOnApplication = "true");
		}

		task ("When a new price list and promotion are created") {
			CommerceJSONPriceListsAndPromotionsAPI._addPriceList(
				catalogName = "Minium",
				currencyCode = "USD",
				priceListName = "Test Price List");

			CommerceJSONPriceListsAndPromotionsAPI._addPromotion(
				catalogName = "Minium",
				currencyCode = "USD",
				promotionName = "Test Promotion");
		}

		task ("And a price list and promotion entries are created for the same sku") {
			CommerceJSONPriceListsAndPromotionsAPI._addPriceListEntry(
				entryPrice = 20,
				priceListName = "Test Price List",
				productSKU = "MIN55861");

			CommerceJSONPriceListsAndPromotionsAPI._addPromotionEntry(
				entryPrice = 18,
				productSKU = "MIN55861",
				promotionName = "Test Promotion");
		}

		task ("Then the 18$ promo price inside the promotion is shown as the active price") {
			var key_productName = "U-Joint";

			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			AssertElementNotPresent(locator1 = "CommerceAccelerators#PRODUCT_CARD_PRICE_ON_APPLICATION");

			FrontStore.assertPromoPrice(
				basePrice = "20.00",
				productName = "U-Joint",
				promoPrice = "18.00");
		}
	}

	@description = "This is a test for COMMERCE-11708. Buyer can use Price on Application on Promotion with eligible account"
	@priority = 4
	test CanPromotionUsePriceOnApplicationAccountEligibility {
		property portal.acceptance = "false";

		task ("Given a second account with buyer 2 is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account 2",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer2@liferay.com",
				userFirstName = "Buyer2",
				userLastName = "User2",
				userRole = "Buyer",
				userScreenName = "buyeruser2",
				userSiteMembership = "Minium");
		}

		task ("And an Account Group is created and contains Account 2") {
			JSONAccountGroup.addAccountGroup(
				accountGroupDescription = "This is an Account Group.",
				accountGroupName = "Account Group Name");

			AccountGroups.openAccountGroupsAdmin();

			LexiconEntry.gotoEntry(rowEntry = "Account Group Name");

			AccountGroups.addAssignee(
				accountGroupName = "Account Group Name",
				assigneeNames = "Commerce Account 2");
		}

		task ("And MIN55861 is set as Price on Application on Minium Base Promotion") {
			CommercePromotions.openPromotionsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Base Promotion");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "MIN55861");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceSKUs.setSkuPricing(priceOnApplication = "true");

			Button.clickSave();
		}

		task ("And MIN55861 is set as Price on Application on Minium Base Price List") {
			CommercePriceLists.openPriceListsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Base Price List");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "MIN55861");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceSKUs.setSkuPricing(priceOnApplication = "true");

			Button.clickSave();
		}

		task ("And the admin sets a promo price for MIN55861 on the Test Promotion 1") {
			CommerceJSONPriceListsAndPromotionsAPI._addPromotion(
				catalogName = "Minium",
				currencyCode = "USD",
				promotionName = "Test Promotion 1");

			CommerceJSONPriceListsAndPromotionsAPI._addPromotionEntry(
				entryPrice = 10,
				productSKU = "MIN55861",
				promotionName = "Test Promotion 1");
		}

		task ("And the admin sets up the account eligibility for Commerce Account") {
			CommercePromotions.openPromotionsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test Promotion 1");

			CommerceEntry.gotoMenuTab(menuTab = "Eligibility");

			CommerceEntry.setEntryEligibility(accountsEligibility = "Commerce Account");
		}

		task ("When the buyer for Commerce Account navigates to the Minium Catalog page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("Then the SKU costs 10 USD of the promo instead of being price on application") {
			FrontStore.assertPromoPrice(
				basePrice = "Price on Application",
				productName = "U-Joint",
				promoPrice = "10.00");
		}

		task ("But if buyer2 for Commerce Account 2 navigates to the Minium Catalog page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer2@liferay.com");
		}

		task ("Then the product is marked as Price on Application") {
			AssertElementPresent(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_PRICE_ON_APPLICATION");
		}

		task ("When the admin sets up the account group eligibility for Account Group Name that contains Commerce Account 2") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			CommercePromotions.openPromotionsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test Promotion 1");

			CommerceEntry.gotoMenuTab(menuTab = "Eligibility");

			CommerceEntry.setEntryEligibility(accountGroupsEligibility = "Account Group Name");
		}

		task ("And buyer2 for Commerce Account 2 navigates to the Minium Catalog page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer2@liferay.com");
		}

		task ("Then the SKU costs 10 USD of the promo instead of being price on application") {
			FrontStore.assertPromoPrice(
				basePrice = "Price on Application",
				productName = "U-Joint",
				promoPrice = "10.00");
		}

		task ("But if the buyer for Commerce Account navigates to the Minium Catalog page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("Then the product is marked as Price on Application") {
			AssertElementPresent(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_PRICE_ON_APPLICATION");
		}
	}

	@description = "This is a test for COMMERCE-11710. Buyer can use Price on Application on Promotion with eligible channel"
	@priority = 4
	test CanPromotionUsePriceOnApplicationChannelEligibility {
		property portal.acceptance = "false";

		task ("Given a Minium 2 with account 2 is created and associated with the buyer") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(
				siteName = "Minium 2",
				siteTemplateName = "Minium");

			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account 2",
				accountType = "Business",
				createNewAccount = "true",
				existingUser = "true",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium 2");
		}

		task ("And MIN55861 is set as Price on Application on Minium Base Promotion") {
			CommercePromotions.openPromotionsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Base Promotion");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "MIN55861");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceSKUs.setSkuPricing(priceOnApplication = "true");

			Button.clickSave();
		}

		task ("And MIN55861 is set as Price on Application on Minium Base Price List") {
			CommercePriceLists.openPriceListsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Base Price List");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "MIN55861");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceSKUs.setSkuPricing(priceOnApplication = "true");

			Button.clickSave();
		}

		task ("And the admin sets a promo price for MIN55861 on the Test Promotion 1") {
			CommerceJSONPriceListsAndPromotionsAPI._addPromotion(
				catalogName = "Minium",
				currencyCode = "USD",
				promotionName = "Test Promotion 1");

			CommerceJSONPriceListsAndPromotionsAPI._addPromotionEntry(
				entryPrice = 10,
				productSKU = "MIN55861",
				promotionName = "Test Promotion 1");
		}

		task ("And the admin sets up the channel eligibility for Minium Portal") {
			CommercePromotions.openPromotionsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test Promotion 1");

			CommerceEntry.gotoMenuTab(menuTab = "Eligibility");

			CommerceEntry.setEntryEligibility(channelsEligibility = "Minium Portal");
		}

		task ("When the buyer navigates to the Minium Catalog page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("Then the SKU costs 10 USD of the promo instead of being price on application") {
			FrontStore.assertPromoPrice(
				basePrice = "Price on Application",
				productName = "U-Joint",
				promoPrice = "10.00");
		}

		task ("When the buyer navigates to the Minium 2 Catalog page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium-2");
		}

		task ("Then the product is marked as Price on Application") {
			AssertElementPresent(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_PRICE_ON_APPLICATION");
		}
	}

	@description = "This is a test for COMMERCE-11711. Buyer can use Price on Application on Promotion with eligible order type"
	@priority = 4
	test CanPromotionUsePriceOnApplicationOrderType {
		property portal.acceptance = "false";

		task ("Given two active order types are created") {
			for (var orderTypeNumber : list "1,2") {
				CommerceJSONOrdersAPI._addOrderType(
					active = "true",
					orderTypeDescription = "Test Order Type ${orderTypeNumber} Description",
					orderTypeName = "Order Type ${orderTypeNumber}");
			}
		}

		task ("And MIN55861 is set as Price on Application on Minium Base Promotion") {
			CommercePromotions.openPromotionsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Base Promotion");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "MIN55861");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceSKUs.setSkuPricing(priceOnApplication = "true");

			Button.clickSave();
		}

		task ("And MIN55861 is set as Price on Application on Minium Base Price List") {
			CommercePriceLists.openPriceListsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Base Price List");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "MIN55861");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceSKUs.setSkuPricing(priceOnApplication = "true");

			Button.clickSave();
		}

		task ("And the admin sets a promo price for MIN55861 on the Test Promotion 1") {
			CommerceJSONPriceListsAndPromotionsAPI._addPromotion(
				catalogName = "Minium",
				currencyCode = "USD",
				promotionName = "Test Promotion 1");

			CommerceJSONPriceListsAndPromotionsAPI._addPromotionEntry(
				entryPrice = 10,
				productSKU = "MIN55861",
				promotionName = "Test Promotion 1");
		}

		task ("And the admin sets up the order type eligibility for Order Type 1") {
			CommercePromotions.openPromotionsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test Promotion 1");

			CommerceEntry.gotoMenuTab(menuTab = "Eligibility");

			CommerceEntry.setEntryEligibility(orderTypesEligibility = "Order Type 1");
		}

		task ("When the buyer creates a new order using Order Type 1 from the pending orders page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceAcceleratorsInitializer.createNewOrderFromPendingOrders(orderType = "Order Type 1");
		}

		task ("Then the SKU costs 10 USD of the promo instead of being price on application") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/catalog");

			FrontStore.assertPromoPrice(
				basePrice = "Price on Application",
				productName = "U-Joint",
				promoPrice = "10.00");
		}

		task ("But if the buyer creates a new order using Order Type 2 from the pending orders page") {
			CommerceAcceleratorsInitializer.createNewOrderFromPendingOrders(orderType = "Order Type 2");
		}

		task ("Then the product is marked as Price on Application") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/catalog");

			AssertElementPresent(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_PRICE_ON_APPLICATION");
		}
	}

	@description = "COMMERCE-11324. As a buyer user, I can Request a Quote from the Product Details Page for a product whose SKU is marked as Price On Application."
	@priority = 5
	test CanRequestAQuoteFromProductDetailsPage {
		property portal.acceptance = "true";

		task ("Given the admin marks the sku of a product as 'Price on Application") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "U-Joint");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoTableListEntry(entryName = "MIN55861");

			CommerceSKUs.editSkuPricing(priceOnApplication = "true");
		}

		task ("When the buyer user navigates to U-Joint's product details page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceNavigator.gotoProductDetails(productName = "U-Joint");
		}

		task ("Then Request a Quote button is shown in the product details page together with add to cart button") {
			AssertElementPresent(
				key_text = "Request a Quote",
				locator1 = "Button#ANY_SECONDARY");

			AssertElementPresent(locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON_PRODUCT_DETAILS_PAGE");
		}

		task ("And the buyer can Request a Quote from the product details page") {
			Click(
				key_text = "Request a Quote",
				locator1 = "Button#ANY_SECONDARY");

			WaitForElementPresent(locator1 = "CommerceOrders#PENDING_ORDERS_ORDER_ID");

			var openOrderId = selenium.getText("CommerceOrders#PENDING_ORDERS_ORDER_ID");

			AssertTextEquals(
				locator1 = "CommerceOrders#PENDING_ORDERS_ORDER_ID",
				value1 = ${openOrderId});
		}
	}

	@description = "This is a test for COMMERCE-11683. Buyer can use Price on Application on Price List with default setting"
	@priority = 4
	test CanUsePriceOnApplicationOnPriceList {
		property portal.acceptance = "false";

		task ("When the admin enables the toggle 'Price on Application' for an SKU on the newly created Minium Base Price List") {
			CommercePriceLists.openPriceListsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Base Price List");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "MIN55861");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceSKUs.setSkuPricing(priceOnApplication = "true");

			Button.clickSave();
		}

		task ("Then all the other price-related functionality is disabled") {
			AssertElementPresent(locator1 = "CommerceEntry#PRICE_LISTS_PRICE_SETTINGS_DISABLED");
		}

		task ("When navigates to the Minium Catalog page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("Then the product is marked as Price on Application") {
			AssertElementPresent(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_PRICE_ON_APPLICATION");
		}
	}

	@description = "This is a test for COMMERCE-11707. Buyer can use Price on Application on Promotion with default setting"
	@priority = 4
	test CanUsePriceOnApplicationOnPromotion {
		property portal.acceptance = "false";

		task ("When the admin enables the toggle 'Price on Application' for an SKU on the newly created Minium Base Promotion") {
			CommercePromotions.openPromotionsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Base Promotion");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "MIN55861");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceSKUs.setSkuPricing(priceOnApplication = "true");

			Button.clickSave();
		}

		task ("Then all the other price-related functionality is disabled") {
			AssertElementPresent(locator1 = "CommerceEntry#PRICE_LISTS_PRICE_SETTINGS_DISABLED");
		}

		task ("When navigates to the Minium Catalog page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("Then the product is not marked as Price on Application, because Minium Base Price List wins over the promotion") {
			AssertElementNotPresent(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_PRICE_ON_APPLICATION");
		}

		task ("When the admin logs in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "test@liferay.com");
		}

		task ("And sets MIN55861 as Price on Application also on Minium Base Price List") {
			CommercePriceLists.openPriceListsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Base Price List");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "MIN55861");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceSKUs.setSkuPricing(priceOnApplication = "true");

			Button.clickSave();
		}

		task ("And the buyer navigates to the Minium Catalog page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("Then the product is finally marked as Price on Application") {
			AssertElementPresent(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_PRICE_ON_APPLICATION");
		}
	}

	@description = "COMMERCE-12211. The admin can view Price on Application column in the SKU's Price Lists tab via the Products admin page"
	@priority = 5
	test CanViewPriceOnApplicationColumnInSKUPriceListsTabViaProductsAdmin {
		property portal.acceptance = "true";

		task ("Given a new price list and promotion are created") {
			CommerceJSONPriceListsAndPromotionsAPI._addPriceList(
				catalogName = "Minium",
				currencyCode = "USD",
				priceListName = "Test Price List");

			CommerceJSONPriceListsAndPromotionsAPI._addPromotion(
				catalogName = "Minium",
				currencyCode = "USD",
				promotionName = "Test Promotion");
		}

		task ("And a price list and promotion entries are created for product U-Joint(sku MIN55861)") {
			CommerceJSONPriceListsAndPromotionsAPI._addPriceListEntry(
				entryPrice = 20,
				priceListName = "Test Price List",
				productSKU = "MIN55861");

			CommerceJSONPriceListsAndPromotionsAPI._addPromotionEntry(
				entryPrice = 0,
				productSKU = "MIN55861",
				promotionName = "Test Promotion");
		}

		task ("When the admin navigates to the U-Joint's sku details via the Products admin page") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "U-Joint");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoTableListEntry(entryName = "MIN55861");
		}

		task ("And goes to the Price Lists tab") {
			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceEntry.gotoMenuTab(menuTab = "Price Lists");
		}

		task ("Then the Price on Application column is shown") {
			AssertElementPresent(
				key_column = "Price on Application",
				locator1 = "ObjectPortlet#ENTRY_COLUMN");
		}

		task ("And all the default values under the column are 'No'") {
			for (var priceListName : list "Minium Base Price List,Minium Base Promotion,Test Price List,Test Promotion") {
				AssertElementPresent(
					key_entryTitle = ${priceListName},
					key_index = 3,
					key_value = "No",
					locator1 = "CommerceEntry#TABLE_ENTRY_FIELD_VALUE");
			}
		}

		task ("When enabling the Price on Application under the new price list entry") {
			CommercePriceLists.openPriceListsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test Price List");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceNavigator.gotoTableListEntry(entryName = "MIN55861");

			CommerceSKUs.editSkuPricing(priceOnApplication = "true");
		}

		task ("And enabling the Price on Application under the new promotion entry") {
			CommercePromotions.openPromotionsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test Promotion");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceNavigator.gotoTableListEntry(entryName = "MIN55861");

			CommerceSKUs.editSkuPricing(priceOnApplication = "true");
		}

		task ("And the admin goes back to the U-Joint SKU's Price Lists tab under the Products admin") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "U-Joint");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoTableListEntry(entryName = "MIN55861");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceEntry.gotoMenuTab(menuTab = "Price Lists");
		}

		task ("Then the Price on Application column values for the new price list and promotion entries are 'Yes'") {
			for (var priceListName : list "Minium Base Price List,Minium Base Promotion") {
				AssertElementPresent(
					key_entryTitle = ${priceListName},
					key_index = 3,
					key_value = "No",
					locator1 = "CommerceEntry#TABLE_ENTRY_FIELD_VALUE");
			}

			for (var priceListName : list "Test Price List,Test Promotion") {
				AssertElementPresent(
					key_entryTitle = ${priceListName},
					key_index = 3,
					key_value = "Yes",
					locator1 = "CommerceEntry#TABLE_ENTRY_FIELD_VALUE");
			}
		}
	}

	@description = "COMMERCE-12210. The admin can view Price on Application column in the SKU's Price Lists tab via the SKU admin page"
	@priority = 5
	test CanViewPriceOnApplicationColumnInSKUPriceListsTabViaSKUsAdmin {
		property portal.acceptance = "true";

		task ("Given a new price list and promotion are created") {
			CommerceJSONPriceListsAndPromotionsAPI._addPriceList(
				catalogName = "Minium",
				currencyCode = "USD",
				priceListName = "Test Price List");

			CommerceJSONPriceListsAndPromotionsAPI._addPromotion(
				catalogName = "Minium",
				currencyCode = "USD",
				promotionName = "Test Promotion");
		}

		task ("And a price list and promotion entries are created for product U-Joint(sku MIN55861)") {
			CommerceJSONPriceListsAndPromotionsAPI._addPriceListEntry(
				entryPrice = 20,
				priceListName = "Test Price List",
				productSKU = "MIN55861");

			CommerceJSONPriceListsAndPromotionsAPI._addPromotionEntry(
				entryPrice = 0,
				productSKU = "MIN55861",
				promotionName = "Test Promotion");
		}

		task ("When the admin navigates to the U-Joint's sku details via the SKUs admin page") {
			CommerceProducts.openProductsAdmin();

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "MIN55861");
		}

		task ("And goes to the Price Lists tab") {
			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceEntry.gotoMenuTab(menuTab = "Price Lists");
		}

		task ("Then the Price on Application column is shown") {
			AssertElementPresent(
				key_column = "Price on Application",
				locator1 = "ObjectPortlet#ENTRY_COLUMN");
		}

		task ("And all the default values under the column are 'No'") {
			for (var priceListName : list "Minium Base Price List,Minium Base Promotion,Test Price List,Test Promotion") {
				AssertElementPresent(
					key_entryTitle = ${priceListName},
					key_index = 3,
					key_value = "No",
					locator1 = "CommerceEntry#TABLE_ENTRY_FIELD_VALUE");
			}
		}

		task ("When enabling the Price on Application under the new price list entry") {
			CommercePriceLists.openPriceListsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test Price List");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceNavigator.gotoTableListEntry(entryName = "MIN55861");

			CommerceSKUs.editSkuPricing(priceOnApplication = "true");
		}

		task ("And enabling the Price on Application under the new promotion entry") {
			CommercePromotions.openPromotionsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test Promotion");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceNavigator.gotoTableListEntry(entryName = "MIN55861");

			CommerceSKUs.editSkuPricing(priceOnApplication = "true");
		}

		task ("And the admin goes back to the U-Joint SKU's Price Lists tab under the SKUs admin") {
			CommerceProducts.openProductsAdmin();

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "MIN55861");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceEntry.gotoMenuTab(menuTab = "Price Lists");
		}

		task ("Then the Price on Application column values for the new price list and promotion entries are 'Yes'") {
			for (var priceListName : list "Minium Base Price List,Minium Base Promotion") {
				AssertElementPresent(
					key_entryTitle = ${priceListName},
					key_index = 3,
					key_value = "No",
					locator1 = "CommerceEntry#TABLE_ENTRY_FIELD_VALUE");
			}

			for (var priceListName : list "Test Price List,Test Promotion") {
				AssertElementPresent(
					key_entryTitle = ${priceListName},
					key_index = 3,
					key_value = "Yes",
					locator1 = "CommerceEntry#TABLE_ENTRY_FIELD_VALUE");
			}
		}
	}

	@description = "COMMERCE-11619. As a buyer user, I can verify that the Price on Application label is visible on the storefront for a product SKU marked as Price on Application."
	@priority = 5
	test CanViewPriceOnApplicationLabelOnStoreFront {
		property portal.acceptance = "true";

		task ("Given the admin navigates to a product's sku details") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "U-Joint");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoTableListEntry(entryName = "MIN55861");
		}

		task ("When the admin marks the sku as 'Price on Application'") {
			CommerceSKUs.editSkuPricing(priceOnApplication = "true");
		}

		task ("Then 'Price on Application' is shown as the active price both on the product card and product details page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			AssertElementPresent(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_PRICE_ON_APPLICATION");

			CommerceNavigator.gotoProductDetails(productName = "U-Joint");

			AssertElementPresent(locator1 = "CommerceAccelerators#PRODUCT_DETAILS_PRICE_ON_APPLICATION");
		}

		task ("When the buyer adds a product with a base price and the one marked as 'Price on Application' to the cart") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/catalog");

			for (var productName : list "U-Joint,Transmission Cooler Line Assembly") {
				FrontStore.addInitializerProductToCart(
					productName = ${productName},
					productQuantity = 1);
			}
		}

		task ("Then 'Price on Application' label is shown in the Mini Cart for the specific product with an info alert and Submit button is disabled") {
			CommerceNavigator.gotoMiniCart();

			AssertElementPresent(
				key_cartItemSku = "MIN55861",
				locator1 = "CommerceAccelerators#MINI_CART_ITEM_PRICE_ON_APPLICATION");

			AssertElementPresent(
				key_infoMessage = "Your cart has products that require a quote to complete the checkout.",
				locator1 = "Message#INFO_SPECIFIC");

			AssertElementPresent(
				key_text = "Submit",
				locator1 = "Button#ANY_DISABLED");
		}

		task ("When the buyer clicks Request A Quote button navigating directly to the Open Order's Details Page") {
			Button.click(button = "Request a Quote");
		}

		task ("Then 'Price on Application' label is shown for the order item on the Open Order's Details Page") {
			AssertTextEquals(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#ORDER_DETAILS_UNIT_PRICE",
				value1 = "Price on Application");

			AssertTextEquals(
				key_productName = "Transmission Cooler Line Assembly",
				locator1 = "CommerceAccelerators#ORDER_DETAILS_UNIT_PRICE",
				value1 = "$ 15.00");
		}
	}

}