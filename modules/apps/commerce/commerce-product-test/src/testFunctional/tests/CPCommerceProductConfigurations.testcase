@component-name = "portal-commerce"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=";
	property portal.release = "true";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Product Info Management";

	setUp {
		CommerceConfiguration.commerceSetUp(
			minium = "true",
			storeFront = "true");
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "This is a test for COMMERCE-10560. Allowed quantities can be added to the cart when order quantity is higher than the stock quantity and back order is enabled"
	@priority = 5
	test CanAddToCartAllowedQuantitiesWhenOrderItemQuantityIsHigherThanStockQuantityAndBackOrderIsEnabled {
		property portal.acceptance = "true";

		task ("Given an account with a buyer user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And the warehouse quantity for the product is set to 1") {
			var warehouseList = "1:Italy,0:United States - Southwest,0:United States - Northeast";

			for (var warehouse : list ${warehouseList}) {
				var warehouseName = StringUtil.extractLast(${warehouse}, ":");
				var warehouseQuantity = StringUtil.extractFirst(${warehouse}, ":");

				CommerceJSONWarehousesAndInventoriesAPI._patchWarehouseItem(
					productSku = "MIN55861",
					quantity = ${warehouseQuantity},
					warehouseName = ${warehouseName});
			}
		}

		task ("And Allowed Quantities field is set to 2,3,6 and Allow Back Order is enabled") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				allowBackOrder = "true",
				allowedOrderQuantities = "2,3,6",
				productName = "U-Joint");
		}

		task ("And buyer user logs in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("When buyer user adds allowed quantities to the cart") {
			FrontStore.addInitializerProductToCart(
				allowedQuantities = 2,
				productName = "U-Joint");

			CommerceNavigator.gotoMiniCart();

			FrontStore.assertMiniCartItemAllowedQuantities(
				allowedQuantities = "2,3,6",
				cartItemSku = "MIN55861");

			FrontStore.viewMiniCart(
				cartSummaryQuantity = 2,
				cartSummarySubtotal = "48.00",
				cartSummaryTotal = "48.00");

			for (var quantity : list "3,6") {
				Select(
					key_cartItemSku = "MIN55861",
					locator1 = "CommerceAccelerators#MINI_CART_ITEM_QUANTITY_SELECTOR_SELECT_FIELD",
					value1 = ${quantity});

				var subtotal = 24 * ${quantity};

				FrontStore.viewMiniCart(
					cartSummaryQuantity = ${quantity},
					cartSummarySubtotal = "${subtotal}.00",
					cartSummaryTotal = "${subtotal}.00");
			}

			CommerceCheckout.gotoCheckoutViaMiniCart();
		}

		task ("Then buyer user can do the checkout with the quantity higher than the stock quantity") {
			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = 6,
				productUnitPrice = 24,
				shippingMethod = "Standard");
		}
	}

	@description = "This is a test for COMMERCE-10560. Allowed quantities can be added to the cart when order quantity is lower than the stock quantity and back order is enabled"
	@priority = 5
	test CanAddToCartAllowedQuantitiesWhenOrderItemQuantityIsLowerThanStockQuantityAndBackOrderIsEnabled {
		property portal.acceptance = "true";

		task ("Given an account with a buyer user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And the warehouse quantity for the product is set to 7") {
			var warehouseList = "1:Italy,3:United States - Southwest,3:United States - Northeast";

			for (var warehouse : list ${warehouseList}) {
				var warehouseName = StringUtil.extractLast(${warehouse}, ":");
				var warehouseQuantity = StringUtil.extractFirst(${warehouse}, ":");

				CommerceJSONWarehousesAndInventoriesAPI._patchWarehouseItem(
					productSku = "MIN55861",
					quantity = ${warehouseQuantity},
					warehouseName = ${warehouseName});
			}
		}

		task ("And Allowed Quantities field is set to 2,3,6 and Allow Back Order is enabled") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				allowBackOrder = "true",
				allowedOrderQuantities = "2,3,6",
				productName = "U-Joint");
		}

		task ("And buyer user logs in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("When buyer user adds allowed quantities to the cart") {
			FrontStore.addInitializerProductToCart(
				allowedQuantities = 3,
				productName = "U-Joint");

			CommerceNavigator.gotoMiniCart();

			FrontStore.assertMiniCartItemAllowedQuantities(
				allowedQuantities = "2,3,6",
				cartItemSku = "MIN55861");

			FrontStore.viewMiniCart(
				cartSummaryQuantity = 3,
				cartSummarySubtotal = "72.00",
				cartSummaryTotal = "72.00");

			for (var quantity : list "6,2") {
				Select(
					key_cartItemSku = "MIN55861",
					locator1 = "CommerceAccelerators#MINI_CART_ITEM_QUANTITY_SELECTOR_SELECT_FIELD",
					value1 = ${quantity});

				var subtotal = 24 * ${quantity};

				FrontStore.viewMiniCart(
					cartSummaryQuantity = ${quantity},
					cartSummarySubtotal = "${subtotal}.00",
					cartSummaryTotal = "${subtotal}.00");
			}

			CommerceCheckout.gotoCheckoutViaMiniCart();
		}

		task ("And buyer user can do the checkout with the quantity lower than the stock quantity") {
			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = 2,
				productUnitPrice = 24,
				shippingMethod = "Standard");
		}

		task ("Then the product can still be added to the cart and buyer user can place a second order") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

			FrontStore.addInitializerProductToCart(
				allowedQuantities = 6,
				productName = "U-Joint");

			CommerceCheckout.gotoCheckoutViaMiniCart();

			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = 6,
				productUnitPrice = 24,
				shippingMethod = "Standard");
		}
	}

	@description = "This is a test for COMMERCE-10542. Maximum quantity can be added to the cart when order quantity is higher than the stock quantity and when back order is enabled"
	@priority = 5
	test CanAddToCartMaximumProductQuantityWhenOrderItemQuantityIsHigherThanStockQuantityAndBackOrderIsEnabled {
		property portal.acceptance = "true";

		task ("Given an account with a buyer user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And the warehouse quantity for the product is set to 6") {
			for (var warehouseName : list "Italy,United States - Northeast,United States - Southwest") {
				CommerceJSONWarehousesAndInventoriesAPI._patchWarehouseItem(
					productSku = "MIN55861",
					quantity = 2,
					warehouseName = ${warehouseName});
			}
		}

		task ("And maximum quantity is set to 8 and Allow Back Order is enabled") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				maxOrderQuantity = 8,
				productName = "U-Joint");

			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				allowBackOrder = "true",
				productName = "U-Joint");
		}

		task ("And buyer user logs in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("When buyer user adds maximum quantity to the cart") {
			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 8);

			CommerceCheckout.gotoCheckoutViaMiniCart();
		}

		task ("Then buyer user can do the checkout with the quantity higher than the stock quantity") {
			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = 8,
				productUnitPrice = 24,
				shippingMethod = "Standard");
		}
	}

	@description = "This is a test for COMMERCE-10542. Maximum quantity can be added to the cart when order quantity is lower than stock quantity and back order is enabled"
	@priority = 5
	test CanAddToCartMaximumProductQuantityWhenOrderItemQuantityIsLowerThanStockQuantityAndBackOrderIsEnabled {
		property portal.acceptance = "true";

		task ("Given an account with a buyer user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And the warehouse quantity for the product is set to 6") {
			for (var warehouseName : list "Italy,United States - Northeast,United States - Southwest") {
				CommerceJSONWarehousesAndInventoriesAPI._patchWarehouseItem(
					productSku = "MIN55861",
					quantity = 2,
					warehouseName = ${warehouseName});
			}
		}

		task ("And maximum quantity is set to 4 and Allow Back Order is enabled") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				maxOrderQuantity = 4,
				productName = "U-Joint");

			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				allowBackOrder = "true",
				productName = "U-Joint");
		}

		task ("And buyer user logs in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("When buyer user adds maximum quantity to the cart") {
			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 4);

			CommerceCheckout.gotoCheckoutViaMiniCart();
		}

		task ("And buyer user can do the checkout with the quantity lower than the stock quantity") {
			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = 4,
				productUnitPrice = 24,
				shippingMethod = "Standard");
		}

		task ("Then the product can still be added to the cart and buyer user can place a second order") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 4);

			CommerceCheckout.gotoCheckoutViaMiniCart();

			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = 4,
				productUnitPrice = 24,
				shippingMethod = "Standard");
		}
	}

	@description = "This is a test for COMMERCE-10503. Minimum quantity can be added to the cart when order quantity is higher then the stock quantity and back order is enabled"
	@priority = 5
	test CanAddToCartMinimumProductQuantityWhenOrderItemQuantityIsHigherThanStockQuantityAndBackOrderIsEnabled {
		property portal.acceptance = "true";

		task ("Given an account with a buyer user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And the warehouse quantity for the product is set to 6") {
			for (var warehouseName : list "Italy,United States - Northeast,United States - Southwest") {
				CommerceJSONWarehousesAndInventoriesAPI._patchWarehouseItem(
					productSku = "MIN55861",
					quantity = 2,
					warehouseName = ${warehouseName});
			}
		}

		task ("And minimum quantity is set to 8 and Allow Back Order is enabled") {
			CommerceProducts.openProductsAdmin();

			CommerceNavigator.searchEntry(entryName = "U-Joint");

			CommerceNavigator.gotoEntry(entryName = "U-Joint");

			CommerceEntry.gotoMenuTab(menuTab = "Configuration");

			CommerceProducts.updateProductInventoryConfiguration(
				allowBackOrders = "true",
				displayAvailability = "true",
				displayStockQuantity = "true",
				minOrderQuantity = 8,
				publish = "true");
		}

		task ("And buyer user logs in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("When buyer user adds minimum quantity to the cart") {
			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 8);

			CommerceCheckout.gotoCheckoutViaMiniCart();
		}

		task ("Then buyer user can do the checkout with the quantity higher then the stock quantity") {
			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = 8,
				productUnitPrice = 24,
				shippingMethod = "Standard");
		}
	}

	@description = "This is a test for COMMERCE-10503. Minimum quantity can be added to the cart when order quantity is lower than the stock quantity and back order is enabled"
	@priority = 5
	test CanAddToCartMinimumProductQuantityWhenOrderItemQuantityIsLowerThanStockQuantityAndBackOrderIsEnabled {
		property portal.acceptance = "true";

		task ("Given an account with a buyer user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And the warehouse quantity for the product is set to 6") {
			for (var warehouseName : list "Italy,United States - Northeast,United States - Southwest") {
				CommerceJSONWarehousesAndInventoriesAPI._patchWarehouseItem(
					productSku = "MIN55861",
					quantity = 2,
					warehouseName = ${warehouseName});
			}
		}

		task ("And minimum quantity is set to 4 and Allow Back Order is enabled") {
			CommerceProducts.openProductsAdmin();

			CommerceNavigator.searchEntry(entryName = "U-Joint");

			CommerceNavigator.gotoEntry(entryName = "U-Joint");

			CommerceEntry.gotoMenuTab(menuTab = "Configuration");

			CommerceProducts.updateProductInventoryConfiguration(
				allowBackOrders = "true",
				displayAvailability = "true",
				displayStockQuantity = "true",
				minOrderQuantity = 4,
				publish = "true");
		}

		task ("And buyer user logs in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("When buyer user adds minimum quantity to the cart") {
			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 4);

			CommerceCheckout.gotoCheckoutViaMiniCart();
		}

		task ("And buyer user does the checkout with the quantity higher then the stock quantity") {
			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = 4,
				productUnitPrice = 24,
				shippingMethod = "Standard");
		}

		task ("Then the product can still be added to the cart and buyer user can place a second order") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 4);

			CommerceCheckout.gotoCheckoutViaMiniCart();

			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = 4,
				productUnitPrice = 24,
				shippingMethod = "Standard");
		}
	}

	@description = "This is a test for COMMERCE-10559. Multiple quantities can be added to the cart when order quantity is higher than the stock quantity and back order is enabled"
	@priority = 5
	test CanAddToCartMultipleProductQuantityWhenOrderItemQuantityIsHigherThanStockQuantityAndBackOrderIsEnabled {
		property portal.acceptance = "true";

		task ("Given an account with a buyer user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And the warehouse quantity for the product is set to 6") {
			for (var warehouseName : list "Italy,United States - Northeast,United States - Southwest") {
				CommerceJSONWarehousesAndInventoriesAPI._patchWarehouseItem(
					productSku = "MIN55861",
					quantity = 2,
					warehouseName = ${warehouseName});
			}
		}

		task ("And multiple quantity is set to 8 and Allow Back Order is enabled") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				multipleOrderQuantity = 8,
				productName = "U-Joint");

			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				allowBackOrder = "true",
				productName = "U-Joint");
		}

		task ("And buyer user logs in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("When buyer user adds multiple quantity to the cart") {
			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 8);

			CommerceCheckout.gotoCheckoutViaMiniCart();
		}

		task ("Then buyer user can do the checkout with the quantity higher than the stock quantity") {
			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = 8,
				productUnitPrice = 24,
				shippingMethod = "Standard");
		}
	}

	@description = "This is a test for COMMERCE-10559. Multiple quantities can be added to the cart when order quantity is lower than the stock quantity and back order is enabled"
	@priority = 5
	test CanAddToCartMultipleProductQuantityWhenOrderItemQuantityIsLowerThanStockQuantityAndBackOrderIsEnabled {
		property portal.acceptance = "true";

		task ("Given an account with a buyer user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And the warehouse quantity for the product is set to 6") {
			for (var warehouseName : list "Italy,United States - Northeast,United States - Southwest") {
				CommerceJSONWarehousesAndInventoriesAPI._patchWarehouseItem(
					productSku = "MIN55861",
					quantity = 2,
					warehouseName = ${warehouseName});
			}
		}

		task ("And multiple quantity is set to 4 and Allow Back Order is enabled") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				multipleOrderQuantity = 4,
				productName = "U-Joint");

			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				allowBackOrder = "true",
				productName = "U-Joint");
		}

		task ("And buyer user logs in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("When buyer user adds multiple quantity to the cart") {
			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 4);

			CommerceCheckout.gotoCheckoutViaMiniCart();
		}

		task ("And buyer user can do the checkout with the quantity lower than the stock quantity") {
			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = 4,
				productUnitPrice = 24,
				shippingMethod = "Standard");
		}

		task ("Then the product can still be added to the cart and buyer user can place a second order") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Catalog");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 4);

			CommerceCheckout.gotoCheckoutViaMiniCart();

			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = 4,
				productUnitPrice = 24,
				shippingMethod = "Standard");
		}
	}

	@description = "This is a test for COMMERCE-12144. Decimal minimum quantity configuration can be saved and viewed on the quantity selector from the Minium catalog page"
	@priority = 5
	test CanDecimalMinimumOrderQuantityBetweenZeroAndOneBeAccepted {
		property portal.acceptance = "true";

		task ("Given the admin navigates to the product's configuration page") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "ABS Sensor");

			CommerceEntry.gotoMenuTab(menuTab = "Configuration");
		}

		task ("When the admin configures the minimum order quantity to be decimal and negative") {
			CommerceProducts.updateProductInventoryConfiguration(minOrderQuantity = "-0.5");
		}

		task ("Then an error message is shown under the Minimum Order Quantity field") {
			AssertTextEquals.assertPartialText(
				key_alertMessage = "Please enter a value greater than 0.",
				key_fieldLabel = "Minimum",
				locator1 = "Message#ERROR_WITH_SPECIFIC_ENTRY",
				value1 = "Please enter a value greater than 0.");
		}

		task ("When the admin configures the minimum order quantity to be a decimal between zero and one") {
			CommerceProducts.updateProductInventoryConfiguration(minOrderQuantity = "0.5");
		}

		task ("Then the configuration is saved successfully") {
			AssertElementPresent(locator1 = "Message#SUCCESS");
		}

		task ("When the admin navigates to the minium catalog page looking for the product card") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/catalog");

			CommerceAcceleratorsInitializer.changeProductsSorting(sortingType = "Name Ascending");
		}

		task ("Then the quantity selector shows the configured decimal quantity for that product") {
			AssertTextEquals(
				key_productName = "ABS Sensor",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_QUANTITY_SELECTOR_INPUT_FIELD",
				value1 = "0.5");
		}
	}

	@description = "This is a test for COMMERCE-11480. CanLocaleBePrependedForProductOnSiteMapPage. Verify the /en/ is added for the URLs inside the sitemap"
	@priority = 5
	test CanLocaleBePrependedForProductOnSiteMapPage {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given the localization for the Friendly URL is changed") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Localization",
				configurationName = "Locale Prepend Friendly URL Style",
				configurationScope = "Virtual Instance Scope");

			Select(
				locator1 = "Select#ANY_ID",
				selectId = "friendly-url-style",
				value1 = "Locale is automatically prepended to every URL.");

			PortalSettings._saveDisplaySettings();
		}

		task ("Given an account is created") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Commerce",
				accountEntryType = "Business");
		}

		task ("And a new widget page with the Category Content is created") {
			JSONLayout.addPublicLayout(
				groupName = "Minium",
				layoutName = "Widget Page");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Minium",
				layoutName = "Widget Page",
				widgetName = "Category Content");
		}

		task ("And a category friendly URL is translated") {
			Category.openCategoriesAdmin(siteURLKey = "global");

			Navigator.gotoNavNested(navNested = "Minium");

			LexiconEntry.gotoEntryMenuItem(
				menuItem = "Edit",
				rowEntry = "Brake System");

			Navigator.gotoNavUnderline(navUnderline = "Friendly URL");

			PortletEntry.changeLocale(
				fieldName = "Friendly URL",
				locale = "ca-ES");

			Type(
				key_fieldLabel = "Friendly URL",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "system-brake-es");

			PortletEntry.save();
		}

		task ("And a product's name and friendly URL are translated") {
			CommerceProducts.openProductsAdmin();

			CommerceNavigator.searchEntry(entryName = "ABS Sensor");

			CommerceNavigator.gotoEntry(entryName = "ABS Sensor");

			PortletEntry.changeLocale(
				fieldName = "Name",
				locale = "ca-ES");

			Type(
				locator1 = "TextInput#NAME",
				value1 = "Sensor ABS");

			PortletEntry.changeLocale(
				fieldName = "Friendly URL",
				locale = "ca-ES");

			Type(
				key_fieldLabel = "Friendly URL",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "sensor-abs");

			Button.clickPublish();
		}

		task ("And Uuid of the product is acquired") {
			var groupId = JSONGroupAPI._getGroupIdByName(
				groupName = "Minium",
				site = "true");
			var basePortalURL = PropsUtil.get("portal.url");

			Open.openNoError(locator1 = "${basePortalURL}/sitemap.xml?groupId=${groupId}");

			var responseToParse = CommerceJSONProductsAPI._getCommerceFieldValue(
				field = "uuid",
				groupName = "Minium",
				title = "Product Detail");
		}

		task ("When the Product Detail page sitemap link is opened") {
			var uuid = JSONUtil.getWithJSONPath(${responseToParse}, "$..['items'][0].uuid");

			var link = selenium.getHtmlNodeText("//*[contains(text(),'${uuid}')][1]");

			Open.openNoErrorNoSPARefresh(locator1 = ${link});
		}

		task ("Then the default and translated product's friendly URL are shown with the Locale language") {
			for (var productNameList : list "abs-sensor:en,sensor-abs:ca") {
				var productName = StringUtil.extractFirst(${productNameList}, ":");
				var productNameLanguage = StringUtil.extractLast(${productNameList}, ":");

				AssertElementPresent.assertElementPresentNoWaitForSPAReFresh(
					key_basePortalURL = ${basePortalURL},
					key_language = ${productNameLanguage},
					key_productName = ${productName},
					locator1 = "CommerceEntry#PRODUCT_LANGUAGE_DETAIL_SITEMAP_URL");
			}

			for (var productURLName : list "abs-sensor,sensor-abs") {
				for (var productNameList : list "abs-sensor:en-US,sensor-abs:ca-ES") {
					var productName = StringUtil.extractFirst(${productNameList}, ":");
					var productNameLang = StringUtil.extractLast(${productNameList}, ":");

					if (${productURLName} == "abs-sensor") {
						if (${productName} == "sensor-abs") {
							var productLanguage = "/ca";

							AssertElementPresent.assertElementPresentNoWaitForSPAReFresh(
								key_basePortalURL = ${basePortalURL},
								key_languageHref = ${productLanguage},
								key_languageLoc = "/en",
								key_productName = ${productName},
								key_productNameLang = ${productNameLang},
								key_productURLName = ${productURLName},
								locator1 = "CommerceEntry#PRODUCT_LANGUAGE_DETAIL_SITEMAP_URL_HREF_HREFLANG");
						}
						else {
							AssertElementPresent.assertElementPresentNoWaitForSPAReFresh(
								key_basePortalURL = ${basePortalURL},
								key_languageHref = "/en",
								key_languageLoc = "/en",
								key_productName = ${productName},
								key_productNameLang = ${productNameLang},
								key_productURLName = ${productURLName},
								locator1 = "CommerceEntry#PRODUCT_LANGUAGE_DETAIL_SITEMAP_URL_HREF_HREFLANG");
						}
					}
					else {
						if (${productName} == "sensor-abs") {
							var productLanguage = "/ca";

							AssertElementPresent.assertElementPresentNoWaitForSPAReFresh(
								key_basePortalURL = ${basePortalURL},
								key_languageHref = ${productLanguage},
								key_languageLoc = ${productLanguage},
								key_productName = ${productName},
								key_productNameLang = ${productNameLang},
								key_productURLName = ${productURLName},
								locator1 = "CommerceEntry#PRODUCT_LANGUAGE_DETAIL_SITEMAP_URL_HREF_HREFLANG");
						}
						else {
							AssertElementPresent.assertElementPresentNoWaitForSPAReFresh(
								key_basePortalURL = ${basePortalURL},
								key_languageHref = "/en",
								key_languageLoc = ${productLanguage},
								key_productName = ${productName},
								key_productNameLang = ${productNameLang},
								key_productURLName = ${productURLName},
								locator1 = "CommerceEntry#PRODUCT_LANGUAGE_DETAIL_SITEMAP_URL_HREF_HREFLANG");
						}
					}
				}
			}

			Open.openNoErrorNoSPARefresh(locator1 = ${basePortalURL});
		}

		task ("When the Uuid of the widget is acquired") {
			var groupId = JSONGroupAPI._getGroupIdByName(
				groupName = "Minium",
				site = "true");
			var basePortalURL = PropsUtil.get("portal.url");

			Open.openNoError(locator1 = "${basePortalURL}/sitemap.xml?groupId=${groupId}");

			var responseToParse = CommerceJSONProductsAPI._getCommerceFieldValue(
				field = "uuid",
				groupName = "Minium",
				title = "Widget Page");
		}

		task ("And the Widget page sitemap link is opened") {
			var uuid = JSONUtil.getWithJSONPath(${responseToParse}, "$..['items'][0].uuid");

			var link = selenium.getHtmlNodeText("//*[contains(text(),'${uuid}')][1]");

			Open.openNoErrorNoSPARefresh(locator1 = ${link});
		}

		task ("Then the category friendly URL are shown with the Locale language") {
			for (var categoryNameList : list "brake-system:en,system-brake-es:ca") {
				var categoryName = StringUtil.extractFirst(${categoryNameList}, ":");
				var categoryNameLanguage = StringUtil.extractLast(${categoryNameList}, ":");

				AssertElementPresent.assertElementPresentNoWaitForSPAReFresh(
					key_basePortalURL = ${basePortalURL},
					key_categoryName = ${categoryName},
					key_language = ${categoryNameLanguage},
					locator1 = "CommerceEntry#CATEGORY_LANGUAGE_SITEMAP_URL");
			}

			for (var categoryURLName : list "brake-system,system-brake-es") {
				for (var categoryNameList : list "brake-system:en-US,system-brake-es:ca-ES") {
					var categoryName = StringUtil.extractFirst(${categoryNameList}, ":");
					var categoryNameLang = StringUtil.extractLast(${categoryNameList}, ":");

					if (${categoryURLName} == "brake-system") {
						if (${categoryName} == "system-brake-es") {
							var categoryLanguage = "/ca";

							AssertElementPresent.assertElementPresentNoWaitForSPAReFresh(
								key_basePortalURL = ${basePortalURL},
								key_categoryName = ${categoryName},
								key_categoryNameLang = ${categoryNameLang},
								key_categoryURLName = ${categoryURLName},
								key_languageHref = ${categoryLanguage},
								key_languageLoc = "/en",
								locator1 = "CommerceEntry#CATEGORY_LANGUAGE_SITEMAP_URL_HREF_HREFLANG");
						}
						else {
							AssertElementPresent.assertElementPresentNoWaitForSPAReFresh(
								key_basePortalURL = ${basePortalURL},
								key_categoryName = ${categoryName},
								key_categoryNameLang = ${categoryNameLang},
								key_categoryURLName = ${categoryURLName},
								key_languageHref = "/en",
								key_languageLoc = "/en",
								locator1 = "CommerceEntry#CATEGORY_LANGUAGE_SITEMAP_URL_HREF_HREFLANG");
						}
					}
					else {
						if (${categoryName} == "system-brake-es") {
							var categoryLanguage = "/ca";

							AssertElementPresent.assertElementPresentNoWaitForSPAReFresh(
								key_basePortalURL = ${basePortalURL},
								key_categoryName = ${categoryName},
								key_categoryNameLang = ${categoryNameLang},
								key_categoryURLName = ${categoryURLName},
								key_languageHref = ${categoryLanguage},
								key_languageLoc = ${categoryLanguage},
								locator1 = "CommerceEntry#CATEGORY_LANGUAGE_SITEMAP_URL_HREF_HREFLANG");
						}
						else {
							AssertElementPresent.assertElementPresentNoWaitForSPAReFresh(
								key_basePortalURL = ${basePortalURL},
								key_categoryName = ${categoryName},
								key_categoryNameLang = ${categoryNameLang},
								key_categoryURLName = ${categoryURLName},
								key_languageHref = "/en",
								key_languageLoc = ${categoryLanguage},
								locator1 = "CommerceEntry#CATEGORY_LANGUAGE_SITEMAP_URL_HREF_HREFLANG");
						}
					}
				}
			}

			Open.openNoErrorNoSPARefresh(locator1 = ${basePortalURL});
		}
	}

	@description = "This is a test for COMMERCE-11706. Verify that only one "/" is shown in the URLs inside the sitemap when Virtual Host is enabled."
	@priority = 5
	test CanLocaleBePrependedForProductOnSiteMapPageWhenVirtualHostIsEnabled {
		property custom.properties = "virtual.hosts.valid.hosts=localhost,127.0.0.1,www.able.com";
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given the localization for the Friendly URL is changed") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Localization",
				configurationName = "Locale Prepend Friendly URL Style",
				configurationScope = "Virtual Instance Scope");

			Select(
				locator1 = "Select#ANY_ID",
				selectId = "friendly-url-style",
				value1 = "Locale is automatically prepended to every URL.");

			PortalSettings._saveDisplaySettings();
		}

		task (" And an account is created") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Commerce",
				accountEntryType = "Business");
		}

		task ("And a new widget page with the Category Content is created") {
			JSONLayout.addPublicLayout(
				groupName = "Minium",
				layoutName = "Widget Page");

			JSONLayout.addWidgetToPublicLayout(
				groupName = "Minium",
				layoutName = "Widget Page",
				widgetName = "Category Content");
		}

		task ("And a product's name and friendly URL are translated") {
			CommerceProducts.openProductsAdmin();

			CommerceNavigator.searchEntry(entryName = "ABS Sensor");

			CommerceNavigator.gotoEntry(entryName = "ABS Sensor");

			PortletEntry.changeLocale(
				fieldName = "Name",
				locale = "ca-ES");

			Type(
				locator1 = "TextInput#NAME",
				value1 = "Sensor ABS");

			PortletEntry.changeLocale(
				fieldName = "Friendly URL",
				locale = "ca-ES");

			Type(
				key_fieldLabel = "Friendly URL",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "sensor-abs");

			Button.clickPublish();
		}

		task ("And public virtual host and private virtual host are defined") {
			Site.openSiteSettingsAdmin(siteURLKey = "Minium");

			Site.addVirtualHostsURLCP(
				pageVirtualHosts = "true",
				pageVirtualHostURL = "www.able.com");
		}

		task ("And the virtual host signs in to the page") {
			User.logoutPG();

			User.firstLoginUI(
				password = "test",
				specificURL = "http://www.able.com:8080",
				userEmailAddress = "test@liferay.com");
		}

		task ("And Uuid of the product is acquired") {
			var groupId = JSONGroupAPI._getGroupIdByName(
				groupName = "Minium",
				site = "true");

			Open.openNoError(locator1 = "http://www.able.com:8080/sitemap.xml?groupId=${groupId}");

			var responseToParse = CommerceJSONProductsAPI._getCommerceFieldValue(
				field = "uuid",
				groupName = "Minium",
				title = "Product Detail");
		}

		task ("When the Product Detail page sitemap link is opened") {
			var uuid = JSONUtil.getWithJSONPath(${responseToParse}, "$..['items'][0].uuid");

			var link = selenium.getHtmlNodeText("//*[contains(text(),'${uuid}')][1]");

			Open.openNoErrorNoSPARefresh(locator1 = ${link});
		}

		task ("Then the URLs are shown with only one /") {
			AssertElementPresent.assertElementPresentNoWaitForSPAReFresh(locator1 = "//*[text()='http://www.able.com:8080/ca/p/sensor-abs']");

			AssertElementPresent.assertElementPresentNoWaitForSPAReFresh(locator1 = "//*[text()='http://www.able.com:8080/en/p/abs-sensor']");
		}

		task ("And the admin goes back to portal") {
			var basePortalURL = PropsUtil.get("portal.url");

			Open.openNoErrorNoSPARefresh(locator1 = ${basePortalURL});
		}
	}

	@description = "This is a test for COMMERCE-10560. Allowed quantities cannot be added to the cart when order quantity is higher than the stock quantity and back order is disabled"
	@priority = 5
	test CannotAddToCartAllowedQuantitiesWhenOrderItemQuantityIsHigherThanStockQuantityAndBackOrderIsDisabled {
		property portal.acceptance = "true";

		task ("Given an account with a buyer user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And the warehouse quantity for the product is set to 5") {
			var warehouseList = "1:Italy,2:United States - Southwest,2:United States - Northeast";

			for (var warehouse : list ${warehouseList}) {
				var warehouseName = StringUtil.extractLast(${warehouse}, ":");
				var warehouseQuantity = StringUtil.extractFirst(${warehouse}, ":");

				CommerceJSONWarehousesAndInventoriesAPI._patchWarehouseItem(
					productSku = "MIN55861",
					quantity = ${warehouseQuantity},
					warehouseName = ${warehouseName});
			}
		}

		task ("And Allowed Quantities field is set to 6,8,10 and Allow Back Order is disabled") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				allowBackOrder = "false",
				allowedOrderQuantities = "6,8,10",
				productName = "U-Joint");
		}

		task ("And buyer user logs in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("When user tries to add the order in the MiniCart") {
			Select(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_QUANTITY_SELECTOR_SELECT_FIELD",
				value1 = 8);

			Click(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON");
		}

		task ("Then it's not possible to add the order item to the cart") {
			AssertTextEquals.assertText(
				locator1 = "Message#ERROR",
				value1 = "Danger:The specified quantity is unavailable.");
		}
	}

	@description = "This is a test for COMMERCE-10560. Allowed quantities can be added to the cart until there's stock quantity and back order is disabled"
	@priority = 5
	test CannotAddToCartAllowedQuantitiesWhenStockQuantityIsLessAndBackOrderIsDisabled {
		property portal.acceptance = "true";

		task ("Given an account with a buyer user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And the warehouse quantity for the product is set to 7") {
			var warehouseList = "1:Italy,3:United States - Southwest,3:United States - Northeast";

			for (var warehouse : list ${warehouseList}) {
				var warehouseName = StringUtil.extractLast(${warehouse}, ":");
				var warehouseQuantity = StringUtil.extractFirst(${warehouse}, ":");

				CommerceJSONWarehousesAndInventoriesAPI._patchWarehouseItem(
					productSku = "MIN55861",
					quantity = ${warehouseQuantity},
					warehouseName = ${warehouseName});
			}
		}

		task ("And Allowed Quantities field is set to 2,3,6 and Allow Back Order is disabled") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				allowBackOrder = "false",
				allowedOrderQuantities = "2,3,6",
				productName = "U-Joint");
		}

		task ("And buyer user logs in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("When buyer user adds allowed quantities to the cart") {
			FrontStore.addInitializerProductToCart(
				allowedQuantities = 2,
				productName = "U-Joint");

			CommerceNavigator.gotoMiniCart();

			FrontStore.assertMiniCartItemAllowedQuantities(
				allowedQuantities = "2,3,6",
				cartItemSku = "MIN55861");

			FrontStore.viewMiniCart(
				cartSummaryQuantity = 2,
				cartSummarySubtotal = "48.00",
				cartSummaryTotal = "48.00");

			for (var quantity : list "3,6") {
				Select(
					key_cartItemSku = "MIN55861",
					locator1 = "CommerceAccelerators#MINI_CART_ITEM_QUANTITY_SELECTOR_SELECT_FIELD",
					value1 = ${quantity});

				var subtotal = 24 * ${quantity};

				FrontStore.viewMiniCart(
					cartSummaryQuantity = ${quantity},
					cartSummarySubtotal = "${subtotal}.00",
					cartSummaryTotal = "${subtotal}.00");
			}

			CommerceCheckout.gotoCheckoutViaMiniCart();
		}

		task ("And buyer user can do the checkout with the quantity lower than the stock quantity") {
			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = 6,
				productUnitPrice = 24,
				shippingMethod = "Standard");
		}

		task ("Then the order item cannot be added to the cart in the Product Card") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/catalog");

			AssertElementPresent(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_UNAVAILABLE_LABEL");

			Click(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON");

			Alert.viewErrorMessage(errorMessage = "Danger:The specified quantity is unavailable.");
		}

		task ("And it's not possible to add the order item to the cart in the Product Details Page") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/u-joint");

			AssertElementPresent(
				key_availability = "Unavailable",
				locator1 = "CommerceFrontStore#FS_PRODUCT_AVAILABILITY");

			Click(locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON_PRODUCT_DETAILS_PAGE");

			Alert.viewErrorMessage(errorMessage = "Danger:The specified quantity is unavailable.");
		}
	}

	@description = "This is a test for COMMERCE-10542. Maximum quantity cannot be added to the cart when order quantity is higher than the stock quantity and back order is disabled"
	@priority = 5
	test CannotAddToCartMaximumProductQuantityWhenOrderItemQuantityIsHigherThanStockQuantityAndBackOrderIsDisabled {
		property portal.acceptance = "true";

		task ("Given an account with a buyer user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And the warehouse quantity for the product is set to 6") {
			for (var warehouseName : list "Italy,United States - Northeast,United States - Southwest") {
				CommerceJSONWarehousesAndInventoriesAPI._patchWarehouseItem(
					productSku = "MIN55861",
					quantity = 2,
					warehouseName = ${warehouseName});
			}
		}

		task ("And maximum quantity is set to 8 and Allow Back Order is disabled") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				maxOrderQuantity = 8,
				productName = "U-Joint");

			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				allowBackOrder = "false",
				productName = "U-Joint");
		}

		task ("And buyer user logs in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("When user tries to add the order in the MiniCart") {
			Type(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_QUANTITY_SELECTOR_INPUT_FIELD",
				value1 = 8);

			Click(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON");
		}

		task ("Then it's not possible to add the order item to the cart") {
			AssertTextEquals.assertText(
				locator1 = "Message#ERROR",
				value1 = "Danger:The specified quantity is unavailable.");
		}
	}

	@description = "This is a test for COMMERCE-10542. Maximum quantity can be added to the cart until there's stock quantity and back order is disabled"
	@priority = 5
	test CannotAddToCartMaximumProductQuantityWhenStockQuantityIsLessAndBackOrderIsDisabled {
		property portal.acceptance = "true";

		task ("Given an account with a buyer user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And the warehouse quantity for the product is set to 6") {
			for (var warehouseName : list "Italy,United States - Northeast,United States - Southwest") {
				CommerceJSONWarehousesAndInventoriesAPI._patchWarehouseItem(
					productSku = "MIN55861",
					quantity = 2,
					warehouseName = ${warehouseName});
			}
		}

		task ("And maximum quantity is set to 4 and Allow Back Order is disabled") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				maxOrderQuantity = 4,
				productName = "U-Joint");

			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				allowBackOrder = "false",
				productName = "U-Joint");
		}

		task ("And buyer user logs in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("And buyer user adds maximum quantity to the cart") {
			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 4);

			CommerceCheckout.gotoCheckoutViaMiniCart();
		}

		task ("And buyer user can do the checkout with the quantity lower than the stock quantity") {
			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = 4,
				productUnitPrice = 24,
				shippingMethod = "Standard");
		}

		task ("Then the order item cannot be added to the cart") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/catalog");

			AssertElementPresent(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_UNAVAILABLE_LABEL");

			Type(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_QUANTITY_SELECTOR_INPUT_FIELD",
				value1 = 4);

			Click(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON");
		}

		task ("Then the order item will not be added to the cart") {
			AssertTextEquals.assertText(
				locator1 = "Message#ERROR",
				value1 = "Danger:The specified quantity is unavailable.");
		}
	}

	@description = "This is a test for COMMERCE-10503. Minimum quantity cannot be added to the cart when order quantity is higher then the stock quantity and back order is disabled"
	@priority = 5
	test CannotAddToCartMinimumProductQuantityWhenOrderItemQuantityIsHigherThanStockQuantityAndBackOrderIsDisabled {
		property portal.acceptance = "true";

		task ("Given an account with a buyer user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And the warehouse quantity for the product is set to 6") {
			for (var warehouseName : list "Italy,United States - Northeast,United States - Southwest") {
				CommerceJSONWarehousesAndInventoriesAPI._patchWarehouseItem(
					productSku = "MIN55861",
					quantity = 2,
					warehouseName = ${warehouseName});
			}
		}

		task ("And minimum quantity is set to 8 and Allow Back Order is disabled") {
			CommerceProducts.openProductsAdmin();

			CommerceNavigator.searchEntry(entryName = "U-Joint");

			CommerceNavigator.gotoEntry(entryName = "U-Joint");

			CommerceEntry.gotoMenuTab(menuTab = "Configuration");

			CommerceProducts.updateProductInventoryConfiguration(
				allowBackOrders = "false",
				displayAvailability = "true",
				displayStockQuantity = "true",
				minOrderQuantity = 8,
				publish = "true");
		}

		task ("And buyer user logs in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("When user tries to add the order in the MiniCart") {
			Click(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON");
		}

		task ("Then it's not possible to add the order item to the cart") {
			AssertTextEquals.assertText(
				locator1 = "Message#ERROR",
				value1 = "Danger:The specified quantity is unavailable.");
		}
	}

	@description = "This is a test for COMMERCE-10503. Minimum quantity can be added to the cart until there's stock quantity and back order is disabled"
	@priority = 5
	test CannotAddToCartMinimumProductQuantityWhenStockQuantityIsLessAndBackOrderIsDisabled {
		property portal.acceptance = "true";

		task ("Given an account with a buyer user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And the warehouse quantity for the product is set to 6") {
			for (var warehouseName : list "Italy,United States - Northeast,United States - Southwest") {
				CommerceJSONWarehousesAndInventoriesAPI._patchWarehouseItem(
					productSku = "MIN55861",
					quantity = 2,
					warehouseName = ${warehouseName});
			}
		}

		task ("And minimum quantity is set to 4 and Allow Back Order is disabled") {
			CommerceProducts.openProductsAdmin();

			CommerceNavigator.searchEntry(entryName = "U-Joint");

			CommerceNavigator.gotoEntry(entryName = "U-Joint");

			CommerceEntry.gotoMenuTab(menuTab = "Configuration");

			CommerceProducts.updateProductInventoryConfiguration(
				allowBackOrders = "false",
				displayAvailability = "true",
				displayStockQuantity = "true",
				minOrderQuantity = 4,
				publish = "true");
		}

		task ("And buyer user logs in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("And buyer user can do the checkout with a quantity that is less than the stock quantity one") {
			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 4);

			CommerceCheckout.gotoCheckoutViaMiniCart();

			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = 4,
				productUnitPrice = 24,
				shippingMethod = "Standard");
		}

		task ("Then the order item cannot be added to the cart") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/catalog");

			AssertElementPresent(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_UNAVAILABLE_LABEL");

			Click(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON");
		}

		task ("Then the order item will not be added to the cart") {
			AssertTextEquals.assertText(
				locator1 = "Message#ERROR",
				value1 = "Danger:The specified quantity is unavailable.");
		}
	}

	@description = "This is a test for COMMERCE-10559. Multiple quantities cannot be added to the cart when order quantity is higher than the stock quantity and back order is disabled"
	@priority = 5
	test CannotAddToCartMultipleQuantityWhenOrderItemQuantityIsHigherThanStockQuantityAndBackOrderIsDisabled {
		property portal.acceptance = "true";

		task ("Given an account with a buyer user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And the warehouse quantity for the product is set to 6") {
			for (var warehouseName : list "Italy,United States - Northeast,United States - Southwest") {
				CommerceJSONWarehousesAndInventoriesAPI._patchWarehouseItem(
					productSku = "MIN55861",
					quantity = 2,
					warehouseName = ${warehouseName});
			}
		}

		task ("And multiple quantity is set to 8 and Allow Back Order is disabled") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				multipleOrderQuantity = 8,
				productName = "U-Joint");

			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				allowBackOrder = "false",
				productName = "U-Joint");
		}

		task ("And buyer user logs in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("When user tries to add the order in the MiniCart") {
			Type(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_QUANTITY_SELECTOR_INPUT_FIELD",
				value1 = 8);

			Click(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON");
		}

		task ("Then it's not possible to add the order item to the cart") {
			AssertTextEquals.assertText(
				locator1 = "Message#ERROR",
				value1 = "Danger:The specified quantity is unavailable.");
		}
	}

	@description = "This is a test for COMMERCE-10559. Multiple quantities can be added to the cart until there's stock quantity and back order is disabled"
	@priority = 5
	test CannotAddToCartMultipleQuantityWhenStockQuantityIsLessAndBackOrderIsDisabled {
		property portal.acceptance = "true";

		task ("Given an account with a buyer user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And the warehouse quantity for the product is set to 6") {
			for (var warehouseName : list "Italy,United States - Northeast,United States - Southwest") {
				CommerceJSONWarehousesAndInventoriesAPI._patchWarehouseItem(
					productSku = "MIN55861",
					quantity = 2,
					warehouseName = ${warehouseName});
			}
		}

		task ("And multiple quantity is set to 4 and Allow Back Order is disabled") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				multipleOrderQuantity = 4,
				productName = "U-Joint");

			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				allowBackOrder = "false",
				productName = "U-Joint");
		}

		task ("And buyer user logs in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("And buyer user adds multiple quantity to the cart") {
			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 4);

			CommerceCheckout.gotoCheckoutViaMiniCart();
		}

		task ("And buyer user can do the checkout with the quantity lower than the stock quantity") {
			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = 4,
				productUnitPrice = 24,
				shippingMethod = "Standard");
		}

		task ("Then the order item cannot be added to the cart") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/catalog");

			AssertElementPresent(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_UNAVAILABLE_LABEL");

			Click(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON");
		}

		task ("Then the order item will not be added to the cart") {
			AssertTextEquals.assertText(
				locator1 = "Message#ERROR",
				value1 = "Danger:The specified quantity is unavailable.");
		}
	}

	@description = "This is a test for COMMERCE-10491. The product can be added to the cart until there's stock quantity and back order is disabled"
	@priority = 5
	test CanOnlyPlaceOrderWhenStockIsAvailable {
		property portal.acceptance = "true";

		task ("Given a buyer user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And given the warehouse quantity for the product is set to 4") {
			CommerceProducts.openProductsAdmin();

			CommerceEntry.editWarehousesQuantity(
				italyQuantity = 1,
				northeastQuantity = 1,
				productName = "U-Joint",
				productSku = "MIN55861",
				southwestQuantity = 2);
		}

		task ("And product's Allow Back Order is disabled") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				allowBackOrder = "false",
				productName = "U-Joint");
		}

		task ("And buyer user logs in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("And given a placed order") {
			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 4);

			CommerceCheckout.gotoCheckoutViaMiniCart();

			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = 4,
				productUnitPrice = 24,
				shippingMethod = "Standard");
		}

		task ("When user tries to add a second order") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/catalog");

			Click(
				key_productName = "u-joint",
				locator1 = "CommerceFrontStore#PRODUCT_CARD_IMAGE");
		}

		task ("Then the Availability fragment is present with the Unavailable tag") {
			AssertElementPresent(
				key_availability = "Unavailable",
				locator1 = "CommerceFrontStore#FS_PRODUCT_AVAILABILITY");
		}
	}

	@description = "This is a test for COMMERCE-10491.  The user can see product is unavailable when stock quantity is zero"
	@priority = 3
	test CanSeeProductUnavailableWhenStockIsZero {
		property portal.acceptance = "false";

		task ("Given a buyer user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And given the warehouse quantity for the product is set to 0") {
			CommerceProducts.openProductsAdmin();

			CommerceEntry.editWarehousesQuantity(
				italyQuantity = 0,
				northeastQuantity = 0,
				productName = "U-Joint",
				productSku = "MIN55861",
				southwestQuantity = 0);
		}

		task ("And product's Allow Back Order is disabled") {
			CommerceJSONProductsAPI._patchCommerceProductConfiguration(
				allowBackOrder = "false",
				productName = "U-Joint");
		}

		task ("When buyer user logs in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("Then the Availability fragment is present with the Unavailable tag") {
			Click(
				key_productName = "u-joint",
				locator1 = "CommerceFrontStore#PRODUCT_CARD_IMAGE");

			AssertElementPresent(
				key_availability = "Unavailable",
				locator1 = "CommerceFrontStore#FS_PRODUCT_AVAILABILITY");
		}
	}

	@description = "This is a test for COMMERCE-11535. Sitemap contains product urls also for other than site's languages"
	@priority = 4
	test CanSiteCurrentLanguageAffectSiteMap {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given an account is created") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Commerce",
				accountEntryType = "Business");
		}

		task ("And two product's name and friendly URL are translated") {
			var completeProductTranslateList = ListUtil.newListFromString("ABS Sensor:pt-BR:Sensor ABS:sensor-abs,Wear Sensors:ca-ES:Sensors Wear:sensors-wear");

			for (var index : list "0,1") {
				CommerceProducts.openProductsAdmin();

				var productStringList = ListUtil.get(${completeProductTranslateList}, ${index});

				var productStringList = StringUtil.replace(${productStringList}, ":", ",");

				var productStringList = ListUtil.newListFromString(${productStringList});

				var entryName = ListUtil.get(${productStringList}, 0);

				CommerceNavigator.searchEntry(entryName = ${entryName});

				CommerceNavigator.gotoEntry(entryName = ${entryName});

				var locale = ListUtil.get(${productStringList}, 1);

				PortletEntry.changeLocale(
					fieldName = "Name",
					locale = ${locale});

				var translatedName = ListUtil.get(${productStringList}, 2);

				Type(
					locator1 = "TextInput#NAME",
					value1 = ${translatedName});

				PortletEntry.changeLocale(
					fieldName = "Friendly URL",
					locale = ${locale});

				var translatedNameFriendlyURL = ListUtil.get(${productStringList}, 3);

				Type(
					key_fieldLabel = "Friendly URL",
					locator1 = "TextInput#GENERIC_TEXT_INPUT",
					value1 = ${translatedNameFriendlyURL});

				Button.clickPublish();
			}
		}

		task ("And the admin remove the Catalan from the current language list") {
			var basePortalURL = PropsUtil.get("portal.url");

			Site.openSiteSettingsAdmin(
				baseURL = ${basePortalURL},
				siteURLKey = "minium");

			Click(
				key_itemName = "Localization",
				locator1 = "ListGroupItem#ITEM_TEXT");

			Click.clickAtNotVisible(
				locator1 = "Radio#ANY",
				radioLabel = "Define a custom default language and additional available languages for this site.");

			Click(
				key_language = "Catalan (Spain)",
				locator1 = "CommerceEntry#CURRENT_LANGUAGE");

			Click(
				ariaLabel = "Transfer Item Right to Left",
				locator1 = "Button#ANY_WITH_ARIA_LABEL");

			PortalSettings._saveDisplaySettings();
		}

		task ("And Uuid of the product is acquired") {
			var groupId = JSONGroupAPI._getGroupIdByName(
				groupName = "Minium",
				site = "true");

			Open.openNoError(locator1 = "${basePortalURL}/sitemap.xml?groupId=${groupId}");

			var responseToParse = CommerceJSONProductsAPI._getCommerceFieldValue(
				field = "uuid",
				groupName = "Minium",
				title = "Product Detail");
		}

		task ("And the Product Detail page sitemap link is opened") {
			var uuid = JSONUtil.getWithJSONPath(${responseToParse}, "$..['items'][0].uuid");

			var link = selenium.getHtmlNodeText("//*[contains(text(),'${uuid}')][1]");

			Open.openNoErrorNoSPARefresh(locator1 = ${link});
		}

		task ("Then the product translated with the Catalan is not present") {
			AssertElementNotPresent.assertElementNotPresentNoWaitForSPAReFresh(
				key_basePortalURL = ${basePortalURL},
				key_language = "ca",
				key_productName = "sensors-wear",
				locator1 = "CommerceEntry#PRODUCT_LANGUAGE_DETAIL_SITEMAP_URL");

			AssertElementNotPresent.assertElementNotPresentNoWaitForSPAReFresh(
				key_basePortalURL = ${basePortalURL},
				key_languageHref = "/ca",
				key_languageLoc = "",
				key_productName = "sensors-wear",
				key_productNameLang = "ca-ES",
				key_productURLName = "wear-sensors",
				locator1 = "CommerceEntry#PRODUCT_LANGUAGE_DETAIL_SITEMAP_URL_HREF_HREFLANG");
		}

		Open.openNoErrorNoSPARefresh(locator1 = ${basePortalURL});
	}

	@description = "This is a test for COMMERCE-10639. Sitemaps display the language tags properly"
	@priority = 3
	test CanViewLanguageTagsOnSitemapPage {
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given an account is created") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Commerce",
				accountEntryType = "Business");
		}

		task ("And a product's name and friendly URL are translated") {
			CommerceProducts.openProductsAdmin();

			CommerceNavigator.searchEntry(entryName = "ABS Sensor");

			CommerceNavigator.gotoEntry(entryName = "ABS Sensor");

			PortletEntry.changeLocale(
				fieldName = "Name",
				locale = "pt-BR");

			Type(
				locator1 = "TextInput#NAME",
				value1 = "Sensor ABS");

			PortletEntry.changeLocale(
				fieldName = "Friendly URL",
				locale = "pt-BR");

			Type(
				key_fieldLabel = "Friendly URL",
				locator1 = "TextInput#GENERIC_TEXT_INPUT",
				value1 = "sensor-abs");

			Button.clickPublish();
		}

		task ("And Uuid of the product is acquired") {
			var groupId = JSONGroupAPI._getGroupIdByName(
				groupName = "Minium",
				site = "true");
			var basePortalURL = PropsUtil.get("portal.url");

			Open.openNoError(locator1 = "${basePortalURL}/sitemap.xml?groupId=${groupId}");

			var responseToParse = CommerceJSONProductsAPI._getCommerceFieldValue(
				field = "uuid",
				groupName = "Minium",
				title = "Product Detail");
		}

		task ("When the Product Detail page sitemap link is opened") {
			var uuid = JSONUtil.getWithJSONPath(${responseToParse}, "$..['items'][0].uuid");

			var link = selenium.getHtmlNodeText("//*[contains(text(),'${uuid}')][1]");

			Open.openNoErrorNoSPARefresh(locator1 = ${link});
		}

		task ("Then the default and translated product's friendly URL are shown") {
			for (var productNameList : list "abs-sensor:,sensor-abs:pt") {
				var productName = StringUtil.extractFirst(${productNameList}, ":");
				var productNameLanguage = StringUtil.extractLast(${productNameList}, ":");

				if (${productNameLanguage} == "") {
					AssertElementPresent.assertElementPresentNoWaitForSPAReFresh(
						key_basePortalURL = ${basePortalURL},
						key_productName = ${productName},
						locator1 = "CommerceEntry#PRODUCT_DETAIL_SITEMAP_URL");
				}
				else {
					AssertElementPresent.assertElementPresentNoWaitForSPAReFresh(
						key_basePortalURL = ${basePortalURL},
						key_language = ${productNameLanguage},
						key_productName = ${productName},
						locator1 = "CommerceEntry#PRODUCT_LANGUAGE_DETAIL_SITEMAP_URL");
				}
			}

			for (var productURLName : list "abs-sensor,sensor-abs") {
				for (var product : list "abs-sensor:en-US,sensor-abs:pt-BR") {
					var productName = StringUtil.extractFirst(${product}, ":");
					var productNameLang = StringUtil.extractLast(${product}, ":");

					if (${productURLName} == "abs-sensor") {
						if (${productName} == "sensor-abs") {
							var productLanguage = "/pt";

							AssertElementPresent.assertElementPresentNoWaitForSPAReFresh(
								key_basePortalURL = ${basePortalURL},
								key_languageHref = ${productLanguage},
								key_languageLoc = "",
								key_productName = ${productName},
								key_productNameLang = ${productNameLang},
								key_productURLName = ${productURLName},
								locator1 = "CommerceEntry#PRODUCT_LANGUAGE_DETAIL_SITEMAP_URL_HREF_HREFLANG");
						}
						else {
							AssertElementPresent.assertElementPresentNoWaitForSPAReFresh(
								key_basePortalURL = ${basePortalURL},
								key_productName = ${productName},
								key_productNameLang = ${productNameLang},
								key_productURLName = ${productURLName},
								locator1 = "CommerceEntry#PRODUCT_DETAIL_SITEMAP_URL_HREF_HREFLANG");
						}
					}
					else {
						if (${productName} == "sensor-abs") {
							var productLanguage = "/pt";

							AssertElementPresent.assertElementPresentNoWaitForSPAReFresh(
								key_basePortalURL = ${basePortalURL},
								key_languageHref = ${productLanguage},
								key_languageLoc = ${productLanguage},
								key_productName = ${productName},
								key_productNameLang = ${productNameLang},
								key_productURLName = ${productURLName},
								locator1 = "CommerceEntry#PRODUCT_LANGUAGE_DETAIL_SITEMAP_URL_HREF_HREFLANG");
						}
						else {
							AssertElementPresent.assertElementPresentNoWaitForSPAReFresh(
								key_basePortalURL = ${basePortalURL},
								key_languageHref = "",
								key_languageLoc = ${productLanguage},
								key_productName = ${productName},
								key_productNameLang = ${productNameLang},
								key_productURLName = ${productURLName},
								locator1 = "CommerceEntry#PRODUCT_LANGUAGE_DETAIL_SITEMAP_URL_HREF_HREFLANG");
						}
					}
				}
			}

			Open.openNoErrorNoSPARefresh(locator1 = ${basePortalURL});
		}
	}

	@description = "This is a test for COMMERCE-6094. UseConfiguration"
	@priority = 5
	test UseConfiguration {
		property portal.acceptance = "true";

		// TODO Review

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Minium",
			productName = "Simple T-Shirt",
			productType = "Simple");

		CommerceEntry.gotoMenuTab(menuTab = "Configuration");

		Select(
			key_title = "Tax Category",
			locator1 = "CommerceEntry#CATALOGS_FORM",
			value1 = "Normal Product");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Tax Exempt",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Select(
			key_title = "Availability Estimate",
			locator1 = "CommerceEntry#CATALOGS_FORM",
			value1 = "3-5 days");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Display Availability",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Check.checkToggleSwitch(
			key_toggleSwitchLabel = "Display Stock Quantity",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		AssertElementPresent(
			key_labelName = "Minimum Order Quantity",
			locator1 = "TextInput#SPECIFIC_LABEL_TEXT_INPUT");

		Type(
			key_labelName = "Minimum Order Quantity",
			locator1 = "TextInput#SPECIFIC_LABEL_TEXT_INPUT",
			value1 = 2);

		AssertElementPresent(
			key_labelName = "Allowed Order Quantities",
			locator1 = "TextInput#SPECIFIC_LABEL_TEXT_INPUT");

		Type(
			key_labelName = "Allowed Order Quantities",
			locator1 = "TextInput#SPECIFIC_LABEL_TEXT_INPUT",
			value1 = 1);

		Select(
			key_title = "Low Stock Action",
			locator1 = "CommerceEntry#CATALOGS_FORM",
			value1 = "Set as Unpublished");

		AssertElementPresent(
			key_labelName = "Low Stock Threshold",
			locator1 = "TextInput#SPECIFIC_LABEL_TEXT_INPUT");

		Type(
			key_labelName = "Low Stock Threshold",
			locator1 = "TextInput#SPECIFIC_LABEL_TEXT_INPUT",
			value1 = 1);

		Uncheck.uncheckToggleSwitch(
			key_toggleSwitchLabel = "Allow Back Order",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		AssertElementPresent(
			key_labelName = "Maximum Order Quantity",
			locator1 = "TextInput#SPECIFIC_LABEL_TEXT_INPUT");

		Type(
			key_labelName = "Maximum Order Quantity",
			locator1 = "TextInput#SPECIFIC_LABEL_TEXT_INPUT",
			value1 = 20000);

		AssertElementPresent(
			key_labelName = "Multiple Order Quantity",
			locator1 = "TextInput#SPECIFIC_LABEL_TEXT_INPUT");

		Type(
			key_labelName = "Multiple Order Quantity",
			locator1 = "TextInput#SPECIFIC_LABEL_TEXT_INPUT",
			value1 = 2);

		Uncheck.uncheckToggleSwitch(
			key_toggleSwitchLabel = "Free Shipping",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Uncheck.uncheckToggleSwitch(
			key_toggleSwitchLabel = "Ship Separately",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		AssertElementPresent(
			key_labelName = "Shipping Extra Price",
			locator1 = "TextInput#SPECIFIC_LABEL_TEXT_INPUT");

		Type(
			key_labelName = "Shipping Extra Price",
			locator1 = "TextInput#SPECIFIC_LABEL_TEXT_INPUT",
			value1 = 1);

		AssertElementPresent(
			key_labelName = "Width",
			locator1 = "TextInput#SPECIFIC_LABEL_TEXT_INPUT");

		Type(
			key_labelName = "Width",
			locator1 = "TextInput#SPECIFIC_LABEL_TEXT_INPUT",
			value1 = 1);

		AssertElementPresent(
			key_labelName = "Height",
			locator1 = "TextInput#SPECIFIC_LABEL_TEXT_INPUT");

		Type(
			key_labelName = "Height",
			locator1 = "TextInput#SPECIFIC_LABEL_TEXT_INPUT",
			value1 = 1);

		AssertElementPresent(
			key_labelName = "Depth",
			locator1 = "TextInput#SPECIFIC_LABEL_TEXT_INPUT");

		Type(
			key_labelName = "Depth",
			locator1 = "TextInput#SPECIFIC_LABEL_TEXT_INPUT",
			value1 = 1);

		AssertElementPresent(
			key_labelName = "Weight",
			locator1 = "TextInput#SPECIFIC_LABEL_TEXT_INPUT");

		Type(
			key_labelName = "Weight",
			locator1 = "TextInput#SPECIFIC_LABEL_TEXT_INPUT",
			value1 = 1);

		Button.clickPublish();

		AssertElementPresent(locator1 = "Message#SUCCESS");

		Uncheck.uncheckToggleSwitch(
			key_toggleSwitchLabel = "Shippable",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		Button.clickPublish();

		AssertNotChecked.assertNotCheckedNotVisible(
			key_toggleSwitchLabel = "Shippable",
			locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

		AssertElementPresent(locator1 = "Message#SUCCESS");
	}

}