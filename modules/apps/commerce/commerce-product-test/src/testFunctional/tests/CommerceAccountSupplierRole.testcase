@component-name = "portal-commerce"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false${line.separator}feature.flag.COMMERCE-10890=true${line.separator}feature.flag.COMMERCE-11026=true";
	property portal.release = "true";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Order Management";

	setUp {
		CommerceConfiguration.commerceSetUp(minium = "true");
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "This is a test for COMMERCE-11888. As a supplier user, I can edit a supplier order item's details then the admin can view the changes reflected in the customer order but vice versa"
	@priority = 5
	test CanAssertCustomerOrderReflectsSupplierOrderChanges {
		property portal.acceptance = "true";

		task ("Given a Minium site with a buyer user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And a Supplier account with a supplier user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Supplier Account",
				accountType = "Supplier",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "supplier@liferay.com",
				userFirstName = "Supplier",
				userLastName = "User",
				userRole = "Account Supplier",
				userScreenName = "supplieruser");
		}

		task ("And a channel to link to the supplier account and a catalog(with a product) to link to the supplier account are created") {
			var supplierAccountId = JSONAccountEntryAPI._getAccountEntryId(accountEntryName = "Supplier Account");

			CommerceJSONChannelsAPI._addChannel(
				accountId = ${supplierAccountId},
				channelName = "Supplier Channel",
				channelType = "site",
				currencyCode = "USD");

			CommerceJSONCatalogsAPI._addCatalog(
				accountEntryId = ${supplierAccountId},
				catalogName = "Supplier Catalog");

			CommerceJSONProductsAPI._addCommerceProduct(
				catalogName = "Supplier Catalog",
				price = 5,
				productName = "Simple Product",
				productType = "simple",
				sku = "TESTSKU");

			CommerceJSONWarehousesAndInventoriesAPI._addWarehouseItem(
				warehouseItemQuantity = 100,
				warehouseItemSku = "TESTSKU",
				warehouseName = "Italy");

			CommerceNavigator.goToWarehousesAdmin();

			CommerceNavigator.gotoEntry(entryName = "Italy");

			Navigator.gotoNavTab(navTab = "Eligibility");

			CommerceEntry.setEntryEligibility(channelsEligibility = "Supplier Channel");

			CommerceEntry.viewEntryEligibility(channelsEligibility = "Supplier Channel");
		}

		task ("And the 'Order Split by Catalog Action' health check is checked") {
			CommerceNavigator.goToHealthCheckAdmin();

			Click(
				key_buttonRowName = "Order Split by Catalog Action",
				key_buttonStatus = "",
				locator1 = "CommerceEntry#FIX_ISSUE_BUTTON_NAME");

			WaitForElementPresent(
				key_value = "Order Split by Catalog Action",
				locator1 = "CommerceEntry#HEALTH_CHECK_ICON_CHECK_NAME");

			CommerceJSONOrdersAPI._patchCommerceOrderObjectAction(
				active = "true",
				objectActionName = "SplitOrderByCatalog",
				objectDefinitionName = "CommerceOrder");
		}

		task ("When the buyer checkout an order with both Minium and Supplier catalogs products") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			for (var productName : list "Simple Product,U-Joint") {
				FrontStore.addInitializerProductToCart(
					productName = ${productName},
					productQuantity = 1);
			}

			CommerceCheckout.gotoCheckout();

			CommerceCheckout.checkout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				shippingMethod = "Standard");
		}

		task ("And the admin splits the order") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			CommerceOrders.openOrdersAdmin();

			CommerceNavigator.gotoOrderEntryViaAdmin(status = "Pending");

			Click(
				key_text = "Accept Order",
				locator1 = "Link#ANY");

			Alert.viewSuccessMessage();

			CommerceOrders.openOrdersAdmin();

			var customerOrderId = selenium.getText("//div[(@class='dnd-td') and contains(string(), '$ 44.00')]//..//div[(@class='dnd-td')][1]");
			var supplierOrderId = selenium.getText("//div[(@class='dnd-td') and contains(string(), '$ 5.00')]//..//div[(@class='dnd-td')][1]");
		}

		task ("When the supplier user edits the quantity of 'Simple Product' in the supplier order") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "supplier@liferay.com",
				userLoginFullName = "Supplier User");

			CommerceOrders.openOrdersAdmin();

			CommerceNavigator.gotoOrderEntryViaAdmin(status = "$ 5.00");

			CommerceOrders.editOrderItemDetails(
				orderItemQuantity = 3,
				orderItemSku = "TESTSKU");

			task ("And the total price is not updated") {
				CommerceOrders.viewOrdersEntry(
					productListPrice = "5.00",
					productName = "Simple Product",
					productQuantity = "3.00",
					productSku = "TESTSKU",
					productTotalPrice = "5.00");
			}
		}

		task ("Then the quantity of 'Simple Product' in the customer order is updated to the same one as the supplier order") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			CommerceOrders.openOrdersAdmin();

			CommerceNavigator.gotoOrderEntryViaAdmin(status = "$ 44.00");

			CommerceOrders.viewOrdersEntry(
				productListPrice = "24.00",
				productName = "U-Joint",
				productQuantity = "1.00",
				productSku = "MIN55861",
				productTotalPrice = "24.00");

			CommerceOrders.viewOrdersEntry(
				productListPrice = "5.00",
				productName = "Simple Product",
				productQuantity = "3.00",
				productSku = "TESTSKU",
				productTotalPrice = "5.00");
		}

		task ("But the quantity of 'Simple product' in the supplier order does not change with the customer order") {
			CommerceOrders.editOrderItemDetails(
				orderItemQuantity = 6,
				orderItemSku = "TESTSKU");

			CommerceOrders.viewOrdersEntry(
				productListPrice = "24.00",
				productName = "U-Joint",
				productQuantity = "1.00",
				productSku = "MIN55861",
				productTotalPrice = "24.00");

			CommerceOrders.viewOrdersEntry(
				productListPrice = "5.00",
				productName = "Simple Product",
				productQuantity = "6.00",
				productSku = "TESTSKU",
				productTotalPrice = "5.00");

			User.logoutAndLoginPG(
				userLoginEmailAddress = "supplier@liferay.com",
				userLoginFullName = "Supplier User");

			CommerceOrders.openOrdersAdmin();

			CommerceNavigator.gotoOrderEntryViaAdmin(status = "$ 5.00");

			CommerceOrders.viewOrdersEntry(
				productListPrice = "5.00",
				productName = "Simple Product",
				productQuantity = "3.00",
				productSku = "TESTSKU",
				productTotalPrice = "5.00");
		}

		task ("When the supplier user creates 1 quantity of the shipment in a supplier order with 'Simple Product'") {
			CommerceOrders.openOrdersAdmin();

			CommerceNavigator.gotoOrderEntryViaAdmin(status = "$ 5.00");

			CommerceOrders.checkoutFullWorkflow(
				orderId = ${supplierOrderId},
				sku = "TESTSKU",
				warehouse = "Italy");
		}

		task ("Then following the workflow of the shipment, the outstanding quantity of that product from the customer order is correctly decreased by 1 and equals 5") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			CommerceOrders.openOrdersAdmin();

			CommerceNavigator.gotoOrderEntryViaAdmin(status = "$ 44.00");

			CommerceOrders.checkoutFullWorkflow(
				orderIds = ${customerOrderId},
				outstandingQuantities = 5,
				outstandingQuantity = "true",
				productSkus = "TESTSKU",
				warehouse = "Italy");
		}
	}

	@description = "This is a test case for COMMERCE-11825. Admin can verify that changing the catalog's name does not affect the supplier account Id and it remains the same."
	@priority = 4
	test CanAssertSupplierAccountIdDifferentFromZeroWhenManuallyChangingCatalogName {
		property portal.acceptance = "false";

		task ("Given a supplier account is created") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Supplier Account",
				accountEntryType = "Supplier");

			var accountEntryId = JSONAccountEntryAPI._getAccountEntryId(accountEntryName = "Supplier Account");
		}

		task ("When a catalog linked to the supplier account is created") {
			CommerceJSONCatalogsAPI._addCatalog(catalogName = "Supplier Catalog");

			CommerceJSONCatalogsAPI._patchCommerceCatalog(
				accountId = ${accountEntryId},
				catalogName = "Supplier Catalog");
		}

		task ("Then the admin can assert that the catalog is successfully linked to the account using GET API") {
			var accountId = CommerceJSONCatalogsAPI._getCommerceAccountIdByCatalogId(catalogName = "Supplier Catalog");

			TestUtils.assertEquals(
				actual = ${accountId},
				expected = ${accountEntryId});
		}

		task ("When the admin changes the catalog name") {
			CommerceCatalog.openCatalogsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Supplier Catalog");

			Type(
				locator1 = "CommerceEntry#NAME_FIELD",
				value1 = "Supplier Catalog Edited");

			Button.clickSave();

			CommerceUtilities.checkSuccessAlertAppearsAndDisappears();
		}

		task ("Then the admin can assert that the account Id is different from zero and still it equals to the original value") {
			var accountId = CommerceJSONCatalogsAPI._getCommerceAccountIdByCatalogId(catalogName = "Supplier Catalog Edited");

			TestUtils.assertEquals(
				actual = ${accountId},
				expected = ${accountEntryId});
		}
	}

	@description = "This is a test case for COMMERCE-11449. Supplier account type can be created and a user linked to that account can successfully log in"
	@priority = 5
	test CanCreateSupplierTypeAccountAndALinkedUser {
		property portal.acceptance = "true";

		task ("Given the admin navigates to Minium site -> Account Management") {
			ApplicationsMenu.gotoSite(site = "Minium");

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Account Management");
		}

		task ("When the admin proceeds to create a supplier account") {
			CommerceAccountManagement.addAccount(
				accountName = "Supplier Account",
				accountType = "Supplier");
		}

		task ("Then the account is successfully created") {
			Click(locator1 = "Icon#ANGLE_LEFT_BACK");

			LexiconTable.viewTableEntryInfo(
				index = 5,
				tableEntry = "Supplier",
				tableEntryInfo = "Supplier");
		}

		task ("When the admin creates a user for that account") {
			JSONAccountEntryUser.addAccountEntryUser(
				accountEntryName = "Supplier Account",
				userEmailAddress = "supplieruser@liferay.com",
				userFirstName = "Supplier",
				userLastName = "User",
				userScreenName = "supplieruser");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "supplieruser@liferay.com");

			JSONUser.addUserToSite(
				groupName = "Minium",
				userEmailAddress = "supplieruser@liferay.com");
		}

		task ("And the user proceeds to log in") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "supplieruser@liferay.com");
		}

		task ("Then the user is successfully logged in") {
			AssertElementPresent(
				key_userName = "Supplier User",
				locator1 = "CommerceAccelerators#MINIUM_SIDEBAR_USER_NAME");
		}
	}

	@description = "This is a test case for COMMERCE-11824. Supplier account can be linked to a catalog from UI."
	@priority = 5
	test CanLinkSupplierAccountToCatalogViaUI {
		property portal.acceptance = "true";

		task ("Given an active business and 2 active supplier accounts are created") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Commerce Account",
				accountEntryType = "Business");

			for (var num : list "1,2") {
				JSONAccountEntry.addAccountEntry(
					accountEntryName = "Supplier Account ${num}",
					accountEntryType = "Supplier");
			}
		}

		task ("And one inactive supplier account is created") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Supplier Account 3",
				accountEntryStatus = "Inactive",
				accountEntryType = "Supplier");
		}

		task ("When admin goes to the Minium catalog") {
			CommerceCatalog.openCatalogsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium");
		}

		task ("Then can view 'Link Catalog to a Supplier' field is null by default and only Supplier Accounts are listed on the dropdown") {
			AssertTextEquals(
				key_label = "Link Catalog to a Supplier",
				locator1 = "CommerceEntry#ANY_AUTOCOMPLETE_CONTAINS_TEXT_FIELD",
				value1 = "");

			Click(
				key_label = "Link Catalog to a Supplier",
				locator1 = "CommerceEntry#ANY_AUTOCOMPLETE_CONTAINS_TEXT_FIELD");

			for (var accountName : list "Supplier Account 1,Supplier Account 2") {
				AssertElementPresent(
					key_categoryName = ${accountName},
					locator1 = "CommerceEntry#COMMERCE_CATEGORY_AUTOCOMPLETE_SPECIFIC");
			}
		}

		task ("And Business or Deactivated Accounts are not listed on the dropdown") {
			for (var accountName : list "Supplier Account 3,Commerce Account") {
				AssertElementNotPresent(
					key_categoryName = ${accountName},
					locator1 = "CommerceEntry#COMMERCE_CATEGORY_AUTOCOMPLETE_SPECIFIC");
			}
		}

		task ("When admin selects Supplier Account 1 for the catalog") {
			Click(
				key_label = "Link Catalog to a Supplier",
				locator1 = "CommerceEntry#ANY_AUTOCOMPLETE_CONTAINS_TEXT_FIELD");

			Click(
				key_categoryName = "Supplier Account 1",
				locator1 = "CommerceEntry#COMMERCE_CATEGORY_AUTOCOMPLETE_SPECIFIC");

			Button.clickSave();
		}

		task ("Then Supplier Account 1 is linked successfully to the catalog") {
			CommerceUtilities.checkSuccessAlertAppearsAndDisappears();

			CommerceNavigator.gotoEntry(entryName = "Minium");

			AssertTextEquals(
				key_label = "Link Catalog to a Supplier",
				locator1 = "CommerceEntry#ANY_AUTOCOMPLETE_CONTAINS_TEXT_FIELD",
				value1 = "Supplier Account 1");
		}
	}

	@description = "This is a test case for COMMERCE-10923. Supplier account can be linked to a channel from UI."
	@priority = 5
	test CanLinkSupplierAccountToChannelViaUI {
		property portal.acceptance = "true";

		task ("Given an active business and 2 active supplier accounts are created") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Commerce Account",
				accountEntryType = "Business");

			for (var num : list "1,2") {
				JSONAccountEntry.addAccountEntry(
					accountEntryName = "Supplier Account ${num}",
					accountEntryType = "Supplier");
			}
		}

		task ("And one inactive supplier account is created") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Supplier Account 3",
				accountEntryStatus = "Inactive",
				accountEntryType = "Supplier");
		}

		task ("When admin goes to the Minium Portal channel") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");
		}

		task ("Then can view 'Link Channel to a Supplier' field is null by default and only Supplier Accounts are listed on the dropdown") {
			AssertElementPresent(
				entryName = "",
				key_fieldLabel = "Link Channel to a Supplier",
				key_index = 1,
				locator1 = "CommerceEntry#LABEL_GENERIC_SELECT_ENTRY_POSITION");

			for (var accountNameWithIndex : list "Supplier Account 1:2,Supplier Account 2:3") {
				var accountName = StringUtil.extractFirst(${accountNameWithIndex}, ":");
				var index = StringUtil.extractLast(${accountNameWithIndex}, ":");

				AssertElementPresent(
					entryName = ${accountName},
					key_fieldLabel = "Link Channel to a Supplier",
					key_index = ${index},
					locator1 = "CommerceEntry#LABEL_GENERIC_SELECT_ENTRY_POSITION");
			}
		}

		task ("And Business or Deactivated Accounts are not listed on the dropdown") {
			for (var index : list "1,2,3,4,5") {
				AssertElementNotPresent(
					entryName = "Commerce Account",
					key_fieldLabel = "Link Channel to a Supplier",
					key_index = ${index},
					locator1 = "CommerceEntry#LABEL_GENERIC_SELECT_ENTRY_POSITION");
			}

			for (var index : list "1,2,3,4,5") {
				AssertElementNotPresent(
					entryName = "Supplier Account 3",
					key_fieldLabel = "Link Channel to a Supplier",
					key_index = ${index},
					locator1 = "CommerceEntry#LABEL_GENERIC_SELECT_ENTRY_POSITION");
			}
		}

		task ("When admin selects Supplier Account 1 for the channel") {
			Select(
				key_fieldLabel = "Link Channel to a Supplier",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Supplier Account 1");

			Button.clickSave();
		}

		task ("Then Supplier Account 1 is linked successfully to the channel") {
			CommerceUtilities.checkSuccessAlertAppearsAndDisappears();

			AssertElementPresent(
				key_fieldLabel = "Link Channel to a Supplier",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Supplier Account 1");
		}
	}

	@description = "This is a test for COMMERCE-11608. Other account roles like a buyer who belongs to a supplier account cannot manage the channel page"
	@priority = 4
	test CannotManageChannelWhenUsersInOtherAccountRoles {
		property portal.acceptance = "false";

		task ("Given a Supplier account with a buyer user") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Commerce Supplier",
				accountEntryType = "Supplier");

			JSONAccountEntryUser.addAccountEntryUser(
				accountEntryName = "Commerce Supplier",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userScreenName = "buyeruser");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com");

			JSONAccountRole.associateUser(
				accountEntryName = "Commerce Supplier",
				accountRole = "Buyer",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("And a channel is created and the supplier account is linked to it") {
			var accountEntryId = JSONAccountEntryAPI._getAccountEntryId(accountEntryName = "Commerce Supplier");

			CommerceJSONChannelsAPI._addChannel(
				accountId = ${accountEntryId},
				channelName = "Supplier Channel",
				channelType = "site",
				currencyCode = "USD");
		}

		task ("When the buyer logs in") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "buyer@liferay.com",
				userLoginFullName = "Buyer User");
		}

		task ("Then the buyer cannot reach the Channels Page on the Admin Menu") {
			CommerceChannels.openChannelsAdmin();

			AssertElementPresent(
				locator1 = "Message#ERROR",
				value1 = "You do not have the roles required to access this portlet.");
		}
	}

	@description = "This is a test for COMMERCE-11865. As a supplier account user, I cannot access the channel panel after removing the permissions for Access in Control Panel for Channel"
	@priority = 4
	test CannotSupplierUserAccessChannelPanelAfterRemovingPermissions {
		property portal.acceptance = "false";

		task ("Given a Supplier account with a supplier user") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Commerce Supplier",
				accountEntryType = "Supplier");

			JSONAccountEntryUser.addAccountEntryUser(
				accountEntryName = "Commerce Supplier",
				userEmailAddress = "supplieruser@liferay.com",
				userFirstName = "Supplier",
				userLastName = "User",
				userScreenName = "supplieruser");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "supplieruser@liferay.com");

			JSONAccountRole.associateUser(
				accountEntryName = "Commerce Supplier",
				accountRole = "Account Supplier",
				userEmailAddress = "supplieruser@liferay.com");
		}

		task ("And a channel is created and the supplier account is linked to it") {
			var accountEntryId = JSONAccountEntryAPI._getAccountEntryId(accountEntryName = "Commerce Supplier");

			CommerceJSONChannelsAPI._addChannel(
				accountId = ${accountEntryId},
				channelName = "Supplier Channel",
				channelType = "site",
				currencyCode = "USD");
		}

		task ("When admin removes the supplier's permission with Access in Control Panel for Channel") {
			Permissions.removePermissionViaAPI(
				resourceAction = "ACCESS_IN_CONTROL_PANEL",
				resourceName = "com_liferay_commerce_channel_web_internal_portlet_CommerceChannelsPortlet",
				roleTitle = "Supplier");
		}

		task ("And the supplier user logs in") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "supplieruser@liferay.com",
				userLoginFullName = "Supplier User");
		}

		task ("Then the supplier user cannot view the Channel panel") {
			ApplicationsMenuHelper.openApplicationsMenu();

			ApplicationsMenu.gotoPanel(panel = "Commerce");

			AssertElementNotPresent(
				key_category = "Store Management",
				key_portlet = "Channels",
				locator1 = "ApplicationsMenu#PORTLET");
		}

		task ("And cannot navigate to the Channels panel by URL either") {
			CommerceChannels.openChannelsAdmin();

			AssertElementPresent(
				locator1 = "Message#ERROR",
				value1 = "You do not have the roles required to access this portlet.");
		}
	}

	@description = "This is a test for COMMERCE-11866. If a linked supplier account to a channel is removed, the supplier account user cannot view any channels"
	@priority = 4
	test CannotSupplierUserViewAUnlinkedChannel {
		property portal.acceptance = "false";

		task ("Given a Supplier account with a supplier user") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Commerce Supplier",
				accountEntryType = "Supplier");

			JSONAccountEntryUser.addAccountEntryUser(
				accountEntryName = "Commerce Supplier",
				userEmailAddress = "supplieruser@liferay.com",
				userFirstName = "Supplier",
				userLastName = "User",
				userScreenName = "supplieruser");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "supplieruser@liferay.com");

			JSONAccountRole.associateUser(
				accountEntryName = "Commerce Supplier",
				accountRole = "Account Supplier",
				userEmailAddress = "supplieruser@liferay.com");
		}

		task ("And a channel is created and the supplier account is linked to it") {
			var accountEntryId = JSONAccountEntryAPI._getAccountEntryId(accountEntryName = "Commerce Supplier");

			CommerceJSONChannelsAPI._addChannel(
				accountId = ${accountEntryId},
				channelName = "Supplier Channel",
				channelType = "site",
				currencyCode = "USD");
		}

		task ("When the supplier user logs in") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "supplieruser@liferay.com",
				userLoginFullName = "Supplier User");
		}

		task ("Then the supplier user can view the Supplier Channel that the account is linked to") {
			CommerceChannels.openChannelsAdmin();

			AssertElementPresent(
				key_entryName = "Supplier Channel",
				locator1 = "CommerceNavigation#ENTRY_NAME");
		}

		task ("When admin unlinks the Supplier account for Supplier Channel") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Supplier Channel");

			Select(
				key_fieldLabel = "Link Channel to a Supplier",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "");

			Button.clickSave();
		}

		task ("Then the supplier cannot see any channel entries displayed") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "supplieruser@liferay.com",
				userLoginFullName = "Supplier User");

			CommerceChannels.openChannelsAdmin();

			AssertTextEquals(
				locator1 = "Message#EMPTY_STATE_INFO",
				value1 = "No Results Found");
		}
	}

	@description = "This is a test for COMMERCE-11516. When a supplier account is deleted after being linked to a catalog, the account will not be shown as linked to the catalog"
	@priority = 3
	test CannotViewDeletedSupplierAccountLinkedToCatalogViaAPI {
		property portal.acceptance = "false";

		task ("Given a 'Supplier' type of account is created") {
			CommerceJSONAccountsAPI._addCommerceAccount(
				accountName = "Supplier Account",
				accountType = "Supplier",
				externalReferenceCode = "Supplier Account ERC");
		}

		task ("And a catalog is created and the supplier account is linked to it") {
			var accountEntryId = JSONAccountEntryAPI._getAccountEntryId(accountEntryName = "Supplier Account");

			CommerceJSONCatalogsAPI._addCatalog(
				accountEntryId = ${accountEntryId},
				catalogName = "Test Catalog");
		}

		task ("When the supplier account is deleted") {
			CommerceJSONAccountsAPI._deleteAllCommerceAccounts();
		}

		task ("Then the supplier account will not be shown as linked to the catalog") {
			var accountId = CommerceJSONCatalogsAPI._getCommerceAccountIdByCatalogId(catalogName = "Test Catalog");

			TestUtils.assertNotEquals(
				actual = ${accountId},
				expected = ${accountEntryId});
		}
	}

	@description = "This is a test for COMMERCE-11516. When a supplier account is deleted after being linked to a channel, the account will not be shown as linked to the channel"
	@priority = 3
	test CannotViewDeletedSupplierAccountLinkedToChannelViaAPI {
		property portal.acceptance = "false";

		task ("Given a 'Supplier' type of account is created") {
			CommerceJSONAccountsAPI._addCommerceAccount(
				accountName = "Supplier Account",
				accountType = "Supplier",
				externalReferenceCode = "Supplier Account ERC");
		}

		task ("And a channel is created and the supplier account is linked to it") {
			var accountEntryId = JSONAccountEntryAPI._getAccountEntryId(accountEntryName = "Supplier Account");

			CommerceJSONChannelsAPI._addChannel(
				accountId = ${accountEntryId},
				channelName = "Test Channel",
				channelType = "site",
				currencyCode = "USD");
		}

		task ("When the supplier account is deleted") {
			CommerceJSONAccountsAPI._deleteAllCommerceAccounts();
		}

		task ("Then the supplier account will not be shown as linked to the channel") {
			var accountId = CommerceJSONChannelsAPI._getCommerceAccountIdByChannelId(channelName = "Test Channel");

			TestUtils.assertNotEquals(
				actual = ${accountId},
				expected = ${accountEntryId});
		}
	}

	@description = "COMMERCE-11844. This a test to verify that the Supplier User can set the parent price list only between the linked catalog price lists"
	@priority = 4
	test CanSetOnlyLinkedCatalogPriceListsAsParentPriceList {
		property portal.acceptance = "false";

		task ("Given a Supplier account with a user that has the role 'Supplier'") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Supplier Account",
				accountType = "Supplier",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "supplier@liferay.com",
				userFirstName = "Supplier",
				userLastName = "User",
				userRole = "Account Supplier",
				userScreenName = "supplieruser");
		}

		task ("And a Price List is created") {
			CommerceJSONPriceListsAndPromotionsAPI._addPriceList(
				catalogName = "Minium",
				currencyCode = "USD",
				priceListName = "Test New Price List",
				priority = 0);
		}

		task ("And a new Catalog is created") {
			CommerceJSONCatalogsAPI._addCatalog(catalogName = "Test Catalog");
		}

		task ("And the Account Id is linked to Minium Catalog") {
			CommerceJSONCatalogsAPI._patchCommerceCatalog(
				accountIdByName = "Supplier Account",
				catalogName = "Minium");
		}

		task ("And the supplier logs in") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "supplier@liferay.com",
				userLoginFullName = "Supplier User");
		}

		task ("When the supplier navigates to a Price List details page") {
			CommercePriceLists.openPriceListsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test New Price List");
		}

		task ("Then the supplier can only select Price Lists from catalogs that are linked to the supplier account as Parent Price List") {
			Click(
				key_label = "Parent Price List",
				locator1 = "CommerceEntry#ANY_AUTOCOMPLETE_TEXT_FIELD");

			AssertElementPresent(
				key_fieldName = "Minium Base Price List",
				locator1 = "FormViewBuilder#OBJECT_FIELD_BUTTON_DROPDOWN");

			for (var fieldName : list "Test Catalog Base Price List,Master Base Price List") {
				AssertElementNotPresent(
					key_fieldName = ${fieldName},
					locator1 = "FormViewBuilder#OBJECT_FIELD_BUTTON_DROPDOWN");
			}
		}
	}

	@description = "COMMERCE-11843. This a test to verify that the Supplier User can set the parent promotion list only between the linked catalog promotion (COMMERCE-11844)"
	@priority = 4
	test CanSetOnlyLinkedCatalogPromotionAsParentPromotionList {
		property portal.acceptance = "false";

		task ("Given a Supplier account with a user that has the role 'Supplier'") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Supplier Account",
				accountType = "Supplier",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "supplier@liferay.com",
				userFirstName = "Supplier",
				userLastName = "User",
				userRole = "Account Supplier",
				userScreenName = "supplieruser");
		}

		task ("And a Promotion is created") {
			CommerceJSONPriceListsAndPromotionsAPI._addPromotion(
				catalogName = "Minium",
				currencyCode = "USD",
				priority = 0,
				promotionName = "Test New Promotion");
		}

		task ("And a new Catalog is created") {
			CommerceJSONCatalogsAPI._addCatalog(catalogName = "Test Catalog");
		}

		task ("And the Account Id is linked to Minium Catalog") {
			CommerceJSONCatalogsAPI._patchCommerceCatalog(
				accountIdByName = "Supplier Account",
				catalogName = "Minium");
		}

		task ("And the supplier logs in") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "supplier@liferay.com",
				userLoginFullName = "Supplier User");
		}

		task ("When the supplier navigates to a Promotion details page") {
			CommercePromotions.openPromotionsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test New Promotion");
		}

		task ("hen the supplier can only select Promotions from catalogs that are linked to the supplier account as Parent Promotion List") {
			Click(
				key_label = "Parent Price List",
				locator1 = "CommerceEntry#ANY_AUTOCOMPLETE_TEXT_FIELD");

			AssertElementPresent(
				key_fieldName = "Minium Base Promotion",
				locator1 = "FormViewBuilder#OBJECT_FIELD_BUTTON_DROPDOWN");

			for (var fieldName : list "Test Catalog Base Promotion,Master Base Promotion") {
				AssertElementNotPresent(
					key_fieldName = ${fieldName},
					locator1 = "FormViewBuilder#OBJECT_FIELD_BUTTON_DROPDOWN");
			}
		}
	}

	@description = "COMMERCE-11758. This a test to verify that the Supplier User can delete Price lists and can create Price Lists only for catalogs the supplier account is linked to"
	@priority = 5
	test CanSupplierAddAndRemovePriceLists {
		property portal.acceptance = "true";

		task ("Given a Supplier account with a user that has the role 'Supplier'") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Supplier Account",
				accountType = "Supplier",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "supplier@liferay.com",
				userFirstName = "Supplier",
				userLastName = "User",
				userRole = "Account Supplier",
				userScreenName = "supplieruser");
		}

		task ("And a new Catalog is created") {
			CommerceJSONCatalogsAPI._addCatalog(catalogName = "Test Catalog");
		}

		task ("And the Account Id is linked to the new Catalog") {
			CommerceJSONCatalogsAPI._patchCommerceCatalog(
				accountIdByName = "Supplier Account",
				catalogName = "Test Catalog");
		}

		task ("And the supplier logs in") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "supplier@liferay.com",
				userLoginFullName = "Supplier User");
		}

		task ("When the supplier adds a new price list") {
			CommercePriceLists.openPriceListsAdmin();

			Click(locator1 = "CommerceEntry#ADD_BUTTON");

			WaitForElementPresent(locator1 = "IFrame#MODAL_BODY");

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

			Type(
				locator1 = "TextInput#NAME",
				value1 = "Test Catalog New Price List");

			AssertElementPresent(
				key_contentName = "Test Catalog",
				locator1 = "APConfiguration#SELECT_MORE_THAN_ONE_ASSET_TYPE_CONTENT");

			AssertElementNotPresent(
				key_contentName = "Minium",
				locator1 = "APConfiguration#SELECT_MORE_THAN_ONE_ASSET_TYPE_CONTENT");

			Select(
				key_fieldLabel = "Catalog",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Test Catalog");

			Select(
				key_fieldLabel = "Currency",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "USD");

			AssertClickNoError(
				locator1 = "Button#SUBMIT",
				value1 = "Submit");
		}

		task ("Then the entry is successfully created") {
			CommercePriceLists.openPriceListsAdmin();

			AssertElementPresent(
				key_entryName = "Test Catalog New Price List",
				locator1 = "CommerceNavigation#ENTRY_NAME");
		}

		task ("When the supplier tries to delete the price list") {
			Click(
				key_value = "Test Catalog New Price List",
				locator1 = "CommerceEntry#BODY_VERTICAL_ELLIPSIS");

			CommerceEntry.clickNoError(menuItem = "Delete");
		}

		task ("Then the entry is successfully deleted") {
			AssertElementNotPresent(
				key_entryName = "Test Catalog New Price List",
				locator1 = "CommerceNavigation#ENTRY_NAME");
		}
	}

	@description = "COMMERCE-11843. This a test to verify that the Supplier User can delete Promotion and can create Promotion only for catalogs the supplier account is linked to (COMMERCE-11758)"
	@priority = 5
	test CanSupplierAddAndRemovePromotion {
		property portal.acceptance = "true";

		task ("Given a Supplier account with a user that has the role 'Supplier'") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Supplier Account",
				accountType = "Supplier",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "supplier@liferay.com",
				userFirstName = "Supplier",
				userLastName = "User",
				userRole = "Account Supplier",
				userScreenName = "supplieruser");
		}

		task ("And a new Catalog is created") {
			CommerceJSONCatalogsAPI._addCatalog(catalogName = "Test Catalog");
		}

		task ("And the Account Id is linked to the new Catalog") {
			CommerceJSONCatalogsAPI._patchCommerceCatalog(
				accountIdByName = "Supplier Account",
				catalogName = "Test Catalog");
		}

		task ("And the supplier logs in") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "supplier@liferay.com",
				userLoginFullName = "Supplier User");
		}

		task ("When the supplier adds a new promotion") {
			CommercePromotions.openPromotionsAdmin();

			Click(locator1 = "CommerceEntry#ADD_BUTTON");

			WaitForElementPresent(locator1 = "IFrame#MODAL_BODY");

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

			Type(
				locator1 = "TextInput#NAME",
				value1 = "Test Catalog New Promotion");

			AssertElementPresent(
				key_contentName = "Test Catalog",
				locator1 = "APConfiguration#SELECT_MORE_THAN_ONE_ASSET_TYPE_CONTENT");

			AssertElementNotPresent(
				key_contentName = "Minium",
				locator1 = "APConfiguration#SELECT_MORE_THAN_ONE_ASSET_TYPE_CONTENT");

			Select(
				key_fieldLabel = "Catalog",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Test Catalog");

			Select(
				key_fieldLabel = "Currency",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "USD");

			AssertClickNoError(
				locator1 = "Button#SUBMIT",
				value1 = "Submit");
		}

		task ("Then the entry is successfully created") {
			CommercePromotions.openPromotionsAdmin();

			AssertElementPresent(
				key_entryName = "Test Catalog New Promotion",
				locator1 = "CommerceNavigation#ENTRY_NAME");
		}

		task ("When the supplier tries to delete the promotion") {
			Click(
				key_value = "Test Catalog New Promotion",
				locator1 = "CommerceEntry#BODY_VERTICAL_ELLIPSIS");

			CommerceEntry.clickNoError(menuItem = "Delete");
		}

		task ("Then the entry is successfully deleted") {
			AssertElementNotPresent(
				key_entryName = "Test Catalog New Promotion",
				locator1 = "CommerceNavigation#ENTRY_NAME");
		}
	}

	@description = "COMMERCE-11840. This a test to verify that the Supplier User can add a Bulk Pricing entry for a Price List"
	@priority = 5
	test CanSupplierAddPriceListBulkPricingEntry {
		property portal.acceptance = "true";

		task ("Given an account with a buyer user") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("Given a Supplier account with a user that has the role 'Supplier'") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Supplier Account",
				accountType = "Supplier",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "supplier@liferay.com",
				userFirstName = "Supplier",
				userLastName = "User",
				userRole = "Account Supplier",
				userScreenName = "supplieruser");
		}

		task ("And a Price List is created for the Minium catalog") {
			CommerceJSONPriceListsAndPromotionsAPI._addPriceList(
				catalogName = "Minium",
				currencyCode = "USD",
				priceListName = "Test New Price List",
				priority = 0);
		}

		task ("And the Account Id is linked to the Catalog") {
			CommerceJSONCatalogsAPI._patchCommerceCatalog(
				accountIdByName = "Supplier Account",
				catalogName = "Minium");
		}

		task ("And the supplier logs in") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "supplier@liferay.com",
				userLoginFullName = "Supplier User");
		}

		task ("When the supplier adds a Price List Bulk Pricing entry") {
			CommercePriceLists.openPriceListsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test New Price List");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceRelations.assignSingleRelationToProductsEntry(
				entryName = "MIN93015",
				title = "Add SKUs");

			Refresh();

			CommerceNavigator.gotoEntry(entryName = "MIN93015");

			CommercePriceLists.editPriceListEntryPrice(priceListEntryPrice = 50);

			Click(locator1 = "Icon#CLOSE");

			SelectFrameTop();

			CommerceNavigator.gotoEntry(entryName = "MIN93015");

			CommercePriceLists.createPriceListPriceTiers(
				key_pricingType = "Bulk Pricing",
				key_quantity = 2,
				key_value = 1000);
		}

		task ("Then buyers can see the bulk price applied in the storefront") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceAcceleratorsInitializer.changeProductsSorting(sortingType = "Name Ascending");

			FrontStore.addInitializerProductToCart(
				productName = "ABS Sensor",
				productQuantity = 2);

			CommerceNavigator.gotoMiniCart();

			FrontStore.viewMiniCartItem(
				cartItemName = "ABS Sensor",
				cartItemPriceValue = "1,000.00",
				cartItemQuantity = 2,
				cartItemSku = "MIN93015");
		}
	}

	@description = "COMMERCE-11841. This a test to verify that the Supplier User can add a Tiered Pricing entry for a Price List"
	@priority = 5
	test CanSupplierAddPriceListTieredPricingEntry {
		property portal.acceptance = "true";

		task ("Given an account with a buyer user") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("Given a Supplier account with a user that has the role 'Supplier'") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Supplier Account",
				accountType = "Supplier",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "supplier@liferay.com",
				userFirstName = "Supplier",
				userLastName = "User",
				userRole = "Account Supplier",
				userScreenName = "supplieruser");
		}

		task ("And a Price List is created for the Minium catalog") {
			CommerceJSONPriceListsAndPromotionsAPI._addPriceList(
				catalogName = "Minium",
				currencyCode = "USD",
				priceListName = "Test New Price List",
				priority = 0);
		}

		task ("And the Account Id is linked to the Catalog") {
			CommerceJSONCatalogsAPI._patchCommerceCatalog(
				accountIdByName = "Supplier Account",
				catalogName = "Minium");
		}

		task ("And the supplier logs in") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "supplier@liferay.com",
				userLoginFullName = "Supplier User");
		}

		task ("When the supplier adds a Price List Tiered Pricing entry") {
			CommercePriceLists.openPriceListsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test New Price List");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceRelations.assignSingleRelationToProductsEntry(
				entryName = "MIN93015",
				title = "Add SKUs");

			Refresh();

			CommerceNavigator.gotoEntry(entryName = "MIN93015");

			CommercePriceLists.editPriceListEntryPrice(priceListEntryPrice = 50);

			Click(locator1 = "Icon#CLOSE");

			SelectFrameTop();

			CommerceNavigator.gotoEntry(entryName = "MIN93015");

			CommercePriceLists.createPriceListPriceTiers(
				key_pricingType = "Tiered Pricing",
				key_quantity = 2,
				key_value = 1000);
		}

		task ("Then buyers can see the tiered price applied in the storefront") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceAcceleratorsInitializer.changeProductsSorting(sortingType = "Name Ascending");

			FrontStore.addInitializerProductToCart(
				productName = "ABS Sensor",
				productQuantity = 2);

			CommerceNavigator.gotoMiniCart();

			FrontStore.viewMiniCartItem(
				cartItemName = "ABS Sensor",
				cartItemPriceValue = "525.00",
				cartItemQuantity = 2,
				cartItemSku = "MIN93015");
		}
	}

	@description = "COMMERCE-11843. This a test to verify that the Supplier User can add a Bulk Pricing entry for a Promotion (COMMERCE-11840)"
	@priority = 5
	test CanSupplierAddPromotionBulkPricingEntry {
		property portal.acceptance = "true";

		task ("Given an account with a buyer user") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("Given a Supplier account with a user that has the role 'Supplier'") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Supplier Account",
				accountType = "Supplier",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "supplier@liferay.com",
				userFirstName = "Supplier",
				userLastName = "User",
				userRole = "Account Supplier",
				userScreenName = "supplieruser");
		}

		task ("And a Promotion is created for the Minium catalog") {
			CommerceJSONPriceListsAndPromotionsAPI._addPromotion(
				catalogName = "Minium",
				currencyCode = "USD",
				priority = 0,
				promotionName = "Test New Promotion");
		}

		task ("And the Account Id is linked to the Catalog") {
			CommerceJSONCatalogsAPI._patchCommerceCatalog(
				accountIdByName = "Supplier Account",
				catalogName = "Minium");
		}

		task ("And the supplier logs in") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "supplier@liferay.com",
				userLoginFullName = "Supplier User");
		}

		task ("When the supplier adds a Promotion Bulk Pricing entry") {
			CommercePromotions.openPromotionsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test New Promotion");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceRelations.assignSingleRelationToProductsEntry(
				entryName = "MIN93015",
				title = "Add SKUs");

			Refresh();

			CommerceNavigator.gotoEntry(entryName = "MIN93015");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceSKUs.setSkuPricing(promoPrice = 20);

			Button.clickSave();

			Click(locator1 = "Icon#CLOSE");

			SelectFrameTop();

			CommerceNavigator.gotoEntry(entryName = "MIN93015");

			CommercePriceLists.createPriceListPriceTiers(
				key_pricingType = "Bulk Pricing",
				key_quantity = 2,
				key_value = 10);
		}

		task ("Then buyers can see the bulk price applied in the storefront") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceAcceleratorsInitializer.changeProductsSorting(sortingType = "Name Ascending");

			FrontStore.addInitializerProductToCart(
				productName = "ABS Sensor",
				productQuantity = 2);

			CommerceNavigator.gotoMiniCart();

			AssertTextEquals.assertPartialText(
				locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE_INACTIVE",
				value1 = 50);

			AssertTextEquals.assertPartialText(
				locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE_PROMO",
				value1 = 10);

			FrontStore.viewMiniCartItem(
				cartItemName = "ABS Sensor",
				cartItemQuantity = 2,
				cartItemSku = "MIN93015");
		}
	}

	@description = "COMMERCE-11843. This a test to verify that the Supplier User can add a Tiered Pricing entry for a Promotion (COMMERCE-11841)"
	@priority = 5
	test CanSupplierAddPromotionTieredPricingEntry {
		property portal.acceptance = "true";

		task ("Given an account with a buyer user") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("Given a Supplier account with a user that has the role 'Supplier'") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Supplier Account",
				accountType = "Supplier",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "supplier@liferay.com",
				userFirstName = "Supplier",
				userLastName = "User",
				userRole = "Account Supplier",
				userScreenName = "supplieruser");
		}

		task ("And a Promotion is created for the Minium catalog") {
			CommerceJSONPriceListsAndPromotionsAPI._addPromotion(
				catalogName = "Minium",
				currencyCode = "USD",
				priority = 0,
				promotionName = "Test New Promotion");
		}

		task ("And the Account Id is linked to the Catalog") {
			CommerceJSONCatalogsAPI._patchCommerceCatalog(
				accountIdByName = "Supplier Account",
				catalogName = "Minium");
		}

		task ("And the supplier logs in") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "supplier@liferay.com",
				userLoginFullName = "Supplier User");
		}

		task ("When the supplier adds a Promotion Tiered Pricing entry") {
			CommercePromotions.openPromotionsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test New Promotion");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceRelations.assignSingleRelationToProductsEntry(
				entryName = "MIN93015",
				title = "Add SKUs");

			Refresh();

			CommerceNavigator.gotoEntry(entryName = "MIN93015");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceSKUs.setSkuPricing(promoPrice = 20);

			Button.clickSave();

			Click(locator1 = "Icon#CLOSE");

			SelectFrameTop();

			CommerceNavigator.gotoEntry(entryName = "MIN93015");

			CommercePriceLists.createPriceListPriceTiers(
				key_pricingType = "Tiered Pricing",
				key_quantity = 2,
				key_value = 10);
		}

		task ("Then buyers can see the tiered price applied in the storefront") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceAcceleratorsInitializer.changeProductsSorting(sortingType = "Name Ascending");

			FrontStore.addInitializerProductToCart(
				productName = "ABS Sensor",
				productQuantity = 2);

			CommerceNavigator.gotoMiniCart();

			AssertTextEquals.assertPartialText(
				locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE_INACTIVE",
				value1 = 50);

			AssertTextEquals.assertPartialText(
				locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE_PROMO",
				value1 = 15);

			FrontStore.viewMiniCartItem(
				cartItemName = "ABS Sensor",
				cartItemQuantity = 2,
				cartItemSku = "MIN93015");
		}
	}

	@description = "COMMERCE-10893. As a supplier account user, I want to be able to create a catalog and link the supplier account to it."
	@priority = 5
	test CanSupplierCreateCatalogLinkingAccount {
		property portal.acceptance = "true";

		task ("Given a Supplier account with a supplier user") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Supplier Account 1",
				accountEntryType = "Supplier");

			JSONAccountEntryUser.addAccountEntryUser(
				accountEntryName = "Supplier Account 1",
				userEmailAddress = "supplier@liferay.com",
				userFirstName = "Supplier",
				userLastName = "User",
				userScreenName = "supplieruser");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "supplier@liferay.com");

			JSONAccountRole.associateUser(
				accountEntryName = "Supplier Account 1",
				accountRole = "Account Supplier",
				userEmailAddress = "supplier@liferay.com");
		}

		task ("When the supplier user logs in") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "supplier@liferay.com",
				userLoginFullName = "Supplier User");
		}

		task ("Then can create a new catalog with the Supplier Account 1 that is automatically set") {
			CommerceCatalog.openCatalogsAdmin();

			Click(locator1 = "Button#PLUS");

			CommerceEntry.addNewCatalogsEntry(
				catalogCurrency = "US Dollar",
				catalogLanguage = "English (United States)",
				catalogName = "Test Catalog 1");

			AssertClickNoError(
				locator1 = "Button#SUBMIT",
				value1 = "Submit");

			SelectFrameTop();

			CommerceEntry.viewCatalogsEntry(
				catalogCurrency = "US Dollar",
				catalogLanguage = "English (United States)",
				catalogName = "Test Catalog 1",
				linkCatalogSupplier = "true",
				supplierAccountName = "Supplier Account 1");
		}

		task ("And can verify that the linked account field cannot be edited") {
			AssertElementPresent(
				key_text = "Link Catalog to a Supplier",
				locator1 = "CommerceEntry#ANY_TEXT_INPUT_DISABLED",
				value1 = "Supplier Account 1");
		}

		task ("When another supplier account is created and associated to the supplier user") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Supplier Account 2",
				accountEntryType = "Supplier");

			JSONAccountEntryUser.addExistUsertoAccount(
				accountEntryName = "Supplier Account 2",
				userEmailAddress = "supplier@liferay.com");
		}

		task ("Then supplier user can create a new catalog choosing one of the accounts from the list") {
			CommerceCatalog.openCatalogsAdmin();

			Click(locator1 = "Button#PLUS");

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

			Click(
				key_label = "Link Catalog to a Supplier",
				locator1 = "CommerceEntry#ANY_AUTOCOMPLETE_CONTAINS_TEXT_FIELD");

			for (var supplierAccountName : list "Supplier Account 1,Supplier Account 2") {
				AssertElementPresent(
					key_categoryName = ${supplierAccountName},
					locator1 = "CommerceEntry#COMMERCE_CATEGORY_AUTOCOMPLETE_SPECIFIC");
			}

			Type(
				locator1 = "CommerceEntry#NAME_FIELD",
				value1 = "Test Catalog 2");

			Click(
				key_label = "Link Catalog to a Supplier",
				locator1 = "CommerceEntry#ANY_AUTOCOMPLETE_CONTAINS_TEXT_FIELD");

			Click(
				key_categoryName = "Supplier Account 2",
				locator1 = "CommerceEntry#COMMERCE_CATEGORY_AUTOCOMPLETE_SPECIFIC");

			AssertClickNoError(
				locator1 = "Button#SUBMIT",
				value1 = "Submit");

			SelectFrameTop();

			CommerceEntry.viewCatalogsEntry(
				catalogCurrency = "US Dollar",
				catalogLanguage = "English (United States)",
				catalogName = "Test Catalog 2",
				linkCatalogSupplier = "true",
				supplierAccountName = "Supplier Account 2");
		}
	}

	@description = "COMMERCE-10893. As a supplier account user, I can only delete a catalog that I created and cannot delete other catalogs even though they are linked to the account."
	@priority = 5
	test CanSupplierDeleteOnlyOwnCatalogs {
		property portal.acceptance = "true";

		task ("Given a Supplier account with a supplier user") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Commerce Supplier",
				accountEntryType = "Supplier");

			JSONAccountEntryUser.addAccountEntryUser(
				accountEntryName = "Commerce Supplier",
				userEmailAddress = "supplier@liferay.com",
				userFirstName = "Supplier",
				userLastName = "User",
				userScreenName = "supplieruser");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "supplier@liferay.com");

			JSONAccountRole.associateUser(
				accountEntryName = "Commerce Supplier",
				accountRole = "Account Supplier",
				userEmailAddress = "supplier@liferay.com");
		}

		task ("And Supplier account is linked to a catalog") {
			var accountId = CommerceJSONAccountsAPI.getAccountFieldByAccountName(
				accountName = "Commerce Supplier",
				field = "id");

			CommerceJSONCatalogsAPI._patchCommerceCatalog(
				accountId = ${accountId},
				catalogName = "Minium");
		}

		task ("And the supplier user logs in") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "supplier@liferay.com",
				userLoginFullName = "Supplier User");
		}

		task ("And creates a new catalog linking the Commerce Supplier Account to it") {
			CommerceCatalog.openCatalogsAdmin();

			Click(locator1 = "Button#PLUS");

			CommerceEntry.addNewCatalogsEntry(
				catalogCurrency = "US Dollar",
				catalogLanguage = "English (United States)",
				catalogName = "Test Catalog",
				linkCatalogSupplier = "true",
				supplierAccountName = "Commerce Supplier");

			AssertClickNoError(
				locator1 = "Button#SUBMIT",
				value1 = "Submit");

			SelectFrameTop();
		}

		task ("Then the supplier user can view only the catalogs the account is linked to") {
			Click(locator1 = "Icon#BACK");

			AssertElementPresent(
				key_entryName = "Minium",
				locator1 = "CommerceNavigation#ENTRY_NAME");

			AssertElementPresent(
				key_entryName = "Test Catalog",
				locator1 = "CommerceNavigation#ENTRY_NAME");

			AssertElementNotPresent(
				key_entryName = "Master",
				locator1 = "CommerceNavigation#ENTRY_NAME");
		}

		task ("And can delete only the own catalog but cannot delete the catalog created by other users") {
			ClickNoError(
				key_value = "Test Catalog",
				locator1 = "CommerceEntry#BODY_VERTICAL_ELLIPSIS");

			CommerceEntry.clickNoError(menuItem = "Delete");

			AssertElementNotPresent(
				key_entryName = "Test Catalog",
				locator1 = "CommerceNavigation#ENTRY_NAME");

			AssertElementNotPresent(
				key_value = "Minium",
				locator1 = "CommerceEntry#BODY_VERTICAL_ELLIPSIS");
		}
	}

	@description = "This is a test for COMMERCE-11888. As a supplier user, I can edit the order details and payments of an order"
	@priority = 5
	test CanSupplierEditOrderDetailsAndPayments {
		property portal.acceptance = "true";

		task ("Given a business account with billing and shipping addresses is created") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Commerce Account",
				accountEntryType = "Business");

			CommerceJSONAccountsAPI._addCommerceAccountAddress(
				accountEntryName = "Commerce Account",
				city = "Test City",
				countryISOCode = "US",
				name = "Test Address",
				street1 = "Test Street",
				zip = "Test Zip Code");
		}

		task ("And a Supplier account with a supplier user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Supplier Account",
				accountType = "Supplier",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "supplier@liferay.com",
				userFirstName = "Supplier",
				userLastName = "User",
				userRole = "Account Supplier",
				userScreenName = "supplieruser");
		}

		task ("And the Supplier Account is linked to Minium Channel") {
			CommerceJSONChannelsAPI._patchCommerceChannel(
				accountIdByName = "Supplier Account",
				channelName = "Minium Portal");
		}

		task ("And two active Delivery, Payment type terms are created") {
			for (var termsType : list "Delivery,Payment") {
				CommerceJSONTermsAndConditionsAPI._addCommerceTermsAndConditions(
					termsCount = 2,
					termsType = ${termsType});
			}
		}

		task ("And an active order types is created") {
			CommerceJSONOrdersAPI._addOrderType(
				active = "true",
				orderTypeDescription = "Test Order Type 1 Description",
				orderTypeName = "Order Type 1");
		}

		task ("And two active payment methods eligible for the payment terms, one shipping method eligible for the delivery terms are added") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			for (var paymentMethods : list "Money Order,PayPal") {
				CommerceChannels.activatePaymentMethod(paymentMethod = ${paymentMethods});

				CommerceEntry.clickTableEntryEditButton(
					entryName = ${paymentMethods},
					table = "Payment Methods");

				SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

				CommerceEntry.gotoMenuTab(menuTab = "Eligibility");

				CommerceEntry.setEntryEligibility(paymentTermsEligibility = "Payment Term 1,Payment Term 2");

				Click(locator1 = "Icon#CLOSE");

				SelectFrame.selectFrameTop();
			}

			CommerceEntry.setEntryEligibility(
				deliveryTermsEligibility = "Delivery Term 1,Delivery Term 2",
				shippingMethod = "Flat Rate",
				shippingOption = "Standard Delivery");
		}

		task ("And an order is placed") {
			CommerceJSONOrdersAPI._addCommerceOrder(
				accountEntryName = "Commerce Account",
				billingAddressName = "Test Address",
				deliveryTermName = "delivery-term-2",
				orderItems = "MIN55861:1",
				orderStatus = 1,
				paymentMethod = "money-order",
				paymentStatus = 2,
				paymentTermName = "payment-term-2",
				printedNote = "Order printed note",
				purchaseOrderNumber = "Abcd1234",
				requestedDeliveryDate = "2023-07-06",
				shippingAddressName = "Test Address",
				shippingOption = "Standard Delivery");
		}

		task ("Then the supplier user can edit the order details and payments of the order") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "supplier@liferay.com",
				userLoginFullName = "Supplier User");

			CommerceOrders.openOrdersAdmin();

			CommerceNavigator.gotoOrderEntryViaAdmin(status = "Pending");

			Click(
				key_text = "Accept Order",
				locator1 = "Link#ANY");

			Alert.viewSuccessMessage();

			CommerceOrders.viewOrdersEntry(
				addressAddress = "Test Street",
				addressCity = "Test City",
				addressZipCode = "Test Zip Code",
				deliveryTerm = "Delivery Term 2",
				orderType = "Order Type 1",
				paymentMethod = "Money Order",
				paymentTerm = "Payment Term 2",
				printedNote = "Order printed note",
				purchaseOrderNumber = "Abcd1234",
				requestedDeliveryDate = "7/6/23");

			CommerceEntry.gotoMenuTab(menuTab = "General");

			AssertElementNotPresent(
				key_buttonName = "Edit",
				key_titleName = "Order Type",
				locator1 = "CommerceOrders#ORDER_GENERAL_DETAILS_ADD_EDIT_BUTTON");

			for (var addressType : list "Billing,Shipping") {
				AssertClickNoError(
					key_text = "${addressType} Address",
					locator1 = "CommerceOrders#EDIT_SHIPMENT_DETAILS",
					value1 = "Edit");

				CommerceOrders.editOrderAddressCP(
					editedCity = "Test City Edit",
					editedCountry = "Italy",
					editedName = "Test Address Edit",
					editedRegion = "Lombardia",
					editedStreet1 = "Test Street Edit",
					editedZipCode = "Test Zip Code Edit");
			}

			CommerceOrders.editOrderDetails(
				printedNote = "Test Print Note Content",
				purchaseOrderNumber = 0100,
				requestedDeliveryDate = "7/7/23");

			for (var termType : list "Payment,Delivery") {
				CommerceOrders.editOrdersEntryTerms(
					newTerm = "${termType} Term 1",
					type = ${termType});
			}

			CommerceEntry.gotoMenuTab(menuTab = "Payments");

			CommerceOrders.editPaymentMethod(
				eligiblePaymentMethods = "Money Order,PayPal",
				notEligiblePaymentMethods = "Authorize.Net",
				paymentMethod = "PayPal");

			CommerceEntry.gotoMenuTab(menuTab = "General");

			CommerceOrders.viewOrdersEntry(
				addressAddress = "Test Street Edit",
				addressCity = "Test City Edit",
				addressZipCode = "Test Zip Code Edit",
				deliveryTerm = "Delivery Term 1",
				orderType = "Order Type 1",
				paymentMethod = "PayPal",
				paymentTerm = "Payment Term 1",
				printedNote = "Test Print Note Content",
				purchaseOrderNumber = 0100,
				requestedDeliveryDate = "7/7/23");

			AssertElementPresent(
				locator1 = "CommerceEntry#ORDER_PAYMENT_STATUS",
				paymentStatus = "Authorized");

			CommerceOrders.editPaymentStatus(paymentStatus = "Completed");

			AssertElementPresent(
				locator1 = "CommerceEntry#ORDER_PAYMENT_STATUS",
				paymentStatus = "Completed");
		}
	}

	@description = "This is a test for COMMERCE-11888. As a supplier user, I can edit the order items of an order"
	@priority = 5
	test CanSupplierEditOrderItems {
		property portal.acceptance = "true";

		task ("Given a Minium site with a buyer user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And a Supplier account with a supplier user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Supplier Account",
				accountType = "Supplier",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "supplier@liferay.com",
				userFirstName = "Supplier",
				userLastName = "User",
				userRole = "Account Supplier",
				userScreenName = "supplieruser");
		}

		task ("And the Supplier Account is linked to Minium Channel") {
			CommerceJSONChannelsAPI._patchCommerceChannel(
				accountIdByName = "Supplier Account",
				channelName = "Minium Portal");
		}

		task ("And an SKU Contributor option with two values is assigned to a product U-Joint") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "U-Joint");

			CommerceEntry.gotoMenuTab(menuTab = "Options");

			CommerceProductOptions.createProductOption(key_optionName = "Option 1");

			CommerceEntry.gotoMenuTab(menuTab = "Options");

			CommerceProductOptions.editProductOption(
				key_fieldType = "Select from List",
				key_option = "Option 1",
				key_priceType = "Dynamic",
				productOptionPriceType = "true",
				productOptionRequired = "true",
				productOptionSkuContributor = "true");

			for (var valueName : list "value1,value2") {
				CommerceProductOptions.createProductOptionValue(key_name = ${valueName});

				SelectFrame.selectFrameTop();

				SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");
			}

			Click(locator1 = "Icon#CLOSE");

			SelectFrameTop();

			var optionValueList = "value1:MIN93015,value2:MIN93020";

			for (var optionValue : list ${optionValueList}) {
				var optionValueName = StringUtil.extractFirst(${optionValue}, ":");
				var sku = StringUtil.extractLast(${optionValue}, ":");

				CommerceNavigator.gotoEntry(entryName = "Option 1");

				CommerceProductOptions.editOptionValue(
					optionValue = ${optionValueName},
					sku = ${sku});
			}

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceSKUs.generateAllSkuCombinations();

			var valueList = "VALUE1:10,VALUE2:20";

			for (var value : list ${valueList}) {
				var sku = StringUtil.extractFirst(${value}, ":");
				var priceAndQuantity = StringUtil.extractLast(${value}, ":");

				CommerceNavigator.gotoEntry(entryName = ${sku});

				CommerceEntry.editSkuPricingAndInventory(
					basePrice = ${priceAndQuantity},
					italyQuantity = ${priceAndQuantity},
					publish = "true");
			}
		}

		task ("When the buyer checkout an order") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			Click(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_VIEW_ALL_VARIANTS");

			FrontStore.addToCartFromProductDetails(
				optionNamesAndValues = "Option 1:value2",
				productName = "U-Joint",
				productSku = "VALUE2");

			CommerceCheckout.gotoCheckout();

			CommerceCheckout.checkout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				shippingMethod = "Standard");
		}

		task ("Then the supplier user can edit the order items of the order") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "supplier@liferay.com",
				userLoginFullName = "Supplier User");

			CommerceOrders.openOrdersAdmin();

			CommerceNavigator.gotoOrderEntryViaAdmin(status = "Pending");

			Click(
				key_text = "Accept Order",
				locator1 = "Link#ANY");

			Alert.viewSuccessMessage();

			CommerceOrders.viewOrdersEntry(
				productDiscount = "0.00",
				productListPrice = "60.00",
				productName = "U-Joint",
				productOptions = "value2",
				productQuantity = "1.00",
				productSku = "VALUE2",
				productTotalPrice = "60.00");

			CommerceOrders.viewOrdersEntry(
				productDiscount = "0.00",
				productListPrice = "40.00",
				productName = "Brake Rotors",
				productQuantity = "1.00",
				productSku = "MIN93020",
				productTotalPrice = "40.00");

			CommerceOrders.editOrderItemDetails(
				orderItemDeliveryGroup = "Supplier Delivery Group",
				orderItemDiscount = "5.00",
				orderItemMeasurementUnit = "meters",
				orderItemPrice = "10.00",
				orderItemQuantity = 2,
				orderItemRequestedDeliveryDate = "07/06/2023",
				orderItemSku = "VALUE2",
				orderItemTotal = "10.00");

			CommerceOrders.viewOrdersEntry(
				productDeliveryDate = "7/6/23",
				productDeliveryGroup = "Supplier Delivery Group",
				productDiscount = "5.00",
				productListPrice = "50.00",
				productName = "U-Joint",
				productOptions = "value2",
				productQuantity = "2.00 meters",
				productSku = "VALUE2",
				productTotalPrice = "50.00");

			AssertTextEquals(
				key_columnIndex = 9,
				key_rowIndex = 1,
				locator1 = "CommerceEntry#TABLE_ENTRY_ROW_NESTED_FIELD_GENERIC",
				value1 = "2.00");
		}
	}

	@description = "This is a test for COMMERCE-11888. As a supplier user, I can edit the order notes of an order"
	@priority = 5
	test CanSupplierEditOrderNotes {
		property portal.acceptance = "true";

		task ("Given a Minium site with a buyer user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And a Supplier account with a supplier user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Supplier Account",
				accountType = "Supplier",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "supplier@liferay.com",
				userFirstName = "Supplier",
				userLastName = "User",
				userRole = "Account Supplier",
				userScreenName = "supplieruser");
		}

		task ("And the Supplier Account is linked to Minium Channel") {
			CommerceJSONChannelsAPI._patchCommerceChannel(
				accountIdByName = "Supplier Account",
				channelName = "Minium Portal");
		}

		task ("And the buyer checkout an order") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 1);

			CommerceCheckout.gotoCheckout();

			CommerceCheckout.checkout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				shippingMethod = "Standard");
		}

		task ("When two order notes of the supplier order are created via JSON") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "supplier@liferay.com",
				userLoginFullName = "Supplier User");

			var orderId = CommerceJSONOrdersAPI._getCommerceOrderIds(email = "supplier@liferay.com");

			CommerceJSONOrdersAPI._addCommerceOrderNote(
				content = "This is a private Commerce Order Test Note.",
				orderId = ${orderId},
				restricted = "true",
				userEmail = "supplier");

			CommerceJSONOrdersAPI._addCommerceOrderNote(
				content = "This is a public Commerce Order Test Note.",
				orderId = ${orderId},
				restricted = "false",
				userEmail = "supplier");
		}

		task ("Then the order notes can be displayed on UI") {
			CommerceOrders.openOrdersAdmin();

			CommerceNavigator.gotoOrderEntryViaAdmin(status = "Pending");

			Click(
				key_text = "Accept Order",
				locator1 = "Link#ANY");

			Alert.viewSuccessMessage();

			CommerceEntry.gotoMenuTab(menuTab = "Notes");

			CommerceOrders.viewCPCommerceOrderNote(
				commerceOrderNoteAuthor = "Supplier User",
				commerceOrderNoteBody = "This is a private Commerce Order Test Note.",
				restricted = "true",
				userEmailAddress = "supplier@liferay.com");

			CommerceOrders.viewCPCommerceOrderNote(
				commerceOrderNoteAuthor = "Supplier User",
				commerceOrderNoteBody = "This is a public Commerce Order Test Note.",
				userEmailAddress = "supplier@liferay.com");
		}

		task ("And the supplier user can edit the order notes") {
			CommerceOrders.editCommerceOrderNote(
				orderNoteBody = "This is a public Commerce Order Test Note.",
				orderNoteBodyEdit = "This is a Commerce Order Test Note Edit from public to private.",
				restricted = "true");

			CommerceOrders.viewCPCommerceOrderNote(
				commerceOrderNoteAuthor = "Supplier User",
				commerceOrderNoteBody = "This is a Commerce Order Test Note Edit from public to private.",
				restricted = "true",
				userEmailAddress = "supplier@liferay.com");
		}
	}

	@description = "This is a test for COMMERCE-11888. As a supplier user, I can edit the order shipments details of an order"
	@priority = 5
	test CanSupplierEditOrderShipmentsDetails {
		property portal.acceptance = "true";

		task ("Given a business account with billing and shipping addresses is created") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Commerce Account",
				accountEntryType = "Business");

			CommerceJSONAccountsAPI._addCommerceAccountAddress(
				accountEntryName = "Commerce Account",
				city = "Test City",
				countryISOCode = "US",
				name = "Test Address",
				street1 = "Test Street",
				zip = "Test Zip Code");
		}

		task ("And a Supplier account with a supplier user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Supplier Account",
				accountType = "Supplier",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "supplier@liferay.com",
				userFirstName = "Supplier",
				userLastName = "User",
				userRole = "Account Supplier",
				userScreenName = "supplieruser");
		}

		task ("And the Supplier Account is linked to Minium Channel") {
			CommerceJSONChannelsAPI._patchCommerceChannel(
				accountIdByName = "Supplier Account",
				channelName = "Minium Portal");
		}

		task ("And Variable Rate and Flat Rate shipping method are activated for channel") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			CommerceChannels.editShippingMethod(
				active = "true",
				shippingMethod = "Variable Rate");
		}

		task ("And an order is placed") {
			CommerceJSONOrdersAPI._addCommerceOrder(
				accountEntryName = "Commerce Account",
				orderItems = "MIN55861:1",
				orderStatus = 1,
				paymentMethod = "money-order",
				paymentStatus = 2,
				shippingAddressName = "Test Address",
				shippingOption = "Standard Delivery");
		}

		task ("Then the supplier user can edit the order shipment details of the order") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "supplier@liferay.com",
				userLoginFullName = "Supplier User");

			CommerceOrders.openOrdersAdmin();

			CommerceNavigator.gotoOrderEntryViaAdmin(status = "Pending");

			Click(
				key_text = "Accept Order",
				locator1 = "Link#ANY");

			Alert.viewSuccessMessage();

			CommerceEntry.gotoMenuTab(menuTab = "Shipments");

			Click(
				key_text = "Create Shipment",
				locator1 = "Button#ANY");

			CommerceOrders.viewOrderShipmentDetails(
				addressAddress = "Test Address",
				addressCity = "Test City",
				addressCountry = "united-states",
				addressStreet1 = "Test Street",
				addressZipCode = "Test Zip Code",
				carrierShippingMethod = "Flat Rate");

			CommerceOrders.editOrderShipmentDetails(
				carrierBaseTrackingURL = "www.variableratecarriersite.com/",
				carrierName = "Test Carrier",
				carrierShippingMethod = "Variable Rate",
				carrierTrackingNumber = 123456789,
				estimatedDeliveryDate = "07/06/2023",
				estimatedShippingDate = "07/06/2023",
				shippingAddressCity = "Test City Edit",
				shippingAddressCountry = "Brazil",
				shippingAddressName = "Test Address Edit",
				shippingAddressRegion = "Acre",
				shippingAddressStreet1 = "Test Street Edit",
				shippingAddressZipCode = "Test Zip Code Edit");

			CommerceOrders.viewOrderShipmentDetails(
				addressAddress = "Test Address Edit",
				addressCity = "Test City Edit",
				addressCountry = "brazil",
				addressStreet1 = "Test Street Edit",
				addressZipCode = "Test Zip Code Edit",
				carrierBaseTrackingURL = "www.variableratecarriersite.com/",
				carrierName = "Test Carrier",
				carrierShippingMethod = "Variable Rate",
				carrierTrackingNumber = 123456789,
				estimatedDeliveryDate = "Jul 6, 2023",
				estimatedShippingDate = "Jul 6, 2023");
		}
	}

	@description = "This is a test for COMMERCE-11888. As a supplier user, I can edit the order summary of an order"
	@priority = 5
	test CanSupplierEditOrderSummary {
		property portal.acceptance = "true";

		task ("Given a Minium site with a buyer user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And a Supplier account with a supplier user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Supplier Account",
				accountType = "Supplier",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "supplier@liferay.com",
				userFirstName = "Supplier",
				userLastName = "User",
				userRole = "Account Supplier",
				userScreenName = "supplieruser");
		}

		task ("And the Supplier Account is linked to Minium Channel") {
			CommerceJSONChannelsAPI._patchCommerceChannel(
				accountIdByName = "Supplier Account",
				channelName = "Minium Portal");
		}

		task ("And a 10$ discount is applied on the subtotal of the order") {
			CommerceJSONDiscountsAPI._addDiscount(
				active = "true",
				level = "L1",
				percentageLevel1 = 10,
				target = "subtotal",
				title = "Discount 1",
				usePercentage = "false");
		}

		task ("When the buyer checkout an order") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 1);

			CommerceCheckout.gotoCheckout();

			CommerceCheckout.checkout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				shippingMethod = "Standard");
		}

		task ("Then the supplier user can edit the order summary of the order") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "supplier@liferay.com",
				userLoginFullName = "Supplier User");

			CommerceOrders.openOrdersAdmin();

			CommerceNavigator.gotoOrderEntryViaAdmin(status = "Pending");

			Click(
				key_text = "Accept Order",
				locator1 = "Link#ANY");

			Alert.viewSuccessMessage();

			CommerceOrders.viewOrderSummary(
				deliveryDiscountValue = "$ 0.00",
				deliveryValue = "$ 15.00",
				subtotalDiscountValue = "$ 10.00",
				subtotalValue = "$ 24.00",
				taxValue = "$ 0.00",
				totalDiscountValue = "$ 0.00",
				totalValue = "$ 29.00");

			CommerceOrders.editOrderSummary(
				deliveryDiscountNewValue = "10.00",
				deliveryNewValue = "20.00",
				subtotalDiscountNewValue = "15.00",
				subtotalNewValue = "30.00",
				taxNewValue = "5.00",
				totalDiscountNewValue = "15.00",
				totalNewValue = "30.00");

			CommerceOrders.viewOrderSummary(
				deliveryDiscountValue = "$ 10.00",
				deliveryValue = "$ 20.00",
				subtotalDiscountValue = "$ 15.00",
				subtotalValue = "$ 30.00",
				taxValue = "$ 5.00",
				totalDiscountValue = "$ 15.00",
				totalValue = "$ 30.00");
		}
	}

	@description = "COMMERCE-11845. This a test to verify that the Supplier User can edit a price list details"
	@priority = 5
	test CanSupplierEditPriceListDetails {
		property portal.acceptance = "true";

		task ("Given a Supplier account with a user that has the role 'Supplier'") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Supplier Account",
				accountType = "Supplier",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "supplier@liferay.com",
				userFirstName = "Supplier",
				userLastName = "User",
				userRole = "Account Supplier",
				userScreenName = "supplieruser");
		}

		task ("And a Price List is created") {
			CommerceJSONPriceListsAndPromotionsAPI._addPriceList(
				catalogName = "Minium",
				currencyCode = "USD",
				priceListName = "Test New Price List",
				priority = 0);
		}

		task ("And a new Catalog is created") {
			CommerceJSONCatalogsAPI._addCatalog(catalogName = "Test Catalog");
		}

		task ("And the Account Id is linked to Minium Catalog") {
			CommerceJSONCatalogsAPI._patchCommerceCatalog(
				accountIdByName = "Supplier Account",
				catalogName = "Minium");
		}

		task ("And the supplier logs in") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "supplier@liferay.com",
				userLoginFullName = "Supplier User");
		}

		task ("When the supplier edits a price list details") {
			CommercePriceLists.openPriceListsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test New Price List");

			CommercePriceLists.editPriceListDetails(
				currency = "EUR",
				name = "Test New Price List Edited",
				parentPriceList = "Minium Base Price List",
				priceType = "Gross Price",
				priority = 1);
		}

		task ("Then the changes are successfully saved") {
			CommercePriceLists.openPriceListsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test New Price List Edited");

			CommercePriceLists.viewPriceListEntry(
				priceListCurrency = "EUR",
				priceListName = "Test New Price List Edited",
				priceListParent = "Minium Base Price List",
				priceListPriority = "1.0",
				priceListType = "Gross Price");
		}
	}

	@description = "COMMERCE-11842. This a test to verify that the Supplier User can edit a Price List's entry price"
	@priority = 5
	test CanSupplierEditPriceListEntryPrice {
		property portal.acceptance = "true";

		task ("Given an account with a buyer user") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("Given a Supplier account with a user that has the role 'Supplier'") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Supplier Account",
				accountType = "Supplier",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "supplier@liferay.com",
				userFirstName = "Supplier",
				userLastName = "User",
				userRole = "Account Supplier",
				userScreenName = "supplieruser");
		}

		task ("And a Price List is created for the Minium catalog") {
			CommerceJSONPriceListsAndPromotionsAPI._addPriceList(
				catalogName = "Minium",
				currencyCode = "USD",
				priceListName = "Test New Price List",
				priority = 0);
		}

		task ("And the Account Id is linked to the Catalog") {
			CommerceJSONCatalogsAPI._patchCommerceCatalog(
				accountIdByName = "Supplier Account",
				catalogName = "Minium");
		}

		task ("And the supplier logs in") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "supplier@liferay.com",
				userLoginFullName = "Supplier User");
		}

		task ("When the supplier edits a price list entry price") {
			CommercePriceLists.openPriceListsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test New Price List");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceRelations.assignSingleRelationToProductsEntry(
				entryName = "MIN93015",
				title = "Add SKUs");

			Refresh();

			CommerceNavigator.gotoEntry(entryName = "MIN93015");

			CommercePriceLists.editPriceListEntryPrice(priceListEntryPrice = 100);
		}

		task ("Then buyers can see the price list entry price applied in the storefront") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceAcceleratorsInitializer.changeProductsSorting(sortingType = "Name Ascending");

			AssertTextEquals.assertPartialText(
				key_productName = "ABS Sensor",
				locator1 = "CommerceEntry#PRODUCT_CARD_LIST_PRICE",
				value1 = "100.00");
		}
	}

	@description = "COMMERCE-11843. This a test to verify that the Supplier User can edit a promotion details (COMMERCE-11845)"
	@priority = 5
	test CanSupplierEditPromotionDetails {
		property portal.acceptance = "true";

		task ("Given a Supplier account with a user that has the role 'Supplier'") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Supplier Account",
				accountType = "Supplier",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "supplier@liferay.com",
				userFirstName = "Supplier",
				userLastName = "User",
				userRole = "Account Supplier",
				userScreenName = "supplieruser");
		}

		task ("And a Promotion is created") {
			CommerceJSONPriceListsAndPromotionsAPI._addPromotion(
				catalogName = "Minium",
				currencyCode = "USD",
				priority = 0,
				promotionName = "Test New Promotion");
		}

		task ("And a new Catalog is created") {
			CommerceJSONCatalogsAPI._addCatalog(catalogName = "Test Catalog");
		}

		task ("And the Account Id is linked to Minium Catalog") {
			CommerceJSONCatalogsAPI._patchCommerceCatalog(
				accountIdByName = "Supplier Account",
				catalogName = "Minium");
		}

		task ("When the supplier edits a promotion details") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "supplier@liferay.com",
				userLoginFullName = "Supplier User");

			CommercePromotions.openPromotionsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test New Promotion");

			CommercePriceLists.editPriceListDetails(
				currency = "EUR",
				name = "Test New Promotion Edited",
				parentPriceList = "Minium Base Promotion",
				priceType = "Gross Price",
				priority = 1);
		}

		task ("Then the changes are successfully saved") {
			CommercePromotions.openPromotionsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test New Promotion Edited");

			CommercePriceLists.viewPriceListEntry(
				priceListCurrency = "EUR",
				priceListName = "Test New Promotion Edited",
				priceListParent = "Minium Base Promotion",
				priceListPriority = "1.0",
				priceListType = "Gross Price");
		}
	}

	@description = "COMMERCE-11843. This a test to verify that the Supplier User can edit a Promotion's entry price (COMMERCE-11842)"
	@priority = 5
	test CanSupplierEditPromotionEntryPrice {
		property portal.acceptance = "true";

		task ("Given an account with a buyer user") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("Given a Supplier account with a user that has the role 'Supplier'") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Supplier Account",
				accountType = "Supplier",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "supplier@liferay.com",
				userFirstName = "Supplier",
				userLastName = "User",
				userRole = "Account Supplier",
				userScreenName = "supplieruser");
		}

		task ("And a Promotion is created for the Minium catalog") {
			CommerceJSONPriceListsAndPromotionsAPI._addPromotion(
				catalogName = "Minium",
				currencyCode = "USD",
				priority = 0,
				promotionName = "Test New Promotion");
		}

		task ("And the Account Id is linked to the Catalog") {
			CommerceJSONCatalogsAPI._patchCommerceCatalog(
				accountIdByName = "Supplier Account",
				catalogName = "Minium");
		}

		task ("And the supplier logs in") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "supplier@liferay.com",
				userLoginFullName = "Supplier User");
		}

		task ("When the supplier edits a promotion entry price") {
			CommercePromotions.openPromotionsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test New Promotion");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceRelations.assignSingleRelationToProductsEntry(
				entryName = "MIN93015",
				title = "Add SKUs");

			Refresh();

			CommerceNavigator.gotoEntry(entryName = "MIN93015");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceSKUs.setSkuPricing(promoPrice = 10);

			Button.clickSave();
		}

		task ("Then buyers can see the promotion entry price applied in the storefront") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceAcceleratorsInitializer.changeProductsSorting(sortingType = "Name Ascending");

			FrontStore.assertPromoPrice(
				basePrice = "50.00",
				productName = "ABS Sensor",
				promoPrice = "10.00");
		}
	}

	@description = "This is a test for COMMERCE-11888. As a supplier user, I can manage the full workflow of an order"
	@priority = 5
	test CanSupplierManageFullWorkflowOfAnOrder {
		property portal.acceptance = "true";

		task ("Given a Minium site with a buyer user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And a Supplier account with a supplier user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Supplier Account",
				accountType = "Supplier",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "supplier@liferay.com",
				userFirstName = "Supplier",
				userLastName = "User",
				userRole = "Account Supplier",
				userScreenName = "supplieruser");
		}

		task ("And a channel to link to the supplier account and a catalog(with a product) to link to the supplier account are created") {
			var supplierAccountId = JSONAccountEntryAPI._getAccountEntryId(accountEntryName = "Supplier Account");

			CommerceJSONChannelsAPI._addChannel(
				accountId = ${supplierAccountId},
				channelName = "Supplier Channel",
				channelType = "site",
				currencyCode = "USD");

			CommerceJSONCatalogsAPI._addCatalog(
				accountEntryId = ${supplierAccountId},
				catalogName = "Supplier Catalog");

			CommerceJSONProductsAPI._addCommerceProduct(
				catalogName = "Supplier Catalog",
				price = 5,
				productName = "Simple Product",
				productType = "simple",
				sku = "TESTSKU");

			CommerceJSONWarehousesAndInventoriesAPI._addWarehouse(
				latitude = 10,
				longitude = 0,
				warehouseName = "Test Warehouse");

			CommerceJSONWarehousesAndInventoriesAPI._addWarehouseItem(
				warehouseItemQuantity = 100,
				warehouseItemSku = "TESTSKU",
				warehouseName = "Test Warehouse");

			CommerceNavigator.goToWarehousesAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test Warehouse");

			Navigator.gotoNavTab(navTab = "Eligibility");

			CommerceEntry.setEntryEligibility(channelsEligibility = "Supplier Channel");

			CommerceEntry.viewEntryEligibility(channelsEligibility = "Supplier Channel");
		}

		task ("And the 'Order Split by Catalog Action' health check is checked") {
			CommerceNavigator.goToHealthCheckAdmin();

			Click(
				key_buttonRowName = "Order Split by Catalog Action",
				key_buttonStatus = "",
				locator1 = "CommerceEntry#FIX_ISSUE_BUTTON_NAME");

			WaitForElementPresent(
				key_value = "Order Split by Catalog Action",
				locator1 = "CommerceEntry#HEALTH_CHECK_ICON_CHECK_NAME");

			CommerceJSONOrdersAPI._patchCommerceOrderObjectAction(
				active = "true",
				objectActionName = "SplitOrderByCatalog",
				objectDefinitionName = "CommerceOrder");
		}

		task ("When the buyer checkout an order with both Minium and Supplier catalogs products") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			for (var productName : list "Simple Product,U-Joint") {
				FrontStore.addInitializerProductToCart(
					productName = ${productName},
					productQuantity = 1);
			}

			var customerOrderId = CommerceJSONOrdersAPI._getCommerceOrderIds(orderCount = 1);

			CommerceCheckout.gotoCheckout();

			CommerceCheckout.checkout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				shippingMethod = "Standard");
		}

		task ("And the admin splits the order") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			CommerceOrders.openOrdersAdmin();

			CommerceNavigator.gotoOrderEntryViaAdmin(status = "Pending");

			Click(
				key_text = "Accept Order",
				locator1 = "Link#ANY");

			Alert.viewSuccessMessage();
		}

		task ("Then the supplier user can manage the full workflow of an order") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "supplier@liferay.com",
				userLoginFullName = "Supplier User");

			CommerceOrders.openOrdersAdmin();

			CommerceNavigator.gotoOrderEntryViaAdmin(status = "Processing");

			CommerceOrders.checkoutFullWorkflow(
				sku = "TESTSKU",
				warehouse = "Test Warehouse");

			var shipmentIds = CommerceJSONShipmentsAPI._getCommerceShipmentIds(shipmentCount = 1);

			CommerceOrders.openOrdersAdmin();

			AssertElementPresent(
				key_orderStatus = "Completed",
				locator1 = "CommerceOrders#ORDER_ELLIPSIS_BY_STATUS");
		}

		task ("And the buyer can check that the product split to the supplier user has been shipped in the customer order") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "buyer@liferay.com",
				userLoginFullName = "Buyer User");

			CommerceNavigator.goToPlacedOrderDetailPageViaURL(orderId = ${customerOrderId});

			CommerceShipments.assertOrderItemShipmentInPlacedOrders(
				entryName = "TESTSKU",
				quantity = 1,
				shipmentId = ${shipmentIds},
				status = "Delivered");
		}
	}

	@description = "COMMERCE-11817 Verify that the Supplier is able only to manage the inventory related to the channel linked to him"
	@priority = 5
	test CanSupplierManageInventory {
		property portal.acceptance = "true";

		task ("Given a Supplier account with a user that has the role 'Supplier'") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Supplier Account",
				accountType = "Supplier",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "supplier@liferay.com",
				userFirstName = "Supplier",
				userLastName = "User",
				userRole = "Account Supplier",
				userScreenName = "supplieruser");
		}

		task ("And the Account Id is linked to Minium Catalog and Channel") {
			CommerceJSONCatalogsAPI._patchCommerceCatalog(
				accountIdByName = "Supplier Account",
				catalogName = "Minium");

			CommerceJSONChannelsAPI._patchCommerceChannel(
				accountIdByName = "Supplier Account",
				channelName = "Minium Portal");
		}

		task ("And the Supplier logs in") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "supplier@liferay.com",
				userLoginFullName = "Supplier User");
		}

		task ("And opens the inventory tab for a product") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "ABS Sensor");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoEntry(entryName = "MIN93015");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceEntry.gotoMenuTab(menuTab = "Inventory");
		}

		task ("Then the user can see all the warehouses") {
			for (var warehouse : list "Italy,United States - Northeast,United States - Southwest") {
				AssertElementPresent(
					key_kfProcessFieldData = ${warehouse},
					locator1 = "KaleoFormsAdminViewProcessRecords#RECORD_TABLE_RECORD");
			}
		}

		task ("And if the user changes the quantity for Italy warehouse") {
			Type(
				key_inventoryName = "Italy",
				locator1 = "CommerceEntry#INVENTORY_INPUT",
				value1 = 10);

			Button.clickSave();
		}

		task ("Then the new quantity is saved") {
			Refresh();

			CommerceNavigator.gotoEntry(entryName = "MIN93015");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceEntry.gotoMenuTab(menuTab = "Inventory");

			AssertElementPresent(
				key_inventoryName = "Italy",
				locator1 = "CommerceEntry#INVENTORY_INPUT",
				value1 = 10);
		}

		task ("When Supplier goes back to the product page") {
			CommerceProducts.openProductsAdmin();
		}

		task ("And the Supplier edits the warehouses from the SKU list") {
			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "MIN93015");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceEntry.gotoMenuTab(menuTab = "Inventory");

			for (var warehouse : list "Italy,United States - Northeast,United States - Southwest") {
				AssertElementPresent(
					key_kfProcessFieldData = ${warehouse},
					locator1 = "KaleoFormsAdminViewProcessRecords#RECORD_TABLE_RECORD");
			}

			Type(
				key_inventoryName = "Italy",
				locator1 = "CommerceEntry#INVENTORY_INPUT",
				value1 = 20);

			Button.clickSave();
		}

		task ("Then the new inventory is saved") {
			Refresh();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "MIN93015");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceEntry.gotoMenuTab(menuTab = "Inventory");

			AssertElementPresent(
				key_inventoryName = "Italy",
				locator1 = "CommerceEntry#INVENTORY_INPUT",
				value1 = 20);
		}
	}

	@description = "COMMERCE-11818 Verify that the warehouse eligibility is respected by the Supplier User"
	@priority = 5
	test CanSupplierManageOnlyEligibleWarehouses {
		property portal.acceptance = "true";

		task ("Given a Supplier account with a user that has the role 'Supplier'") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Supplier Account",
				accountType = "Supplier",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "supplier@liferay.com",
				userFirstName = "Supplier",
				userLastName = "User",
				userRole = "Account Supplier",
				userScreenName = "supplieruser");
		}

		task ("And the Account Id is linked to Minium Catalog and Channel") {
			CommerceJSONCatalogsAPI._patchCommerceCatalog(
				accountIdByName = "Supplier Account",
				catalogName = "Minium");

			CommerceJSONChannelsAPI._patchCommerceChannel(
				accountIdByName = "Supplier Account",
				channelName = "Minium Portal");
		}

		task ("And a new channel is created") {
			CommerceJSONChannelsAPI._addChannel(
				channelName = "Test Channel 1",
				channelType = "site",
				currencyCode = "USD",
				externalReferenceCode = 101);
		}

		task ("And the admin changes the eligibility for Italy warehouse") {
			CommerceNavigator.goToWarehousesAdmin();

			CommerceEntry.removeEntryEligibility(
				channelEligibility = "Minium Portal",
				entryName = "Italy");

			CommerceEntry.setEntryEligibility(channelsEligibility = "Test Channel 1");
		}

		task ("And the supplier logs in") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "supplier@liferay.com",
				userLoginFullName = "Supplier User");
		}

		task ("And opens the inventory tab for a product") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "ABS Sensor");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoEntry(entryName = "MIN93015");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceEntry.gotoMenuTab(menuTab = "Inventory");
		}

		task ("Then the user can see all the warehouses except Italy") {
			for (var warehouse : list "United States - Northeast,United States - Southwest") {
				AssertElementPresent(
					key_kfProcessFieldData = ${warehouse},
					locator1 = "KaleoFormsAdminViewProcessRecords#RECORD_TABLE_RECORD");
			}

			AssertElementNotPresent(
				key_kfProcessFieldData = "Italy",
				locator1 = "KaleoFormsAdminViewProcessRecords#RECORD_TABLE_RECORD");
		}

		task ("And the Supplier goes back to the product page") {
			CommerceProducts.openProductsAdmin();
		}

		task ("And selects an entry into the the SKU tab") {
			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "MIN93015");
		}

		task ("Then the user can see all the warehouses except Italy") {
			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceEntry.gotoMenuTab(menuTab = "Inventory");

			for (var warehouse : list "United States - Northeast,United States - Southwest") {
				AssertElementPresent(
					key_kfProcessFieldData = ${warehouse},
					locator1 = "KaleoFormsAdminViewProcessRecords#RECORD_TABLE_RECORD");
			}

			AssertElementNotPresent(
				key_kfProcessFieldData = "Italy",
				locator1 = "KaleoFormsAdminViewProcessRecords#RECORD_TABLE_RECORD");
		}
	}

	@description = "COMMERCE-11610. As a supplier account user, I can add and edit products in a catalog and delete them from the catalog the account is linked to."
	@priority = 5
	test CanSupplierManageOnlyLinkedCatalogProducts {
		property portal.acceptance = "true";

		task ("Given a Supplier account with a supplier user") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Commerce Supplier",
				accountEntryType = "Supplier");

			JSONAccountEntryUser.addAccountEntryUser(
				accountEntryName = "Commerce Supplier",
				userEmailAddress = "supplier@liferay.com",
				userFirstName = "Supplier",
				userLastName = "User",
				userScreenName = "supplieruser");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "supplier@liferay.com");

			JSONAccountRole.associateUser(
				accountEntryName = "Commerce Supplier",
				accountRole = "Account Supplier",
				userEmailAddress = "supplier@liferay.com");
		}

		task ("And Supplier account is linked to Minium catalog") {
			var accountId = CommerceJSONAccountsAPI.getAccountFieldByAccountName(
				accountName = "Commerce Supplier",
				field = "id");

			CommerceJSONCatalogsAPI._patchCommerceCatalog(
				accountId = ${accountId},
				catalogName = "Minium");
		}

		task ("And a new Catalog is added") {
			CommerceJSONCatalogsAPI._addCatalog(catalogName = "New Catalog");
		}

		task ("And the Supplier account is linked to Minium Portal Channel") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			Select(
				key_fieldLabel = "Link Channel to a Supplier",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Commerce Supplier");

			Button.clickSave();
		}

		task ("When the supplier user logs in") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "supplier@liferay.com",
				userLoginFullName = "Supplier User");
		}

		task ("Then can add a new product in Minium Catalog") {
			CommerceProducts.openProductsAdmin();

			CPCommerceCatalog.newProductsEntry(
				productCatalog = "Minium",
				productName = "Simple T-Shirt",
				productType = "Simple");

			AssertSelectedLabel(
				key_fieldLabel = "Catalog",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Minium");
		}

		task ("And can edit the product") {
			CommerceEntry.addProductDescription(
				productFullDescription = "This is a Full Description",
				productShortDescription = "This is a Short Description",
				publishProduct = "true");

			CommerceEntry.gotoMenuTab(menuTab = "Options");

			CommerceProductOptions.createProductOption(key_optionName = "New Option");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoEntry(entryName = "default");

			CommerceEntry.editSkuPricingAndInventory(
				basePrice = "20.00",
				italyQuantity = 20,
				publish = "true");

			CommerceEntry.gotoMenuTab(menuTab = "Product Relations");

			CommerceRelations.addAnyProductRelation(
				key_product = "U-Joint",
				key_relation = "Up-Sell Product");

			CommerceEntry.gotoMenuTab(menuTab = "Subscription");

			CommerceProducts.configureSubscription(
				subscriptionExactDay = 1,
				subscriptionLength = 5,
				subscriptionMode = "Exact Day of Month",
				subscriptionName = "Delivery Subscription",
				subscriptionType = "Month");

			CommerceEntry.gotoMenuTab(menuTab = "Visibility");

			AssertElementNotPresent(
				key_name = "Channels",
				locator1 = "ToggleSwitch#ENABLE_SPECIFIC_TOGGLE_SWITCH");
		}

		task ("But cannot add a new product in a different Catalog") {
			Click(locator1 = "Icon#BACK");

			Click(locator1 = "Button#PLUS");

			Click(
				key_menuItem = "Simple",
				locator1 = "MenuItem#DROPDOWN_MENU_ITEM");

			WaitForElementPresent(locator1 = "IFrame#MODAL_BODY");

			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

			Type(
				locator1 = "CommerceEntry#NAME_FIELD",
				value1 = "New Product");

			for (var entryName : list "Master,New Catalog") {
				Type(
					key_label = "Catalog",
					locator1 = "CommerceEntry#ANY_AUTOCOMPLETE_TEXT_FIELD",
					value1 = ${entryName});

				AssertElementPresent(
					key_text = "No items were found.",
					locator1 = "CP2Utils#ANY_TEXT");
			}

			Click(locator1 = "Icon#CLOSE");

			SelectFrame.selectFrameTop();
		}

		task ("When the supplier user deletes the product") {
			CommerceNavigator.searchEntry(entryName = "Simple T-Shirt");

			CommerceProducts.deleteProductsEntry(key_value = "Simple T-Shirt");
		}

		task ("Then can verify that Simple Product is deleted successfully") {
			CommerceNavigator.searchEntry(entryName = "Simple T-Shirt");

			AssertElementNotPresent(
				key_entryName = "Simple T-Shirt",
				locator1 = "CommerceNavigation#ENTRY_NAME");
		}
	}

	@description = "COMMERCE-11820 Verify that the Supplier is not able to see the 'Inventory' and 'Warehouses' on the Application Menu"
	@priority = 4
	test CanSupplierNotAccessToInventoryAndWarehousesViaCP {
		property portal.acceptance = "false";

		task ("Given a Supplier account with a user that has the role 'Supplier'") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Supplier Account",
				accountType = "Supplier",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "supplier@liferay.com",
				userFirstName = "Supplier",
				userLastName = "User",
				userRole = "Account Supplier",
				userScreenName = "supplieruser");
		}

		task ("And the Account Id is linked to Minium Catalog and Channel") {
			CommerceJSONCatalogsAPI._patchCommerceCatalog(
				accountIdByName = "Supplier Account",
				catalogName = "Minium");

			CommerceJSONChannelsAPI._patchCommerceChannel(
				accountIdByName = "Supplier Account",
				channelName = "Minium Portal");
		}

		task ("And the supplier logs in") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "supplier@liferay.com",
				userLoginFullName = "Supplier User");
		}

		task ("Then both Inventory and Warehouses are not present on the Application Menu") {
			ApplicationsMenuHelper.openApplicationsMenu();

			ApplicationsMenu.gotoPanel(panel = "Commerce");

			for (var portlet : list "Inventory,Warehouses") {
				AssertElementNotPresent(
					key_category = "Inventory Management",
					key_portlet = ${portlet},
					locator1 = "ApplicationsMenu#PORTLET");
			}
		}
	}

	@description = "COMMERCE-11817 Verify that the Supplier User cannot manage the inventory for not related channels"
	@priority = 5
	test CanSupplierNotManageInventoryForNotRelatedChannels {
		property portal.acceptance = "true";

		task ("Given a Supplier account with a user that has the role 'Supplier'") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Supplier Account",
				accountType = "Supplier",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "supplier@liferay.com",
				userFirstName = "Supplier",
				userLastName = "User",
				userRole = "Account Supplier",
				userScreenName = "supplieruser");
		}

		task ("And the Account Id is linked to Minium Catalog") {
			CommerceJSONCatalogsAPI._patchCommerceCatalog(
				accountIdByName = "Supplier Account",
				catalogName = "Minium");
		}

		task ("And the supplier logs in") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "supplier@liferay.com",
				userLoginFullName = "Supplier User");
		}

		task ("And opens the inventory tab for a product") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "ABS Sensor");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoEntry(entryName = "MIN93015");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceEntry.gotoMenuTab(menuTab = "Inventory");
		}

		task ("Then no warehouses are available") {
			for (var warehouse : list "Italy,United States - Northeast,United States - Southwest") {
				AssertElementNotPresent(
					key_kfProcessFieldData = ${warehouse},
					locator1 = "KaleoFormsAdminViewProcessRecords#RECORD_TABLE_RECORD");
			}
		}

		task ("And the Supplier goes back to the product page") {
			CommerceProducts.openProductsAdmin();
		}

		task ("And selects an entry into the the SKU tab") {
			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "MIN93015");
		}

		task ("Then no warehouses are available") {
			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceEntry.gotoMenuTab(menuTab = "Inventory");

			for (var warehouse : list "Italy,United States - Northeast,United States - Southwest") {
				AssertElementNotPresent(
					key_kfProcessFieldData = ${warehouse},
					locator1 = "KaleoFormsAdminViewProcessRecords#RECORD_TABLE_RECORD");
			}
		}
	}

	@description = "COMMERCE-11818 Verify that the Supplier is not able to manage inventory related to warehouse with the 'No Channel' eligibility configuration"
	@priority = 5
	test CanSupplierNotManageInventoryWithNoChannelEligibility {
		property portal.acceptance = "true";

		task ("Given a Supplier account with a user that has the role 'Supplier'") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Supplier Account",
				accountType = "Supplier",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "supplier@liferay.com",
				userFirstName = "Supplier",
				userLastName = "User",
				userRole = "Account Supplier",
				userScreenName = "supplieruser");
		}

		task ("And the Account Id is linked to Minium Catalog and Channel") {
			CommerceJSONCatalogsAPI._patchCommerceCatalog(
				accountIdByName = "Supplier Account",
				catalogName = "Minium");

			CommerceJSONChannelsAPI._patchCommerceChannel(
				accountIdByName = "Supplier Account",
				channelName = "Minium Portal");
		}

		task ("And the admin changes the eligibility for Italy warehouse") {
			CommerceNavigator.goToWarehousesAdmin();

			CommerceNavigator.gotoEntry(entryName = "Italy");

			CommerceEntry.gotoMenuTab(menuTab = "Eligibility");

			Click(
				locator1 = "Radio#ANY",
				radioLabel = "No Channel");

			Button.clickSave();
		}

		task ("And the supplier logs in") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "supplier@liferay.com",
				userLoginFullName = "Supplier User");
		}

		task ("And opens the inventory tab for a product") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "ABS Sensor");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoEntry(entryName = "MIN93015");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceEntry.gotoMenuTab(menuTab = "Inventory");
		}

		task ("Then the user can see all the warehouses except Italy") {
			for (var warehouse : list "United States - Northeast,United States - Southwest") {
				AssertElementPresent(
					key_kfProcessFieldData = ${warehouse},
					locator1 = "KaleoFormsAdminViewProcessRecords#RECORD_TABLE_RECORD");
			}

			AssertElementNotPresent(
				key_kfProcessFieldData = "Italy",
				locator1 = "KaleoFormsAdminViewProcessRecords#RECORD_TABLE_RECORD");
		}

		task ("And the Supplier goes back to the product page") {
			CommerceProducts.openProductsAdmin();
		}

		task ("And the Supplier opens the inventory from the SKU list") {
			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "MIN93015");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommerceEntry.gotoMenuTab(menuTab = "Inventory");
		}

		task ("Then the user can see all the warehouses except Italy") {
			for (var warehouse : list "United States - Northeast,United States - Southwest") {
				AssertElementPresent(
					key_kfProcessFieldData = ${warehouse},
					locator1 = "KaleoFormsAdminViewProcessRecords#RECORD_TABLE_RECORD");
			}

			AssertElementNotPresent(
				key_kfProcessFieldData = "Italy",
				locator1 = "KaleoFormsAdminViewProcessRecords#RECORD_TABLE_RECORD");
		}
	}

	@description = "COMMERCE-11604 | As a supplier account user, I want to be able to manage the catalogs the account is linked to"
	@priority = 5
	test CanSupplierUserManageCatalogs {
		property portal.acceptance = "true";

		task ("Given a Supplier account with a supplier user") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Commerce Supplier",
				accountEntryType = "Supplier");

			JSONAccountEntryUser.addAccountEntryUser(
				accountEntryName = "Commerce Supplier",
				userEmailAddress = "supplier@liferay.com",
				userFirstName = "Supplier",
				userLastName = "User",
				userScreenName = "supplieruser");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "supplier@liferay.com");

			JSONAccountRole.associateUser(
				accountEntryName = "Commerce Supplier",
				accountRole = "Account Supplier",
				userEmailAddress = "supplier@liferay.com");
		}

		task ("And Supplier account is linked to a catalog") {
			var accountId = CommerceJSONAccountsAPI.getAccountFieldByAccountName(
				accountName = "Commerce Supplier",
				field = "id");

			CommerceJSONCatalogsAPI._patchCommerceCatalog(
				accountId = ${accountId},
				catalogName = "Minium");
		}

		task ("And a price list and a promotion are created") {
			CommerceJSONPriceListsAndPromotionsAPI._addPriceList(
				catalogName = "Minium",
				currencyCode = "USD",
				priceListName = "Test Price List");

			CommerceJSONPriceListsAndPromotionsAPI._addPromotion(
				catalogName = "Minium",
				currencyCode = "USD",
				promotionName = "Test Promotion");
		}

		task ("When the supplier user logs in") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "supplier@liferay.com",
				userLoginFullName = "Supplier User");
		}

		task ("Then the supplier user can view only the catalog the account is linked to") {
			CommerceCatalog.openCatalogsAdmin();

			AssertElementPresent(
				key_entryName = "Minium",
				locator1 = "CommerceNavigation#ENTRY_NAME");

			AssertElementNotPresent(
				key_entryName = "Master",
				locator1 = "CommerceNavigation#ENTRY_NAME");
		}

		task ("And can add but cannot delete catalogs") {
			AssertElementPresent(locator1 = "Button#PLUS");

			AssertElementNotPresent(
				key_value = "Minium",
				locator1 = "CommerceEntry#BODY_VERTICAL_ELLIPSIS");
		}

		task ("When the supplier user navigates to a catalog details") {
			Click(
				key_firstColumnValue = "Minium",
				key_secondColumnValue = "USD",
				key_table = "",
				locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_EDIT_BUTTON");
		}

		task ("Then the user is able to edit the catalog fields") {
			CommerceCatalog.editCatalogEntry(
				catalogBasePriceList = "Test Price List",
				catalogBasePromotion = "Test Promotion",
				catalogCurrency = "Euro",
				catalogLanguage = "Catalan (Spain)",
				catalogNewName = "Minium 2");

			Click(
				key_firstColumnValue = "Minium 2",
				key_secondColumnValue = "EUR",
				key_table = "",
				locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_EDIT_BUTTON");

			CommerceEntry.viewCatalogsEntry(
				catalogBasePriceList = "Test Price List",
				catalogBasePromotion = "Test Promotion",
				catalogCurrency = "Euro",
				catalogLanguage = "Catalan (Spain)",
				catalogName = "Minium 2");
		}
	}

	@description = "This is a test for COMMERCE-11607. As a supplier account user, I want to be able to manage the channel the account is linked to"
	@priority = 5
	test CanSupplierUserManageChannel {
		property portal.acceptance = "true";

		task ("Given a Supplier account with a supplier user") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Commerce Supplier",
				accountEntryType = "Supplier");

			JSONAccountEntryUser.addAccountEntryUser(
				accountEntryName = "Commerce Supplier",
				userEmailAddress = "supplieruser@liferay.com",
				userFirstName = "Supplier",
				userLastName = "User",
				userScreenName = "supplieruser");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "supplieruser@liferay.com");

			JSONAccountRole.associateUser(
				accountEntryName = "Commerce Supplier",
				accountRole = "Account Supplier",
				userEmailAddress = "supplieruser@liferay.com");
		}

		task ("And two channels are created and the supplier account is linked to Supplier Channel 1") {
			var accountEntryId = JSONAccountEntryAPI._getAccountEntryId(accountEntryName = "Commerce Supplier");

			CommerceJSONChannelsAPI._addChannel(
				accountId = ${accountEntryId},
				channelName = "Supplier Channel 1",
				channelType = "site",
				currencyCode = "USD");

			CommerceJSONChannelsAPI._addChannel(
				channelName = "Supplier Channel 2",
				channelType = "site",
				currencyCode = "USD");
		}

		task ("When admin links the Supplier account for Supplier Channel 2") {
			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Supplier Channel 2");

			Select(
				key_fieldLabel = "Link Channel to a Supplier",
				locator1 = "Select#GENERIC_SELECT_FIELD",
				value1 = "Commerce Supplier");

			Button.clickSave();
		}

		task ("Then an error alert 'A supplier account can be linked only to one channel' is shown") {
			Alert.viewErrorMessage(errorMessage = "Error:A supplier account can be linked only to one channel.");
		}

		task ("When the supplier user logs in") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "supplieruser@liferay.com",
				userLoginFullName = "Supplier User");
		}

		task ("Then the supplier user can view only the Supplier Channel 1 that the account is linked to") {
			CommerceChannels.openChannelsAdmin();

			AssertElementPresent(
				key_entryName = "Supplier Channel 1",
				locator1 = "CommerceNavigation#ENTRY_NAME");

			for (var channelName : list "Supplier Channel 2,Minium Portal") {
				AssertElementNotPresent(
					key_entryName = ${channelName},
					locator1 = "CommerceNavigation#ENTRY_NAME");
			}
		}

		task ("And cannot add/delete channels, only can edit the channel") {
			AssertElementNotPresent(locator1 = "Button#PLUS");

			AssertElementNotPresent(
				key_value = "Supplier Channel 1",
				locator1 = "CommerceEntry#BODY_VERTICAL_ELLIPSIS");

			AssertElementPresent(
				key_firstColumnValue = "Supplier Channel 1",
				key_secondColumnValue = "Site",
				key_table = "",
				locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_EDIT_BUTTON");
		}

		task ("When the supplier user navigates to the channel details") {
			Click(
				key_firstColumnValue = "Supplier Channel 1",
				key_secondColumnValue = "Site",
				key_table = "",
				locator1 = "CommerceEntry#TABLE_ASSERT_TWO_COLUMNS_EDIT_BUTTON");
		}

		task ("Then the user is able to edit the channel fields") {
			CommerceChannels.activatePaymentMethod(paymentMethod = "Money Order");

			AssertElementPresent(
				key_entryName = "Money Order",
				key_entryStatus = "Active",
				key_table = "Payment Methods",
				locator1 = "CommerceEntry#TABLE_ENTRY_STATUS");
		}
	}

	@description = "This is a test for COMMERCE-11868. As a supplier account user, I can manage discounts associated with my products via Price Lists and Promotions Panels"
	@priority = 5
	test CanSupplierUserManageDiscountsInPriceListsAndPromotions {
		property portal.acceptance = "true";

		task ("Given a Supplier account with a supplier user") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Commerce Supplier",
				accountEntryType = "Supplier");

			JSONAccountEntryUser.addAccountEntryUser(
				accountEntryName = "Commerce Supplier",
				userEmailAddress = "supplieruser@liferay.com",
				userFirstName = "Supplier",
				userLastName = "User",
				userScreenName = "supplieruser");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "supplieruser@liferay.com");

			JSONAccountRole.associateUser(
				accountEntryName = "Commerce Supplier",
				accountRole = "Account Supplier",
				userEmailAddress = "supplieruser@liferay.com");
		}

		task ("And a buyer user with a business account is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And a product belongs to another catalog is created") {
			CommerceJSONProductsAPI._addCommerceProduct(
				catalogName = "Master",
				productName = "Simple Product",
				productType = "Simple",
				sku = "SKU1001");
		}

		task ("And Supplier account is linked to Minium catalog") {
			var accountEntryId = JSONAccountEntryAPI._getAccountEntryId(accountEntryName = "Commerce Supplier");

			CommerceJSONCatalogsAPI._patchCommerceCatalog(
				accountId = ${accountEntryId},
				catalogName = "Minium");
		}

		task ("When the admin creates a discount for products with base price and promo price") {
			CommerceJSONDiscountsAPI._addDiscount(
				active = "true",
				level = "L1",
				percentageLevel1 = 10,
				productNames = "ABS Sensor,Brake Pads",
				target = "products",
				title = "Test Discount",
				usePercentage = "true");
		}

		task ("Then the buyer can view the two products with discounts that admin added before") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/abs-sensor");

			CommerceAcceleratorsInitializer.viewDiscountedProductDetailsPage(
				discountPercentage = 10,
				productDiscountedPrice = "45.00",
				productListPrice = "50.00");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/brake-pads");

			CommerceAcceleratorsInitializer.viewDiscountedProductDetailsPage(
				discountPercentage = 10,
				productDiscountedPrice = "17.01",
				productListPrice = "21.00",
				productPromoPrice = "18.90");
		}

		task ("When the supplier user logs in") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "supplieruser@liferay.com",
				userLoginFullName = "Supplier User");
		}

		task ("Then the supplier user cannot view the Discounts panel") {
			ApplicationsMenuHelper.openApplicationsMenu();

			ApplicationsMenu.gotoPanel(panel = "Commerce");

			AssertElementNotPresent(
				key_category = "Pricing",
				key_portlet = "Discounts",
				locator1 = "ApplicationsMenu#PORTLET");
		}

		task ("When the supplier user adds a new price entry with discount set in a new price list") {
			CommercePriceLists.openPriceListsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Base Price List");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceNavigator.searchEntry(entryName = "SKU1001");

			AssertTextEquals(
				locator1 = "Message#EMPTY_STATE_INFO",
				value1 = "No Results Found");

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "MIN93015");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommercePriceLists.setOverrideDiscount(overrideDiscounts = "L1-20");
		}

		task ("And the supplier user adds a new promo entry with discount set in a new promotion") {
			CommercePromotions.openPromotionsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Base Promotion");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceNavigator.searchEntry(entryName = "SKU1001");

			AssertTextEquals(
				locator1 = "Message#EMPTY_STATE_INFO",
				value1 = "No Results Found");

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "MIN93018");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommercePromotions.setOverrideDiscount(overrideDiscounts = "L1-20");
		}

		task ("Then the buyer can view the discounts of the products that are updated by supplier user accordingly") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/abs-sensor");

			CommerceAcceleratorsInitializer.viewDiscountedProductDetailsPage(
				discountPercentage = 20,
				productDiscountedPrice = "40.00",
				productListPrice = "50.00");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/brake-pads");

			CommerceAcceleratorsInitializer.viewDiscountedProductDetailsPage(
				discountPercentage = 20,
				productDiscountedPrice = "15.12",
				productListPrice = "21.00",
				productPromoPrice = "18.90");
		}
	}

	@description = "COMMERCE-11772. This a test to verify that the Supplier User can add a Price Modifier in a Price List"
	@priority = 4
	test CanSupplierUserSetupPriceModifierPriceList {
		property portal.acceptance = "false";

		task ("Given an account with a buyer user") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("Given a Supplier account with a user that has the role 'Supplier'") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Supplier Account",
				accountType = "Supplier",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "supplier@liferay.com",
				userFirstName = "Supplier",
				userLastName = "User",
				userRole = "Account Supplier",
				userScreenName = "supplieruser");
		}

		task ("And a Price List is created for the MInium catalog") {
			CommerceJSONPriceListsAndPromotionsAPI._addPriceList(
				catalogName = "Minium",
				currencyCode = "USD",
				priceListName = "Test New Price List",
				priority = 0);
		}

		task ("And the Account Id is linked to the Catalog") {
			CommerceJSONCatalogsAPI._patchCommerceCatalog(
				accountIdByName = "Supplier Account",
				catalogName = "Minium");
		}

		task ("And the supplier logs in") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "supplier@liferay.com",
				userLoginFullName = "Supplier User");
		}

		task ("When the supplier user adds a Price Modifier in a price list") {
			CommercePriceLists.openPriceListsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test New Price List");

			CommerceEntry.gotoMenuTab(menuTab = "Price Modifiers");

			CommercePriceLists.addNewPriceModifier(
				modifier = "Fixed Amount",
				name = "Test Price Modifier",
				target = "Products");

			CommercePriceLists.editPriceModifier(
				active = "true",
				amountValue = "-22",
				entryName = "U-Joint",
				priceModifierName = "Test Price Modifier",
				relation = "Add Product",
				target = "Products");
		}

		task ("Then the buyer can see the price modifier is applied") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			AssertTextEquals.assertPartialText(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#PRODUCT_CARD_PRICE",
				value1 = "2.00");
		}
	}

	@description = "COMMERCE-11843. This a test to verify that the Supplier User can add a Price Modifier in a Promotion (COMMERCE-11772)"
	@priority = 4
	test CanSupplierUserSetupPriceModifierPromotion {
		property portal.acceptance = "false";

		task ("Given an account with a buyer user") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("Given a Supplier account with a user that has the role 'Supplier'") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Supplier Account",
				accountType = "Supplier",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "supplier@liferay.com",
				userFirstName = "Supplier",
				userLastName = "User",
				userRole = "Account Supplier",
				userScreenName = "supplieruser");
		}

		task ("And a Promotion is created for the MInium catalog") {
			CommerceJSONPriceListsAndPromotionsAPI._addPromotion(
				catalogName = "Minium",
				currencyCode = "USD",
				priority = 0,
				promotionName = "Test New Promotion");
		}

		task ("And the Account Id is linked to the Catalog") {
			CommerceJSONCatalogsAPI._patchCommerceCatalog(
				accountIdByName = "Supplier Account",
				catalogName = "Minium");
		}

		task ("And the supplier logs in") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "supplier@liferay.com",
				userLoginFullName = "Supplier User");
		}

		task ("When the supplier user adds a Price Modifier in a promotion") {
			CommercePromotions.openPromotionsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test New Promotion");

			CommerceEntry.gotoMenuTab(menuTab = "Price Modifiers");

			CommercePriceLists.addNewPriceModifier(
				modifier = "Fixed Amount",
				name = "Test Price Modifier",
				target = "Products");

			CommercePriceLists.editPriceModifier(
				active = "true",
				amountValue = "-22",
				entryName = "U-Joint",
				priceModifierName = "Test Price Modifier",
				relation = "Add Product",
				target = "Products");
		}

		task ("Then the buyer can see the price modifier is applied") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			FrontStore.assertPromoPrice(
				basePrice = "24.00",
				productName = "U-Joint",
				promoPrice = "2.00");
		}
	}

	@description = "COMMERCE-11757. This a test to verify that the Supplier User can only see the Price List which catalog is linked to the supplier account"
	@priority = 5
	test CanSupplierUserViewOnlyRelatedCatalogPriceList {
		property portal.acceptance = "true";

		task ("Given a Supplier account with a user that has the role 'Supplier'") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Supplier Account",
				accountType = "Supplier",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "supplier@liferay.com",
				userFirstName = "Supplier",
				userLastName = "User",
				userRole = "Account Supplier",
				userScreenName = "supplieruser");
		}

		task ("And a new Catalog is created") {
			CommerceJSONCatalogsAPI._addCatalog(catalogName = "Test Catalog");
		}

		task ("And the Account Id is linked to the new Catalog") {
			CommerceJSONCatalogsAPI._patchCommerceCatalog(
				accountIdByName = "Supplier Account",
				catalogName = "Test Catalog");
		}

		task ("And the supplier logs in") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "supplier@liferay.com",
				userLoginFullName = "Supplier User");
		}

		task ("Then the supplier can see only the Price List related to the new Catalog") {
			CommercePriceLists.openPriceListsAdmin();

			AssertElementPresent(
				key_entryName = "Test Catalog Base Price List",
				locator1 = "CommerceNavigation#ENTRY_NAME");

			AssertElementNotPresent(
				key_entryName = "Minium Base Price List",
				locator1 = "CommerceNavigation#ENTRY_NAME");
		}
	}

	@description = "COMMERCE-11843. This a test to verify that the Supplier User can only see the Promotion which catalog is linked to the supplier account (COMMERCE-11757)"
	@priority = 5
	test CanSupplierUserViewOnlyRelatedCatalogPromotion {
		property portal.acceptance = "true";

		task ("Given a Supplier account with a user that has the role 'Supplier'") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Supplier Account",
				accountType = "Supplier",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "supplier@liferay.com",
				userFirstName = "Supplier",
				userLastName = "User",
				userRole = "Account Supplier",
				userScreenName = "supplieruser");
		}

		task ("And a new Catalog is created") {
			CommerceJSONCatalogsAPI._addCatalog(catalogName = "Test Catalog");
		}

		task ("And the Account Id is linked to the new Catalog") {
			CommerceJSONCatalogsAPI._patchCommerceCatalog(
				accountIdByName = "Supplier Account",
				catalogName = "Test Catalog");
		}

		task ("And the supplier logs in") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "supplier@liferay.com",
				userLoginFullName = "Supplier User");
		}

		task ("Then the supplier can see only the Promotion related to the new Catalog") {
			CommercePromotions.openPromotionsAdmin();

			AssertElementPresent(
				key_entryName = "Test Catalog Base Promotion",
				locator1 = "CommerceNavigation#ENTRY_NAME");

			AssertElementNotPresent(
				key_entryName = "Minium Base Promotion List",
				locator1 = "CommerceNavigation#ENTRY_NAME");
		}
	}

	@description = "COMMERCE-11611. As a supplier account user, I cannot view the products in a catalog the account is not linked to."
	@priority = 4
	test CanSupplierViewOnlyLinkedCatalogProducts {
		property portal.acceptance = "false";

		task ("Given a Supplier account with a supplier user") {
			JSONAccountEntry.addAccountEntry(
				accountEntryName = "Commerce Supplier",
				accountEntryType = "Supplier");

			JSONAccountEntryUser.addAccountEntryUser(
				accountEntryName = "Commerce Supplier",
				userEmailAddress = "supplier@liferay.com",
				userFirstName = "Supplier",
				userLastName = "User",
				userScreenName = "supplieruser");

			JSONUser.setFirstPassword(
				agreeToTermsAndAnswerReminderQuery = "true",
				requireReset = "false",
				userEmailAddress = "supplier@liferay.com");

			JSONAccountRole.associateUser(
				accountEntryName = "Commerce Supplier",
				accountRole = "Account Supplier",
				userEmailAddress = "supplier@liferay.com");
		}

		task ("And a new Catalog with a product is added") {
			CommerceJSONCatalogsAPI._addCatalog(catalogName = "Test Catalog");

			CommerceJSONProductsAPI._addCommerceProduct(
				catalogName = "Test Catalog",
				price = 5,
				productName = "Simple Product",
				productType = "simple",
				sku = "TESTSKU");
		}

		task ("And a product is added to the Master catalog") {
			CommerceJSONProductsAPI._addCommerceProduct(
				catalogName = "Master",
				price = 25,
				productName = "New Product",
				productType = "simple",
				sku = "NEWSKU");
		}

		task ("And Supplier account is linked to Test Catalog") {
			var accountId = CommerceJSONAccountsAPI.getAccountFieldByAccountName(
				accountName = "Commerce Supplier",
				field = "id");

			CommerceJSONCatalogsAPI._patchCommerceCatalog(
				accountId = ${accountId},
				catalogName = "Test Catalog");
		}

		task ("When the supplier user logs in") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "supplier@liferay.com",
				userLoginFullName = "Supplier User");
		}

		task ("Then can view the product from Test Catalog") {
			CommerceProducts.openProductsAdmin();

			CommerceNavigator.searchEntry(entryName = "Simple Product");

			AssertElementPresent(
				key_entryName = "Simple Product",
				locator1 = "CommerceNavigation#ENTRY_NAME");
		}

		task ("But cannot view products from Minium and Master Catalogs") {
			for (var productName : list "ABS Sensor,Brake Fluid,Hoses,Torque Converters,New Product") {
				CommerceNavigator.searchEntry(entryName = ${productName});

				AssertElementNotPresent(
					key_entryName = ${productName},
					locator1 = "CommerceNavigation#ENTRY_NAME");
			}
		}
	}

	@description = "This is a test for COMMERCE-11779. As a supplier user, I can view only the supplier orders that linked to the supplier channel"
	@priority = 5
	test CanSupplierViewOnlyLinkedChannelOrders {
		property portal.acceptance = "true";

		task ("Given a Minium site with a buyer user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And a Supplier account with a supplier user is created") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Supplier Account",
				accountType = "Supplier",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "supplier@liferay.com",
				userFirstName = "Supplier",
				userLastName = "User",
				userRole = "Account Supplier",
				userScreenName = "supplieruser");
		}

		task ("And a channel to link to the supplier account and a catalog(with a product) to link to the supplier account are created") {
			var supplierAccountId = JSONAccountEntryAPI._getAccountEntryId(accountEntryName = "Supplier Account");

			CommerceJSONChannelsAPI._addChannel(
				accountId = ${supplierAccountId},
				channelName = "Supplier Channel",
				channelType = "site",
				currencyCode = "USD");

			CommerceJSONCatalogsAPI._addCatalog(
				accountEntryId = ${supplierAccountId},
				catalogName = "Supplier Catalog");

			CommerceJSONProductsAPI._addCommerceProduct(
				catalogName = "Supplier Catalog",
				price = 5,
				productName = "Simple Product",
				productType = "simple",
				sku = "TESTSKU");

			CommerceJSONWarehousesAndInventoriesAPI._addWarehouseItem(
				warehouseItemQuantity = 100,
				warehouseItemSku = "TESTSKU",
				warehouseName = "Italy");
		}

		task ("And a second channel and catalog(with a product) to not link to the supplier account are created") {
			CommerceJSONChannelsAPI._addChannel(
				channelName = "Test Channel",
				channelType = "site",
				currencyCode = "USD");

			CommerceJSONCatalogsAPI._addCatalog(catalogName = "Test Catalog");

			CommerceJSONProductsAPI._addCommerceProduct(
				catalogName = "Test Catalog",
				price = 20,
				productName = "Test Product",
				productType = "simple",
				sku = "TESTSKU2");

			CommerceJSONWarehousesAndInventoriesAPI._addWarehouseItem(
				warehouseItemQuantity = 100,
				warehouseItemSku = "TESTSKU2",
				warehouseName = "Italy");
		}

		task ("And the 'Order Split by Catalog Action' health check is checked") {
			CommerceNavigator.goToHealthCheckAdmin();

			Click(
				key_buttonRowName = "Order Split by Catalog Action",
				key_buttonStatus = "",
				locator1 = "CommerceEntry#FIX_ISSUE_BUTTON_NAME");

			WaitForElementPresent(
				key_value = "Order Split by Catalog Action",
				locator1 = "CommerceEntry#HEALTH_CHECK_ICON_CHECK_NAME");

			CommerceJSONOrdersAPI._patchCommerceOrderObjectAction(
				active = "true",
				objectActionName = "SplitOrderByCatalog",
				objectDefinitionName = "CommerceOrder");
		}

		task ("When the buyer checkout an order with both Test Catalog and Supplier catalog products") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			for (var productName : list "Simple Product,Test Product") {
				FrontStore.addInitializerProductToCart(
					productName = ${productName},
					productQuantity = 1);
			}

			CommerceCheckout.gotoCheckout();

			CommerceCheckout.checkout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				shippingMethod = "Standard");
		}

		task ("And the admin splits the order") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			CommerceOrders.openOrdersAdmin();

			CommerceNavigator.gotoOrderEntryViaAdmin(status = "Pending");

			Click(
				key_text = "Accept Order",
				locator1 = "Link#ANY");

			Alert.viewSuccessMessage();

			CommerceOrders.openOrdersAdmin();

			for (var productTotalPrice : list "$ 40.00,$ 20.00") {
				AssertTextEquals(
					key_cellName1 = ${productTotalPrice},
					key_cellName2 = "",
					key_columnNumber = 4,
					locator1 = "CommerceEntry#TABLE_CELL_BY_COLUMN_ORDER_NO_TITLE",
					value1 = "Minium Portal");
			}

			AssertTextEquals(
				key_cellName1 = "$ 5.00",
				key_cellName2 = "",
				key_columnNumber = 4,
				locator1 = "CommerceEntry#TABLE_CELL_BY_COLUMN_ORDER_NO_TITLE",
				value1 = "Supplier Channel");

			Pagination.viewResults(results = "Showing 1 to 3 of 3 entries.");
		}

		task ("Then the supplier user can view the orders only that linked to the supplier channel") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "supplier@liferay.com",
				userLoginFullName = "Supplier User");

			CommerceOrders.openOrdersAdmin();

			AssertTextEquals(
				key_cellName1 = "$ 5.00",
				key_cellName2 = "",
				key_columnNumber = 4,
				locator1 = "CommerceEntry#TABLE_CELL_BY_COLUMN_ORDER_NO_TITLE",
				value1 = "Supplier Channel");

			Pagination.viewResults(results = "Showing 1 to 1 of 1 entries.");
		}
	}

}