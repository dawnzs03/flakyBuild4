@component-name = "portal-commerce"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
	property portal.release = "true";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Product Info Management";

	setUp {
		task ("Given a Minium site is created") {
			CommerceConfiguration.commerceSetUp(minium = "true");
		}

		task ("And a user with Category Manager role is created") {
			JSONUser.addUserWithRole(
				roleTitle = "Category Manager",
				userEmailAddress = "category.manager@liferay.com",
				userFirstName = "Category",
				userLastName = "Manager",
				userScreenName = "category.manager");
		}

		task ("And the Single Approver is enabled for the Product Relations") {
			Workflow.openWorkflowProcessBuilderConfiguration();

			Workflow.configureWorkflow(
				workflowDefinition = "Single Approver",
				workflowResourceValue = "Commerce Product Link");
		}
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "This is a test for COMMERCE-11569. CanCreateNewRelationsWithApproveWorkflow"
	@priority = 4
	test CanCreateNewRelationsWithApproveWorkflow {
		property portal.acceptance = "false";

		task ("When the category manager opens a product") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "category.manager@liferay.com",
				userLoginFullName = "Category Manager");

			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "ABS Sensor");
		}

		task ("And creates one relation for every single type (Cross-Sell,Up-Sell,Related,Accessories,Spare Product)") {
			CommerceEntry.gotoMenuTab(menuTab = "Product Relations");

			for (var valueList : list "Up-Sell,Cross-Sell,Related,Accessories,Spare") {
				CommerceRelations.addAnyProductRelation(
					key_product = "Hoses",
					key_relation = "${valueList} Product");

				AssertElementPresent(
					key_productName = "Hoses",
					key_value = ${valueList},
					locator1 = "CommerceEntry#VALUE_PRODUCT_RELATIONS");
			}
		}

		task ("Then the status for all the relations is 'Pending'") {
			for (var productRelation : list "Up-Sell,Cross-Sell,Related,Accessories,Spare") {
				AssertElementPresent(
					key_productName = "Hoses",
					key_productRelation = ${productRelation},
					key_productStatus = "Pending",
					locator1 = "CommerceEntry#VALUE_PRODUCT_STATUS");
			}
		}

		task ("But when the admin logs in") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");
		}

		task ("And accepts all the notifications received by the category manager") {
			var notificationCount = 0;

			while (${notificationCount} != 5) {
				Notifications.gotoNotifications();

				Notifications.goToFilterValues(filterValues = "Unread");

				AssertClick(
					locator1 = "Notifications#NOTIFICATIONS_WORKFLOW_TITLE",
					value1 = "Category Manager sent you a Commerce Product Link for review in the workflow.");

				LexiconEntry.gotoEllipsisMenuItem(menuItem = "Assign to Me");

				Workflow.confirmWorkflowAction();

				LexiconEntry.gotoEllipsisMenuItem(menuItem = "Approve");

				Workflow.confirmWorkflowAction();

				var notificationCount = ${notificationCount} + 1;
			}
		}

		task ("And the category manager logs in again") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "category.manager@liferay.com",
				userLoginFullName = "Category Manager");
		}

		task ("Then the status for all the relations is changed from 'Pending' to 'Approved'") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "ABS Sensor");

			CommerceEntry.gotoMenuTab(menuTab = "Product Relations");

			for (var productRelation : list "Up-Sell,Cross-Sell,Related,Accessories,Spare") {
				AssertElementPresent(
					key_productName = "Hoses",
					key_productRelation = ${productRelation},
					key_productStatus = "Approved",
					locator1 = "CommerceEntry#VALUE_PRODUCT_STATUS");

				AssertElementNotPresent(
					key_productName = "Hoses",
					key_productRelation = ${productRelation},
					key_productStatus = "Pending",
					locator1 = "CommerceEntry#VALUE_PRODUCT_STATUS");
			}
		}
	}

	@description = "This is a test for COMMERCE-11570. CanCreateNewRelationsWithCustomTypeApproveWorkflow"
	@priority = 4
	test CanCreateNewRelationsWithCustomTypeApproveWorkflow {
		property osgi.module.configuration.file.names = "com.liferay.commerce.product.configuration.CPDefinitionLinkTypeConfiguration_custom-relation.config";
		property osgi.module.configurations = "type=\"Custom-Relation\"";
		property portal.acceptance = "false";

		task ("When the category manager opens a product") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "category.manager@liferay.com",
				userLoginFullName = "Category Manager");

			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "ABS Sensor");
		}

		task ("And creates one relation using the custom relation type created earlier") {
			CommerceEntry.gotoMenuTab(menuTab = "Product Relations");

			CommerceRelations.addAnyProductRelation(
				key_product = "Hoses",
				key_relation = "Custom-Relation Product");

			AssertElementPresent(
				key_productName = "Hoses",
				key_value = "Custom-Relation",
				locator1 = "CommerceEntry#VALUE_PRODUCT_RELATIONS");
		}

		task ("Then the status for the relation is 'Pending'") {
			AssertElementPresent(
				key_productName = "Hoses",
				key_productRelation = "Custom-Relation",
				key_productStatus = "Pending",
				locator1 = "CommerceEntry#VALUE_PRODUCT_STATUS");
		}

		task ("But when the admin logs in") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");
		}

		task ("And accepts the notification received by the category manager") {
			WorkflowAsset.gotoViaNotification(
				assetType = "Commerce Product Link",
				user = "Category Manager");

			LexiconEntry.gotoEllipsisMenuItem(menuItem = "Assign to Me");

			Workflow.confirmWorkflowAction();

			LexiconEntry.gotoEllipsisMenuItem(menuItem = "Approve");

			Workflow.confirmWorkflowAction();
		}

		task ("And the category manager logs in again") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "category.manager@liferay.com",
				userLoginFullName = "Category Manager");
		}

		task ("Then the status for the relation is changed from 'Pending' to 'Approved'") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "ABS Sensor");

			CommerceEntry.gotoMenuTab(menuTab = "Product Relations");

			AssertElementPresent(
				key_productName = "Hoses",
				key_productRelation = "Custom-Relation",
				key_productStatus = "Approved",
				locator1 = "CommerceEntry#VALUE_PRODUCT_STATUS");

			AssertElementNotPresent(
				key_productName = "Hoses",
				key_productRelation = "Custom-Relation",
				key_productStatus = "Pending",
				locator1 = "CommerceEntry#VALUE_PRODUCT_STATUS");
		}
	}

	@description = "This is a test for COMMERCE-11572. CanCreateNewRelationsWithCustomTypeRejectWorkflow"
	@priority = 4
	test CanCreateNewRelationsWithCustomTypeRejectWorkflow {
		property osgi.module.configuration.file.names = "com.liferay.commerce.product.configuration.CPDefinitionLinkTypeConfiguration_custom-relation.config";
		property osgi.module.configurations = "type=\"Custom-Relation\"";
		property portal.acceptance = "false";

		task ("When the category manager opens a product") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "category.manager@liferay.com",
				userLoginFullName = "Category Manager");

			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "ABS Sensor");
		}

		task ("And creates one relation using the custom relation type created earlier") {
			CommerceEntry.gotoMenuTab(menuTab = "Product Relations");

			CommerceRelations.addAnyProductRelation(
				key_product = "Hoses",
				key_relation = "Custom-Relation Product");

			AssertElementPresent(
				key_productName = "Hoses",
				key_value = "Custom-Relation",
				locator1 = "CommerceEntry#VALUE_PRODUCT_RELATIONS");
		}

		task ("Then the status for the relations is 'Pending'") {
			AssertElementPresent(
				key_productName = "Hoses",
				key_productRelation = "Custom-Relation",
				key_productStatus = "Pending",
				locator1 = "CommerceEntry#VALUE_PRODUCT_STATUS");
		}

		task ("But when the admin logs in") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");
		}

		task ("And rejects the notification received by the category manager") {
			WorkflowAsset.gotoViaNotification(
				assetType = "Commerce Product Link",
				user = "Category Manager");

			LexiconEntry.gotoEllipsisMenuItem(menuItem = "Assign to Me");

			Workflow.confirmWorkflowAction();

			LexiconEntry.gotoEllipsisMenuItem(menuItem = "Reject");

			Workflow.confirmWorkflowAction();
		}

		task ("And the category manager logs in again") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "category.manager@liferay.com",
				userLoginFullName = "Category Manager");
		}

		task ("Then the status for the relation is still 'Pending'") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "ABS Sensor");

			CommerceEntry.gotoMenuTab(menuTab = "Product Relations");

			AssertElementPresent(
				key_productName = "Hoses",
				key_productRelation = "Custom-Relation",
				key_productStatus = "Pending",
				locator1 = "CommerceEntry#VALUE_PRODUCT_STATUS");
		}

		task ("When the category manager re-submits the notifications to the admin") {
			Notifications.gotoNotifications();

			Notifications.goToFilterValues(filterValues = "Unread");

			AssertClick(
				locator1 = "Notifications#NOTIFICATIONS_WORKFLOW_TITLE",
				value1 = "Your submission was rejected by Test Test, please modify and resubmit.");

			LexiconEntry.gotoEllipsisMenuItem(menuItem = "Resubmit");

			Workflow.confirmWorkflowAction();
		}

		task ("And the admin accepts the re-submited notification") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			Notifications.gotoNotifications();

			Notifications.goToFilterValues(filterValues = "Unread");

			AssertClick(
				locator1 = "Notifications#NOTIFICATIONS_WORKFLOW_TITLE",
				value1 = "Category Manager sent you a Commerce Product Link for review in the workflow.");

			LexiconEntry.gotoEllipsisMenuItem(menuItem = "Assign to Me");

			Workflow.confirmWorkflowAction();

			LexiconEntry.gotoEllipsisMenuItem(menuItem = "Approve");

			Workflow.confirmWorkflowAction();
		}

		task ("Then the status for the relation is changed from 'Pending' to 'Approved'") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "category.manager@liferay.com",
				userLoginFullName = "Category Manager");

			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "ABS Sensor");

			CommerceEntry.gotoMenuTab(menuTab = "Product Relations");

			AssertElementPresent(
				key_productName = "Hoses",
				key_productRelation = "Custom-Relation",
				key_productStatus = "Approved",
				locator1 = "CommerceEntry#VALUE_PRODUCT_STATUS");

			AssertElementNotPresent(
				key_productName = "Hoses",
				key_productRelation = "Custom-Relation",
				key_productStatus = "Pending",
				locator1 = "CommerceEntry#VALUE_PRODUCT_STATUS");
		}
	}

	@description = "This is a test for COMMERCE-11571. CanCreateNewRelationsWithRejectWorkflow"
	@priority = 4
	test CanCreateNewRelationsWithRejectWorkflow {
		property portal.acceptance = "false";

		task ("When the category manager opens a product") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "category.manager@liferay.com",
				userLoginFullName = "Category Manager");

			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "ABS Sensor");
		}

		task ("And creates one relation for every single type (Cross-Sell,Up-Sell,Related,Accessories,Spare Product)") {
			CommerceEntry.gotoMenuTab(menuTab = "Product Relations");

			for (var valueList : list "Up-Sell,Cross-Sell,Related,Accessories,Spare") {
				CommerceRelations.addAnyProductRelation(
					key_product = "Hoses",
					key_relation = "${valueList} Product");

				AssertElementPresent(
					key_productName = "Hoses",
					key_value = ${valueList},
					locator1 = "CommerceEntry#VALUE_PRODUCT_RELATIONS");
			}
		}

		task ("Then the status for all the relations is 'Pending'") {
			for (var productRelation : list "Up-Sell,Cross-Sell,Related,Accessories,Spare") {
				AssertElementPresent(
					key_productName = "Hoses",
					key_productRelation = ${productRelation},
					key_productStatus = "Pending",
					locator1 = "CommerceEntry#VALUE_PRODUCT_STATUS");
			}
		}

		task ("But when the admin logs in") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");
		}

		task ("And rejects all the notifications received by the category manager") {
			var notificationCount = 0;

			while (${notificationCount} != 5) {
				Notifications.gotoNotifications();

				Notifications.goToFilterValues(filterValues = "Unread");

				AssertClick(
					locator1 = "Notifications#NOTIFICATIONS_WORKFLOW_TITLE",
					value1 = "Category Manager sent you a Commerce Product Link for review in the workflow.");

				LexiconEntry.gotoEllipsisMenuItem(menuItem = "Assign to Me");

				Workflow.confirmWorkflowAction();

				LexiconEntry.gotoEllipsisMenuItem(menuItem = "Reject");

				Workflow.confirmWorkflowAction();

				var notificationCount = ${notificationCount} + 1;
			}
		}

		task ("And the category manager logs in again") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "category.manager@liferay.com",
				userLoginFullName = "Category Manager");
		}

		task ("Then the status for all the relations is still 'Pending'") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "ABS Sensor");

			CommerceEntry.gotoMenuTab(menuTab = "Product Relations");

			for (var productRelation : list "Up-Sell,Cross-Sell,Related,Accessories,Spare") {
				AssertElementPresent(
					key_productName = "Hoses",
					key_productRelation = ${productRelation},
					key_productStatus = "Pending",
					locator1 = "CommerceEntry#VALUE_PRODUCT_STATUS");
			}
		}

		task ("When the category manager re-submits all the notifications to the admin") {
			var notificationCount = 0;

			while (${notificationCount} != 5) {
				Notifications.gotoNotifications();

				Notifications.goToFilterValues(filterValues = "Unread");

				AssertClick(
					locator1 = "Notifications#NOTIFICATIONS_WORKFLOW_TITLE",
					value1 = "Your submission was rejected by Test Test, please modify and resubmit.");

				LexiconEntry.gotoEllipsisMenuItem(menuItem = "Resubmit");

				Workflow.confirmWorkflowAction();

				var notificationCount = ${notificationCount} + 1;
			}
		}

		task ("And the admin accepts all the re-submited notifications") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");

			var notificationCount = 0;

			while (${notificationCount} != 5) {
				Notifications.gotoNotifications();

				Notifications.goToFilterValues(filterValues = "Unread");

				AssertClick(
					locator1 = "Notifications#NOTIFICATIONS_WORKFLOW_TITLE",
					value1 = "Category Manager sent you a Commerce Product Link for review in the workflow.");

				LexiconEntry.gotoEllipsisMenuItem(menuItem = "Assign to Me");

				Workflow.confirmWorkflowAction();

				LexiconEntry.gotoEllipsisMenuItem(menuItem = "Approve");

				Workflow.confirmWorkflowAction();

				var notificationCount = ${notificationCount} + 1;
			}
		}

		task ("Then the status for all the relations is changed from 'Pending' to 'Approved'") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "category.manager@liferay.com",
				userLoginFullName = "Category Manager");

			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "ABS Sensor");

			CommerceEntry.gotoMenuTab(menuTab = "Product Relations");

			for (var productRelation : list "Up-Sell,Cross-Sell,Related,Accessories,Spare") {
				AssertElementPresent(
					key_productName = "Hoses",
					key_productRelation = ${productRelation},
					key_productStatus = "Approved",
					locator1 = "CommerceEntry#VALUE_PRODUCT_STATUS");

				AssertElementNotPresent(
					key_productName = "Hoses",
					key_productRelation = ${productRelation},
					key_productStatus = "Pending",
					locator1 = "CommerceEntry#VALUE_PRODUCT_STATUS");
			}
		}
	}

	@description = "This is a test for COMMERCE-11736. Can create a new product relation type with XSS Script"
	@priority = 5
	test CanCreateNewRelationTypeWithXSS {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given a product relation with XSS type is configured") {
			SystemSettings.openToConfigInSystemSettings(portletId = "com.liferay.commerce.product.configuration.CPDefinitionLinkTypeConfiguration");

			SelectFrameTop();

			Type(
				key_counter = 1,
				locator1 = "TextArea#CONFIGURATION",
				value1 = "<script>alert(1);</script>");

			Button.clickSave();

			Alert.viewSuccessMessage();
		}

		task ("When the admin creates a product relation using the XSS type") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "ABS Sensor");

			CommerceEntry.gotoMenuTab(menuTab = "Product Relations");

			CommerceRelations.addAnyProductRelation(
				key_product = "Hoses",
				key_relation = "<script>alert(1);</script> Product");
		}

		task ("Then the related product with XSS type is added") {
			AssertElementPresent(
				key_productName = "Hoses",
				key_value = "<script>alert(1);</script>",
				locator1 = "CommerceEntry#VALUE_PRODUCT_RELATIONS");
		}
	}

	@description = "This is a test for COMMERCE-12048. CanViewProductDetailsRelationsWithApproveWorkflow"
	@priority = 5
	test CanViewProductDetailsRelationsWithApproveWorkflow {
		property portal.acceptance = "true";

		task ("When the category manager opens a product") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "category.manager@liferay.com",
				userLoginFullName = "Category Manager");

			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "ABS Sensor");
		}

		task ("And one product relation is created") {
			CommerceEntry.gotoMenuTab(menuTab = "Product Relations");

			CommerceRelations.addAnyProductRelation(
				key_product = "Hoses",
				key_relation = "Up-Sell");

			AssertElementPresent(
				key_productName = "Hoses",
				key_value = "Up-Sell",
				locator1 = "CommerceEntry#VALUE_PRODUCT_RELATIONS");
		}

		task ("Then the status for the relation is 'Pending'") {
			AssertElementPresent(
				key_productName = "Hoses",
				key_productRelation = "Up-Sell",
				key_productStatus = "Pending",
				locator1 = "CommerceEntry#VALUE_PRODUCT_STATUS");
		}

		task ("When the admin logs in") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "Test Test");
		}

		task ("Then the Admin can see the details of the requested") {
			Notifications.gotoNotifications();

			Notifications.goToFilterValues(filterValues = "Unread");

			AssertClick(
				locator1 = "Notifications#NOTIFICATIONS_WORKFLOW_TITLE",
				value1 = "Category Manager sent you a Commerce Product Link for review in the workflow.");

			AssertElementPresent(
				key_scopeName = "Hoses",
				locator1 = "AssetLists#ASSET_LIST_SCOPE_NAME");

			AssertElementPresent(
				key_status = "Pending",
				locator1 = "CommerceEntry#WORKFLOW_STATUS");
		}
	}

}