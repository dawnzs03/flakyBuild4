@component-name = "portal-commerce"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false${line.separator}feature.flag.COMMERCE-11028=true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Shopping Experience";

	setUp {
		task ("Given a Minium site") {
			CommerceConfiguration.commerceSetUp(minium = "true");
		}

		task ("And an account with a buyer user") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And a new Display Page Template for Commerce Product is created") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Commerce Product",
				displayPageTemplateEntryName = "Product DPT",
				groupName = "Minium");
		}
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "COMMERCE-11324. Can deploy Request Quote fragment on a DPT and verify that Request a Quote button is successfully shown on the product details page."
	@priority = 5
	test CanUseRequestQuoteFragment {
		property portal.acceptance = "true";

		task ("Given Request Quote and Price fragments are deployed on the DPT") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "minium");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Product DPT");

			CommerceDisplayPageTemplates.addFragment(
				collectionName = "Product",
				fragmentName = "Request Quote",
				index = 1);

			CommerceDisplayPageTemplates.addFragment(
				collectionName = "Product",
				fragmentName = "Price",
				index = 2,
				targetFragmentName = "Request Quote");
		}

		task ("And the template is published and Marked as Default") {
			Button.clickPublish();

			Alert.viewSuccessMessage();

			LexiconEntry.gotoEntryMenuItem(
				menuItem = "Mark as Default",
				rowEntry = "Product DPT");

			Alert.viewSuccessMessage();
		}

		task ("And the sku of a product is marked as 'Price on Application") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "U-Joint");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoTableListEntry(entryName = "MIN55861");

			CommerceSKUs.editSkuPricing(priceOnApplication = "true");
		}

		task ("When the buyer navigates to the U-Joint's product details page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/u-joint");
		}

		task ("Then Request a Quote button is shown together with Price fragment that shows Price on Application label") {
			AssertElementPresent(
				key_text = "Request a Quote",
				locator1 = "Button#ANY_SECONDARY");

			AssertElementPresent(locator1 = "CommerceAccelerators#PRODUCT_DETAILS_PRICE_ON_APPLICATION");
		}

		task ("And the list price is shown for the Transmission Cooler Line Assembly without Request a Quote button") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/transmission-cooler-line-assembly");

			AssertElementNotPresent(
				key_text = "Request a Quote",
				locator1 = "Button#ANY_SECONDARY");

			AssertTextEquals(
				locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE",
				value1 = "$ 15.00");
		}
	}

}