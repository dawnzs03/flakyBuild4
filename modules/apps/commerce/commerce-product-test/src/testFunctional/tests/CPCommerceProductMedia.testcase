@component-name = "portal-commerce"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Product Info Management";

	setUp {
		CommerceConfiguration.commerceSetUp(storeFront = "true");
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "This is a test for COMMERCE-6030. AddAnAttachment"
	@priority = 3
	test AddAnAttachment {
		property portal.acceptance = "false";

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Simple T-Shirt",
			productType = "Simple");

		CommerceEntry.gotoMenuTab(menuTab = "Media");

		CommerceProductImages.addAttachmentImages(imageTitles = "Black");
	}

	@description = "This is a test for COMMERCE-6032. AddAnAttachmentToAnOption"
	@ignore = "true"
	@priority = 3
	test AddAnAttachmentToAnOption {

		// TODO COMMERCE-6032 AddAnAttachmentToAnOption

	}

	@description = "This is a test for COMMERCE-6025. AddAnImage"
	@priority = 3
	test AddAnImage {
		property portal.acceptance = "false";

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productName = "Simple T-Shirt",
			productType = "Simple");

		CommerceEntry.gotoMenuTab(menuTab = "Media");

		CommerceProductImages.addProductImages(
			imageTitles = "Black",
			validationImage = "true");
	}

	@description = "This is a test for COMMERCE-6028. AddAnImageToAnOption"
	@priority = 5
	test AddAnImageToAnOption {
		property portal.acceptance = "true";

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Options");

		CPCommerceCatalog.newOptionsEntry(
			facetable = "true",
			optionDescription = "Option Description",
			optionFieldType = "Select from List",
			optionName = "Color",
			required = "true",
			skuContributor = "true");

		Button.clickSave();

		AssertElementPresent(locator1 = "Message#SUCCESS");

		CPCommerceCatalog.addOptionValues(
			optionEntryName = "Color",
			optionValuesList = "Black:1");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Simple T-Shirt",
			productType = "Simple");

		CommerceEntry.gotoMenuTab(menuTab = "Options");

		CommerceRelations.assignSingleRelationToProductsEntry(
			entryName = "Color",
			title = "Add Option");

		Alert.viewSuccessMessage();

		CommerceEntry.gotoMenuTab(menuTab = "Media");

		CommerceProductImages.addProductImages(
			imageTitles = "Black",
			optionValue = "Black",
			validationImage = "true");

		Alert.viewSuccessMessage();
	}

	@description = "This is a test for COMMERCE-12305. The admin can delete a product's attachment via API"
	@priority = 5
	test CanDeleteProductAttachmentViaAPI {
		property portal.acceptance = "true";

		task ("Given a Minium site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And an attachment for ABS Sensor is uploaded via API") {
			var attachment = CommerceUtilities.getConvertedBase64File(file = "Commerce_Black.jpg");

			CommerceJSONProductsAPI._patchCommerceProductAttachmentUsingERC(
				attachment = ${attachment},
				attachmentTitle = "Black T-Shirt",
				productERC = "MIN93015minium-initializer");
		}

		task ("And the attachment is successfully uploaded") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "ABS Sensor");

			CommerceEntry.gotoMenuTab(menuTab = "Media");

			AssertElementPresent(
				key_entryName = "Black T-Shirt",
				key_table = "Attachments",
				locator1 = "CommerceEntry#TABLE_ENTRY_NAME");
		}

		task ("When the admin tries to delete the attachment via API") {
			CommerceJSONProductsAPI._deleteCommerceProductAttachment(
				attachmentName = "Black T-Shirt",
				productName = "ABS Sensor",
				type = "attachment");
		}

		task ("Then the attachment item is successfully removed from the UI") {
			CommerceEntry.gotoMenuTab(menuTab = "Media");

			AssertElementNotPresent(
				key_entryName = "Black T-Shirt",
				key_table = "Attachments",
				locator1 = "CommerceEntry#TABLE_ENTRY_NAME");
		}
	}

	@description = "This is a test for COMMERCE-12304. The admin can delete a product's image via API"
	@priority = 5
	test CanDeleteProductImageViaAPI {
		property portal.acceptance = "true";

		task ("Given a Minium Site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And an image for ABS Sensor is uploaded via API") {
			var attachment = CommerceUtilities.getConvertedBase64File(file = "Commerce_Black.jpg");

			CommerceJSONProductsAPI._patchCommerceProductImageUsingERC(
				attachment = ${attachment},
				contentType = "image/png",
				imageTitle = "Black T-Shirt",
				productERC = "MIN93015minium-initializer");
		}

		task ("And the image is successfully uploaded") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "ABS Sensor");

			CommerceEntry.gotoMenuTab(menuTab = "Media");

			AssertElementPresent(
				key_entryName = "Black T-Shirt",
				key_table = "Images",
				locator1 = "CommerceEntry#TABLE_ENTRY_NAME");
		}

		task ("When the admin tries to delete the image via API") {
			CommerceJSONProductsAPI._deleteCommerceProductAttachment(
				attachmentName = "Black T-Shirt",
				productName = "ABS Sensor",
				type = "images");
		}

		task ("Then the image item is successfully removed from the UI") {
			CommerceEntry.gotoMenuTab(menuTab = "Media");

			AssertElementNotPresent(
				key_entryName = "Black T-Shirt",
				key_table = "Images",
				locator1 = "CommerceEntry#TABLE_ENTRY_NAME");
		}
	}

	@description = "This is a test for COMMERCE-11447. The admin can post an attachment with a custom field to a product via API"
	@priority = 3
	test CanUploadProductAttachmentWithCustomFieldViaAPI {
		property portal.acceptance = "false";

		task ("Given a Minium Site is created") {
			CommerceAccelerators.initializeNewSiteViaAccelerator(siteName = "Minium");
		}

		task ("And a custom field for Commerce Product Attachments is added") {
			CustomFields.addCP(
				customFieldName = "Text Field",
				customFieldType = "Input Field",
				customInputDataType = "Text",
				modelResource = "com.liferay.commerce.product.model.CPAttachmentFileEntry");
		}

		task ("When an attachment with custom field value for the product ABS Sensor is posted via API") {
			var attachment = CommerceUtilities.getConvertedBase64File(file = "Commerce_Black.jpg");

			CommerceJSONProductsAPI._patchCommerceProductAttachmentUsingERC(
				attachment = ${attachment},
				attachmentTitle = "Commerce_Black.jpg",
				customFieldContent = "Yes",
				customFieldName = "Text Field",
				customFieldType = "Text",
				productERC = "MIN93015minium-initializer");
		}

		task ("Then a new attachment with a custom field value is present on the product ABS Sensor Media tab") {
			CommerceProducts.openProductsAdmin();

			CommerceNavigator.gotoEntry(entryName = "ABS Sensor");

			CommerceEntry.gotoMenuTab(menuTab = "Media");

			CommerceEntry.clickTableEntryEditButton(entryName = "Commerce_Black.jpg");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			AssertElementPresent(
				locator1 = "TextInput#CUSTOM_FIELD",
				value1 = "Yes");
		}
	}

	@description = "This is a test for COMMERCE-6031. EditAnAttachment"
	@priority = 3
	test EditAnAttachment {
		property portal.acceptance = "false";

		ApplicationsMenu.gotoPortlet(
			category = "Configuration",
			panel = "Control Panel",
			portlet = "Custom Fields");

		CustomFields.addCP(
			customFieldName = "Custom Field",
			customFieldType = "Text",
			customInputDataType = "Text",
			resourceName = "Commerce Product Attachment");

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Simple T-Shirt",
			productType = "Simple");

		CommerceEntry.gotoMenuTab(menuTab = "Media");

		CommerceProductImages.addAttachmentImages(imageTitles = "Black");

		Click(
			key_value = "Commerce_Black.jpg",
			locator1 = "CommerceEntry#BODY_VERTICAL_ELLIPSIS");

		MenuItem.click(menuItem = "Edit");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Type(
			locator1 = "TextInput#TITLE",
			value1 = "Commerce_Black_Edit");

		Type(
			locator1 = "TextInput#CUSTOM_FIELD",
			value1 = "Test");

		Button.clickSaveAsDraft();

		Alert.viewSuccessMessage();
	}

	@description = "This is a test for COMMERCE-6027. EditAnImage"
	@priority = 5
	test EditAnImage {
		property portal.acceptance = "true";

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Simple T-Shirt",
			productType = "Simple");

		CommerceEntry.gotoMenuTab(menuTab = "Media");

		CommerceProductImages.addProductImages(
			imageTitles = "Black",
			validationImage = "false");

		Click(
			key_value = "Commerce_Black",
			locator1 = "CommerceEntry#BODY_VERTICAL_ELLIPSIS");

		MenuItem.click(menuItem = "Edit");

		SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

		Type(
			locator1 = "TextInput#TITLE",
			value1 = "Commerce_Black_Edit");

		Button.clickPublish();

		Alert.viewSuccessMessage();

		Click(locator1 = "Icon#CLOSE");

		Refresh();

		AssertElementNotPresent(
			key_entryName = "Commerce_Black",
			key_table = "Images",
			locator1 = "CommerceEntry#TABLE_ENTRY_NAME_NOT_CONTAINS");

		echo("Commerce_Black is not present");

		AssertElementPresent(
			key_entryName = "Commerce_Black_Edit",
			key_table = "Images",
			locator1 = "CommerceEntry#TABLE_ENTRY_NAME_NOT_CONTAINS");

		echo("Commerce_Black_Edit is present");
	}

	@description = "This is a test for COMMERCE-6033. RemoveAnAttachment"
	@priority = 3
	test RemoveAnAttachment {
		property portal.acceptance = "false";

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Simple T-Shirt",
			productType = "Simple");

		CommerceEntry.gotoMenuTab(menuTab = "Media");

		CommerceProductImages.addAttachmentImages(imageTitles = "Black");

		Alert.viewSuccessMessage();

		Click(
			key_value = "Commerce_Black",
			locator1 = "CommerceEntry#BODY_VERTICAL_ELLIPSIS");

		MenuItem.click(menuItem = "Delete");

		Alert.viewSuccessMessage();

		AssertElementNotPresent(
			key_entryName = "Commerce_Black",
			key_table = "Attachments",
			locator1 = "CommerceEntry#TABLE_ENTRY_NAME");

		echo("Commerce_Black is not present");
	}

	@description = "This is a test for COMMERCE-6026. RemoveAnImage"
	@priority = 3
	test RemoveAnImage {
		property portal.acceptance = "false";

		CommerceNavigator.gotoPortlet(
			category = "Product Management",
			portlet = "Products");

		CPCommerceCatalog.newProductsEntry(
			productCatalog = "Master",
			productName = "Simple T-Shirt",
			productType = "Simple");

		CommerceEntry.gotoMenuTab(menuTab = "Media");

		CommerceProductImages.addProductImages(
			imageTitles = "Black",
			validationImage = "true");

		Click(
			key_value = "Commerce_Black",
			locator1 = "CommerceEntry#BODY_VERTICAL_ELLIPSIS");

		MenuItem.click(menuItem = "Delete");

		Alert.viewSuccessMessage();

		AssertElementNotPresent(
			key_entryName = "Commerce_Black",
			key_table = "Images",
			locator1 = "CommerceEntry#TABLE_ENTRY_NAME");
	}

}