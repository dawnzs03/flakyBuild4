@component-name = "portal-commerce"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false${line.separator}feature.flag.COMMERCE-11028=true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Shopping Experience";

	setUp {
		CommerceConfiguration.commerceSetUp(minium = "true");

		task ("Setup: Create an account with a buyer user") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "COMMERCE-7617. Verify that the price shown in the Price fragment is affected by discounts"
	@priority = 5
	test CanViewPriceFragmentDiscount {
		property portal.acceptance = "true";

		task ("Given Hoses has different prices for all the SKUs") {
			for (var productSKUAndPrice : list "MIN93022A:25,MIN93022B:50,MIN93022C:100") {
				var productSKU = StringUtil.extractFirst(${productSKUAndPrice}, ":");
				var price = StringUtil.extractLast(${productSKUAndPrice}, ":");

				CommerceJSONPriceListsAndPromotionsAPI._addPriceListEntry(
					entryPrice = ${price},
					priceListName = "Minium Base Price List",
					productSKU = ${productSKU});
			}
		}

		task ("And two Discounts are created for Minium") {
			CommerceJSONDiscountsAPI._addDiscount(
				active = "true",
				level = "L1",
				percentageLevel1 = 50,
				productNames = "Hoses",
				target = "products",
				title = "Discount 1",
				usePercentage = "true");

			CommerceJSONDiscountsAPI._addDiscount(
				active = "true",
				level = "L1",
				percentageLevel1 = 90,
				productSKUs = "MIN93022C",
				target = "skus",
				title = "Discount 2",
				usePercentage = "false");
		}

		task ("And a new default Commerce Product type DPT with 'Price' and 'Option Selector' fragments deployed is created") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Commerce Product",
				displayPageTemplateEntryName = "Test Commerce Product Display Page Template",
				groupName = "Minium");

			DisplayPageTemplate.addFragment(
				collectionName = "Product",
				displayPageName = "Test Commerce Product Display Page Template",
				fragmentName = "Price",
				publish = "false",
				siteURLKey = "minium");

			CommerceDisplayPageTemplates.addFragment(
				collectionName = "Product",
				fragmentName = "Option Selector",
				index = 2,
				targetFragmentName = "Price");

			Button.clickPublish();

			Alert.viewSuccessMessage();

			JSONLayoutpagetemplate.setLayoutPageTemplateEntryAsDefault(
				groupName = "Minium",
				layoutPageTemplateEntryName = "Test Commerce Product Display Page Template",
				type = "Display Page Template");
		}

		task ("When the buyer navigates to the Hoses product details page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "buyer@liferay.com",
				userLoginFullName = "Buyer User");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/hoses");
		}

		task ("Then the price is changed for all the products skus") {
			for (var rowList : list "6:25:12.50,24:50:25,48:100:10") {
				var option = StringUtil.extractFirst(${rowList}, ":");

				var rowList = StringUtil.replaceFirst(${rowList}, "${option}:", "");

				var inactivePrice = StringUtil.extractFirst(${rowList}, ":");
				var netPrice = StringUtil.extractLast(${rowList}, ":");

				FrontStore.selectAssociatedFSOptionsValue(
					fsOptionName = "Package Quantity",
					fsOptionValue = ${option});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE_INACTIVE",
					value1 = ${inactivePrice});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_NET_PRICE",
					value1 = ${netPrice});
			}
		}
	}

	@description = "COMMERCE-11137. Verify that the price shown in the Price fragment is affected by the discount target Categories"
	@priority = 4
	test CanViewPriceFragmentDiscountAppliedToCategories {
		property portal.acceptance = "false";

		task ("Given Hoses has different prices for all the SKUs") {
			for (var productSKUAndPrice : list "MIN93022A:25,MIN93022B:50,MIN93022C:100") {
				var productSKU = StringUtil.extractFirst(${productSKUAndPrice}, ":");
				var price = StringUtil.extractLast(${productSKUAndPrice}, ":");

				CommerceJSONPriceListsAndPromotionsAPI._addPriceListEntry(
					entryPrice = ${price},
					priceListName = "Minium Base Price List",
					productSKU = ${productSKU});
			}
		}

		task ("And a Discount applies Percentage type to Brake System category is created") {
			CommerceJSONDiscountsAPI._addDiscount(
				active = "true",
				categoryNames = "Brake System",
				groupName = "Global",
				level = "L1",
				percentageLevel1 = 50,
				target = "categories",
				title = "Discount 1",
				usePercentage = "true",
				vocabularyName = "Minium");
		}

		task ("And a new default Commerce Product type DPT with 'Price' and 'Option Selector' fragments deployed is created") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Commerce Product",
				displayPageTemplateEntryName = "Test Commerce Product Display Page Template",
				groupName = "Minium");

			DisplayPageTemplate.addFragment(
				collectionName = "Product",
				displayPageName = "Test Commerce Product Display Page Template",
				fragmentName = "Price",
				publish = "false",
				siteURLKey = "minium");

			CommerceDisplayPageTemplates.addFragment(
				collectionName = "Product",
				fragmentName = "Option Selector",
				index = 2,
				targetFragmentName = "Price");

			Button.clickPublish();

			Alert.viewSuccessMessage();

			JSONLayoutpagetemplate.setLayoutPageTemplateEntryAsDefault(
				groupName = "Minium",
				layoutPageTemplateEntryName = "Test Commerce Product Display Page Template",
				type = "Display Page Template");
		}

		task ("When the buyer navigates to the Hoses product details page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "buyer@liferay.com",
				userLoginFullName = "Buyer User");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/hoses");
		}

		task ("Then the price is changed for all the skus") {
			for (var rowList : list "6:25:12.50,24:50:25,48:100:50") {
				var option = StringUtil.extractFirst(${rowList}, ":");

				var rowList = StringUtil.replaceFirst(${rowList}, "${option}:", "");

				var inactivePrice = StringUtil.extractFirst(${rowList}, ":");
				var netPrice = StringUtil.extractLast(${rowList}, ":");

				FrontStore.selectAssociatedFSOptionsValue(
					fsOptionName = "Package Quantity",
					fsOptionValue = ${option});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE_INACTIVE",
					value1 = ${inactivePrice});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_NET_PRICE",
					value1 = ${netPrice});
			}
		}

		task ("When the admin updates the discount type to Fixed Amount") {
			CommerceJSONDiscountsAPI._patchCommerceDiscount(
				active = "true",
				discountTitle = "Discount 1",
				percentageLevel1 = 20,
				target = "categories",
				usePercentage = "false");
		}

		task ("Then the price is changed for all the skus") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/hoses");

			for (var rowList : list "6:25:5,24:50:30,48:100:80") {
				var option = StringUtil.extractFirst(${rowList}, ":");

				var rowList = StringUtil.replaceFirst(${rowList}, "${option}:", "");

				var inactivePrice = StringUtil.extractFirst(${rowList}, ":");
				var netPrice = StringUtil.extractLast(${rowList}, ":");

				FrontStore.selectAssociatedFSOptionsValue(
					fsOptionName = "Package Quantity",
					fsOptionValue = ${option});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE_INACTIVE",
					value1 = ${inactivePrice});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_NET_PRICE",
					value1 = ${netPrice});
			}
		}
	}

	@description = "COMMERCE-11137. Verify that the price shown in the Price fragment is affected by the discount target Product Groups"
	@priority = 4
	test CanViewPriceFragmentDiscountAppliedToProductGroups {
		property portal.acceptance = "false";

		task ("Given Hoses has different prices for all the SKUs") {
			for (var productSKUAndPrice : list "MIN93022A:25,MIN93022B:50,MIN93022C:100") {
				var productSKU = StringUtil.extractFirst(${productSKUAndPrice}, ":");
				var price = StringUtil.extractLast(${productSKUAndPrice}, ":");

				CommerceJSONPriceListsAndPromotionsAPI._addPriceListEntry(
					entryPrice = ${price},
					priceListName = "Minium Base Price List",
					productSKU = ${productSKU});
			}
		}

		task ("And Hoses is added in a product group") {
			CommmerceJSONProductGroupsAPI._postProductGroups(
				productGroupName = "PG1",
				productNames = "Hoses");
		}

		task ("And a Discount applies Percentage type to product group PG1 is created") {
			CommerceJSONDiscountsAPI._addDiscount(
				active = "true",
				level = "L1",
				percentageLevel1 = 50,
				productGroupNames = "PG1",
				target = "product-groups",
				title = "Discount 1",
				usePercentage = "true");
		}

		task ("And a new default Commerce Product type DPT with 'Price' and 'Option Selector' fragments deployed is created") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Commerce Product",
				displayPageTemplateEntryName = "Test Commerce Product Display Page Template",
				groupName = "Minium");

			DisplayPageTemplate.addFragment(
				collectionName = "Product",
				displayPageName = "Test Commerce Product Display Page Template",
				fragmentName = "Price",
				publish = "false",
				siteURLKey = "minium");

			CommerceDisplayPageTemplates.addFragment(
				collectionName = "Product",
				fragmentName = "Option Selector",
				index = 2,
				targetFragmentName = "Price");

			Button.clickPublish();

			Alert.viewSuccessMessage();

			JSONLayoutpagetemplate.setLayoutPageTemplateEntryAsDefault(
				groupName = "Minium",
				layoutPageTemplateEntryName = "Test Commerce Product Display Page Template",
				type = "Display Page Template");
		}

		task ("When the buyer navigates to the Hoses product details page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "buyer@liferay.com",
				userLoginFullName = "Buyer User");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/hoses");
		}

		task ("Then the price is changed for all the skus") {
			for (var rowList : list "6:25:12.50,24:50:25,48:100:50") {
				var option = StringUtil.extractFirst(${rowList}, ":");

				var rowList = StringUtil.replaceFirst(${rowList}, "${option}:", "");

				var inactivePrice = StringUtil.extractFirst(${rowList}, ":");
				var netPrice = StringUtil.extractLast(${rowList}, ":");

				FrontStore.selectAssociatedFSOptionsValue(
					fsOptionName = "Package Quantity",
					fsOptionValue = ${option});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE_INACTIVE",
					value1 = ${inactivePrice});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_NET_PRICE",
					value1 = ${netPrice});
			}
		}

		task ("When the admin updates the discount type to Fixed Amount") {
			CommerceJSONDiscountsAPI._patchCommerceDiscount(
				active = "true",
				discountTitle = "Discount 1",
				percentageLevel1 = 20,
				target = "product-groups",
				usePercentage = "false");
		}

		task ("Then the price is changed for all the skus") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/hoses");

			for (var rowList : list "6:25:5,24:50:30,48:100:80") {
				var option = StringUtil.extractFirst(${rowList}, ":");

				var rowList = StringUtil.replaceFirst(${rowList}, "${option}:", "");

				var inactivePrice = StringUtil.extractFirst(${rowList}, ":");
				var netPrice = StringUtil.extractLast(${rowList}, ":");

				FrontStore.selectAssociatedFSOptionsValue(
					fsOptionName = "Package Quantity",
					fsOptionValue = ${option});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE_INACTIVE",
					value1 = ${inactivePrice});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_NET_PRICE",
					value1 = ${netPrice});
			}
		}
	}

	@description = "COMMERCE-11137. Verify that the price shown in the Price fragment is affected by the discount target Products"
	@priority = 4
	test CanViewPriceFragmentDiscountAppliedToProducts {
		property portal.acceptance = "false";

		task ("Given Hoses has different prices for all the SKUs") {
			for (var productSKUAndPrice : list "MIN93022A:25,MIN93022B:50,MIN93022C:100") {
				var productSKU = StringUtil.extractFirst(${productSKUAndPrice}, ":");
				var price = StringUtil.extractLast(${productSKUAndPrice}, ":");

				CommerceJSONPriceListsAndPromotionsAPI._addPriceListEntry(
					entryPrice = ${price},
					priceListName = "Minium Base Price List",
					productSKU = ${productSKU});
			}
		}

		task ("And a Discount applies Percentage type to product Hoses is created") {
			CommerceJSONDiscountsAPI._addDiscount(
				active = "true",
				level = "L1",
				percentageLevel1 = 50,
				productNames = "Hoses",
				target = "products",
				title = "Discount 1",
				usePercentage = "true");
		}

		task ("And a new default Commerce Product type DPT with 'Price' and 'Option Selector' fragments deployed is created") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Commerce Product",
				displayPageTemplateEntryName = "Test Commerce Product Display Page Template",
				groupName = "Minium");

			DisplayPageTemplate.addFragment(
				collectionName = "Product",
				displayPageName = "Test Commerce Product Display Page Template",
				fragmentName = "Price",
				publish = "false",
				siteURLKey = "minium");

			CommerceDisplayPageTemplates.addFragment(
				collectionName = "Product",
				fragmentName = "Option Selector",
				index = 2,
				targetFragmentName = "Price");

			Button.clickPublish();

			Alert.viewSuccessMessage();

			JSONLayoutpagetemplate.setLayoutPageTemplateEntryAsDefault(
				groupName = "Minium",
				layoutPageTemplateEntryName = "Test Commerce Product Display Page Template",
				type = "Display Page Template");
		}

		task ("When the buyer navigates to the Hoses product details page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "buyer@liferay.com",
				userLoginFullName = "Buyer User");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/hoses");
		}

		task ("Then the price is changed for all the skus") {
			for (var rowList : list "6:25:12.50,24:50:25,48:100:50") {
				var option = StringUtil.extractFirst(${rowList}, ":");

				var rowList = StringUtil.replaceFirst(${rowList}, "${option}:", "");

				var inactivePrice = StringUtil.extractFirst(${rowList}, ":");
				var netPrice = StringUtil.extractLast(${rowList}, ":");

				FrontStore.selectAssociatedFSOptionsValue(
					fsOptionName = "Package Quantity",
					fsOptionValue = ${option});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE_INACTIVE",
					value1 = ${inactivePrice});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_NET_PRICE",
					value1 = ${netPrice});
			}
		}

		task ("When the admin updates the discount type to Fixed Amount") {
			CommerceJSONDiscountsAPI._patchCommerceDiscount(
				active = "true",
				discountTitle = "Discount 1",
				percentageLevel1 = 20,
				target = "products",
				usePercentage = "false");
		}

		task ("Then the price is changed for all the skus") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/hoses");

			for (var rowList : list "6:25:5,24:50:30,48:100:80") {
				var option = StringUtil.extractFirst(${rowList}, ":");

				var rowList = StringUtil.replaceFirst(${rowList}, "${option}:", "");

				var inactivePrice = StringUtil.extractFirst(${rowList}, ":");
				var netPrice = StringUtil.extractLast(${rowList}, ":");

				FrontStore.selectAssociatedFSOptionsValue(
					fsOptionName = "Package Quantity",
					fsOptionValue = ${option});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE_INACTIVE",
					value1 = ${inactivePrice});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_NET_PRICE",
					value1 = ${netPrice});
			}
		}
	}

	@description = "COMMERCE-11137. When the discount is Percentage type and applied to Products target, the lower Maximum Discount Amount can win over Amount to show the price in the Price fragment"
	@priority = 4
	test CanViewPriceFragmentDiscountAppliedToProductsLowerMaximumDiscountAmountWinOverAmount {
		property portal.acceptance = "false";

		task ("Given Hoses has different prices for all the SKUs") {
			for (var productSKUAndPrice : list "MIN93022A:25,MIN93022B:50,MIN93022C:100") {
				var productSKU = StringUtil.extractFirst(${productSKUAndPrice}, ":");
				var price = StringUtil.extractLast(${productSKUAndPrice}, ":");

				CommerceJSONPriceListsAndPromotionsAPI._addPriceListEntry(
					entryPrice = ${price},
					priceListName = "Minium Base Price List",
					productSKU = ${productSKU});
			}
		}

		task ("And a Discount applies Percentage type with 20% amount to product Hoses is created") {
			CommerceJSONDiscountsAPI._addDiscount(
				active = "true",
				level = "L1",
				percentageLevel1 = 20,
				productNames = "Hoses",
				target = "products",
				title = "Discount 1",
				usePercentage = "true");
		}

		task ("When the admin updates the Maximum Discount Amount to 1$ for that discount") {
			CommerceJSONDiscountsAPI._patchCommerceDiscount(
				active = "true",
				discountTitle = "Discount 1",
				maximumDiscountAmount = 1,
				percentageLevel1 = 20,
				target = "products",
				usePercentage = "true");
		}

		task ("And a new default Commerce Product type DPT with 'Price' and 'Option Selector' fragments deployed is created") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Commerce Product",
				displayPageTemplateEntryName = "Test Commerce Product Display Page Template",
				groupName = "Minium");

			DisplayPageTemplate.addFragment(
				collectionName = "Product",
				displayPageName = "Test Commerce Product Display Page Template",
				fragmentName = "Price",
				publish = "false",
				siteURLKey = "minium");

			CommerceDisplayPageTemplates.addFragment(
				collectionName = "Product",
				fragmentName = "Option Selector",
				index = 2,
				targetFragmentName = "Price");

			Button.clickPublish();

			Alert.viewSuccessMessage();

			JSONLayoutpagetemplate.setLayoutPageTemplateEntryAsDefault(
				groupName = "Minium",
				layoutPageTemplateEntryName = "Test Commerce Product Display Page Template",
				type = "Display Page Template");
		}

		task ("When the buyer navigates to the Hoses product details page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "buyer@liferay.com",
				userLoginFullName = "Buyer User");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/hoses");
		}

		task ("Then the price is changed for all the skus") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/hoses");

			for (var rowList : list "6:25:24,24:50:49,48:100:99") {
				var option = StringUtil.extractFirst(${rowList}, ":");

				var rowList = StringUtil.replaceFirst(${rowList}, "${option}:", "");

				var inactivePrice = StringUtil.extractFirst(${rowList}, ":");
				var netPrice = StringUtil.extractLast(${rowList}, ":");

				FrontStore.selectAssociatedFSOptionsValue(
					fsOptionName = "Package Quantity",
					fsOptionValue = ${option});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE_INACTIVE",
					value1 = ${inactivePrice});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_NET_PRICE",
					value1 = ${netPrice});
			}
		}
	}

	@description = "COMMERCE-11137. Verify that the price shown in the Price fragment is affected by the discount target SKUs"
	@priority = 4
	test CanViewPriceFragmentDiscountAppliedToSKUs {
		property portal.acceptance = "false";

		task ("Given Hoses has different prices for all the SKUs") {
			for (var productSKUAndPrice : list "MIN93022A:25,MIN93022B:50,MIN93022C:100") {
				var productSKU = StringUtil.extractFirst(${productSKUAndPrice}, ":");
				var price = StringUtil.extractLast(${productSKUAndPrice}, ":");

				CommerceJSONPriceListsAndPromotionsAPI._addPriceListEntry(
					entryPrice = ${price},
					priceListName = "Minium Base Price List",
					productSKU = ${productSKU});
			}
		}

		task ("And a Discount applies Percentage type to sku MIN93022C is created") {
			CommerceJSONDiscountsAPI._addDiscount(
				active = "true",
				level = "L1",
				percentageLevel1 = 50,
				productSKUs = "MIN93022C",
				target = "skus",
				title = "Discount 1",
				usePercentage = "true");
		}

		task ("And a new default Commerce Product type DPT with 'Price' and 'Option Selector' fragments deployed is created") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Commerce Product",
				displayPageTemplateEntryName = "Test Commerce Product Display Page Template",
				groupName = "Minium");

			DisplayPageTemplate.addFragment(
				collectionName = "Product",
				displayPageName = "Test Commerce Product Display Page Template",
				fragmentName = "Price",
				publish = "false",
				siteURLKey = "minium");

			CommerceDisplayPageTemplates.addFragment(
				collectionName = "Product",
				fragmentName = "Option Selector",
				index = 2,
				targetFragmentName = "Price");

			Button.clickPublish();

			Alert.viewSuccessMessage();

			JSONLayoutpagetemplate.setLayoutPageTemplateEntryAsDefault(
				groupName = "Minium",
				layoutPageTemplateEntryName = "Test Commerce Product Display Page Template",
				type = "Display Page Template");
		}

		task ("When the buyer navigates to the Hoses product details page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "buyer@liferay.com",
				userLoginFullName = "Buyer User");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/hoses");
		}

		task ("Then the price is changed for that particular sku") {
			for (var rowList : list "6:25:,24:50:,48:100:50") {
				var option = StringUtil.extractFirst(${rowList}, ":");

				var rowList = StringUtil.replaceFirst(${rowList}, "${option}:", "");

				var price = StringUtil.extractFirst(${rowList}, ":");
				var netPrice = StringUtil.extractLast(${rowList}, ":");

				FrontStore.selectAssociatedFSOptionsValue(
					fsOptionName = "Package Quantity",
					fsOptionValue = ${option});

				if (${netPrice} != "") {
					AssertTextEquals.assertPartialText(
						locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE_INACTIVE",
						value1 = ${price});

					AssertTextEquals.assertPartialText(
						locator1 = "CommerceAccelerators#PRODUCT_DETAILS_NET_PRICE",
						value1 = ${netPrice});
				}
				else {
					AssertTextEquals.assertPartialText(
						locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE",
						value1 = ${price});
				}
			}
		}

		task ("When the admin updates the discount type to Fixed Amount") {
			CommerceJSONDiscountsAPI._patchCommerceDiscount(
				active = "true",
				discountTitle = "Discount 1",
				percentageLevel1 = 20,
				target = "skus",
				usePercentage = "false");
		}

		task ("Then the price is changed for that particular sku") {
			for (var rowList : list "6:25:,24:50:,48:100:80") {
				var option = StringUtil.extractFirst(${rowList}, ":");

				var rowList = StringUtil.replaceFirst(${rowList}, "${option}:", "");

				var price = StringUtil.extractFirst(${rowList}, ":");
				var netPrice = StringUtil.extractLast(${rowList}, ":");

				FrontStore.selectAssociatedFSOptionsValue(
					fsOptionName = "Package Quantity",
					fsOptionValue = ${option});

				if (${netPrice} != "") {
					AssertTextEquals.assertPartialText(
						locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE_INACTIVE",
						value1 = ${price});

					AssertTextEquals.assertPartialText(
						locator1 = "CommerceAccelerators#PRODUCT_DETAILS_NET_PRICE",
						value1 = ${netPrice});
				}
				else {
					AssertTextEquals.assertPartialText(
						locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE",
						value1 = ${price});
				}
			}
		}
	}

	@description = "COMMERCE-7617. Verify that the price shown in the Price fragment is affected by price lists"
	@priority = 5
	test CanViewPriceFragmentPriceList {
		property osgi.module.configuration.file.names = "com.liferay.commerce.configuration.CommercePriceConfiguration.config";
		property osgi.module.configurations = "displayDiscountLevels=B\"true\"";
		property portal.acceptance = "true";

		task ("Given Hoses has different prices for all the SKUs") {
			for (var productSKUAndPrice : list "MIN93022A:25,MIN93022B:50,MIN93022C:100") {
				var productSKU = StringUtil.extractFirst(${productSKUAndPrice}, ":");
				var price = StringUtil.extractLast(${productSKUAndPrice}, ":");

				CommerceJSONPriceListsAndPromotionsAPI._addPriceListEntry(
					entryPrice = ${price},
					priceListName = "Minium Base Price List",
					productSKU = ${productSKU});
			}
		}

		task ("And a new Price Lists") {
			CommerceJSONPriceListsAndPromotionsAPI._addPriceList(
				catalogName = "Minium",
				currencyCode = "USD",
				priceListName = "Test Price List 1");
		}

		task ("And a Price Modifier is created") {
			CommerceJSONPriceListsAndPromotionsAPI._addPriceListEntry(
				entryPrice = 100,
				priceListName = "Test Price List 1",
				productSKU = "MIN93022C");

			CommercePriceLists.openPriceListsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test Price List 1");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceNavigator.gotoEntry(entryName = "MIN93022C");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommercePriceLists.setOverrideDiscount(overrideDiscounts = "L1-90");

			CommerceJSONPriceListsAndPromotionsAPI._addPriceModifier(
				modifierAmount = "-50",
				modifierType = "percentage",
				priceListName = "Test Price List 1",
				priceModifierTitle = "Price Modifier",
				target = "products");

			CommerceJSONPriceListsAndPromotionsAPI._addPriceModifierProduct(
				priceListName = "Test Price List 1",
				priceModifierTitle = "Price Modifier",
				productName = "Hoses");
		}

		task ("And a new default Commerce Product type DPT with 'Price' and 'Option Selector' fragments deployed is created") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Commerce Product",
				displayPageTemplateEntryName = "Test Commerce Product Display Page Template",
				groupName = "Minium");

			DisplayPageTemplate.addFragment(
				collectionName = "Product",
				displayPageName = "Test Commerce Product Display Page Template",
				fragmentName = "Price",
				publish = "false",
				siteURLKey = "minium");

			CommerceDisplayPageTemplates.addFragment(
				collectionName = "Product",
				fragmentName = "Option Selector",
				index = 2,
				targetFragmentName = "Price");

			Button.clickPublish();

			Alert.viewSuccessMessage();

			JSONLayoutpagetemplate.setLayoutPageTemplateEntryAsDefault(
				groupName = "Minium",
				layoutPageTemplateEntryName = "Test Commerce Product Display Page Template",
				type = "Display Page Template");
		}

		task ("When the buyer navigates to the Hoses product details page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "buyer@liferay.com",
				userLoginFullName = "Buyer User");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/hoses");
		}

		task ("Then the price is changed for all the products skus") {
			var index = 1;

			for (var rowList : list "6:12.50:,24:25:,48:100:10") {
				var option = StringUtil.extractFirst(${rowList}, ":");

				var rowList = StringUtil.replaceFirst(${rowList}, "${option}:", "");

				var price = StringUtil.extractFirst(${rowList}, ":");
				var netPrice = StringUtil.extractLast(${rowList}, ":");

				FrontStore.selectAssociatedFSOptionsValue(
					fsOptionName = "Package Quantity",
					fsOptionValue = ${option});

				if (${netPrice} != "") {
					for (var discountLevel : list "90,0,0,0") {
						AssertTextEquals.assertPartialText(
							key_index = ${index},
							locator1 = "CommerceAccelerators#MINI_CART_DISCOUNT_LEVELS",
							value1 = ${discountLevel});

						var index = ${index} + 1;
					}

					AssertTextEquals.assertPartialText(
						locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE_INACTIVE",
						value1 = ${price});

					AssertTextEquals.assertPartialText(
						locator1 = "CommerceAccelerators#PRODUCT_DETAILS_NET_PRICE",
						value1 = ${netPrice});
				}
				else {
					AssertTextEquals.assertPartialText(
						locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE",
						value1 = ${price});
				}
			}
		}
	}

	@description = "COMMERCE-11141. Verify that the price shown in the Price fragment is affected by the discount level to a sku in the price list"
	@priority = 4
	test CanViewPriceFragmentPriceListAppliedDiscountLevelsToASKU {
		property osgi.module.configuration.file.names = "com.liferay.commerce.configuration.CommercePriceConfiguration.config";
		property osgi.module.configurations = "displayDiscountLevels=B\"true\"";
		property portal.acceptance = "false";

		task ("Given Hoses has different prices for all the SKUs") {
			for (var productSKUAndPrice : list "MIN93022A:25,MIN93022B:50,MIN93022C:100") {
				var productSKU = StringUtil.extractFirst(${productSKUAndPrice}, ":");
				var price = StringUtil.extractLast(${productSKUAndPrice}, ":");

				CommerceJSONPriceListsAndPromotionsAPI._addPriceListEntry(
					entryPrice = ${price},
					priceListName = "Minium Base Price List",
					productSKU = ${productSKU});
			}
		}

		task ("And a new Price List applies the Discount levels to sku MIN93022C is created") {
			CommerceJSONPriceListsAndPromotionsAPI._addPriceList(
				catalogName = "Minium",
				currencyCode = "USD",
				priceListName = "Test Price List 1");

			CommerceJSONPriceListsAndPromotionsAPI._addPriceListEntry(
				entryPrice = 100,
				priceListName = "Test Price List 1",
				productSKU = "MIN93022C");

			CommercePriceLists.openPriceListsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test Price List 1");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceNavigator.gotoEntry(entryName = "MIN93022C");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommercePriceLists.setOverrideDiscount(overrideDiscounts = "L1-10,L2-20,L3-30,L4-40");
		}

		task ("And a new default Commerce Product type DPT with 'Price' and 'Option Selector' fragments deployed is created") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Commerce Product",
				displayPageTemplateEntryName = "Test Commerce Product Display Page Template",
				groupName = "Minium");

			DisplayPageTemplate.addFragment(
				collectionName = "Product",
				displayPageName = "Test Commerce Product Display Page Template",
				fragmentName = "Price",
				publish = "false",
				siteURLKey = "minium");

			CommerceDisplayPageTemplates.addFragment(
				collectionName = "Product",
				fragmentName = "Option Selector",
				index = 2,
				targetFragmentName = "Price");

			Button.clickPublish();

			Alert.viewSuccessMessage();

			JSONLayoutpagetemplate.setLayoutPageTemplateEntryAsDefault(
				groupName = "Minium",
				layoutPageTemplateEntryName = "Test Commerce Product Display Page Template",
				type = "Display Page Template");
		}

		task ("When the buyer navigates to the Hoses product details page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/hoses");
		}

		task ("Then the price is changed for that particular sku and the discount levels are shown") {
			var index = 1;

			for (var rowList : list "6:25:,24:50:,48:100:30.24") {
				var option = StringUtil.extractFirst(${rowList}, ":");

				var rowList = StringUtil.replaceFirst(${rowList}, "${option}:", "");

				var price = StringUtil.extractFirst(${rowList}, ":");
				var netPrice = StringUtil.extractLast(${rowList}, ":");

				FrontStore.selectAssociatedFSOptionsValue(
					fsOptionName = "Package Quantity",
					fsOptionValue = ${option});

				if (${netPrice} != "") {
					for (var discountLevel : list "10,20,30,40") {
						AssertTextEquals.assertPartialText(
							key_index = ${index},
							locator1 = "CommerceAccelerators#MINI_CART_DISCOUNT_LEVELS",
							value1 = ${discountLevel});

						var index = ${index} + 1;
					}

					AssertTextEquals.assertPartialText(
						locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE_INACTIVE",
						value1 = ${price});

					AssertTextEquals.assertPartialText(
						locator1 = "CommerceAccelerators#PRODUCT_DETAILS_NET_PRICE",
						value1 = ${netPrice});
				}
				else {
					AssertTextEquals.assertPartialText(
						locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE",
						value1 = ${price});
				}
			}
		}
	}

	@description = "COMMERCE-11141. Verify that the price shown in the Price fragment is affected by the price modifier with Catalog target in the price list"
	@priority = 4
	test CanViewPriceFragmentPriceListAppliedToPriceModifierWithCatalogTarget {
		property portal.acceptance = "false";

		task ("Given Hoses has different prices for all the SKUs") {
			for (var productSKUAndPrice : list "MIN93022A:25,MIN93022B:50,MIN93022C:100") {
				var productSKU = StringUtil.extractFirst(${productSKUAndPrice}, ":");
				var price = StringUtil.extractLast(${productSKUAndPrice}, ":");

				CommerceJSONPriceListsAndPromotionsAPI._addPriceListEntry(
					entryPrice = ${price},
					priceListName = "Minium Base Price List",
					productSKU = ${productSKU});
			}
		}

		task ("And a new Price List applies to the Catalog target, Percentage price modifier type is created") {
			CommerceJSONPriceListsAndPromotionsAPI._addPriceList(
				catalogName = "Minium",
				currencyCode = "USD",
				priceListName = "Test Price List 1");

			CommerceJSONPriceListsAndPromotionsAPI._addPriceModifier(
				modifierAmount = 50,
				modifierType = "percentage",
				priceListName = "Test Price List 1",
				priceModifierTitle = "Price Modifier",
				target = "catalog");
		}

		task ("And a new default Commerce Product type DPT with 'Price' and 'Option Selector' fragments deployed is created") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Commerce Product",
				displayPageTemplateEntryName = "Test Commerce Product Display Page Template",
				groupName = "Minium");

			DisplayPageTemplate.addFragment(
				collectionName = "Product",
				displayPageName = "Test Commerce Product Display Page Template",
				fragmentName = "Price",
				publish = "false",
				siteURLKey = "minium");

			CommerceDisplayPageTemplates.addFragment(
				collectionName = "Product",
				fragmentName = "Option Selector",
				index = 2,
				targetFragmentName = "Price");

			Button.clickPublish();

			Alert.viewSuccessMessage();

			JSONLayoutpagetemplate.setLayoutPageTemplateEntryAsDefault(
				groupName = "Minium",
				layoutPageTemplateEntryName = "Test Commerce Product Display Page Template",
				type = "Display Page Template");
		}

		task ("When the buyer navigates to the Hoses product details page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "buyer@liferay.com",
				userLoginFullName = "Buyer User");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/hoses");
		}

		task ("Then the price is changed for all the skus") {
			for (var rowList : list "6:37.5,24:75,48:150") {
				var option = StringUtil.extractFirst(${rowList}, ":");
				var price = StringUtil.extractLast(${rowList}, ":");

				FrontStore.selectAssociatedFSOptionsValue(
					fsOptionName = "Package Quantity",
					fsOptionValue = ${option});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE",
					value1 = ${price});
			}
		}

		task ("When the admin updates the price modifier type to Replace") {
			CommerceJSONPriceListsAndPromotionsAPI._patchPriceModifier(
				active = "true",
				modifierAmount = 50,
				modifierType = "replace",
				priceListName = "Test Price List 1",
				priceModifierTitle = "Price Modifier",
				priority = 1,
				target = "catalog");
		}

		task ("Then the price is changed for all the skus") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/hoses");

			for (var option : list "6,24,48") {
				FrontStore.selectAssociatedFSOptionsValue(
					fsOptionName = "Package Quantity",
					fsOptionValue = ${option});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE",
					value1 = 50);
			}
		}

		task ("When the admin updates the price modifier type to Fixed Amount") {
			CommerceJSONPriceListsAndPromotionsAPI._patchPriceModifier(
				active = "true",
				modifierAmount = 50,
				modifierType = "fixed-amount",
				priceListName = "Test Price List 1",
				priceModifierTitle = "Price Modifier",
				priority = 1,
				target = "catalog");
		}

		task ("Then the price is changed for all the skus") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/hoses");

			for (var rowList : list "6:75,24:100,48:150") {
				var option = StringUtil.extractFirst(${rowList}, ":");
				var price = StringUtil.extractLast(${rowList}, ":");

				FrontStore.selectAssociatedFSOptionsValue(
					fsOptionName = "Package Quantity",
					fsOptionValue = ${option});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE",
					value1 = ${price});
			}
		}
	}

	@description = "COMMERCE-11141. Verify that the price shown in the Price fragment is affected by the price modifier with Categories target in the price list"
	@priority = 4
	test CanViewPriceFragmentPriceListAppliedToPriceModifierWithCategoriesTarget {
		property portal.acceptance = "false";

		task ("Given Hoses has different prices for all the SKUs") {
			for (var productSKUAndPrice : list "MIN93022A:25,MIN93022B:50,MIN93022C:100") {
				var productSKU = StringUtil.extractFirst(${productSKUAndPrice}, ":");
				var price = StringUtil.extractLast(${productSKUAndPrice}, ":");

				CommerceJSONPriceListsAndPromotionsAPI._addPriceListEntry(
					entryPrice = ${price},
					priceListName = "Minium Base Price List",
					productSKU = ${productSKU});
			}
		}

		task ("And a new Price List applies to the Categories target, Percentage price modifier type is created") {
			CommerceJSONPriceListsAndPromotionsAPI._addPriceList(
				catalogName = "Minium",
				currencyCode = "USD",
				priceListName = "Test Price List 1");

			CommerceJSONPriceListsAndPromotionsAPI._addPriceModifier(
				modifierAmount = 50,
				modifierType = "percentage",
				priceListName = "Test Price List 1",
				priceModifierTitle = "Price Modifier",
				target = "categories");

			CommerceJSONPriceListsAndPromotionsAPI._addPriceModifierCategory(
				priceListName = "Test Price List 1",
				priceModifierTitle = "Price Modifier",
				productName = "Hoses");
		}

		task ("And a new default Commerce Product type DPT with 'Price' and 'Option Selector' fragments deployed is created") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Commerce Product",
				displayPageTemplateEntryName = "Test Commerce Product Display Page Template",
				groupName = "Minium");

			DisplayPageTemplate.addFragment(
				collectionName = "Product",
				displayPageName = "Test Commerce Product Display Page Template",
				fragmentName = "Price",
				publish = "false",
				siteURLKey = "minium");

			CommerceDisplayPageTemplates.addFragment(
				collectionName = "Product",
				fragmentName = "Option Selector",
				index = 2,
				targetFragmentName = "Price");

			Button.clickPublish();

			Alert.viewSuccessMessage();

			JSONLayoutpagetemplate.setLayoutPageTemplateEntryAsDefault(
				groupName = "Minium",
				layoutPageTemplateEntryName = "Test Commerce Product Display Page Template",
				type = "Display Page Template");
		}

		task ("When the buyer navigates to the Hoses product details page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "buyer@liferay.com",
				userLoginFullName = "Buyer User");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/hoses");
		}

		task ("Then the price is changed for all the skus") {
			for (var rowList : list "6:37.5,24:75,48:150") {
				var option = StringUtil.extractFirst(${rowList}, ":");
				var price = StringUtil.extractLast(${rowList}, ":");

				FrontStore.selectAssociatedFSOptionsValue(
					fsOptionName = "Package Quantity",
					fsOptionValue = ${option});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE",
					value1 = ${price});
			}
		}

		task ("When the admin updates the price modifier type to Replace") {
			CommerceJSONPriceListsAndPromotionsAPI._patchPriceModifier(
				active = "true",
				modifierAmount = 50,
				modifierType = "replace",
				priceListName = "Test Price List 1",
				priceModifierTitle = "Price Modifier",
				priority = 1,
				target = "categories");
		}

		task ("Then the price is changed for all the skus") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/hoses");

			for (var option : list "6,24,48") {
				FrontStore.selectAssociatedFSOptionsValue(
					fsOptionName = "Package Quantity",
					fsOptionValue = ${option});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE",
					value1 = 50);
			}
		}

		task ("When the admin updates the price modifier type to Fixed Amount") {
			CommerceJSONPriceListsAndPromotionsAPI._patchPriceModifier(
				active = "true",
				modifierAmount = 50,
				modifierType = "fixed-amount",
				priceListName = "Test Price List 1",
				priceModifierTitle = "Price Modifier",
				priority = 1,
				target = "categories");
		}

		task ("Then the price is changed for all the skus") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/hoses");

			for (var rowList : list "6:75,24:100,48:150") {
				var option = StringUtil.extractFirst(${rowList}, ":");
				var price = StringUtil.extractLast(${rowList}, ":");

				FrontStore.selectAssociatedFSOptionsValue(
					fsOptionName = "Package Quantity",
					fsOptionValue = ${option});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE",
					value1 = ${price});
			}
		}
	}

	@description = "COMMERCE-11141. Verify that the price shown in the Price fragment is affected by the price modifier with Product Groups target in the price list"
	@priority = 4
	test CanViewPriceFragmentPriceListAppliedToPriceModifierWithProductGroupsTarget {
		property portal.acceptance = "false";

		task ("Given Hoses has different prices for all the SKUs") {
			for (var productSKUAndPrice : list "MIN93022A:25,MIN93022B:50,MIN93022C:100") {
				var productSKU = StringUtil.extractFirst(${productSKUAndPrice}, ":");
				var price = StringUtil.extractLast(${productSKUAndPrice}, ":");

				CommerceJSONPriceListsAndPromotionsAPI._addPriceListEntry(
					entryPrice = ${price},
					priceListName = "Minium Base Price List",
					productSKU = ${productSKU});
			}
		}

		task ("And Hoses is added in a product group") {
			CommmerceJSONProductGroupsAPI._postProductGroups(
				productGroupName = "PG1",
				productNames = "Hoses");
		}

		task ("And a new Price List applies to the Product Groups target, Percentage price modifier type is created") {
			CommerceJSONPriceListsAndPromotionsAPI._addPriceList(
				catalogName = "Minium",
				currencyCode = "USD",
				priceListName = "Test Price List 1");

			CommerceJSONPriceListsAndPromotionsAPI._addPriceModifier(
				modifierAmount = 50,
				modifierType = "percentage",
				priceListName = "Test Price List 1",
				priceModifierTitle = "Price Modifier",
				target = "product-groups");

			CommerceJSONPriceListsAndPromotionsAPI._addPriceModifierProductGroup(
				priceListName = "Test Price List 1",
				priceModifierTitle = "Price Modifier",
				productGroupNames = "PG1");
		}

		task ("And a new default Commerce Product type DPT with 'Price' and 'Option Selector' fragments deployed is created") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Commerce Product",
				displayPageTemplateEntryName = "Test Commerce Product Display Page Template",
				groupName = "Minium");

			DisplayPageTemplate.addFragment(
				collectionName = "Product",
				displayPageName = "Test Commerce Product Display Page Template",
				fragmentName = "Price",
				publish = "false",
				siteURLKey = "minium");

			CommerceDisplayPageTemplates.addFragment(
				collectionName = "Product",
				fragmentName = "Option Selector",
				index = 2,
				targetFragmentName = "Price");

			Button.clickPublish();

			Alert.viewSuccessMessage();

			JSONLayoutpagetemplate.setLayoutPageTemplateEntryAsDefault(
				groupName = "Minium",
				layoutPageTemplateEntryName = "Test Commerce Product Display Page Template",
				type = "Display Page Template");
		}

		task ("When the buyer navigates to the Hoses product details page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "buyer@liferay.com",
				userLoginFullName = "Buyer User");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/hoses");
		}

		task ("Then the price is changed for all the skus") {
			for (var rowList : list "6:37.5,24:75,48:150") {
				var option = StringUtil.extractFirst(${rowList}, ":");
				var price = StringUtil.extractLast(${rowList}, ":");

				FrontStore.selectAssociatedFSOptionsValue(
					fsOptionName = "Package Quantity",
					fsOptionValue = ${option});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE",
					value1 = ${price});
			}
		}

		task ("When the admin updates the price modifier type to Replace") {
			CommerceJSONPriceListsAndPromotionsAPI._patchPriceModifier(
				active = "true",
				modifierAmount = 50,
				modifierType = "replace",
				priceListName = "Test Price List 1",
				priceModifierTitle = "Price Modifier",
				priority = 1,
				target = "product-groups");
		}

		task ("Then the price is changed for all the skus") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/hoses");

			for (var option : list "6,24,48") {
				FrontStore.selectAssociatedFSOptionsValue(
					fsOptionName = "Package Quantity",
					fsOptionValue = ${option});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE",
					value1 = 50);
			}
		}

		task ("When the admin updates the price modifier type to Fixed Amount") {
			CommerceJSONPriceListsAndPromotionsAPI._patchPriceModifier(
				active = "true",
				modifierAmount = 50,
				modifierType = "fixed-amount",
				priceListName = "Test Price List 1",
				priceModifierTitle = "Price Modifier",
				priority = 1,
				target = "product-groups");
		}

		task ("Then the price is changed for all the skus") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/hoses");

			for (var rowList : list "6:75,24:100,48:150") {
				var option = StringUtil.extractFirst(${rowList}, ":");
				var price = StringUtil.extractLast(${rowList}, ":");

				FrontStore.selectAssociatedFSOptionsValue(
					fsOptionName = "Package Quantity",
					fsOptionValue = ${option});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE",
					value1 = ${price});
			}
		}
	}

	@description = "COMMERCE-11141. Verify that the price shown in the Price fragment is affected by the price modifier with Products target in the price list"
	@priority = 4
	test CanViewPriceFragmentPriceListAppliedToPriceModifierWithProductsTarget {
		property portal.acceptance = "false";

		task ("Given Hoses has different prices for all the SKUs") {
			for (var productSKUAndPrice : list "MIN93022A:25,MIN93022B:50,MIN93022C:100") {
				var productSKU = StringUtil.extractFirst(${productSKUAndPrice}, ":");
				var price = StringUtil.extractLast(${productSKUAndPrice}, ":");

				CommerceJSONPriceListsAndPromotionsAPI._addPriceListEntry(
					entryPrice = ${price},
					priceListName = "Minium Base Price List",
					productSKU = ${productSKU});
			}
		}

		task ("And a new Price List applies to the Products target, Percentage price modifier type is created") {
			CommerceJSONPriceListsAndPromotionsAPI._addPriceList(
				catalogName = "Minium",
				currencyCode = "USD",
				priceListName = "Test Price List 1");

			CommerceJSONPriceListsAndPromotionsAPI._addPriceModifier(
				modifierAmount = 50,
				modifierType = "percentage",
				priceListName = "Test Price List 1",
				priceModifierTitle = "Price Modifier",
				target = "products");

			CommerceJSONPriceListsAndPromotionsAPI._addPriceModifierProduct(
				priceListName = "Test Price List 1",
				priceModifierTitle = "Price Modifier",
				productName = "Hoses");
		}

		task ("And a new default Commerce Product type DPT with 'Price' and 'Option Selector' fragments deployed is created") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Commerce Product",
				displayPageTemplateEntryName = "Test Commerce Product Display Page Template",
				groupName = "Minium");

			DisplayPageTemplate.addFragment(
				collectionName = "Product",
				displayPageName = "Test Commerce Product Display Page Template",
				fragmentName = "Price",
				publish = "false",
				siteURLKey = "minium");

			CommerceDisplayPageTemplates.addFragment(
				collectionName = "Product",
				fragmentName = "Option Selector",
				index = 2,
				targetFragmentName = "Price");

			Button.clickPublish();

			Alert.viewSuccessMessage();

			JSONLayoutpagetemplate.setLayoutPageTemplateEntryAsDefault(
				groupName = "Minium",
				layoutPageTemplateEntryName = "Test Commerce Product Display Page Template",
				type = "Display Page Template");
		}

		task ("When the buyer navigates to the Hoses product details page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "buyer@liferay.com",
				userLoginFullName = "Buyer User");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/hoses");
		}

		task ("Then the price is changed for all the skus") {
			for (var rowList : list "6:37.5,24:75,48:150") {
				var option = StringUtil.extractFirst(${rowList}, ":");
				var price = StringUtil.extractLast(${rowList}, ":");

				FrontStore.selectAssociatedFSOptionsValue(
					fsOptionName = "Package Quantity",
					fsOptionValue = ${option});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE",
					value1 = ${price});
			}
		}

		task ("When the admin updates the price modifier type to Replace") {
			CommerceJSONPriceListsAndPromotionsAPI._patchPriceModifier(
				active = "true",
				modifierAmount = 50,
				modifierType = "replace",
				priceListName = "Test Price List 1",
				priceModifierTitle = "Price Modifier",
				priority = 1,
				target = "products");
		}

		task ("Then the price is changed for all the skus") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/hoses");

			for (var option : list "6,24,48") {
				FrontStore.selectAssociatedFSOptionsValue(
					fsOptionName = "Package Quantity",
					fsOptionValue = ${option});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE",
					value1 = 50);
			}
		}

		task ("When the admin updates the price modifier type to Fixed Amount") {
			CommerceJSONPriceListsAndPromotionsAPI._patchPriceModifier(
				active = "true",
				modifierAmount = 50,
				modifierType = "fixed-amount",
				priceListName = "Test Price List 1",
				priceModifierTitle = "Price Modifier",
				priority = 1,
				target = "products");
		}

		task ("Then the price is changed for all the skus") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/hoses");

			for (var rowList : list "6:75,24:100,48:150") {
				var option = StringUtil.extractFirst(${rowList}, ":");
				var price = StringUtil.extractLast(${rowList}, ":");

				FrontStore.selectAssociatedFSOptionsValue(
					fsOptionName = "Package Quantity",
					fsOptionValue = ${option});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE",
					value1 = ${price});
			}
		}
	}

	@description = "COMMERCE-7617. Verify that the price shown in the Price fragment is affected by promotions"
	@priority = 5
	test CanViewPriceFragmentPromotion {
		property portal.acceptance = "true";

		task ("Given Hoses has different prices for all the SKUs") {
			for (var productSKUAndPrice : list "MIN93022A:25,MIN93022B:50,MIN93022C:100") {
				var productSKU = StringUtil.extractFirst(${productSKUAndPrice}, ":");
				var price = StringUtil.extractLast(${productSKUAndPrice}, ":");

				CommerceJSONPriceListsAndPromotionsAPI._addPriceListEntry(
					entryPrice = ${price},
					priceListName = "Minium Base Price List",
					productSKU = ${productSKU});
			}
		}

		task ("And a new Promotion is created") {
			CommerceJSONPriceListsAndPromotionsAPI._addPromotion(
				catalogName = "Minium",
				currencyCode = "USD",
				promotionName = "Test Promotion 1");
		}

		task ("And a Price Modifier is created") {
			CommercePromotions.openPromotionsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test Promotion 1");

			CommerceEntry.gotoMenuTab(menuTab = "Price Modifiers");

			CommercePriceLists.addNewPriceModifier(
				modifier = "Percentage",
				name = "Price Modifier",
				target = "Products");

			CommercePriceLists.editPriceModifier(
				active = "true",
				amountValue = "-50",
				entryName = "Hoses",
				priceModifierName = "Price Modifier",
				relation = "Add Product",
				target = "Products");
		}

		task ("And a new default Commerce Product type DPT with 'Price' and 'Option Selector' fragments deployed is created") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Commerce Product",
				displayPageTemplateEntryName = "Test Commerce Product Display Page Template",
				groupName = "Minium");

			DisplayPageTemplate.addFragment(
				collectionName = "Product",
				displayPageName = "Test Commerce Product Display Page Template",
				fragmentName = "Price",
				publish = "false",
				siteURLKey = "minium");

			CommerceDisplayPageTemplates.addFragment(
				collectionName = "Product",
				fragmentName = "Option Selector",
				index = 2,
				targetFragmentName = "Price");

			Button.clickPublish();

			Alert.viewSuccessMessage();

			JSONLayoutpagetemplate.setLayoutPageTemplateEntryAsDefault(
				groupName = "Minium",
				layoutPageTemplateEntryName = "Test Commerce Product Display Page Template",
				type = "Display Page Template");
		}

		task ("When the buyer navigates to the Hoses product details page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "buyer@liferay.com",
				userLoginFullName = "Buyer User");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/hoses");
		}

		task ("Then the price is changed for all the products skus") {
			for (var rowList : list "6:25:12.50,24:50:25,48:100:50") {
				var option = StringUtil.extractFirst(${rowList}, ":");

				var rowList = StringUtil.replaceFirst(${rowList}, "${option}:", "");

				var inactivePrice = StringUtil.extractFirst(${rowList}, ":");
				var promoPrice = StringUtil.extractLast(${rowList}, ":");

				FrontStore.selectAssociatedFSOptionsValue(
					fsOptionName = "Package Quantity",
					fsOptionValue = ${option});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE_INACTIVE",
					value1 = ${inactivePrice});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE_PROMO",
					value1 = ${promoPrice});
			}
		}
	}

	@description = "COMMERCE-11142. Verify that the price shown in the Price fragment is affected by the discount level to a sku in the promotion"
	@priority = 4
	test CanViewPriceFragmentPromotionAppliedDiscountLevelsToASKU {
		property osgi.module.configuration.file.names = "com.liferay.commerce.configuration.CommercePriceConfiguration.config";
		property osgi.module.configurations = "displayDiscountLevels=B\"true\"";
		property portal.acceptance = "false";

		task ("Given Hoses has different prices for all the SKUs") {
			for (var productSKUAndPrice : list "MIN93022A:25,MIN93022B:50,MIN93022C:100") {
				var productSKU = StringUtil.extractFirst(${productSKUAndPrice}, ":");
				var price = StringUtil.extractLast(${productSKUAndPrice}, ":");

				CommerceJSONPriceListsAndPromotionsAPI._addPriceListEntry(
					entryPrice = ${price},
					priceListName = "Minium Base Price List",
					productSKU = ${productSKU});
			}
		}

		task ("And a new Promotion applies the Discount levels to sku MIN93022C is created") {
			CommerceJSONPriceListsAndPromotionsAPI._addPromotion(
				catalogName = "Minium",
				currencyCode = "USD",
				promotionName = "Test Promotion 1");

			CommerceJSONPriceListsAndPromotionsAPI._addPromotionEntry(
				entryPrice = 90,
				productSKU = "MIN93022C",
				promotionName = "Test Promotion 1");

			CommercePromotions.openPromotionsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test Promotion 1");

			CommerceEntry.gotoMenuTab(menuTab = "Entries");

			CommerceNavigator.gotoEntry(entryName = "MIN93022C");

			SelectFrame.selectFrameNoLoading(locator1 = "CommerceEntry#IFRAME_SIDE_PANEL");

			CommercePriceLists.setOverrideDiscount(overrideDiscounts = "L1-10,L2-20,L3-30,L4-40");
		}

		task ("And a new default Commerce Product type DPT with 'Price' and 'Option Selector' fragments deployed is created") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Commerce Product",
				displayPageTemplateEntryName = "Test Commerce Product Display Page Template",
				groupName = "Minium");

			DisplayPageTemplate.addFragment(
				collectionName = "Product",
				displayPageName = "Test Commerce Product Display Page Template",
				fragmentName = "Price",
				publish = "false",
				siteURLKey = "minium");

			CommerceDisplayPageTemplates.addFragment(
				collectionName = "Product",
				fragmentName = "Option Selector",
				index = 2,
				targetFragmentName = "Price");

			Button.clickPublish();

			Alert.viewSuccessMessage();

			JSONLayoutpagetemplate.setLayoutPageTemplateEntryAsDefault(
				groupName = "Minium",
				layoutPageTemplateEntryName = "Test Commerce Product Display Page Template",
				type = "Display Page Template");
		}

		task ("When the buyer navigates to the Hoses product details page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/hoses");
		}

		task ("Then the price is changed for that particular sku and the discount levels are shown") {
			var index = 1;

			for (var rowList : list "6:25:,24:50:,48:100:27.22") {
				var option = StringUtil.extractFirst(${rowList}, ":");

				var rowList = StringUtil.replaceFirst(${rowList}, "${option}:", "");

				var price = StringUtil.extractFirst(${rowList}, ":");
				var netPrice = StringUtil.extractLast(${rowList}, ":");

				FrontStore.selectAssociatedFSOptionsValue(
					fsOptionName = "Package Quantity",
					fsOptionValue = ${option});

				if (${netPrice} != "") {
					for (var discountLevel : list "10,20,30,40") {
						AssertTextEquals.assertPartialText(
							key_index = ${index},
							locator1 = "CommerceAccelerators#MINI_CART_DISCOUNT_LEVELS",
							value1 = ${discountLevel});

						var index = ${index} + 1;
					}

					AssertTextEquals.assertPartialText(
						locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE_INACTIVE",
						value1 = ${price});

					AssertTextEquals.assertPartialText(
						locator1 = "CommerceAccelerators#PRODUCT_DETAILS_PROMO_PRICE_INACTIVE",
						value1 = 90);

					AssertTextEquals.assertPartialText(
						locator1 = "CommerceAccelerators#PRODUCT_DETAILS_NET_PRICE",
						value1 = ${netPrice});
				}
				else {
					AssertTextEquals.assertPartialText(
						locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE",
						value1 = ${price});
				}
			}
		}
	}

	@description = "COMMERCE-11142. Verify that the price shown in the Price fragment is affected by the price modifier with Catalog target in the promotion"
	@priority = 4
	test CanViewPriceFragmentPromotionAppliedToPriceModifierWithCatalogTarget {
		property portal.acceptance = "false";

		task ("Given Hoses has different prices for all the SKUs") {
			for (var productSKUAndPrice : list "MIN93022A:25,MIN93022B:50,MIN93022C:100") {
				var productSKU = StringUtil.extractFirst(${productSKUAndPrice}, ":");
				var price = StringUtil.extractLast(${productSKUAndPrice}, ":");

				CommerceJSONPriceListsAndPromotionsAPI._addPriceListEntry(
					entryPrice = ${price},
					priceListName = "Minium Base Price List",
					productSKU = ${productSKU});
			}
		}

		task ("And a new Promotion applies to the Catalog target, Percentage price modifier type is created") {
			CommerceJSONPriceListsAndPromotionsAPI._addPromotion(
				catalogName = "Minium",
				currencyCode = "USD",
				promotionName = "Test Promotion 1");

			CommerceJSONPriceListsAndPromotionsAPI._addPriceModifier(
				modifierAmount = "-50",
				modifierType = "percentage",
				priceListName = "Test Promotion 1",
				priceModifierTitle = "Price Modifier",
				target = "catalog");
		}

		task ("And a new default Commerce Product type DPT with 'Price' and 'Option Selector' fragments deployed is created") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Commerce Product",
				displayPageTemplateEntryName = "Test Commerce Product Display Page Template",
				groupName = "Minium");

			DisplayPageTemplate.addFragment(
				collectionName = "Product",
				displayPageName = "Test Commerce Product Display Page Template",
				fragmentName = "Price",
				publish = "false",
				siteURLKey = "minium");

			CommerceDisplayPageTemplates.addFragment(
				collectionName = "Product",
				fragmentName = "Option Selector",
				index = 2,
				targetFragmentName = "Price");

			Button.clickPublish();

			Alert.viewSuccessMessage();

			JSONLayoutpagetemplate.setLayoutPageTemplateEntryAsDefault(
				groupName = "Minium",
				layoutPageTemplateEntryName = "Test Commerce Product Display Page Template",
				type = "Display Page Template");
		}

		task ("When the buyer navigates to the Hoses product details page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "buyer@liferay.com",
				userLoginFullName = "Buyer User");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/hoses");
		}

		task ("Then the price is changed for all the skus") {
			for (var rowList : list "6:25:12.50,24:50:25,48:100:50") {
				var option = StringUtil.extractFirst(${rowList}, ":");

				var rowList = StringUtil.replaceFirst(${rowList}, "${option}:", "");

				var inactivePrice = StringUtil.extractFirst(${rowList}, ":");
				var promoPrice = StringUtil.extractLast(${rowList}, ":");

				FrontStore.selectAssociatedFSOptionsValue(
					fsOptionName = "Package Quantity",
					fsOptionValue = ${option});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE_INACTIVE",
					value1 = ${inactivePrice});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE_PROMO",
					value1 = ${promoPrice});
			}
		}

		task ("When the admin updates the price modifier type to Replace") {
			CommerceJSONPriceListsAndPromotionsAPI._patchPriceModifier(
				active = "true",
				modifierAmount = 20,
				modifierType = "replace",
				priceListName = "Test Promotion 1",
				priceModifierTitle = "Price Modifier",
				priority = 1,
				target = "catalog");
		}

		task ("Then the price is changed for all the skus") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/hoses");

			for (var rowList : list "6:25:20,24:50:20,48:100:20") {
				var option = StringUtil.extractFirst(${rowList}, ":");

				var rowList = StringUtil.replaceFirst(${rowList}, "${option}:", "");

				var inactivePrice = StringUtil.extractFirst(${rowList}, ":");
				var promoPrice = StringUtil.extractLast(${rowList}, ":");

				FrontStore.selectAssociatedFSOptionsValue(
					fsOptionName = "Package Quantity",
					fsOptionValue = ${option});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE_INACTIVE",
					value1 = ${inactivePrice});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE_PROMO",
					value1 = ${promoPrice});
			}
		}

		task ("When the admin updates the price modifier type to Fixed Amount") {
			CommerceJSONPriceListsAndPromotionsAPI._patchPriceModifier(
				active = "true",
				modifierAmount = "-20",
				modifierType = "fixed-amount",
				priceListName = "Test Promotion 1",
				priceModifierTitle = "Price Modifier",
				priority = 1,
				target = "catalog");
		}

		task ("Then the price is changed for all the skus") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/hoses");

			for (var rowList : list "6:25:5,24:50:30,48:100:80") {
				var option = StringUtil.extractFirst(${rowList}, ":");

				var rowList = StringUtil.replaceFirst(${rowList}, "${option}:", "");

				var inactivePrice = StringUtil.extractFirst(${rowList}, ":");
				var promoPrice = StringUtil.extractLast(${rowList}, ":");

				FrontStore.selectAssociatedFSOptionsValue(
					fsOptionName = "Package Quantity",
					fsOptionValue = ${option});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE_INACTIVE",
					value1 = ${inactivePrice});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE_PROMO",
					value1 = ${promoPrice});
			}
		}
	}

	@description = "COMMERCE-11142. Verify that the price shown in the Price fragment is affected by the price modifier with Categories target in the promotion"
	@priority = 4
	test CanViewPriceFragmentPromotionAppliedToPriceModifierWithCategoriesTarget {
		property portal.acceptance = "false";

		task ("Given Hoses has different prices for all the SKUs") {
			for (var productSKUAndPrice : list "MIN93022A:25,MIN93022B:50,MIN93022C:100") {
				var productSKU = StringUtil.extractFirst(${productSKUAndPrice}, ":");
				var price = StringUtil.extractLast(${productSKUAndPrice}, ":");

				CommerceJSONPriceListsAndPromotionsAPI._addPriceListEntry(
					entryPrice = ${price},
					priceListName = "Minium Base Price List",
					productSKU = ${productSKU});
			}
		}

		task ("And a new Promotion applies to the Categories target, Percentage price modifier type is created") {
			CommerceJSONPriceListsAndPromotionsAPI._addPromotion(
				catalogName = "Minium",
				currencyCode = "USD",
				promotionName = "Test Promotion 1");

			CommerceJSONPriceListsAndPromotionsAPI._addPriceModifier(
				modifierAmount = "-50",
				modifierType = "percentage",
				priceListName = "Test Promotion 1",
				priceModifierTitle = "Price Modifier",
				target = "categories");

			CommerceJSONPriceListsAndPromotionsAPI._addPriceModifierCategory(
				priceListName = "Test Promotion 1",
				priceModifierTitle = "Price Modifier",
				productName = "Hoses");
		}

		task ("And a new default Commerce Product type DPT with 'Price' and 'Option Selector' fragments deployed is created") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Commerce Product",
				displayPageTemplateEntryName = "Test Commerce Product Display Page Template",
				groupName = "Minium");

			DisplayPageTemplate.addFragment(
				collectionName = "Product",
				displayPageName = "Test Commerce Product Display Page Template",
				fragmentName = "Price",
				publish = "false",
				siteURLKey = "minium");

			CommerceDisplayPageTemplates.addFragment(
				collectionName = "Product",
				fragmentName = "Option Selector",
				index = 2,
				targetFragmentName = "Price");

			Button.clickPublish();

			Alert.viewSuccessMessage();

			JSONLayoutpagetemplate.setLayoutPageTemplateEntryAsDefault(
				groupName = "Minium",
				layoutPageTemplateEntryName = "Test Commerce Product Display Page Template",
				type = "Display Page Template");
		}

		task ("When the buyer navigates to the Hoses product details page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "buyer@liferay.com",
				userLoginFullName = "Buyer User");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/hoses");
		}

		task ("Then the price is changed for all the skus") {
			for (var rowList : list "6:25:12.50,24:50:25,48:100:50") {
				var option = StringUtil.extractFirst(${rowList}, ":");

				var rowList = StringUtil.replaceFirst(${rowList}, "${option}:", "");

				var inactivePrice = StringUtil.extractFirst(${rowList}, ":");
				var promoPrice = StringUtil.extractLast(${rowList}, ":");

				FrontStore.selectAssociatedFSOptionsValue(
					fsOptionName = "Package Quantity",
					fsOptionValue = ${option});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE_INACTIVE",
					value1 = ${inactivePrice});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE_PROMO",
					value1 = ${promoPrice});
			}
		}

		task ("When the admin updates the price modifier type to Replace") {
			CommerceJSONPriceListsAndPromotionsAPI._patchPriceModifier(
				active = "true",
				modifierAmount = 20,
				modifierType = "replace",
				priceListName = "Test Promotion 1",
				priceModifierTitle = "Price Modifier",
				priority = 1,
				target = "categories");
		}

		task ("Then the price is changed for all the skus") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/hoses");

			for (var rowList : list "6:25:20,24:50:20,48:100:20") {
				var option = StringUtil.extractFirst(${rowList}, ":");

				var rowList = StringUtil.replaceFirst(${rowList}, "${option}:", "");

				var inactivePrice = StringUtil.extractFirst(${rowList}, ":");
				var promoPrice = StringUtil.extractLast(${rowList}, ":");

				FrontStore.selectAssociatedFSOptionsValue(
					fsOptionName = "Package Quantity",
					fsOptionValue = ${option});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE_INACTIVE",
					value1 = ${inactivePrice});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE_PROMO",
					value1 = ${promoPrice});
			}
		}

		task ("When the admin updates the price modifier type to Fixed Amount") {
			CommerceJSONPriceListsAndPromotionsAPI._patchPriceModifier(
				active = "true",
				modifierAmount = "-20",
				modifierType = "fixed-amount",
				priceListName = "Test Promotion 1",
				priceModifierTitle = "Price Modifier",
				priority = 1,
				target = "categories");
		}

		task ("Then the price is changed for all the skus") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/hoses");

			for (var rowList : list "6:25:5,24:50:30,48:100:80") {
				var option = StringUtil.extractFirst(${rowList}, ":");

				var rowList = StringUtil.replaceFirst(${rowList}, "${option}:", "");

				var inactivePrice = StringUtil.extractFirst(${rowList}, ":");
				var promoPrice = StringUtil.extractLast(${rowList}, ":");

				FrontStore.selectAssociatedFSOptionsValue(
					fsOptionName = "Package Quantity",
					fsOptionValue = ${option});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE_INACTIVE",
					value1 = ${inactivePrice});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE_PROMO",
					value1 = ${promoPrice});
			}
		}
	}

	@description = "COMMERCE-11142. Verify that the price shown in the Price fragment is affected by the price modifier with Product Groups target in the promotion"
	@priority = 4
	test CanViewPriceFragmentPromotionAppliedToPriceModifierWithProductGroupsTarget {
		property portal.acceptance = "false";

		task ("Given Hoses has different prices for all the SKUs") {
			for (var productSKUAndPrice : list "MIN93022A:25,MIN93022B:50,MIN93022C:100") {
				var productSKU = StringUtil.extractFirst(${productSKUAndPrice}, ":");
				var price = StringUtil.extractLast(${productSKUAndPrice}, ":");

				CommerceJSONPriceListsAndPromotionsAPI._addPriceListEntry(
					entryPrice = ${price},
					priceListName = "Minium Base Price List",
					productSKU = ${productSKU});
			}
		}

		task ("And Hoses is added in a product group") {
			CommmerceJSONProductGroupsAPI._postProductGroups(
				productGroupName = "PG1",
				productNames = "Hoses");
		}

		task ("And a new Promotion applies to the Product Groups target, Percentage price modifier type is created") {
			CommerceJSONPriceListsAndPromotionsAPI._addPromotion(
				catalogName = "Minium",
				currencyCode = "USD",
				promotionName = "Test Promotion 1");

			CommerceJSONPriceListsAndPromotionsAPI._addPriceModifier(
				modifierAmount = "-50",
				modifierType = "percentage",
				priceListName = "Test Promotion 1",
				priceModifierTitle = "Price Modifier",
				target = "product-groups");

			CommerceJSONPriceListsAndPromotionsAPI._addPriceModifierProductGroup(
				priceListName = "Test Promotion 1",
				priceModifierTitle = "Price Modifier",
				productGroupNames = "PG1");
		}

		task ("And a new default Commerce Product type DPT with 'Price' and 'Option Selector' fragments deployed is created") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Commerce Product",
				displayPageTemplateEntryName = "Test Commerce Product Display Page Template",
				groupName = "Minium");

			DisplayPageTemplate.addFragment(
				collectionName = "Product",
				displayPageName = "Test Commerce Product Display Page Template",
				fragmentName = "Price",
				publish = "false",
				siteURLKey = "minium");

			CommerceDisplayPageTemplates.addFragment(
				collectionName = "Product",
				fragmentName = "Option Selector",
				index = 2,
				targetFragmentName = "Price");

			Button.clickPublish();

			Alert.viewSuccessMessage();

			JSONLayoutpagetemplate.setLayoutPageTemplateEntryAsDefault(
				groupName = "Minium",
				layoutPageTemplateEntryName = "Test Commerce Product Display Page Template",
				type = "Display Page Template");
		}

		task ("When the buyer navigates to the Hoses product details page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "buyer@liferay.com",
				userLoginFullName = "Buyer User");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/hoses");
		}

		task ("Then the price is changed for all the skus") {
			for (var rowList : list "6:25:12.50,24:50:25,48:100:50") {
				var option = StringUtil.extractFirst(${rowList}, ":");

				var rowList = StringUtil.replaceFirst(${rowList}, "${option}:", "");

				var inactivePrice = StringUtil.extractFirst(${rowList}, ":");
				var promoPrice = StringUtil.extractLast(${rowList}, ":");

				FrontStore.selectAssociatedFSOptionsValue(
					fsOptionName = "Package Quantity",
					fsOptionValue = ${option});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE_INACTIVE",
					value1 = ${inactivePrice});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE_PROMO",
					value1 = ${promoPrice});
			}
		}

		task ("When the admin updates the price modifier type to Replace") {
			CommerceJSONPriceListsAndPromotionsAPI._patchPriceModifier(
				active = "true",
				modifierAmount = 20,
				modifierType = "replace",
				priceListName = "Test Promotion 1",
				priceModifierTitle = "Price Modifier",
				priority = 1,
				target = "product-groups");
		}

		task ("Then the price is changed for all the skus") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/hoses");

			for (var rowList : list "6:25:20,24:50:20,48:100:20") {
				var option = StringUtil.extractFirst(${rowList}, ":");

				var rowList = StringUtil.replaceFirst(${rowList}, "${option}:", "");

				var inactivePrice = StringUtil.extractFirst(${rowList}, ":");
				var promoPrice = StringUtil.extractLast(${rowList}, ":");

				FrontStore.selectAssociatedFSOptionsValue(
					fsOptionName = "Package Quantity",
					fsOptionValue = ${option});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE_INACTIVE",
					value1 = ${inactivePrice});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE_PROMO",
					value1 = ${promoPrice});
			}
		}

		task ("When the admin updates the price modifier type to Fixed Amount") {
			CommerceJSONPriceListsAndPromotionsAPI._patchPriceModifier(
				active = "true",
				modifierAmount = "-20",
				modifierType = "fixed-amount",
				priceListName = "Test Promotion 1",
				priceModifierTitle = "Price Modifier",
				priority = 1,
				target = "product-groups");
		}

		task ("Then the price is changed for all the skus") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/hoses");

			for (var rowList : list "6:25:5,24:50:30,48:100:80") {
				var option = StringUtil.extractFirst(${rowList}, ":");

				var rowList = StringUtil.replaceFirst(${rowList}, "${option}:", "");

				var inactivePrice = StringUtil.extractFirst(${rowList}, ":");
				var promoPrice = StringUtil.extractLast(${rowList}, ":");

				FrontStore.selectAssociatedFSOptionsValue(
					fsOptionName = "Package Quantity",
					fsOptionValue = ${option});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE_INACTIVE",
					value1 = ${inactivePrice});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE_PROMO",
					value1 = ${promoPrice});
			}
		}
	}

	@description = "COMMERCE-11142. Verify that the price shown in the Price fragment is affected by the price modifier with Products target in the promotion"
	@priority = 4
	test CanViewPriceFragmentPromotionAppliedToPriceModifierWithProductsTarget {
		property portal.acceptance = "false";

		task ("Given Hoses has different prices for all the SKUs") {
			for (var productSKUAndPrice : list "MIN93022A:25,MIN93022B:50,MIN93022C:100") {
				var productSKU = StringUtil.extractFirst(${productSKUAndPrice}, ":");
				var price = StringUtil.extractLast(${productSKUAndPrice}, ":");

				CommerceJSONPriceListsAndPromotionsAPI._addPriceListEntry(
					entryPrice = ${price},
					priceListName = "Minium Base Price List",
					productSKU = ${productSKU});
			}
		}

		task ("And a new Promotion applies to the Products target, Percentage price modifier type is created") {
			CommerceJSONPriceListsAndPromotionsAPI._addPromotion(
				catalogName = "Minium",
				currencyCode = "USD",
				promotionName = "Test Promotion 1");

			CommerceJSONPriceListsAndPromotionsAPI._addPriceModifier(
				modifierAmount = "-50",
				modifierType = "percentage",
				priceListName = "Test Promotion 1",
				priceModifierTitle = "Price Modifier",
				target = "products");

			CommerceJSONPriceListsAndPromotionsAPI._addPriceModifierProduct(
				priceListName = "Test Promotion 1",
				priceModifierTitle = "Price Modifier",
				productName = "Hoses");
		}

		task ("And a new default Commerce Product type DPT with 'Price' and 'Option Selector' fragments deployed is created") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Commerce Product",
				displayPageTemplateEntryName = "Test Commerce Product Display Page Template",
				groupName = "Minium");

			DisplayPageTemplate.addFragment(
				collectionName = "Product",
				displayPageName = "Test Commerce Product Display Page Template",
				fragmentName = "Price",
				publish = "false",
				siteURLKey = "minium");

			CommerceDisplayPageTemplates.addFragment(
				collectionName = "Product",
				fragmentName = "Option Selector",
				index = 2,
				targetFragmentName = "Price");

			Button.clickPublish();

			Alert.viewSuccessMessage();

			JSONLayoutpagetemplate.setLayoutPageTemplateEntryAsDefault(
				groupName = "Minium",
				layoutPageTemplateEntryName = "Test Commerce Product Display Page Template",
				type = "Display Page Template");
		}

		task ("When the buyer navigates to the Hoses product details page") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "buyer@liferay.com",
				userLoginFullName = "Buyer User");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/hoses");
		}

		task ("Then the price is changed for all the skus") {
			for (var rowList : list "6:25:12.50,24:50:25,48:100:50") {
				var option = StringUtil.extractFirst(${rowList}, ":");

				var rowList = StringUtil.replaceFirst(${rowList}, "${option}:", "");

				var inactivePrice = StringUtil.extractFirst(${rowList}, ":");
				var promoPrice = StringUtil.extractLast(${rowList}, ":");

				FrontStore.selectAssociatedFSOptionsValue(
					fsOptionName = "Package Quantity",
					fsOptionValue = ${option});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE_INACTIVE",
					value1 = ${inactivePrice});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE_PROMO",
					value1 = ${promoPrice});
			}
		}

		task ("When the admin updates the price modifier type to Replace") {
			CommerceJSONPriceListsAndPromotionsAPI._patchPriceModifier(
				active = "true",
				modifierAmount = 20,
				modifierType = "replace",
				priceListName = "Test Promotion 1",
				priceModifierTitle = "Price Modifier",
				priority = 1,
				target = "products");
		}

		task ("Then the price is changed for all the skus") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/hoses");

			for (var rowList : list "6:25:20,24:50:20,48:100:20") {
				var option = StringUtil.extractFirst(${rowList}, ":");

				var rowList = StringUtil.replaceFirst(${rowList}, "${option}:", "");

				var inactivePrice = StringUtil.extractFirst(${rowList}, ":");
				var promoPrice = StringUtil.extractLast(${rowList}, ":");

				FrontStore.selectAssociatedFSOptionsValue(
					fsOptionName = "Package Quantity",
					fsOptionValue = ${option});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE_INACTIVE",
					value1 = ${inactivePrice});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE_PROMO",
					value1 = ${promoPrice});
			}
		}

		task ("When the admin updates the price modifier type to Fixed Amount") {
			CommerceJSONPriceListsAndPromotionsAPI._patchPriceModifier(
				active = "true",
				modifierAmount = "-20",
				modifierType = "fixed-amount",
				priceListName = "Test Promotion 1",
				priceModifierTitle = "Price Modifier",
				priority = 1,
				target = "products");
		}

		task ("Then the price is changed for all the skus") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/hoses");

			for (var rowList : list "6:25:5,24:50:30,48:100:80") {
				var option = StringUtil.extractFirst(${rowList}, ":");

				var rowList = StringUtil.replaceFirst(${rowList}, "${option}:", "");

				var inactivePrice = StringUtil.extractFirst(${rowList}, ":");
				var promoPrice = StringUtil.extractLast(${rowList}, ":");

				FrontStore.selectAssociatedFSOptionsValue(
					fsOptionName = "Package Quantity",
					fsOptionValue = ${option});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE_INACTIVE",
					value1 = ${inactivePrice});

				AssertTextEquals.assertPartialText(
					locator1 = "CommerceAccelerators#PRODUCT_DETAILS_LIST_PRICE_PROMO",
					value1 = ${promoPrice});
			}
		}
	}

	@description = "COMMERCE-11635. As a buyer user, I can verify that the Price on Application label is visible on the Price Fragment for a product SKU marked as Price on Application."
	@priority = 4
	test CanViewPriceOnApplicationLabelOnPriceFragment {
		property portal.acceptance = "false";

		task ("Given the admin navigates to a product's sku details") {
			CommerceProducts.openProductsAdmin();

			CommerceProducts.searchAndGoToProductEntry(entryProductName = "U-Joint");

			CommerceEntry.gotoMenuTab(menuTab = "SKUs");

			CommerceNavigator.gotoTableListEntry(entryName = "MIN55861");
		}

		task ("And marks the sku as 'Price on Application'") {
			CommerceSKUs.editSkuPricing(priceOnApplication = "true");
		}

		task ("And a new Display Page Template for Commerce Product is created") {
			JSONLayoutpagetemplate.addDisplayPageTemplateEntry(
				contentType = "Commerce Product",
				displayPageTemplateEntryName = "Test Commerce Product Display Page Template",
				groupName = "Minium");
		}

		task ("And the Price Fragment is deployed") {
			DisplayPageTemplatesAdmin.openDisplayPagesAdmin(siteURLKey = "minium");

			DisplayPageTemplatesAdmin.gotoDisplayPage(displayPageName = "Test Commerce Product Display Page Template");

			CommerceDisplayPageTemplates.addFragment(
				collectionName = "Product",
				fragmentName = "Price",
				index = 1);
		}

		task ("And the template is published and Marked as Default") {
			Button.clickPublish();

			Alert.viewSuccessMessage();

			LexiconEntry.gotoEntryMenuItem(
				menuItem = "Mark as Default",
				rowEntry = "Test Commerce Product Display Page Template");

			Alert.viewSuccessMessage();
		}

		task ("When the buyer navigates to the U-Joint's product details page") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/p/u-joint");
		}

		task ("Then 'Price on Application' is shown as the active price on the Price Fragment") {
			AssertElementPresent(locator1 = "CommerceAccelerators#PRODUCT_DETAILS_PRICE_ON_APPLICATION");
		}
	}

}