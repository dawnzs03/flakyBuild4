@component-name = "portal-commerce"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
	property osgi.module.configuration.file.names = "com.liferay.captcha.configuration.CaptchaConfiguration.config";
	property osgi.module.configurations = "createAccountCaptchaEnabled=B\"false\"";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Shopping Experience";

	setUp {
		CommerceConfiguration.commerceSetUp(
			minium = "true",
			moneyOrder = "true");

		CommerceConfiguration.setupB2BGuestCheckout(siteName = "Minium");
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "COMMERCE-11919. As a guest user in a B2B site with Guest Checkout enabled, I want to be able to checkout."
	@priority = 5
	test CanB2BSiteGuestCheckout {
		property portal.acceptance = "true";

		task ("Given Guest Checkout is enabled for a B2B site") {
			CommerceConfiguration.setupB2BGuestCheckout(channelName = "Minium Portal");
		}

		task ("When a guest user navigates to the Minium catalog page") {
			User.logoutPG();

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/catalog");
		}

		task ("Then the quantity selector and the 'add to cart' buttons are enabled") {
			AssertElementPresent(locator1 = "CommerceAccelerators#GENERAL_ADD_TO_CART_BUTTON_ENABLED");

			AssertElementPresent(locator1 = "CommerceAccelerators#GENERAL_QUANTITY_SELECTOR_INPUT_FIELD_ENABLED");
		}

		task ("And can complete checkout successfully") {
			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 1);

			CommerceNavigator.gotoMiniCart();

			FrontStore.viewMiniCart(
				cartItemNames = "U-Joint,",
				cartItemPriceValues = "24,",
				cartItemQuantities = "1,",
				cartItemSkUs = "MIN55861,");

			Button.click(button = "Submit");

			GuestCheckout.assertGuestCheckoutAuthenticationPage();

			Button.click(button = "Continue as a Guest");

			CommerceCheckout.initializersCheckout(
				guestEmail = "guest@liferay.com",
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				paymentMethod = "Money Order",
				productName = "U-Joint",
				productQuantity = 1,
				productUnitPrice = 24,
				shippingMethod = "Standard");

			AssertTextEquals(
				locator1 = "CommerceAccelerators#CHECKOUT_SUCCESS_MESSAGE",
				value1 = "Your order has been processed but not completed yet.");
		}
	}

	@description = "COMMERCE-11921. As a guest user in a B2B site with Guest Checkout enabled, I want to be able to checkout using an existing user email."
	@priority = 4
	test CanB2BSiteGuestCheckoutUsingExistingUserEmail {
		property portal.acceptance = "false";

		task ("Given an account with a user") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And Guest Checkout is enabled for a B2B site") {
			CommerceConfiguration.setupB2BGuestCheckout(channelName = "Minium Portal");
		}

		task ("And a guest user navigates to the Minium catalog page") {
			User.logoutPG();

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/catalog");
		}

		task ("When the guest starts the checkout") {
			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 1);

			CommerceNavigator.gotoMiniCart();

			Button.click(button = "Submit");
		}

		task ("Then can use email of an existing user during checkout") {
			Button.click(button = "Continue as a Guest");

			CommerceCheckout.initializersCheckout(
				guestEmail = "buyer@liferay.com",
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Guest Name",
				newAddressZipCode = "Test Zip Code",
				paymentMethod = "Money Order",
				productName = "U-Joint",
				productQuantity = 1,
				productUnitPrice = 24,
				shippingMethod = "Standard");

			AssertTextEquals(
				locator1 = "CommerceAccelerators#CHECKOUT_SUCCESS_MESSAGE",
				value1 = "Your order has been processed but not completed yet.");
		}

		task ("And the order will belong to this new user that will be created apart") {
			User.loginPG();

			Account.openAccountsAdmin();

			LexiconTable.viewTableEntryInfo(
				index = 5,
				tableEntry = "Guest Name",
				tableEntryInfo = "Guest");

			CommerceOrders.openOrdersAdmin();

			AssertElementPresent(
				accountName = "Guest Name",
				locator1 = "CommerceAccelerators#ACCOUNT_ORDER_NAME");
		}
	}

	@description = "COMMERCE-11920. As a guest user in a B2B site with Guest Checkout enabled, I want to be able to checkout without the authentication page."
	@priority = 4
	test CanB2BSiteGuestCheckoutWithoutAuthenticationPage {
		property portal.acceptance = "false";

		task ("Given Guest Checkout is enabled for a B2B site") {
			CommerceConfiguration.setupB2BGuestCheckoutPages(
				pageNameList = "Catalog,Checkout,Search",
				siteName = "minium");

			CommerceChannels.openChannelsAdmin();

			CommerceNavigator.gotoEntry(entryName = "Minium Portal");

			Check.checkToggleSwitch(
				key_toggleSwitchLabel = "Guest Checkout",
				locator1 = "ToggleSwitch#ANY_TOGGLE_SWITCH");

			Button.clickSave();

			Click(
				key_fixIssueButtonName = "Commerce Cart",
				locator1 = "CommerceEntry#FIX_ISSUE_BUTTON");

			Alert.viewSuccessMessage();
		}

		task ("And a guest user navigates to the Minium catalog page") {
			User.logoutPG();

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/catalog");
		}

		task ("When the guest starts the checkout") {
			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 1);

			CommerceNavigator.gotoMiniCart();

			Button.click(button = "Submit");
		}

		task ("Then can complete it successfully without passing through the authentication page") {
			CommerceCheckout.initializersCheckout(
				guestEmail = "guestuser@liferay.com",
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Guest Name",
				newAddressZipCode = "Test Zip Code",
				paymentMethod = "Money Order",
				productName = "U-Joint",
				productQuantity = 1,
				productUnitPrice = 24,
				shippingMethod = "Standard");

			AssertTextEquals(
				locator1 = "CommerceAccelerators#CHECKOUT_SUCCESS_MESSAGE",
				value1 = "Your order has been processed but not completed yet.");
		}
	}

	@description = "COMMERCE-11925 | As a guest user in a B2B site with Guest Checkout enabled, I want to be able to create a new user for myself"
	@priority = 4
	test CanB2BSiteGuestCreateNewUser {
		property portal.acceptance = "false";

		task ("Given Guest Checkout is enabled for a B2B site") {
			CommerceConfiguration.setupB2BGuestCheckout(channelName = "Minium Portal");
		}

		task ("And a guest user access the site") {
			User.logoutPG();

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/catalog");
		}

		task ("When the guest navigates to the Authentication page") {
			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 1);

			CommerceNavigator.gotoMiniCart();

			Button.click(button = "Submit");
		}

		task ("And clicks on 'Create Account'") {
			AssertClick(
				locator1 = "Link#CREATE_ACCOUNT",
				value1 = "Create Account");
		}

		task ("Then the guest is able to create a new user by itself") {
			CommerceEntry.createAccountFromGuest(
				newPassword = "test",
				newuserEmailAddress = "guest@liferay.com",
				userFirstName = "Guest",
				userLastName = "User",
				userScreenName = "guestuser");
		}

		task ("And can login as the new user") {
			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "guest@liferay.com");
		}

		task ("And cannot add to cart as the user is not part of an account") {
			AssertElementPresent(
				key_entryName = "Select Account & Order",
				locator1 = "ObjectAdmin#VIEW_ENTRY_NAME_ON_PAGE");

			AssertElementNotPresent(locator1 = "CommerceAccelerators#GENERAL_ADD_TO_CART_BUTTON_ENABLED");

			AssertElementNotPresent(locator1 = "CommerceAccelerators#GENERAL_QUANTITY_SELECTOR_INPUT_FIELD_ENABLED");
		}
	}

	@description = "COMMERCE-11924. As a guest user in a B2B site with Guest Checkout enabled, I want to be able to login as an existing user."
	@priority = 4
	test CanB2BSiteGuestLoginAsExistingUser {
		property portal.acceptance = "false";

		task ("Given an account with a user") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}

		task ("And Guest Checkout is enabled for a B2B site") {
			CommerceConfiguration.setupB2BGuestCheckout(channelName = "Minium Portal");
		}

		task ("And a guest user navigates to the Minium catalog page") {
			User.logoutPG();

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/catalog");
		}

		task ("When the guest starts the checkout") {
			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 1);

			CommerceNavigator.gotoMiniCart();

			Button.click(button = "Submit");
		}

		task ("Then can login as the existing user") {
			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");
		}

		task ("And this existing user will not find the order started by the guest") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Pending Orders");

			AssertElementNotPresent(
				key_entryName = "",
				locator1 = "CommerceEntry#TABLE_LIST_TITLE");
		}
	}

}