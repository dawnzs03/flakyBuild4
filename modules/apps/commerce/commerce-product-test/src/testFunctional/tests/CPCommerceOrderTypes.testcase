@component-name = "portal-commerce"
definition {

	property custom.properties = "jsonws.web.service.paths.excludes=${line.separator}company.security.strangers.verify=false";
	property portal.release = "true";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Order Management";

	setUp {
		CommerceConfiguration.commerceSetUp(minium = "true");

		task ("Setup: Create an account with a buyer user") {
			CommerceEntry.addAccountEntryUser(
				accountName = "Commerce Account",
				accountType = "Business",
				agreeToTermsAndAnswerReminderQuery = "true",
				createNewAccount = "true",
				requireReset = "false",
				userEmailAddress = "buyer@liferay.com",
				userFirstName = "Buyer",
				userLastName = "User",
				userRole = "Buyer",
				userScreenName = "buyeruser",
				userSiteMembership = "Minium");
		}
	}

	tearDown {
		CommerceConfiguration.commerceTearDown();
	}

	@description = "Verify active order type is automatically assigned to an order created via the account selector."
	@priority = 5
	test AssertActiveOrderTypeAutomaticallyAssignedToOrderCreatedViaAccountSelector {
		property portal.acceptance = "true";

		task ("Given active and inactive order types") {
			CommerceJSONOrdersAPI._addOrderType(
				active = "true",
				orderTypeDescription = "Test Order Type Description",
				orderTypeName = "Test Order Type");

			CommerceJSONOrdersAPI._addOrderType(
				active = "false",
				orderTypeDescription = "Test Order Type Description 2",
				orderTypeName = "Test Order Type 2");
		}

		task ("When I log in as the buyer user and create a new order in the Minium site via the account selector") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceAcceleratorsInitializer.createNewOrderFromAccountSelectorDropdown();
		}

		task ("Then the active order type should be automatically assigned to the order") {
			AssertElementPresent(
				key_orderType = "Test Order Type",
				locator1 = "CommerceOrders#PENDING_ORDERS_ORDER_TYPE");
		}
	}

	@description = "Verify active order type is automatically assigned to an order created via pending orders."
	@priority = 5
	test AssertActiveOrderTypeAutomaticallyAssignedToOrderCreatedViaPendingOrders {
		property portal.acceptance = "true";

		task ("Given active and inactive order types") {
			CommerceJSONOrdersAPI._addOrderType(
				active = "true",
				orderTypeDescription = "Test Order Type Description",
				orderTypeName = "Test Order Type");

			CommerceJSONOrdersAPI._addOrderType(
				active = "false",
				orderTypeDescription = "Test Order Type Description 2",
				orderTypeName = "Test Order Type 2");
		}

		task ("When I log in as the buyer user and create a new order in the Minium site via pending orders") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceAcceleratorsInitializer.createNewOrderFromPendingOrders();
		}

		task ("Then the active order type should be automatically assigned to the order") {
			AssertElementPresent(
				key_orderType = "Test Order Type",
				locator1 = "CommerceOrders#PENDING_ORDERS_ORDER_TYPE");
		}
	}

	@description = "Verify inactive order type is not assigned to an order created via the account selector."
	@priority = 5
	test AssertInactiveOrderTypeNotAssignedToOrderViaAccountSelector {
		property portal.acceptance = "true";

		task ("Given an inactive order type") {
			CommerceJSONOrdersAPI._addOrderType(
				active = "false",
				orderTypeDescription = "Test Order Type Description",
				orderTypeName = "Test Order Type");
		}

		task ("When I log in as the buyer user and create a new order in the Minium site via the account selector") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceAcceleratorsInitializer.createNewOrderFromAccountSelectorDropdown();
		}

		task ("Then the inactive order type should not be assigned to the order") {
			AssertElementNotPresent(
				key_orderType = "Test Order Type",
				locator1 = "CommerceOrders#PENDING_ORDERS_ORDER_TYPE");
		}
	}

	@description = "Verify inactive order type is not assigned to an order created via pending orders."
	@priority = 3
	test AssertInactiveOrderTypeNotAssignedToOrderViaPendingOrders {
		property portal.acceptance = "false";

		task ("Given an inactive order type") {
			CommerceJSONOrdersAPI._addOrderType(
				active = "false",
				orderTypeDescription = "Test Order Type Description",
				orderTypeName = "Test Order Type");
		}

		task ("When I log in as the buyer user and create a new order in the Minium site via pending orders") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceAcceleratorsInitializer.createNewOrderFromPendingOrders();
		}

		task ("Then the inactive order type should not be assigned to the order") {
			AssertElementNotPresent(
				key_orderType = "Test Order Type",
				locator1 = "CommerceOrders#PENDING_ORDERS_ORDER_TYPE");
		}
	}

	@description = "Verify single active order type is automatically assigned to orders created via the account selector."
	@priority = 5
	test AssertSingleOrderTypeAutomaticallyAssignedToOrderCreatedViaAccountSelector {
		property portal.acceptance = "true";

		task ("Given an active order type") {
			CommerceJSONOrdersAPI._addOrderType(
				active = "true",
				orderTypeDescription = "Test Order Type Description",
				orderTypeName = "Test Order Type");
		}

		task ("When I log in as the buyer user and create a new order in the Minium site via the account selector") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceAcceleratorsInitializer.createNewOrderFromAccountSelectorDropdown();
		}

		task ("Then the active order type should be automatically assigned to the order") {
			AssertElementPresent(
				key_orderType = "Test Order Type",
				locator1 = "CommerceOrders#PENDING_ORDERS_ORDER_TYPE");
		}
	}

	@description = "Verify single active order type is automatically assigned to orders created via pending orders."
	@priority = 3
	test AssertSingleOrderTypeAutomaticallyAssignedToOrderCreatedViaPendingOrders {
		property portal.acceptance = "false";

		task ("Given an active order type") {
			CommerceJSONOrdersAPI._addOrderType(
				active = "true",
				orderTypeDescription = "Test Order Type Description",
				orderTypeName = "Test Order Type");
		}

		task ("When I log in as the buyer user and create a new order in the Minium site via pending orders") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceAcceleratorsInitializer.createNewOrderFromPendingOrders();
		}

		task ("Then the active order type should be automatically assigned to the order") {
			AssertElementPresent(
				key_orderType = "Test Order Type",
				locator1 = "CommerceOrders#PENDING_ORDERS_ORDER_TYPE");
		}
	}

	@description = "This is a test for COMMERCE-11560. Verify when we complete checkout and there is more than 1 active order type for the channel, the order type is the one selected on the Select Order Type popup"
	@priority = 5
	test CanCompleteCheckoutWithSelectedOrderType {
		property portal.acceptance = "true";

		task ("Given two active order types with Display Order = 0 are created") {
			for (var orderTypeNumber : list "1,2") {
				CommerceJSONOrdersAPI._addOrderType(
					active = "true",
					displayOrder = 0,
					orderTypeDescription = "Test Order Type Description ${orderTypeNumber}",
					orderTypeName = "Test Order Type ${orderTypeNumber}");
			}
		}

		task ("When the buyer adds a product to the cart") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			Click(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON");
		}

		task ("And these two order types can be selected on the order type selector, one is selected by default") {
			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_IFRAME");

			var selectOrderType = selenium.getSelectedLabel("Select#TYPE");

			for (var orderTypeNumber : list "1,2") {
				AssertElementPresent(
					key_typeName = "Test Order Type ${orderTypeNumber}",
					locator1 = "Select#TYPE_SELECTED");
			}

			Button.click(button = "Add Order");

			SelectFrame.selectFrameTop();
		}

		task ("When the buyer completes the checkout with the selected Order Type") {
			CommerceCheckout.gotoCheckoutViaMiniCart();

			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = 1,
				productUnitPrice = 24,
				shippingMethod = "Standard");
		}

		task ("Then the selected Order Type is present in the Placed Orders list") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/placed-orders");

			AssertElementPresent(
				key_entry = "Commerce Account",
				key_orderType = ${selectOrderType},
				locator1 = "CommerceOrders#PLACED_ORDERS_LIST_ORDER_TYPE");
		}
	}

	@description = "This is a test for COMMERCE-11591. Verify when we add a product to the cart and there is one active order type eligible for the channel, then the Select Order Type popup is not shown"
	@priority = 5
	test CanCreateOrderAutomaticallyWhenThereIsOnlyOneEligibleOrderType {
		property portal.acceptance = "true";

		task ("Given two active order types are created") {
			for (var orderTypeNumber : list "1,2") {
				CommerceJSONOrdersAPI._addOrderType(
					active = "true",
					orderTypeDescription = "Test Order Type Description ${orderTypeNumber}",
					orderTypeName = "Test Order Type ${orderTypeNumber}");
			}
		}

		task ("And one order type is eligible with Minium Portal channel, the other with non-Minium Portal channel") {
			CommerceOrders.openOrderTypesAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test Order Type 1");

			CommerceEntry.gotoMenuTab(menuTab = "Eligibility");

			CommerceEntry.setEntryEligibility(channelsEligibility = "Minium Portal");

			CommerceJSONChannelsAPI._addChannel(
				channelName = "Test Channel",
				channelType = "site",
				currencyCode = "USD");

			CommerceOrders.openOrderTypesAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test Order Type 2");

			CommerceEntry.gotoMenuTab(menuTab = "Eligibility");

			CommerceEntry.setEntryEligibility(channelsEligibility = "Test Channel");
		}

		task ("When the buyer adds a product to the cart") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			Click(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON");
		}

		task ("Then the Select Order Type popup is not shown with the one order type eligible for Minium Portal channel") {
			AssertElementNotPresent(locator1 = "IFrame#MODAL_IFRAME");

			AssertElementPresent(
				key_itemCount = 1,
				locator1 = "CommerceAccelerators#MINI_CART_BUTTON_DATA_BADGE_COUNT");
		}

		task ("And the Test Order Type 1 eligible for Minium Portal channel is present in the Placed Orders list") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/pending-orders");

			AssertElementPresent(
				key_entry = "Commerce Account",
				key_orderType = "Test Order Type 1",
				locator1 = "CommerceOrders#PENDING_ORDERS_LIST_ORDER_TYPE");
		}
	}

	@description = "This is a test for COMMERCE-11563. Verify when we remove the products from mini-cart and there is more than 1 active order type for the channel, the Select Order Type popup will not show again and can complete checkout with the previously selected order type"
	@priority = 3
	test CannotChangeSelectedOrderTypeInAnOpenOrder {
		property portal.acceptance = "false";

		task ("Given two active order types are created") {
			for (var orderTypeNumber : list "1,2") {
				CommerceJSONOrdersAPI._addOrderType(
					active = "true",
					orderTypeDescription = "Test Order Type Description ${orderTypeNumber}",
					orderTypeName = "Test Order Type ${orderTypeNumber}");
			}
		}

		task ("And the buyer adds a product to the cart with Order Type 1") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			FrontStore.addInitializerProductToCart(
				orderType = "Test Order Type 1",
				productName = "U-Joint",
				productQuantity = 1);
		}

		task ("When the buyer removes all the products from the mini-cart") {
			CommerceNavigator.gotoMiniCart();

			Button.click(button = "Remove All Items");

			Button.click(button = "Yes");

			AssertElementNotPresent(
				key_cartItemSku = "MIN55861",
				locator1 = "CommerceAccelerators#MINI_CART_ITEM_NAME_USING_SKU",
				value1 = "U-Joint");
		}

		task ("And the buyer adds a product to the cart again") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/catalog");

			Click(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON");
		}

		task ("Then the Select Order Type popup is not shown") {
			AssertElementNotPresent(locator1 = "IFrame#MODAL_IFRAME");

			AssertElementPresent(
				key_itemCount = 1,
				locator1 = "CommerceAccelerators#MINI_CART_BUTTON_DATA_BADGE_COUNT");
		}

		task ("And the buyer can complete checkout with the previously selected Test Order Type 1") {
			CommerceCheckout.gotoCheckoutViaMiniCart();

			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = 1,
				productUnitPrice = 24,
				shippingMethod = "Standard");

			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/placed-orders");

			AssertElementPresent(
				key_entry = "Commerce Account",
				key_orderType = "Test Order Type 1",
				locator1 = "CommerceOrders#PLACED_ORDERS_LIST_ORDER_TYPE");
		}
	}

	@description = "This is a test for COMMERCE-10053. An error message shows up when the eligibility element is already linked"
	@priority = 3
	test CannotSelectOrderTypeEligibilitiesTwice {
		property portal.acceptance = "false";

		task ("Given an order type is created") {
			CommerceJSONOrdersAPI._addOrderType(
				active = "true",
				orderTypeName = "Order Type Test");
		}

		task ("When the admin navigates to the order type entry") {
			CommerceOrders.openOrderTypesAdmin();

			CommerceNavigator.gotoEntry(entryName = "Order Type Test");
		}

		task ("And sets the channel eligibility for the order type") {
			CommerceEntry.gotoMenuTab(menuTab = "Eligibility");

			CommerceEntry.setEntryEligibility(channelsEligibility = "Minium Portal");
		}

		task ("And selects again the same channel eligibility") {
			CommerceEntry.setEntryEligibility(
				channelsEligibility = "Minium Portal",
				unpublish = "true");
		}

		task ("Then an error message is shown") {
			Alert.viewErrorMessage(errorMessage = "The order type relation already exists.");
		}
	}

	@description = "This is a test for COMMERCE-11565. Verify when we add a product to the cart and there is more than 1 active order type and 1 inactive order type for the channel, only the active ones are shown on the Select Order Type popup"
	@priority = 3
	test CannotViewAnInactiveOrderType {
		property portal.acceptance = "false";

		task ("Given two active order types and one inactive order type are created") {
			for (var orderTypeNumber : list "1,2") {
				CommerceJSONOrdersAPI._addOrderType(
					active = "true",
					orderTypeDescription = "Test Order Type Description ${orderTypeNumber}",
					orderTypeName = "Test Order Type ${orderTypeNumber}");
			}

			CommerceJSONOrdersAPI._addOrderType(
				active = "false",
				orderTypeDescription = "Test Order Type Description 3",
				orderTypeName = "Test Order Type 3");
		}

		task ("When the buyer adds a product to the cart") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			Click(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON");
		}

		task ("Then two active order types can be selected on the order type selector, Order Type 1 is selected by default") {
			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_IFRAME");

			AssertSelectedLabel(
				locator1 = "Select#TYPE",
				value1 = "Test Order Type 1");

			for (var orderTypeNumber : list "1,2") {
				AssertElementPresent(
					key_typeName = "Test Order Type ${orderTypeNumber}",
					locator1 = "Select#TYPE_SELECTED");
			}
		}

		task ("And the inactive order type is not shown") {
			AssertElementNotPresent(
				key_typeName = "Test Order Type 3",
				locator1 = "Select#TYPE_SELECTED");
		}
	}

	@description = "This is a test for COMMERCE-11564. Verify when we delete the order from Pending Orders page and there is more than 1 active order type for the channel, we can reselect the order type when adding a product to the cart"
	@priority = 3
	test CanReselectOrderTypeAfterDeletingTheOrderFromPendingOrdersPage {
		property portal.acceptance = "false";

		task ("Given two active order types are created") {
			for (var orderTypeNumber : list "1,2") {
				CommerceJSONOrdersAPI._addOrderType(
					active = "true",
					orderTypeDescription = "Test Order Type Description ${orderTypeNumber}",
					orderTypeName = "Test Order Type ${orderTypeNumber}");
			}
		}

		task ("And the buyer adds a product to the cart with Order Type 1") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			FrontStore.addInitializerProductToCart(
				orderType = "Test Order Type 1",
				productName = "U-Joint",
				productQuantity = 1);
		}

		task ("When the buyer deletes the order with Order Type 1 on the Pending Orders page ") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/pending-orders");

			Button.click(button = "View");

			Click(
				key_index = 1,
				key_text = "",
				locator1 = "Icon#VERTICAL_ELLIPSIS_INDEXED");

			MenuItem.clickNoError(menuItem = "Delete");

			AssertConfirm(value1 = "Are you sure you want to delete this? It will be deleted immediately.");

			Alert.viewSuccessMessage();

			AssertElementNotPresent(
				key_itemCount = 1,
				locator1 = "CommerceAccelerators#MINI_CART_BUTTON_DATA_BADGE_COUNT");
		}

		task ("And the buyer adds a product to the cart again") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/catalog");

			Click(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON");
		}

		task ("Then the Select Order Type popup is shown again") {
			AssertElementPresent(locator1 = "IFrame#MODAL_IFRAME");
		}
	}

	@description = "This is a test for COMMERCE-11573. Verify when we add a product to the cart and there are more than 2 active order types and more than 1 order type eligible for Minium Portal channel, then the Select Order Type popup is shown"
	@priority = 3
	test CanSelectOnlyEligibleOrderType {
		property portal.acceptance = "false";

		task ("Given three active order types are created") {
			for (var orderTypeNumber : list "1,2,3") {
				CommerceJSONOrdersAPI._addOrderType(
					active = "true",
					orderTypeDescription = "Test Order Type Description ${orderTypeNumber}",
					orderTypeName = "Test Order Type ${orderTypeNumber}");
			}
		}

		task ("And the channel eligibility for two order types is set to Minium Portal, one is set to non-Minium Portal") {
			for (var orderTypeNumber : list "1,2") {
				CommerceOrders.openOrderTypesAdmin();

				CommerceNavigator.gotoEntry(entryName = "Test Order Type ${orderTypeNumber}");

				CommerceEntry.gotoMenuTab(menuTab = "Eligibility");

				CommerceEntry.setEntryEligibility(channelsEligibility = "Minium Portal");
			}

			CommerceJSONChannelsAPI._addChannel(
				channelName = "Test Channel",
				channelType = "site",
				currencyCode = "USD");

			CommerceOrders.openOrderTypesAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test Order Type 3");

			CommerceEntry.gotoMenuTab(menuTab = "Eligibility");

			CommerceEntry.setEntryEligibility(channelsEligibility = "Test Channel");
		}

		task ("When the buyer adds a product to the cart") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			Click(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON");
		}

		task ("Then the Select Order Type popup is shown with the two order types eligible for Minium Portal channel") {
			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_IFRAME");

			for (var orderTypeNumber : list "1,2") {
				AssertElementPresent(
					key_typeName = "Test Order Type ${orderTypeNumber}",
					locator1 = "Select#TYPE_SELECTED");
			}

			AssertElementNotPresent(
				key_typeName = "Test Order Type 3",
				locator1 = "Select#TYPE_SELECTED");
		}
	}

	@description = "This is a test for COMMERCE-11561. Verify when we add a product to the cart and there is more than 1 active order type for the channel, we need to select the order type on the first attempt, the popup won't show when we add a second product to the cart"
	@priority = 3
	test CanSelectOrderTypeFirstTimeAddingProductToCart {
		property portal.acceptance = "false";

		task ("Given two active order types are created") {
			for (var orderTypeNumber : list "1,2") {
				CommerceJSONOrdersAPI._addOrderType(
					active = "true",
					orderTypeDescription = "Test Order Type Description ${orderTypeNumber}",
					orderTypeName = "Test Order Type ${orderTypeNumber}");
			}
		}

		task ("And the buyer adds a product to the cart with Order Type 1") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			FrontStore.addInitializerProductToCart(
				orderType = "Test Order Type 1",
				productName = "U-Joint",
				productQuantity = 1);
		}

		task ("When the buyer adds other products to the cart") {
			Click(
				key_productName = "Mount",
				locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON");
		}

		task ("Then the Select Order Type popup is not shown") {
			AssertElementNotPresent(locator1 = "IFrame#MODAL_IFRAME");

			AssertElementPresent(
				key_itemCount = 2,
				locator1 = "CommerceAccelerators#MINI_CART_BUTTON_DATA_BADGE_COUNT");
		}
	}

	@description = "This is a test for COMMERCE-11562. Verify when we complete checkout and there is more than 1 active order type for the channel, we can reselect the order type when adding a product to the cart"
	@priority = 3
	test CanSelectOrderTypeForANewOrder {
		property portal.acceptance = "false";

		task ("Given two active order types are created") {
			for (var orderTypeNumber : list "1,2") {
				CommerceJSONOrdersAPI._addOrderType(
					active = "true",
					orderTypeDescription = "Test Order Type Description ${orderTypeNumber}",
					orderTypeName = "Test Order Type ${orderTypeNumber}");
			}
		}

		task ("And the buyer adds a product to the cart with Order Type 1") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			FrontStore.addInitializerProductToCart(
				orderType = "Test Order Type 1",
				productName = "U-Joint",
				productQuantity = 1);
		}

		task ("When the buyer completes the checkout with Order Type 1") {
			CommerceCheckout.gotoCheckoutViaMiniCart();

			CommerceCheckout.initializersCheckout(
				newAddressAddress = "Test Address",
				newAddressCity = "Test City",
				newAddressCountry = "United States",
				newAddressName = "Address Name",
				newAddressZipCode = "Test Zip Code",
				productName = "U-Joint",
				productQuantity = 1,
				productUnitPrice = 24,
				shippingMethod = "Standard");
		}

		task ("And the buyer adds a product to the cart again") {
			Navigator.openWithAppendToBaseURL(urlAppend = "web/minium/catalog");

			Click(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON");
		}

		task ("Then the Select Order Type popup is shown again") {
			AssertElementPresent(locator1 = "IFrame#MODAL_IFRAME");
		}
	}

	@description = "This is a test for COMMERCE-11558. Verify when we add a product to the cart and there is more than 1 active order type for the channel, the order type with the highest priority (lower display order) is selected on the Select Order Type popup"
	@priority = 5
	test CanViewHighestPriorityOrderTypeIsSetByDefault {
		property portal.acceptance = "true";

		task ("Given an active order type with display order 2") {
			CommerceJSONOrdersAPI._addOrderType(
				active = "true",
				displayOrder = 2,
				orderTypeDescription = "Test Order Type 1 Description",
				orderTypeName = "Test Order Type 1");
		}

		task ("And given an active order type with display order 1") {
			CommerceJSONOrdersAPI._addOrderType(
				active = "true",
				displayOrder = 1,
				orderTypeDescription = "Test Order Type 2 Description",
				orderTypeName = "Test Order Type 2");
		}

		task ("When the buyer logs in and adds a product to the cart") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			Click(
				key_productName = "U-Joint",
				locator1 = "CommerceAccelerators#ADD_TO_CART_BUTTON");
		}

		task ("Then on the Select Order Type popup, Test Order Type 2 is selected by default since it has a higher priority") {
			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_IFRAME");

			AssertSelectedLabel(
				locator1 = "Select#TYPE",
				value1 = "Test Order Type 2");

			Button.click(button = "Add Order");

			SelectFrame.selectFrameTop();

			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Pending Orders");

			Button.click(button = "View");

			AssertElementPresent(
				key_orderType = "Test Order Type 2",
				locator1 = "CommerceOrders#PENDING_ORDERS_ORDER_TYPE");
		}
	}

	@description = "Verify users can create a new order type."
	@priority = 3
	test CreateOrderType {
		property portal.acceptance = "false";

		task ("When I create a new order type from the Order Types page") {
			CommerceOrders.openOrderTypesAdmin();

			CommerceOrders.addOrderType(
				orderTypeDescription = "Test Order Type Description",
				orderTypeName = "Test Order Type");
		}

		task ("Then the order type will be added correctly") {
			Navigator.gotoBack();

			CommerceNavigator.gotoEntry(entryName = "Test Order Type");

			CommerceOrders.assertOrderTypesEntry(
				orderTypeDescription = "Test Order Type Description",
				orderTypeName = "Test Order Type");
		}
	}

	@description = "Verify a new order type can be deleted"
	@priority = 5
	test DeleteOrderType {
		property portal.acceptance = "true";

		task ("Given an order type is created through the Order Types Page") {
			CommerceJSONOrdersAPI._addOrderType(
				active = "true",
				orderTypeDescription = "Test Order Type Description",
				orderTypeName = "Test Order Type");

			CommerceOrders.openOrderTypesAdmin();
		}

		task ("When that order type is deleted") {
			CommerceOrders.deleteOrderType(orderTypeName = "Test Order Type");
		}

		task ("Then it should no longer appear in the Order Types Page") {
			AssertElementNotPresent(
				key_entryName = "Test Order Type",
				locator1 = "CommerceNavigation#ENTRY_NAME");
		}
	}

	@description = "Verify users can edit an order type."
	@priority = 5
	test EditOrderType {
		property portal.acceptance = "true";

		task ("Given an order type") {
			CommerceJSONOrdersAPI._addOrderType(
				active = "true",
				orderTypeDescription = "Test Order Type Description",
				orderTypeName = "Test Order Type");
		}

		task ("When I edit the name and description of the order type and publish it") {
			CommerceOrders.openOrderTypesAdmin();

			CommerceNavigator.gotoEntry(entryName = "Test Order Type");

			CommerceOrders.editOrderType(
				orderTypeDescription = "Test Order Type Description Edit",
				orderTypeName = "Test Order Type Edit");
		}

		task ("Then the order type name and description should be updated") {
			Navigator.gotoBack();

			CommerceNavigator.gotoEntry(entryName = "Test Order Type Edit");

			CommerceOrders.assertOrderTypesEntry(
				orderTypeDescription = "Test Order Type Description Edit",
				orderTypeName = "Test Order Type Edit");
		}
	}

	@description = "Verify the order type field is empty when creating a new order with no active order types"
	@priority = 3
	test OrderTypeFieldIsEmptyWhenNoOrderTypesAreActive {
		property portal.acceptance = "false";

		task ("Given there are no active order types") {
			CommerceOrders.openOrderTypesAdmin();

			AssertElementPresent(locator1 = "Message#EMPTY_STATE_INFO");
		}

		task ("When the buyer logs in and adds a product to the cart") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 1);
		}

		task ("Then a new order is automatically created and the order type field is empty") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Pending Orders");

			Button.click(button = "View");

			AssertElementPresent(
				key_orderType = "",
				locator1 = "CommerceOrders#PENDING_ORDERS_ORDER_TYPE");
		}

		task ("When the buyer creates an order from pending orders") {
			CommerceAcceleratorsInitializer.createNewOrderFromPendingOrders();
		}

		task ("Then a new order is created and the order type field is empty") {
			AssertElementPresent(
				key_orderType = "",
				locator1 = "CommerceOrders#PENDING_ORDERS_ORDER_TYPE");
		}

		task ("When the buyer creates an order from the account selector") {
			CommerceAcceleratorsInitializer.createNewOrderFromAccountSelectorDropdown();
		}

		task ("Then a new order is created and the order type field is empty") {
			AssertElementPresent(
				key_orderType = "",
				locator1 = "CommerceOrders#PENDING_ORDERS_ORDER_TYPE");
		}
	}

	@description = "Verify when creating a new order with add to cart and there is only 1 order type active for the channel, that order type is set in the order"
	@priority = 5
	test OrderTypeIsAutomaticallySetForNewOrderWhenTheUserAddsToCart {
		property portal.acceptance = "true";

		task ("Given an active order type") {
			CommerceJSONOrdersAPI._addOrderType(
				active = "true",
				orderTypeDescription = "Test Order Type Description",
				orderTypeName = "Test Order Type");
		}

		task ("When the buyer logs in and adds a product to the cart") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			FrontStore.addInitializerProductToCart(
				productName = "U-Joint",
				productQuantity = 1);
		}

		task ("Then a new order is automatically created and the order type is set as the Order Type for the order") {
			CommerceNavigator.gotoMiniumSidebarItem(menuItem = "Pending Orders");

			Button.click(button = "View");

			AssertElementPresent(
				key_orderType = "Test Order Type",
				locator1 = "CommerceOrders#PENDING_ORDERS_ORDER_TYPE");
		}
	}

	@description = "Verify user can select order type when creating a new order via the account selector."
	@priority = 5
	test SelectOrderTypeWhenCreatingNewOrderViaAccountSelector {
		property portal.acceptance = "true";

		task ("Given two active order types") {
			CommerceJSONOrdersAPI._addOrderType(
				active = "true",
				orderTypeDescription = "Test Order Type Description",
				orderTypeName = "Test Order Type");

			CommerceJSONOrdersAPI._addOrderType(
				active = "true",
				orderTypeDescription = "Test Order Type Description 2",
				orderTypeName = "Test Order Type 2");
		}

		task ("When I log in as the buyer user and go to the Minium site to create a new order from the account selector drop down.") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceAcceleratorsInitializer.createNewOrderFromAccountSelectorDropdown();
		}

		task ("Then I should be able to select the Test Order Type for my new order.") {
			SelectFrame.selectFrameNoLoading(locator1 = "IFrame#MODAL_BODY");

			Select(
				locator1 = "Select#TYPE",
				value1 = "Test Order Type");

			Button.click(button = "Add Order");

			SelectFrameTop();

			AssertElementPresent(
				key_orderType = "Test Order Type",
				locator1 = "CommerceOrders#PENDING_ORDERS_ORDER_TYPE");
		}
	}

	@description = "Verify users can select order type when creating a new order via pending orders if there are multiple order types."
	@priority = 5
	test SelectOrderTypeWhenCreatingNewOrderViaPendingOrders {
		property portal.acceptance = "true";

		task ("Given two new order types") {
			CommerceJSONOrdersAPI._addOrderType(
				active = "true",
				orderTypeDescription = "Test Order Type Description",
				orderTypeName = "Test Order Type");

			CommerceJSONOrdersAPI._addOrderType(
				active = "true",
				orderTypeDescription = "Test Order Type Description 2",
				orderTypeName = "Test Order Type 2");
		}

		task ("When I log in as the buyer user and create a new order in the Minium site via pending orders") {
			User.logoutPG();

			CommerceLogin.miniumLogin(
				password = "test",
				urlAppend = "web/minium",
				userEmailAddress = "buyer@liferay.com");

			CommerceAcceleratorsInitializer.createNewOrderFromPendingOrders();
		}

		task ("Then I should be able to select the order type for my new order") {
			SelectFrame.selectFrameNoLoading(
				key_src = "mode",
				locator1 = "IFrame#IFRAME_SRC");

			Select(
				locator1 = "Select#TYPE",
				value1 = "Test Order Type 2");

			Button.click(button = "Add Order");

			SelectFrameTop();

			AssertElementPresent(
				key_orderType = "Test Order Type 2",
				locator1 = "CommerceOrders#PENDING_ORDERS_ORDER_TYPE");
		}
	}

}