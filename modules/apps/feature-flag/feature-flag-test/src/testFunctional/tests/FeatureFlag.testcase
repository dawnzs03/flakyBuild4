@component-name = "portal-feature-flag"
definition {

	property custom.properties = "feature.flag.LPS-162766=false${line.separator}feature.flag.LPS-162766.type=release${line.separator}feature.flag.LPS-162766.title=Terms and Conditions pages${line.separator}feature.flag.LPS-162766.description=Create your own terms and conditions pages${line.separator}feature.flag.LPS-162766.dependencies=LPS-162765";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Feature Flag";
	property testray.main.component.name = "Feature Flag";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		task ("Given the Feature Flags page") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			PortalSettings.gotoConfiguration(
				configurationCategory = "Feature Flags",
				configurationName = "Release",
				configurationScope = "Virtual Instance Scope");
		}
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "LPS-167698 - This tests asserts that a feature flag can be disabled."
	@priority = 5
	test CanBeDisabled {
		property portal.acceptance = "true";

		task ("And a feature flag is enabled") {
			if (IsElementPresent(locator1 = "FeatureFlag#TOGGLE_ROW", title_row = "Terms and Conditions pages", toggle_state = "Disabled")) {
				Check.checkToggleSwitch(
					locator1 = "FeatureFlag#TOGGLE_ROW",
					title_row = "Terms and Conditions pages",
					toggle_state = "Disabled");
			}
		}

		task ("When the administrator disables a feature flag") {
			Check.checkToggleSwitch(
				locator1 = "FeatureFlag#TOGGLE_ROW",
				title_row = "Terms and Conditions pages",
				toggle_state = "Enabled");
		}

		task ("Then assert the toggle is disabled state") {
			AssertElementPresent(
				locator1 = "FeatureFlag#TOGGLE_ROW",
				title_row = "Terms and Conditions pages",
				toggle_state = "Disabled");
		}
	}

	@description = "LPS-167698 - This tests asserts that a feature flag can be enabled."
	@priority = 5
	test CanBeEnabled {
		property portal.acceptance = "true";

		task ("And a feature flag is disabled") {
			if (IsElementPresent(locator1 = "FeatureFlag#TOGGLE_ROW", title_row = "Terms and Conditions pages", toggle_state = "Enabled")) {
				Check.checkToggleSwitch(
					locator1 = "FeatureFlag#TOGGLE_ROW",
					title_row = "Terms and Conditions pages",
					toggle_state = "Enabled");
			}
		}

		task ("When the administrator enables a feature flag") {
			Check.checkToggleSwitch(
				locator1 = "FeatureFlag#TOGGLE_ROW",
				title_row = "Terms and Conditions pages",
				toggle_state = "Disabled");
		}

		task ("Then assert the toggle is enabled state") {
			AssertElementPresent(
				locator1 = "FeatureFlag#TOGGLE_ROW",
				title_row = "Terms and Conditions pages",
				toggle_state = "Enabled");
		}
	}

	@description = "LPS-167698 - This tests asserts that a feature flag can be searched by title."
	@priority = 4
	test CanBeSearchedByTitle {
		property portal.acceptance = "true";

		task ("When the administrator searches for a feature flag") {
			Search.searchCP(searchTerm = "Terms and Conditions pages");
		}

		task ("Then assert the desired feature flag is displayed") {
			AssertElementPresent(
				locator1 = "FeatureFlag#TOGGLE_ROW",
				title_row = "Terms and Conditions pages",
				toggle_state = "Disabled");
		}
	}

}