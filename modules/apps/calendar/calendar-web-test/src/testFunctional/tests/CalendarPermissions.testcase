@component-name = "portal-calendar"
definition {

	property custom.properties = "default.layout.template.id=1_column${line.separator}company.default.time.zone=America/Los_Angeles";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Calendar";

	var pageName = "Calendar Page";
	var portletName = "Calendar";

	setUp {
		var portalURL = PropsUtil.get("portal.url");

		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		JSONLayout.addPublicLayout(
			groupName = "Guest",
			layoutName = "Calendar Page");

		JSONLayout.updateLayoutTemplateOfPublicLayout(
			groupName = "Guest",
			layoutName = "Calendar Page",
			layoutTemplate = "1 Column");

		JSONLayout.addWidgetToPublicLayout(
			groupName = "Guest",
			layoutName = "Calendar Page",
			widgetName = "Calendar");

		Navigator.openSpecificURL(url = "${portalURL}/web/guest/calendar-page");
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			Navigator.gotoPage(pageName = "Calendar Page");

			JSONCalendar.tearDown();

			CalendarConfiguration.tearDown();

			PagesAdmin.tearDownCP();
		}
	}

	@description = "LRQA-71890 - Verify that the user can change the number of entries on the permission page"
	@priority = 4
	test CanChangeTheNumberOfEntriesDIsplayed {
		CalendarPermissions.gotoPermissions();

		CalendarPermissions.changePaginationPermissions(itemsPerPage = 4);

		CalendarPermissions.viewResultsEntries(results = "Showing 1 to 4 of 9 entries.");

		CalendarPermissions.changePaginationPermissions(itemsPerPage = 8);

		CalendarPermissions.viewResultsEntries(results = "Showing 1 to 8 of 9 entries.");
	}

	@description = "LRQA-71890 - Verify that the user can clear the result bar after a search"
	@priority = 3
	test CanClearTheResultsOfASearch {
		CalendarPermissions.gotoPermissions();

		Search.searchCP(searchTerm = "Guest");

		Click(locator1 = "CalendarPermissions#PERMISSIONS_SEARCH_CLEAR");

		AssertElementNotPresent(locator1 = "CalendarPermissions#PERMISSIONS_RESULTS_BAR");
	}

	@description = "LRQA-71890 - Verify that the user can search for a existent permission"
	@priority = 4
	test CanSearchOnPermissionsPage {
		CalendarPermissions.gotoPermissions();

		Search.searchCP(searchTerm = "Guest");

		AssertTextEquals(
			locator1 = "Search#SEARCH_INFO",
			value1 = "1 Result for \"Guest\"");

		Click(locator1 = "TextInput#SEARCH");

		AssertTextEquals.assertPartialText(
			key_roleTitle = "Guest",
			locator1 = "Permissions#CONTENT_PERMISSIONS_ROLE_NAME",
			value1 = "Guest");

		Search.clearSearchResult();

		Search.searchCP(searchTerm = "DXP Client");

		AssertTextEquals(
			locator1 = "Search#SEARCH_INFO",
			value1 = "0 Results for \"DXP Client\"");

		Click(locator1 = "TextInput#SEARCH");

		AssertTextEquals.assertPartialText(
			locator1 = "Message#EMPTY_INFO",
			value1 = "No roles were found.");
	}

	@description = "LRQA-71890 - Verify that when the user search for a non existent role, the system displays a message"
	@priority = 3
	test SystemDisplaysMessageWhenNoRoleIsFound {
		CalendarPermissions.gotoPermissions();

		Search.searchCP(searchTerm = "DXP Client");

		AssertTextEquals(
			locator1 = "CalendarPermissions#PERMISSIONS_RESULTS_BAR",
			value1 = "0 Results for \"DXP Client\"");

		AssertTextEquals(
			locator1 = "CalendarPermissions#NO_ROLES_WERE_FOUND",
			value1 = "No roles were found.");
	}

}