@component-name = "portal-solutions"
definition {

	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Click to Chat";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();

		task ("Go to Click to chat configuration page") {
			ApplicationsMenu.gotoPortlet(
				category = "Configuration",
				panel = "Control Panel",
				portlet = "Instance Settings");

			SystemSettings.gotoConfiguration(
				configurationCategory = "Click to Chat",
				configurationName = "Click to Chat Configuration",
				configurationScope = "Virtual Instance Scope");

			FormFields.enableCheckbox(fieldName = "enabled");
		}
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
		else {
			User.logoutPG();
		}
	}

	@description = "This is a test for LPS-145280. Verify if the widget's chat is hidden in the control panel if the user enable this option"
	@priority = 4
	test CanHideChatWidgetInControlPanel {
		task ("Given the user set JivoChat configuration") {
			ClickToChatUtils.fillGoalsChat(
				chatProviderId = "JivoChat",
				siteSettingsStrategy = "Always Inherit");

			ClickToChatUtils.getPassword(chatProviderChoosen = "jivochat");
		}

		task ("And can see the JivoChat icon") {
			AssertElementPresent(locator1 = "Providers#CHAT_JIVOCHAT");
		}

		task ("When the user clicks on Hide In Control Panel") {
			FormFields.enableCheckbox(fieldName = "hideInControlPanel");

			SystemSettings.saveConfiguration();
		}

		task ("Then The user can not see the JivoChat icon") {
			AssertElementNotPresent(locator1 = "Providers#CHAT_JIVOCHAT");
		}
	}

	@description = "This is a test for LPS-137169. Verify if Hubspot can access required scopes"
	@priority = 4
	test CanHubspotAccessRequiredScopes {
		Select(
			locator1 = "ClickToChatConfiguration#SITE_SETTINGS_STRATEGY",
			value1 = "Always Inherit");

		Select(
			locator1 = "ClickToChatConfiguration#CHAT_PROVIDER_ID",
			value1 = "Hubspot");

		Type(
			locator1 = "ClickToChatConfiguration#CHAT_PROVIDER_ACCOUNT_ID",
			value1 = "nonexistent/66b6b4b2-d096-45a1-b25d-7dab3f332167");

		SystemSettings.saveConfiguration();

		Alert.viewErrorMessage(errorMessage = "This app hasn't been granted all required scopes to make this call");
	}

	@description = "This is a test for LPS-129042. Verify Chatwoot provider can be enabled and disabled."
	@priority = 5
	test ChatwootCanBeEnabledAndDisabled {
		task ("Given the user set chatwoot configuration") {
			ClickToChatUtils.fillGoalsChat(
				chatProviderId = "Chatwoot",
				siteSettingsStrategy = "Always Inherit");

			ClickToChatUtils.getPassword(chatProviderChoosen = "chatwoot");
		}

		task ("And can see the Chatwoot icon") {
			AssertElementPresent(locator1 = "Providers#CHAT_CHATWOOT");
		}

		task ("When he disable click to chat") {
			FormFields.disableCheckbox(fieldName = "enabled");

			SystemSettings.saveConfiguration();
		}

		task ("Then he can't see the Chatwoot icon on the page") {
			AssertElementNotPresent(locator1 = "Providers#CHAT_CHATWOOT");
		}
	}

	@description = "This is a test for LPS-133453. Verify Chatwoot provider persistence after logout and login"
	@priority = 5
	test ChatwootProviderKeepsEnabledAfterLogoutAndLogin {
		property solutions.acceptance = "true";

		task ("Given the user set chatwoot configuration") {
			ClickToChatUtils.fillGoalsChat(
				chatProviderId = "Chatwoot",
				siteSettingsStrategy = "Always Inherit");

			ClickToChatUtils.getPassword(chatProviderChoosen = "chatwoot");
		}

		task ("And can see the Chatwoot icon") {
			AssertElementPresent(locator1 = "Providers#CHAT_CHATWOOT");
		}

		task ("When the user logout and login") {
			User.logoutPG();

			User.firstLoginUI();
		}

		task ("Then he still can see the Chatwoot icon") {
			AssertElementPresent(locator1 = "Providers#CHAT_CHATWOOT");
		}
	}

	@description = "This is a test for LPS-129042. Verify Crisp provider can be enabled and disabled."
	@priority = 5
	test CrispCanBeEnabledAndDisabled {
		task ("Given the user set Crisp configuration") {
			ClickToChatUtils.fillGoalsChat(
				chatProviderId = "Crisp",
				siteSettingsStrategy = "Always Inherit");

			ClickToChatUtils.getPassword(chatProviderChoosen = "crisp");
		}

		task ("And can see the Crisp icon") {
			AssertElementPresent(locator1 = "Providers#CHAT_CRISP");
		}

		task ("When he disable click to chat") {
			FormFields.disableCheckbox(fieldName = "enabled");

			SystemSettings.saveConfiguration();
		}

		task ("Then he can't see the Crisp icon on the page") {
			AssertElementNotPresent(locator1 = "Providers#CHAT_CRISP");
		}
	}

	@description = "This is a test for LPS-133453. Verify Crisp provider persistence after logout and login"
	@priority = 5
	test CrispProviderKeepsEnabledAfterLogoutAndLogin {
		task ("Given the user set Crisp configuration") {
			ClickToChatUtils.fillGoalsChat(
				chatProviderId = "Crisp",
				siteSettingsStrategy = "Always Inherit");

			ClickToChatUtils.getPassword(chatProviderChoosen = "crisp");
		}

		task ("And can see the Crisp icon") {
			AssertElementPresent(locator1 = "Providers#CHAT_CRISP");
		}

		task ("When the user logout and login") {
			User.logoutPG();

			User.firstLoginUI();
		}

		task ("Then he still can see the Crisp icon") {
			AssertElementPresent(locator1 = "Providers#CHAT_CRISP");
		}
	}

	@description = "This is a test for LPS-129042. Verify if it is possible to hide the chat provider"
	@priority = 4
	test HideChatProvider {
		task ("When the user choose 'Always Override' option") {
			Select(
				locator1 = "ClickToChatConfiguration#SITE_SETTINGS_STRATEGY",
				value1 = "Always Override");
		}

		task ("Then chat provider ID and Account ID is hidden") {
			AssertNotVisible(locator1 = "ClickToChatConfiguration#CHAT_PROVIDER_ID");

			AssertNotVisible(locator1 = "ClickToChatConfiguration#CHAT_PROVIDER_ACCOUNT_ID");
		}
	}

	@description = "This is a test for LPS-129042. Verify Hubspot provider can be enabled and disabled."
	@priority = 5
	test HubspotCanBeEnabledAndDisabled {
		task ("Given the user set Hubspot configuration") {
			ClickToChatUtils.fillGoalsChat(
				chatProviderId = "Hubspot",
				siteSettingsStrategy = "Always Inherit");

			ClickToChatUtils.getPassword(chatProviderChoosen = "hubspot");
		}

		task ("And can see the Hubspot icon") {
			AssertElementPresent(locator1 = "Providers#CHAT_HUBSPOT");
		}

		task ("When he disable click to chat") {
			FormFields.disableCheckbox(fieldName = "enabled");

			SystemSettings.saveConfiguration();
		}

		task ("Then he can't see the Hubspot icon on the page") {
			AssertElementNotPresent(locator1 = "Providers#CHAT_HUBSPOT");
		}
	}

	@description = "This is a test for LPS-133453. Verify Hubspot provider persistence after logout and login"
	@priority = 5
	test HubspotProviderKeepsEnabledAfterLogoutAndLogin {
		task ("Given the user set Hubspot configuration") {
			ClickToChatUtils.fillGoalsChat(
				chatProviderId = "Hubspot",
				siteSettingsStrategy = "Always Inherit");

			ClickToChatUtils.getPassword(chatProviderChoosen = "hubspot");
		}

		task ("And can see the Hubspot icon") {
			AssertElementPresent(locator1 = "Providers#CHAT_HUBSPOT");
		}

		task ("When the user logout and login") {
			User.logoutPG();

			User.firstLoginUI();
		}

		task ("Then he still can see the Hubspot icon") {
			AssertElementPresent(locator1 = "Providers#CHAT_HUBSPOT");
		}
	}

	@description = "This is a test for LPS-137169. Verify if API key is invalid for hubspot"
	@priority = 4
	test IsApiKeyInvalidForHubspot {
		task ("Given the user set Hubspot configuration") {
			ClickToChatUtils.fillGoalsChat(
				chatProviderId = "Hubspot",
				siteSettingsStrategy = "Always Inherit");
		}

		task ("When the user type a invalid API key") {
			ClickToChatUtils.typePassword(key_password = "19907868/1-d096-45a1-b25d-7dab3f332167");
		}

		task ("Then the user can see the error message") {
			Alert.viewErrorMessage(errorMessage = "The API key provided is invalid");
		}
	}

	@description = "This is a test for LPS-129042. Verify JivoChat provider can be enabled and disabled."
	@priority = 5
	test JivoChatCanBeEnabledAndDisabled {
		property portal.acceptance = "true";

		task ("Given the user set JivoChat configuration") {
			ClickToChatUtils.fillGoalsChat(
				chatProviderId = "JivoChat",
				siteSettingsStrategy = "Always Inherit");

			ClickToChatUtils.getPassword(chatProviderChoosen = "jivochat");
		}

		task ("And can see the JivoChat icon") {
			AssertElementPresent(locator1 = "Providers#CHAT_JIVOCHAT");
		}

		task ("When he disable click to chat") {
			FormFields.disableCheckbox(fieldName = "enabled");

			SystemSettings.saveConfiguration();
		}

		task ("Then he can't see the CJivoChat icon on the page") {
			AssertElementNotPresent(locator1 = "Providers#CHAT_JIVOCHAT");
		}
	}

	@description = "This is a test for LPS-133453. Verify JivoChat provider persistence after logout and login"
	@priority = 5
	test JivoChatProviderKeepsEnabledAfterLogoutAndLogin {
		task ("Given the user set JivoChat configuration") {
			ClickToChatUtils.fillGoalsChat(
				chatProviderId = "JivoChat",
				siteSettingsStrategy = "Always Inherit");

			ClickToChatUtils.getPassword(chatProviderChoosen = "jivochat");
		}

		task ("And can see the JivoChat icon") {
			AssertElementPresent(locator1 = "Providers#CHAT_JIVOCHAT");
		}

		task ("When the user logout and login") {
			User.logoutPG();

			User.firstLoginUI();
		}

		task ("Then he still can see the JivoChat icon") {
			AssertElementPresent(locator1 = "Providers#CHAT_JIVOCHAT");
		}
	}

	@description = "This is a test for LPS-129042. Verify LiveChat provider can be enabled and disabled."
	@priority = 5
	test LiveChatCanBeEnabledAndDisabled {
		property solutions.acceptance = "true";

		task ("Given the user set LiveChat configuration") {
			ClickToChatUtils.fillGoalsChat(
				chatProviderId = "LiveChat",
				siteSettingsStrategy = "Always Inherit");

			ClickToChatUtils.getPassword(chatProviderChoosen = "livechat");
		}

		task ("And can see the LiveChat icon") {
			AssertElementPresent(locator1 = "Providers#CHAT_LIVECHAT");
		}

		task ("When he disable LiveChat to chat") {
			FormFields.disableCheckbox(fieldName = "enabled");

			SystemSettings.saveConfiguration();
		}

		task ("Then he can't see the LiveChat icon on the page") {
			AssertElementNotPresent(locator1 = "Providers#CHAT_LIVECHAT");
		}
	}

	@description = "This is a test for LPS-133453. Verify LiveChat provider persistence after logout and login"
	@priority = 5
	test LiveChatProviderKeepsEnabledAfterLogoutAndLogin {
		task ("Given the user set LiveChat configuration") {
			ClickToChatUtils.fillGoalsChat(
				chatProviderId = "LiveChat",
				siteSettingsStrategy = "Always Inherit");

			ClickToChatUtils.getPassword(chatProviderChoosen = "livechat");
		}

		task ("And can see the LiveChat icon") {
			AssertElementPresent(locator1 = "Providers#CHAT_LIVECHAT");
		}

		task ("When the user logout and login") {
			User.logoutPG();

			User.firstLoginUI();
		}

		task ("Then he still can see the LiveChat icon") {
			AssertElementPresent(locator1 = "Providers#CHAT_LIVECHAT");
		}
	}

	@description = "This is a test for LPS-129042. Verify LivePerson provider can be enabled and disabled."
	@priority = 5
	test LivePersonCanBeEnabledAndDisabled {
		property portal.acceptance = "true";

		task ("Given the user set LivePerson configuration") {
			ClickToChatUtils.fillGoalsChat(
				chatProviderId = "LivePerson",
				siteSettingsStrategy = "Always Inherit");

			ClickToChatUtils.getPassword(chatProviderChoosen = "liveperson");
		}

		task ("And can see the LivePerson icon") {
			AssertElementPresent(locator1 = "Providers#CHAT_LIVEPERSON");
		}

		task ("When he disable click to chat") {
			FormFields.disableCheckbox(fieldName = "enabled");

			SystemSettings.saveConfiguration();
		}

		task ("Then he can't see the LivePerson icon on the page") {
			AssertElementNotPresent(locator1 = "Providers#CHAT_LIVEPERSON");
		}
	}

	@description = "This is a test for LPS-133453. Verify LivePerson provider persistence after logout and login"
	@priority = 5
	test LivePersonProviderKeepsEnabledAfterLogoutAndLogin {
		task ("Given the user set LivePerson configuration") {
			ClickToChatUtils.fillGoalsChat(
				chatProviderId = "LivePerson",
				siteSettingsStrategy = "Always Inherit");

			ClickToChatUtils.getPassword(chatProviderChoosen = "liveperson");
		}

		task ("And can see the LivePerson icon") {
			AssertElementPresent(locator1 = "Providers#CHAT_LIVEPERSON");
		}

		task ("When the user logout and login") {
			User.logoutPG();

			User.firstLoginUI();
		}

		task ("Then he still can see the LivePerson icon") {
			AssertElementPresent(locator1 = "Providers#CHAT_LIVEPERSON");
		}
	}

	@description = "This is a test for LPS-129042. Verify Smartsupp provider can be enabled and disabled."
	@priority = 5
	test SmartsuppCanBeEnabledAndDisabled {
		task ("Given the user set Smartsupp configuration") {
			ClickToChatUtils.fillGoalsChat(
				chatProviderId = "Smartsupp",
				siteSettingsStrategy = "Always Inherit");

			ClickToChatUtils.getPassword(chatProviderChoosen = "smartsupp");
		}

		task ("And can see the Smartsupp icon") {
			AssertElementPresent(locator1 = "Providers#CHAT_SMARTSUPP");
		}

		task ("When he disable click to chat") {
			FormFields.disableCheckbox(fieldName = "enabled");

			SystemSettings.saveConfiguration();
		}

		task ("Then he can't see the Smartsupp icon on the page") {
			AssertElementNotPresent(locator1 = "Providers#CHAT_SMARTSUPP");
		}
	}

	@description = "This is a test for LPS-133453. Verify Smartsupp provider persistence after logout and login"
	@priority = 5
	test SmartsuppProviderKeepsEnabledAfterLogoutAndLogin {
		task ("Given the user set Smartsupp configuration") {
			ClickToChatUtils.fillGoalsChat(
				chatProviderId = "Smartsupp",
				siteSettingsStrategy = "Always Inherit");

			ClickToChatUtils.getPassword(chatProviderChoosen = "smartsupp");
		}

		task ("And can see the Smartsupp icon") {
			AssertElementPresent(locator1 = "Providers#CHAT_SMARTSUPP");
		}

		task ("When the user logout and login") {
			User.logoutPG();

			User.firstLoginUI();
		}

		task ("Then he still can see the Smartsupp icon") {
			AssertElementPresent(locator1 = "Providers#CHAT_SMARTSUPP");
		}
	}

	@description = "This is a test for LPS-129042. Verify TawkTo provider can be enabled and disabled."
	@priority = 5
	test TawkToCanBeEnabledAndDisabled {
		task ("Given the user set TawkTo configuration") {
			ClickToChatUtils.fillGoalsChat(
				chatProviderId = "TawkTo",
				siteSettingsStrategy = "Always Inherit");

			ClickToChatUtils.getPassword(chatProviderChoosen = "tawkto");
		}

		task ("And can see the TawkTo icon") {
			AssertElementPresent(locator1 = "Providers#CHAT_TAWKTO");
		}

		task ("When he disable click to chat") {
			FormFields.disableCheckbox(fieldName = "enabled");

			SystemSettings.saveConfiguration();
		}

		task ("Then he can't see the TawkTo icon on the page") {
			AssertElementNotPresent(locator1 = "Providers#CHAT_TAWKTO");
		}
	}

	@description = "This is a test for LPS-133453. Verify TawkTo provider persistence after logout and login"
	@priority = 5
	test TawkToProviderKeepsEnabledAfterLogoutAndLogin {
		task ("Given the user set TawkTo configuration") {
			ClickToChatUtils.fillGoalsChat(
				chatProviderId = "TawkTo",
				siteSettingsStrategy = "Always Inherit");

			ClickToChatUtils.getPassword(chatProviderChoosen = "tawkto");
		}

		task ("And can see the TawkTo icon") {
			AssertElementPresent(locator1 = "Providers#CHAT_TAWKTO");
		}

		task ("When the user logout and login") {
			User.logoutPG();

			User.firstLoginUI();
		}

		task ("Then he still can see the TawkTo icon") {
			AssertElementPresent(locator1 = "Providers#CHAT_TAWKTO");
		}
	}

	@description = "This is a test for LPS-129042. Verify Tidio provider can be enabled and disabled."
	@priority = 5
	test TidioCanBeEnabledAndDisabled {
		task ("Given the user set Tidio configuration") {
			ClickToChatUtils.fillGoalsChat(
				chatProviderId = "Tidio",
				siteSettingsStrategy = "Always Inherit");

			ClickToChatUtils.getPassword(chatProviderChoosen = "tidio");
		}

		task ("And can see the Tidio icon") {
			AssertElementPresent(locator1 = "Providers#CHAT_TIDIO");
		}

		task ("When he disable click to chat") {
			FormFields.disableCheckbox(fieldName = "enabled");

			SystemSettings.saveConfiguration();
		}

		task ("Then he can't see the Tidio icon on the page") {
			AssertElementNotPresent(locator1 = "Providers#CHAT_TIDIO");
		}
	}

	@description = "This is a test for LPS-133453. Verify Tidio provider persistence after logout and login"
	@priority = 5
	test TidioProviderKeepsEnabledAfterLogoutAndLogin {
		task ("Given the user set Tidio configuration") {
			ClickToChatUtils.fillGoalsChat(
				chatProviderId = "Tidio",
				siteSettingsStrategy = "Always Inherit");

			ClickToChatUtils.getPassword(chatProviderChoosen = "tidio");
		}

		task ("And can see the Tidio icon") {
			AssertElementPresent(locator1 = "Providers#CHAT_TIDIO");
		}

		task ("When the user logout and login") {
			User.logoutPG();

			User.firstLoginUI();
		}

		task ("Then he still can see the Tidio icon") {
			AssertElementPresent(locator1 = "Providers#CHAT_TIDIO");
		}
	}

	@description = "This is a test for LPS-129049. Verify Zendesk provider can be enabled and disabled."
	@priority = 5
	test ZendeskCanBeEnabledAndDisabled {
		task ("Given the user set Zendesk configuration") {
			ClickToChatUtils.fillGoalsChat(
				chatProviderId = "Zendesk Web Widget Classic",
				siteSettingsStrategy = "Always Inherit");

			ClickToChatUtils.getPassword(chatProviderChoosen = "zendesk");
		}

		task ("And can see the Crisp iconn") {
			AssertElementPresent(locator1 = "Providers#CHAT_ZENDESK");
		}

		task ("When he disable click to chat") {
			FormFields.disableCheckbox(fieldName = "enabled");

			SystemSettings.saveConfiguration();
		}

		task ("Then he can't see the Zendesk icon on the page") {
			AssertElementNotPresent(locator1 = "Providers#CHAT_ZENDESK");
		}
	}

	@description = "This is a test for LPS-133453. Verify Zendesk provider persistence after logout and login"
	@priority = 5
	test ZendeskProviderKeepsEnabledAfterLogoutAndLogin {
		task ("Given the user set Zendesk configuration") {
			ClickToChatUtils.fillGoalsChat(
				chatProviderId = "Zendesk Web Widget Classic",
				siteSettingsStrategy = "Always Inherit");

			ClickToChatUtils.getPassword(chatProviderChoosen = "zendesk");
		}

		task ("And can see the Zendesk icon") {
			AssertElementPresent(locator1 = "Providers#CHAT_ZENDESK");
		}

		task ("When the user logout and login") {
			User.logoutPG();

			User.firstLoginUI();
		}

		task ("Then he still can see the Zendesk icon") {
			AssertElementPresent(locator1 = "Providers#CHAT_ZENDESK");
		}
	}

}