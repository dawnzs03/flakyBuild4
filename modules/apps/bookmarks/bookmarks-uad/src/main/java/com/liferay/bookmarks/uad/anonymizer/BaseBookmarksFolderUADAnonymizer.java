/**
 * SPDX-FileCopyrightText: (c) 2000 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.liferay.bookmarks.uad.anonymizer;

import com.liferay.asset.kernel.model.AssetEntry;
import com.liferay.asset.kernel.service.AssetEntryLocalService;
import com.liferay.bookmarks.model.BookmarksFolder;
import com.liferay.bookmarks.service.BookmarksFolderLocalService;
import com.liferay.bookmarks.uad.constants.BookmarksUADConstants;
import com.liferay.portal.kernel.dao.orm.ActionableDynamicQuery;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.User;
import com.liferay.user.associated.data.anonymizer.DynamicQueryUADAnonymizer;

import org.osgi.service.component.annotations.Reference;

/**
 * Provides the base implementation for the bookmarks folder UAD anonymizer.
 *
 * <p>
 * This implementation exists only as a container for the default methods
 * generated by ServiceBuilder. All custom service methods should be put in
 * {@link BookmarksFolderUADAnonymizer}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @generated
 */
public abstract class BaseBookmarksFolderUADAnonymizer
	extends DynamicQueryUADAnonymizer<BookmarksFolder> {

	@Override
	public void autoAnonymize(
			BookmarksFolder bookmarksFolder, long userId, User anonymousUser)
		throws PortalException {

		if (bookmarksFolder.getUserId() == userId) {
			bookmarksFolder.setUserId(anonymousUser.getUserId());
			bookmarksFolder.setUserName(anonymousUser.getFullName());

			autoAnonymizeAssetEntry(bookmarksFolder, anonymousUser);
		}

		if (bookmarksFolder.getStatusByUserId() == userId) {
			bookmarksFolder.setStatusByUserId(anonymousUser.getUserId());
			bookmarksFolder.setStatusByUserName(anonymousUser.getFullName());
		}

		bookmarksFolderLocalService.updateBookmarksFolder(bookmarksFolder);
	}

	@Override
	public void delete(BookmarksFolder bookmarksFolder) throws PortalException {
		bookmarksFolderLocalService.deleteFolder(bookmarksFolder);
	}

	@Override
	public Class<BookmarksFolder> getTypeClass() {
		return BookmarksFolder.class;
	}

	protected void autoAnonymizeAssetEntry(
		BookmarksFolder bookmarksFolder, User anonymousUser) {

		AssetEntry assetEntry = fetchAssetEntry(bookmarksFolder);

		if (assetEntry != null) {
			assetEntry.setUserId(anonymousUser.getUserId());
			assetEntry.setUserName(anonymousUser.getFullName());

			assetEntryLocalService.updateAssetEntry(assetEntry);
		}
	}

	@Override
	protected ActionableDynamicQuery doGetActionableDynamicQuery() {
		return bookmarksFolderLocalService.getActionableDynamicQuery();
	}

	@Override
	protected String[] doGetUserIdFieldNames() {
		return BookmarksUADConstants.USER_ID_FIELD_NAMES_BOOKMARKS_FOLDER;
	}

	protected AssetEntry fetchAssetEntry(BookmarksFolder bookmarksFolder) {
		return assetEntryLocalService.fetchEntry(
			BookmarksFolder.class.getName(), bookmarksFolder.getFolderId());
	}

	@Reference
	protected AssetEntryLocalService assetEntryLocalService;

	@Reference
	protected BookmarksFolderLocalService bookmarksFolderLocalService;

}