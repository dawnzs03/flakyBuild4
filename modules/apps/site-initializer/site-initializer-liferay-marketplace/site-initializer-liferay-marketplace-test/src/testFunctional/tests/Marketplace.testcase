@component-name = "portal-liferay-online"
definition {

	property osgi.modules.includes = "site-initializer-liferay-marketplace";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Liferay Marketplace";

	var testSiteName = "Marketplace Site";
	var testSiteURL = "marketplace-site";

	setUp {
		MP2Configuration.marketplaceSetUp();
	}

	tearDown {
		MP2Configuration.marketplaceInitializersTearDown(doLogout = "true");
	}

	@description = "Story ID: LPS-183566 | Test Summary: Verify that when the Marketplace is created, Accounts Users will be created for it as well"
	@priority = 3
	test AccountUsersAreCreatedForMP20 {
		task ("Given that I go to the Account Users page") {
			AccountUsers.openAccountUsersAdmin();
		}

		task ("Then I should be able to assert that Account Users was created") {
			for (var accountName : list "Jane Acme,Dashboard Administrator,Customer Account Buyer,Publisher App Editor,MKT Account Administrator Regular") {
				LexiconEntry.viewEntryName(rowEntry = ${accountName});
			}
		}
	}

	@description = "Story ID: LPS-183566 | Test Summary: Verify if Liferay Marketplace can be created with Site initializer"
	@priority = 5
	test CanMP20BeCreated {
		task ("Given that I go to the Marketplace Site") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});
		}

		task ("Then I should be able to assert that the App Marketplace page is present") {
			AssertElementPresent(
				key_title = "App Marketplace",
				locator1 = "Marketplace#FRAGMENT_HEADING");
		}
	}

	@description = "Story ID: LPS-183566 | Test Summary: Verify that when the Marketplace is created, Catalogs will also be created for it as well"
	@priority = 4
	test CatalogsAreCreatedForMP20 {
		task ("Given that I go to the Catalogs page") {
			CommerceNavigator.gotoPortlet(
				category = "Product Management",
				portlet = "Catalogs");

			// Workaround

			Refresh();

			CommerceNavigator.gotoEntry(entryName = "Acme Development");
		}

		task ("Then I should be able to assert that Catalogs was created for the Marketplace Site") {
			CommerceEntry.viewCatalogsEntry(
				catalogCurrency = "US Dollar",
				catalogLanguage = "English (United States)",
				catalogName = "Acme Development");
		}
	}

	@description = "Story ID: LPS-183566 | Test Summary: Verify that when the Marketplace is created, Channels will also be created for it as well"
	@priority = 4
	test ChannelsAreCreatedForMP20 {
		task ("Given that I go to the Channels page") {
			CommerceNavigator.gotoPortlet(
				category = "Store Management",
				portlet = "Channels");

			// Workaround

			Refresh();

			CommerceNavigator.gotoEntry(entryName = "Marketplace Channel");
		}

		task ("Then I should be able to assert that Channels was created for the Marketplace Site") {
			CommerceEntry.viewChannelsEntry(
				channelCurrency = "US Dollar",
				channelName = "Marketplace Channel",
				channelSiteName = "Marketplace Site",
				channelType = "Site",
				commerceSiteType = "B2X");
		}
	}

	@description = "Story ID: LPS-183566 | Test Summary: Verify that when the Marketplace is created, Products Options will also be created for it as well"
	@ignore = "true"
	@priority = 3
	test ProductsOptionsAreCreatedForMP20 {
		task ("Given that I go to the Product Options page") {
			CommerceNavigator.gotoPortlet(
				category = "Product Management",
				portlet = "Options");
		}

		task ("Then I should be able to assert that all Product Options were created for the Marketplace Site") {
			CommerceNavigator.gotoEntry(entryName = "Trial");

			CommerceEntry.viewOptionsEntry(
				optionDescription = "Specifies if a trial exists for a given app or solution submission.",
				optionName = "Trial");

			Navigator.gotoBack();

			CommerceNavigator.gotoEntry(entryName = "DXP License Usage Type");

			CommerceEntry.viewOptionsEntry(
				optionDescription = "Specifies if a acquision of an app.",
				optionName = "DXP License Usage Type");

			Navigator.gotoBack();

			CommerceNavigator.gotoEntry(entryName = "DXP License Support");

			CommerceEntry.viewOptionsEntry(
				optionDescription = "Adds on support for DXP Licenses.",
				optionName = "DXP License Support");
		}
	}

	@description = "Story ID: LPS-183796 | Test Summary: Verify that when the Marketplace is created, Specification Group is also created"
	@priority = 3
	test SpecificationGroupAreCreatedForMP20 {
		task ("Given that I go to the Specifications page") {
			CommerceNavigator.gotoPortlet(
				category = "Product Management",
				portlet = "Specifications");
		}

		task ("Then I should be able to assert that Specification Groups was created for the Marketplace Site") {
			CommerceNavigator.gotoCommercePortletNavItem(navItem = "Specification Groups");

			CommerceEntry.viewSpecificationGroupsEntries(specificationGroupsEntries = "Pricing and Licensing Terms,App Support and Help,Product Metadata");
		}
	}

	@description = "Story ID: LPS-183796 | Test Summary: Verify that when the Marketplace is created, Specification Label is also created"
	@priority = 3
	test SpecificationLabelAreCreatedForMP20 {
		task ("Given that I go to the Specifications page") {
			CommerceNavigator.gotoPortlet(
				category = "Product Management",
				portlet = "Specifications");

			Pagination.changePagination(itemsPerPage = 40);
		}

		task ("Then I should be able to assert that Specification Labels was created for the Marketplace Site") {
			CommerceEntry.viewSpecificationLabelsEntries(specificationLabelsEntries = "Type,App API Reference URL,Latest Version,Source Code URL,License Term,Developer Name,Trial Length,License Type,App Usage Terms URL,Past Versions Work With,Current Requirements,Product Downloads,Publisher Name,Price Model,Lifetime License,App Installation Guide URL,Publisher Web site URL,App Documentation URL,Support URL,Product Notes");
		}
	}

}