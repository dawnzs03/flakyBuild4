@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-163118=true";
	property osgi.modules.includes = "site-initializer-testray";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Testray";

	var projectName = "Project 1";
	var teamName = "Team 1";
	var testSiteName = "Testray 2";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Testray Site") {
			HeadlessSite.addSite(
				siteName = ${testSiteName},
				templateName = "Testray",
				templateType = "Site Initializer");
		}

		task ("Create project via API") {
			JSONTestray.addProject(
				projectDescription = "Project Description 1",
				projectName = ${projectName});
		}
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		task ("Delete project via API, Testray Site and Client Extensions") {
			JSONTestrayAPI.deleteProject(projectName = ${projectName});

			Testray.testrayApisTearDown();
		}

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Story ID: LPS-159529 | Test Summary: Verify if as an Administrator I am able to add a Team"
	@priority = 5
	test AdminCanAddTeam {
		task ("When I create a team") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(quantity = 150);

			TestrayManage.selectTableRowOption(
				rowOption = "Manage Teams",
				tableEntry = ${projectName});

			TestrayManage.createTeam(teamName = ${teamName});
		}

		task ("Then I should be able to see that the team has been created") {
			Testray.viewTableEntryList(listEntry = ${teamName});
		}
	}

	@description = "Story ID: LPS-159529 | Test Summary: Verify if as an Administrator I am able to delete a Team"
	@priority = 5
	test AdminCanDeleteTeam {
		task ("Given that a team are created via API") {
			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = ${teamName});
		}

		task ("And I go to the manage teams") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(quantity = 150);

			TestrayManage.selectTableRowOption(
				rowOption = "Manage Teams",
				tableEntry = ${projectName});
		}

		task ("When I delete the newly created Team") {
			Testray.deleteItem(itemName = ${teamName});
		}

		task ("Then I should be able to assert that the Team has been deleted") {
			Testray.viewTableEntryListNotPresent(listEntry = ${teamName});
		}
	}

	@description = "Story ID: LPS-159529 | Test Summary: Verify if as an Administrator I am able to edit a Team"
	@priority = 5
	test AdminCanEditTeam {
		task ("Given that a team are created via API") {
			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = ${teamName});
		}

		task ("And I go to the manage teams") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(quantity = 150);

			TestrayManage.selectTableRowOption(
				rowOption = "Manage Teams",
				tableEntry = ${projectName});
		}

		task ("When I edit the Team") {
			TestrayManage.editTeam(
				newName = "Team Edited",
				tableEntry = ${teamName});
		}

		task ("Then I should be able to assert that the Team has been edited") {
			Testray.viewTableEntryList(listEntry = "Team Edited");
		}
	}

	@description = "Story ID: LPS-159529 | Test Summary: Verify if as an Administrator I should not be able to add a duplicate Teams"
	@priority = 3
	test AdminCanNotAddDuplicateTeams {
		task ("Given that a team are created via API") {
			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = ${teamName});
		}

		task ("And I go to the manage teams") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(quantity = 150);

			TestrayManage.selectTableRowOption(
				rowOption = "Manage Teams",
				tableEntry = ${projectName});
		}

		task ("When I try to create an existing Team") {
			TestrayManage.createTeam(teamName = ${teamName});
		}

		task ("Then I should be able to assert that an error message is shown") {
			Alert.viewErrorMessage(errorMessage = "The Team name already exists");
		}
	}

	@description = "Story ID: LPS-177839 | Test Summary: Verify if as an Administrator when I search for a Team that does not exist the system should not return that team"
	@priority = 3
	test AdminCanNotSearchTeamNonExistent {
		task ("Given that two team are created via API") {
			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = ${teamName});
		}

		task ("And go to the manage teams") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(quantity = 150);

			TestrayManage.selectTableRowOption(
				rowOption = "Manage Teams",
				tableEntry = ${projectName});
		}

		task ("When the user search team non existent") {
			TestrayFilter.filterResults(
				fieldType = "input",
				inputFieldLabel = "Team Name",
				inputValue = "Team 3");
		}

		task ("Then not see the team 3 in the table") {
			Testray.viewTableEntryListNotPresent(listEntry = "Team 3");
		}
	}

	@description = "Story ID: LPS-177839 | Test Summary: Verify if as an Administrator when I search for a Team the system should return that team"
	@priority = 4
	test AdminCanSearchTeam {
		task ("Given that two team are created via API") {
			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = "Team 2");
		}

		task ("And go to the manage teams") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(quantity = 150);

			TestrayManage.selectTableRowOption(
				rowOption = "Manage Teams",
				tableEntry = ${projectName});
		}

		task ("And confirm that there are two teams in the table") {
			Testray.viewTableEntryList(listEntry = "${teamName},Team 2");
		}

		task ("When the user filter team 1") {
			TestrayFilter.filterResults(
				fieldType = "input",
				inputFieldLabel = "Team Name",
				inputValue = ${teamName});
		}

		task ("Then the user see only team 1 in the table") {
			Testray.viewTableEntryList(listEntry = ${teamName});
		}

		task ("And do not see the team 2 in the table") {
			Testray.viewTableEntryListNotPresent(listEntry = "Team 2");
		}
	}

	@description = "Story ID: LPS-159529 | Test Summary: Verify if as an Administrator I can see the warning message 'This field is required' when trying to save without a name"
	@priority = 2
	test AssertThatTheFieldIsRequired {
		task ("Given I go to the manage teams") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(quantity = 150);

			TestrayManage.selectTableRowOption(
				rowOption = "Manage Teams",
				tableEntry = ${projectName});
		}

		task ("When I try to create a Team without filling in the name") {
			TestrayManage.createTeam();
		}

		task ("Then I should be able to assert that the field is required") {
			Testray.viewErrorMessage(
				fieldLabel = "Name",
				warningMessage = "name is a required field");
		}
	}

}