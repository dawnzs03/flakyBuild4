@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-163118=true";
	property osgi.modules.includes = "site-initializer-testray";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Testray";

	var testSiteName = "Testray 2";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Testray Site") {
			HeadlessSite.addSite(
				siteName = ${testSiteName},
				templateName = "Testray",
				templateType = "Site Initializer");
		}

		task ("Go to Testray and go to manage users") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			TestrayDropdown.selectOptionSidebar(
				buttonOption = "Manage",
				menuItem = "Manage Users");
		}
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		Testray.testrayApisTearDown();

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Story ID: LPS-156040 | Test Summary: Verify that can log in with the new password after changing it"
	@ignore = "true"
	@priority = 5
	test CanLoginWithChangedPassword {
		task ("Given that I go to the change password page") {
			Testray.clickTableEntry(tableEntry = "user@testray.com");

			Button.click(button = "Change Password");
		}

		task ("And the user changes the password") {
			TestraySignIn.changePassword(
				confirmPassword = "TestTest",
				newPassword = "TestTest");
		}

		task ("And the user logs out and goes to the Testray login page") {
			User.logoutPG();

			Testray.openTestrayViaURL();
		}

		task ("When the user fills in the Testray login page") {
			TestraySignIn.loginUserTestrayPG(
				emailAddress = "user@testray.com",
				password = "TestTest");

			Navigator.openSiteURL(siteName = "Testray 2");
		}

		task ("Then user see the Testray 2 project on the home page") {
			Testray.viewTableEntryList(listEntry = "Application Server");
		}

		task ("Logout And Login with test user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "test test");
		}
	}

	@description = "Story ID: LPS-156040 | Test Summary: Verify that the message 'The current password is incorrect' appears, when enter an incorrect current password"
	@priority = 4
	test CanViewCurrentPasswordIncorrect {
		task ("Given that I go to the change password page") {
			Testray.clickTableEntry(tableEntry = "test@liferay.com");

			Button.click(button = "Change Password");
		}

		task ("When the user tries to save password with current incorrect passwords") {
			TestraySignIn.changePassword(
				confirmPassword = "TestTest",
				currentPassword = "test123",
				newPassword = "TestTest");
		}

		task ("Then an incorrect current password message is displayed") {
			Testray.viewErrorMessage(
				fieldLabel = "Current Password",
				warningMessage = "Current password is incorrect.");
		}
	}

	@description = "Story ID: LPS-156040 | Test Summary: Verify if an alert will appear when user does not fill a mandatory field"
	@priority = 2
	test CanViewFieldRequired {
		task ("Given that I go to the change password page") {
			Testray.clickTableEntry(tableEntry = "test@liferay.com");

			Button.click(button = "Change Password");
		}

		task ("When the user tries to save password without filling in the required fields") {
			TestraySignIn.changePassword();
		}

		task ("Then a field required message is displayed") {
			Testray.viewErrorMessage(
				fieldLabel = "Current Password",
				warningMessage = "This field is required.");

			Testray.viewErrorMessage(
				fieldLabel = "New Password",
				warningMessage = "This field is required.");

			Testray.viewErrorMessage(
				fieldLabel = "Confirm Password",
				warningMessage = "This field is required.");
		}
	}

	@description = "Story ID: LPS-156040 | Test Summary: Verify that the New Password field displays the message 'minimum 8 characters.' if less than 8 characters are entered"
	@priority = 3
	test CanViewMinimumEightCharacters {
		task ("Given that I go to the change password page") {
			Testray.clickTableEntry(tableEntry = "test@liferay.com");

			Button.click(button = "Change Password");
		}

		task ("When the user tries to save password without the Mminimum of eight characters") {
			TestraySignIn.changePassword(newPassword = "Test");
		}

		task ("Then an error message appears requiring a password with a minimum of eight characters") {
			Testray.viewErrorMessage(
				fieldLabel = "New Password",
				warningMessage = "Minimum 8 characters.");
		}
	}

	@description = "Story ID: LPS-156040 | Test Summary: Verify that the message 'Passwords do not match' appears, when the passwords are different"
	@priority = 4
	test CanViewPasswordNotMatch {
		task ("Given that I go to the change password page") {
			Testray.clickTableEntry(tableEntry = "test@liferay.com");

			Button.click(button = "Change Password");
		}

		task ("When the user tries to save password with different passwords") {
			TestraySignIn.changePassword(
				confirmPassword = "Test",
				newPassword = "TestTest");
		}

		task ("Then a different password error message appears") {
			Testray.viewErrorMessage(
				fieldLabel = "Confirm Password",
				warningMessage = "Passwords do not match.");
		}
	}

}