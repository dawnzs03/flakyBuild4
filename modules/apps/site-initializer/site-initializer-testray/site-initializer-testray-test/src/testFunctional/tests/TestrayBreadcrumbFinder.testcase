@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-163118=true";
	property osgi.modules.includes = "site-initializer-testray";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Testray";

	var buildName = "Build 1";
	var caseName = "Case 1";
	var caseResultName = "case result 1";
	var caseType = "Case Type 1";
	var componentName = "Component 1";
	var environmentFactorsName = "Environment Factors 1";
	var productVersion = "1.2";
	var projectName = "Project 1";
	var routineName = "Routine 1";
	var runName = "Option 1";
	var teamName = "Team 1";
	var testSiteName = "Testray 2";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Testray Site") {
			HeadlessSite.addSite(
				siteName = ${testSiteName},
				templateName = "Testray",
				templateType = "Site Initializer");
		}

		task ("create project, routine, team, component, routine, case, case type, enviroment factor, product version, build, run and case result via API") {
			JSONTestray.addProject(
				projectDescription = "Project Description 1",
				projectName = ${projectName});

			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addComponent(
				componentName = ${componentName},
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addRoutine(
				projectName = ${projectName},
				routineName = ${routineName});

			JSONTestray.addCaseType(caseType = ${caseType});

			JSONTestray.addCases(
				caseName = ${caseName},
				caseType = ${caseType},
				componentName = ${componentName},
				projectName = ${projectName});

			JSONTestray.addEnvironmentFactors(environmentFactorsName = ${environmentFactorsName});

			JSONTestray.addProductVersion(
				productVersion = ${productVersion},
				projectName = ${projectName});

			JSONTestray.addBuild(
				buildName = ${buildName},
				productVersion = ${productVersion},
				projectName = ${projectName},
				routineName = ${routineName});

			JSONTestray.addRun(
				buildName = ${buildName},
				runName = ${runName});

			JSONTestray.addCaseResult(
				buildName = ${buildName},
				caseName = ${caseName},
				caseResultName = ${caseResultName},
				componentName = ${componentName},
				runName = ${runName});
		}

		task ("Go to Testray Site") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});
		}
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		task ("Delete case type, factor categorie and project via API, Testray Site and Client Extensions") {
			JSONTestrayAPI.deleteObjectViaAPI(
				object = "casetypes",
				objectName = ${caseType});

			JSONTestrayAPI.deleteObjectViaAPI(
				object = "factorcategories",
				objectName = "Category 1");

			JSONTestrayAPI.deleteProject(projectName = ${projectName});

			Testray.testrayApisTearDown();
		}

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Story ID: LPS-162255 | Test Summary: Verify that can back from section project through Breadcrumb Finder"
	@priority = 3
	test AssertCanBackSectionByBreadcrumb {
		task ("Given that the user go to build page") {
			Testray.changePagination(quantity = 150);

			Testray.clickTableEntry(tableEntry = ${projectName});

			Testray.clickTableEntry(tableEntry = ${routineName});
		}

		task ("And the user access the Breadcrumb") {
			Testray.gotoBreadcrumb();
		}

		task ("When the user back to section project through Breadcrumb") {
			Testray.backSectionBreadcrumb(value = "Project 1");

			Testray.confirmBreadcrumb();
		}

		task ("Then the user can back to the routine page") {
			Testray.viewTableEntryList(listEntry = ${routineName});
		}
	}

	@description = "Story ID: LPS-162255 | Test Summary: Verify that can go to the case results through Breadcrumb Finder"
	@priority = 3
	test AssertCanGoToCaseResultsthroughBreadcrumb {
		task ("Given that the user go to the breadcrumb") {
			Testray.gotoBreadcrumb();
		}

		task ("When the user go to case result page through Breadcrumb") {
			Testray.nextSectionBreadcrumb(
				build = ${buildName},
				caseResult = ${caseName},
				project = ${projectName},
				routine = ${routineName},
				run = 0);
		}

		task ("Then the user can see the case result in the table") {
			TestrayDropdown.assertBreadcrumbTitle(text = ${caseName});
		}
	}

	@description = "Story ID: LPS-162255 | Test Summary: Verify that can search for a specific project in the Breadcrumb Finder"
	@priority = 4
	test AssertCanSearchProjectByBreadcrumb {
		task ("Given that the user go to the breadcrumb") {
			Testray.gotoBreadcrumb();
		}

		task ("When the user search a specific project through Breadcrumb") {
			Type(
				locator1 = "TestrayTestflow#BREADCRUMB_INPUT_NAME",
				value1 = "Project 1");
		}

		task ("And the user confirm the project") {
			Testray.confirmBreadcrumb();
		}

		task ("Then the user can go to the routine page") {
			Testray.viewTableEntryList(listEntry = ${routineName});
		}
	}

}