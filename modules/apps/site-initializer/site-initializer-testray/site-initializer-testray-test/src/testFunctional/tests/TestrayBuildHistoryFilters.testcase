@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-163118=true";
	property osgi.modules.includes = "site-initializer-testray";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Testray";

	var caseName = "Case 1";
	var caseType = "Case Type 1";
	var componentName = "Component 1";
	var environmentFactorsName = "Environment Factors 1";
	var projectName = "Project 1";
	var routineName = "Routine 1";
	var teamName = "Team 1";
	var testSiteName = "Testray 2";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Testray Site") {
			HeadlessSite.addSite(
				siteName = ${testSiteName},
				templateName = "Testray",
				templateType = "Site Initializer");
		}

		task ("create project, routine, team, component, case, case type, enviroment factor, product version, build, category and option via API") {
			JSONTestray.addProject(
				projectDescription = "Project Description 1",
				projectName = ${projectName});

			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addComponent(
				componentName = ${componentName},
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addRoutine(
				projectName = ${projectName},
				routineName = ${routineName});

			JSONTestray.addCaseType(caseType = ${caseType});

			JSONTestray.addCases(
				caseName = ${caseName},
				caseType = ${caseType},
				componentName = ${componentName},
				projectName = ${projectName});

			JSONTestray.addEnvironmentFactors(environmentFactorsName = ${environmentFactorsName});

			JSONTestray.addProductVersion(
				productVersion = "7.0",
				projectName = ${projectName});

			JSONTestray.addProductVersion(
				productVersion = "1.2",
				projectName = ${projectName});

			JSONTestray.addBuild(
				buildName = "Build 1",
				productVersion = "7.0",
				projectName = ${projectName},
				routineName = ${routineName});

			JSONTestray.addBuild(
				buildName = "Build 2",
				productVersion = "1.2",
				projectName = ${projectName},
				routineName = ${routineName});
		}

		task ("Go to the build page") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(quantity = 150);

			Testray.clickTableEntry(tableEntry = ${projectName});

			Testray.clickTableEntry(tableEntry = ${routineName});
		}
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		task ("Delete routine, case type, factor categorie and project via API, Testray Site and Client Extensions") {
			JSONTestrayAPI.deleteObjectViaAPI(
				object = "routines",
				objectName = ${routineName});

			JSONTestrayAPI.deleteObjectViaAPI(
				object = "casetypes",
				objectName = ${caseType});

			JSONTestrayAPI.deleteObjectViaAPI(
				object = "factorcategories",
				objectName = "Category 1");

			JSONTestrayAPI.deleteProject(projectName = ${projectName});

			Testray.testrayApisTearDown();
		}

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Story ID: LPS-173523 | Test Summary: Verify if as an Administrator I should be able to filter build history by build name"
	@priority = 3
	test AdminCanFilterByBuildName {
		task ("Given that the user has two builds different in the table") {
			Testray.viewTableEntryList(listEntry = "Build 1,Build 2");
		}

		task ("When the user select the build 2 in the filter") {
			TestrayFilter.filterResults(
				fieldType = "input",
				inputFieldLabel = "Build Name",
				inputValue = "Build 2");
		}

		task ("Then the user see only build 2 in the table") {
			Testray.viewTableEntryList(listEntry = "Build 2");
		}

		task ("And do not see the build 1 in the table") {
			Testray.viewTableEntryListNotPresent(listEntry = "Build 1");
		}
	}

	@description = "Story ID: LPS-173523 | Test Summary: Verify if as an Administrator I should be able to filter build history by product version"
	@priority = 3
	test AdminCanFilterByProductVersion {
		task ("Given that the user has two builds with different versions in the table") {
			Testray.viewTableEntryList(listEntry = "7.0,1.2");
		}

		task ("When the user select product version 7.0 in the filter") {
			TestrayFilter.filterResults(
				fieldType = "select",
				selectFieldLabel = "Product Version",
				selectValue = "7.0");
		}

		task ("Then the user see only products with version 7.0 in the table") {
			Testray.viewTableEntryList(listEntry = "7.0");
		}

		task ("And do not see the products with other versions in the table") {
			Testray.viewTableEntryListNotPresent(listEntry = "1.2");
		}
	}

	@description = "Story ID: LPS-173523 | Test Summary: Verify if as an Administrator I should be able to filter build history using multiple filtering options"
	@priority = 4
	test AdminCanFilterWithMultipleOptions {
		task ("When the user select multiple options in the filter") {
			TestrayFilter.filterResults(
				fieldType = "input,select",
				inputFieldLabel = "Build Name",
				inputValue = "Build 1",
				selectFieldLabel = "Product Version",
				selectValue = "7.0");
		}

		task ("Then the user see only build 1 and version 7.0 in the table") {
			Testray.viewTableEntryList(listEntry = "Build 1,7.0");
		}

		task ("And do not see the build 2 and version 1.2 in the table") {
			Testray.viewTableEntryListNotPresent(listEntry = "Build 2,1.2");
		}
	}

	@description = "Story ID: LPS-173523 | Test Summary: Verify if as an Administrator I should not see build history that don't exist when I try filtering for them"
	@priority = 3
	test AdminCanNotFilterForNonExistentBuildName {
		task ("Given that the user has two builds that existent in the table") {
			Testray.viewTableEntryList(listEntry = "Build 1,Build 2");
		}

		task ("When filtering a build by his non-existent name") {
			TestrayFilter.filterResults(
				fieldType = "input",
				inputFieldLabel = "Build Name",
				inputValue = "Build 3");
		}

		task ("Then the user is not present in the build table") {
			Testray.viewTableEntryListNotPresent(listEntry = "Build 3");
		}
	}

	@description = "Story ID: LPS-173523 | Test Summary: Verify that can search for a field"
	@priority = 2
	test AdminCanSearchForField {
		task ("When the user searches for a field called product version") {
			TestrayFilter.clickFilter();

			TestrayFilter.searchFilter(filterName = "Product Version");
		}

		task ("Then the user can see the field label called product version") {
			AssertElementPresent(
				locator1 = "Select#SELECT_FIELD_LABEL",
				selectFieldLabel = "Product Version");
		}

		task ("When the user searches for a field that does not exist") {
			TestrayFilter.searchFilter(filterName = "Product Version 2");
		}

		task ("Then the user can no more see the label called product version in the filter") {
			AssertElementNotPresent(
				locator1 = "Select#SELECT_FIELD_LABEL",
				selectFieldLabel = "Product Version");
		}
	}

}