@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-163118=true";
	property osgi.modules.includes = "site-initializer-testray";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Testray";

	var buildName = "Build 1";
	var caseName = "Case 1";
	var caseResultName = "case result 1";
	var caseType = "Case Type 1";
	var componentName = "Component 1";
	var environmentFactorsName = "Environment Factors 1";
	var productVersion = "1.2";
	var projectName = "Project 1";
	var routineName = "Routine 1";
	var runName = "Option 1";
	var teamName = "Team 1";
	var testSiteName = "Testray 2";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Testray Site") {
			HeadlessSite.addSite(
				siteName = ${testSiteName},
				templateName = "Testray",
				templateType = "Site Initializer");
		}

		task ("create project, routine, team, component, case, case type, enviroment factor, product version, build, category, option, run and case result via API") {
			JSONTestray.addProject(
				projectDescription = "Project Description 1",
				projectName = ${projectName});

			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = "Team 2");

			JSONTestray.addComponent(
				componentName = ${componentName},
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addComponent(
				componentName = "Component 2",
				projectName = ${projectName},
				teamName = "Team 2");

			JSONTestray.addRoutine(
				projectName = ${projectName},
				routineName = ${routineName});

			JSONTestray.addCaseType(caseType = ${caseType});

			JSONTestray.addCases(
				caseName = ${caseName},
				caseType = ${caseType},
				componentName = ${componentName},
				priority = 5,
				projectName = ${projectName});

			JSONTestray.addCaseType(caseType = "Case Type 2");

			JSONTestray.addCases(
				caseName = "Case 2",
				caseType = "Case Type 2",
				componentName = "Component 2",
				projectName = ${projectName});

			JSONTestray.addEnvironmentFactors(environmentFactorsName = ${environmentFactorsName});

			JSONTestray.addProductVersion(
				productVersion = ${productVersion},
				projectName = ${projectName});

			JSONTestray.addBuild(
				buildName = ${buildName},
				productVersion = ${productVersion},
				projectName = ${projectName},
				routineName = ${routineName});

			JSONTestray.addRun(
				buildName = ${buildName},
				runName = ${runName});

			JSONTestray.addRun(
				buildName = ${buildName},
				runName = "Option 2");

			JSONTestray.addCaseResult(
				buildName = ${buildName},
				caseName = ${caseName},
				caseResultName = ${caseResultName},
				componentName = ${componentName},
				messageError = "Failed to run on CI",
				runName = ${runName});

			JSONTestray.addCaseResult(
				buildName = ${buildName},
				caseName = "Case 2",
				caseResultName = "case result 2",
				componentName = "Component 2",
				messageError = "Aborted prior to running test",
				runName = "Option 2");
		}

		task ("Go to Testray 2 and Go to the build page") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(quantity = 150);

			Testray.clickTableEntry(tableEntry = ${projectName});

			Testray.clickTableEntry(tableEntry = ${routineName});

			Testray.clickTableEntry(tableEntry = ${buildName});
		}
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		task ("Delete case type, factor category, routine and project via API, Testray Site and Client Extensions") {
			JSONTestrayAPI.deleteObjectViaAPI(
				object = "casetypes",
				objectName = ${caseType});

			JSONTestrayAPI.deleteObjectViaAPI(
				object = "casetypes",
				objectName = "Case Type 2");

			JSONTestrayAPI.deleteObjectViaAPI(
				object = "factorcategories",
				objectName = "Category 1");

			JSONTestrayAPI.deleteObjectViaAPI(
				object = "routines",
				objectName = ${routineName});

			JSONTestrayAPI.deleteProject(projectName = ${projectName});

			Testray.testrayApisTearDown();
		}

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Story ID: LPS-173524 | Test Summary: Verify if as an Administrator I should be able to filter case results by assignee"
	@priority = 3
	test CanFilterByAssignee {
		task ("Given that the user assign to me a case result") {
			Testray.clickTableEntry(tableEntry = "Case 1");

			TestrayTestflow.userAvatarNotPresent();

			Button.click(button = "Assign to Me");
		}

		task ("When the user filter a case result by assign") {
			Testray.clickBreadcrumb(text = ${buildName});

			TestrayFilter.filterResults(
				fieldType = "select",
				selectFieldLabel = "Assignee",
				selectValue = "Test");
		}

		task ("Then the user can see user avatar in the table") {
			Testray.clickTableEntry(tableEntry = "Case 1");

			TestrayTestflow.userAvatarPresent();
		}
	}

	@description = "Story ID: LPS-173524 | Test Summary: Verify if as an Administrator I should be able to filter case results by case name"
	@priority = 4
	test CanFilterByCaseName {
		task ("Given that the user has two cases different in the table") {
			Testray.viewTableEntryList(listEntry = "Case 1,Case 2");
		}

		task ("When the user filter a case result by case name") {
			TestrayFilter.filterResults(
				fieldType = "input",
				inputFieldLabel = "Case Name",
				inputValue = "Case 1");
		}

		task ("Then the user see only the Case 1 in the table") {
			Testray.viewTableEntryList(listEntry = "Case 1");
		}

		task ("And do not see Case 2 in the table") {
			Testray.viewTableEntryListNotPresent(listEntry = "Case 2");
		}
	}

	@description = "Story ID: LPS-173524 | Test Summary: Verify if as an Administrator I should be able to filter case results by case type"
	@priority = 3
	test CanFilterByCaseType {
		task ("Given that the user has two cases different in the table related with the two case types") {
			Testray.viewTableEntryList(listEntry = "Case 1,Case 2");
		}

		task ("When the user filter a case result by case type") {
			TestrayFilter.filterResults(
				fieldType = "multiSelect",
				multiSelectFieldLabel = "Case Type",
				multiSelectValue = "Case Type 1");
		}

		task ("Then the user see only case type 1 in the table") {
			Testray.viewTableEntryList(listEntry = "Case Type 1");
		}

		task ("And do not see the case type 2 in the table") {
			Testray.viewTableEntryListNotPresent(listEntry = "Case Type 2");
		}
	}

	@description = "Story ID: LPS-173524 | Test Summary: Verify if as an Administrator I should be able to filter case results by component"
	@priority = 3
	test CanFilterByComponent {
		task ("Given that the user has two component different in the table") {
			Testray.viewTableEntryList(listEntry = "Component 1,Component 2");
		}

		task ("When the user filter a case result by component") {
			TestrayFilter.filterResults(
				fieldType = "multiSelect",
				multiSelectFieldLabel = "Component",
				multiSelectValue = "Component 2");
		}

		task ("Then the user see only component 2 in the table") {
			Testray.viewTableEntryList(listEntry = "Component 2");
		}

		task ("And do not see the component 1 in the table") {
			Testray.viewTableEntryListNotPresent(listEntry = "Component 1");
		}
	}

	@description = "Story ID: LPS-173524 | Test Summary: Verify if as an Administrator I should be able to filter case results by enviroments"
	@priority = 3
	test CanFilterByEnviroments {
		task ("Given that the user has two enviroments different in the table") {
			ScrollWebElementIntoView(locator1 = "Pagination#ITEMS_PER_PAGE_SELECT_2");

			TestrayFilter.selectColumns(listColumn = "Environment");

			Testray.viewTableEntryList(listEntry = "Option 1,Option 2");
		}

		task ("When the user filter a case result by enviroment") {
			TestrayFilter.filterResults(
				fieldType = "input",
				inputFieldLabel = "Environment",
				inputValue = "Option 1");
		}

		task ("Then the user see only the option 1 in the table") {
			Testray.viewTableEntryList(listEntry = "Option 1");
		}

		task ("And do not see option 2 in the table") {
			Testray.viewTableEntryListNotPresent(listEntry = "Option 2");
		}
	}

	@description = "Story ID: LPS-173524 | Test Summary: Verify if as an Administrator I should be able to filter case results by error"
	@priority = 4
	test CanFilterByError {
		task ("Given that the user has two case result with errors different in the table") {
			Testray.viewTableEntryList(listEntry = "Failed to run on CI,Aborted prior to running test");
		}

		task ("When the user filter the case result by error") {
			TestrayFilter.filterResults(
				fieldType = "textArea",
				textAreaFieldLabel = "errors",
				textAreaValue = "Failed to run on CI");
		}

		task ("Then the user see only case result 1 with error in the table") {
			Testray.viewTableEntryList(listEntry = "Failed to run on CI");
		}

		task ("And do not see the case result 2 with error in the table") {
			Testray.viewTableEntryListNotPresent(listEntry = "Aborted prior to running test");
		}
	}

	@description = "Story ID: LPS-173524 | Test Summary: Verify if as an Administrator I should be able to filter case results by priority "
	@priority = 3
	test CanFilterByPriority {
		task ("Given that the user has two priority different in the table") {
			Testray.viewTableEntryList(listEntry = "5,3");
		}

		task ("When the user filter a case result by priority") {
			TestrayFilter.filterResults(
				fieldType = "select",
				selectFieldLabel = "Priority",
				selectValue = 3);
		}

		task ("Then the user see only the priority 3 in the table") {
			Testray.viewTableEntryList(listEntry = 3);
		}

		task ("And do not see priority 5 in the table") {
			Testray.viewTableEntryListNotPresent(listEntry = 5);
		}
	}

	@description = "Story ID: LPS-173524 | Test Summary: Verify if as an Administrator I should be able to filter case results by status"
	@priority = 3
	test CanFilterByStatus {
		task ("Given that the user complete a test with passed status") {
			Testray.clickTableEntry(tableEntry = "Case 1");

			Button.click(button = "Assign to Me");

			TestrayTestflow.editStatus(
				button = "Complete Test",
				selectStatus = "Passed");
		}

		task ("And that the user has two status different in the table") {
			Testray.clickBreadcrumb(text = ${buildName});

			Testray.viewTableEntryList(listEntry = "Untested,Passed");
		}

		task ("When the user filter a case result with passed status") {
			TestrayFilter.filterResults(
				checkboxFieldLabel = "Status",
				checkboxValue = "Passed",
				fieldType = "checkbox");
		}

		task ("Then the user see passed status in the table") {
			Testray.viewTableEntryList(listEntry = "Passed");
		}

		task ("And do not see status Untested in the table") {
			Testray.viewTableEntryListNotPresent(listEntry = "Untested");
		}
	}

	@description = "Story ID: LPS-173524 | Test Summary: Verify if as an Administrator I should be able to filter case results by team"
	@priority = 3
	test CanFilterByTeam {
		task ("Given that the user has two team different in the table") {
			Testray.viewTableEntryList(listEntry = "Team 1,Team 2");
		}

		task ("When the user filter a case result by team") {
			TestrayFilter.filterResults(
				fieldType = "multiSelect",
				multiSelectFieldLabel = "Team",
				multiSelectValue = "Team 2");
		}

		task ("Then the user see only Team 2 in the table") {
			Testray.viewTableEntryList(listEntry = "Team 2");
		}

		task ("And do not see the Team 1 in the table") {
			Testray.viewTableEntryListNotPresent(listEntry = "Team 1");
		}
	}

	@description = "Story ID: LPS-173524 | Test Summary: Verify if as an Administrator I should be able to filter case results using multiple filtering options"
	@priority = 4
	test CanFilterWithMultipleOptions {
		task ("Given that the user complete a test with passed status") {
			Testray.clickTableEntry(tableEntry = "Case 1");

			Button.click(button = "Assign to Me");

			TestrayTestflow.editStatus(
				button = "Complete Test",
				selectStatus = "Passed");
		}

		task ("And that the user has two case result different in the table") {
			Testray.clickBreadcrumb(text = ${buildName});

			Testray.viewTableEntryList(listEntry = "Case 1,Case 2");
		}

		task ("When the user filter a case result with multiple options") {
			TestrayFilter.filterResults(
				checkboxFieldLabel = "Status",
				checkboxValue = "Passed",
				fieldType = "checkbox,input,select",
				inputFieldLabel = "Case Name",
				inputValue = "Case 1",
				selectFieldLabel = "Priority",
				selectValue = 5);
		}

		task ("Then the user see only the Case 1 and status in the table") {
			Testray.viewTableEntryList(listEntry = "5,Case 1,Passed");
		}

		task ("And do not see Case 2 in the table") {
			Testray.viewTableEntryListNotPresent(listEntry = "Case 2");
		}
	}

	@description = "Story ID: LPS-173524 | Test Summary: Verify if as an Administrator I should not see case results that don't exist when I try filtering for them"
	@priority = 3
	test CanNotFilterForNonexistent {
		task ("Given that the user filter a case result existent") {
			TestrayFilter.filterResults(
				fieldType = "input",
				inputFieldLabel = "Case Name",
				inputValue = "Case");
		}

		task ("And can see the case result in the list and not see case result 3") {
			Testray.viewTableEntryList(listEntry = "Case 1,Case 2");

			Testray.viewTableEntryListNotPresent(listEntry = "Case 3");
		}

		task ("When the user filter a case result by its non-existent name") {
			Refresh();

			TestrayFilter.filterResults(
				fieldType = "input",
				inputFieldLabel = "Case Name",
				inputValue = "Case 3");
		}

		task ("Then can not see the case result in the list") {
			Testray.viewTableEntryListNotPresent(listEntry = "Case 3");
		}

		task ("And can see message no results found") {
			TestrayFilter.assertNoResultsFound();
		}
	}

	@description = "Story ID: LPS-173524 | Test Summary: Verify if as an User I should be able to search by a filter"
	@priority = 2
	test CanSearchByFilter {
		task ("Given that the user has two field different in the filter") {
			Testray.viewTableEntryList(listEntry = "Priority,Run");
		}

		task ("When the user searches for a field called run") {
			TestrayFilter.clickFilter();

			ScrollWebElementIntoView(
				key_tableEntry = "Case 1",
				locator1 = "Testray#TABLE_ENTRY");

			TestrayFilter.searchFilter(filterName = "Run");
		}

		task ("Then the user can see the field label called run") {
			AssertElementPresent(
				locator1 = "Select#SELECT_FIELD_LABEL",
				selectFieldLabel = "Run");
		}

		task ("And the user no more see the field called priority in the filter") {
			AssertElementNotPresent(
				locator1 = "Select#SELECT_FIELD_LABEL",
				selectFieldLabel = "Priority");
		}
	}

}