@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-163118=true";
	property osgi.modules.includes = "site-initializer-testray";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Testray";

	var buildName = "Build 1";
	var caseName = "Case 1";
	var caseResultName = "case result 1";
	var caseType = "Case Type 1";
	var componentName = "Component 1";
	var environmentFactorsName = "Environment Factors 1";
	var productVersion = "1.2";
	var projectName = "Project 1";
	var routineName = "Routine 1";
	var runName = "Option 1";
	var taskName = "Task_1";
	var teamName = "Team 1";
	var testSiteName = "Testray 2";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Testray Site") {
			HeadlessSite.addSite(
				siteName = ${testSiteName},
				templateName = "Testray",
				templateType = "Site Initializer");
		}

		task ("create project, routine, team, component, case, case type, enviroment factor, product version, build, category, option, run, case result, task and subtask via API") {
			JSONTestray.addProject(
				projectDescription = "Project Description 1",
				projectName = ${projectName});

			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addComponent(
				componentName = ${componentName},
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addRoutine(
				projectName = ${projectName},
				routineName = ${routineName});

			JSONTestray.addCaseType(caseType = ${caseType});

			JSONTestray.addCases(
				caseName = ${caseName},
				caseType = ${caseType},
				componentName = ${componentName},
				projectName = ${projectName});

			JSONTestray.addEnvironmentFactors(environmentFactorsName = ${environmentFactorsName});

			JSONTestray.addProductVersion(
				productVersion = ${productVersion},
				projectName = ${projectName});

			JSONTestray.addBuild(
				buildName = ${buildName},
				productVersion = ${productVersion},
				projectName = ${projectName},
				routineName = ${routineName});

			JSONTestray.addRun(
				buildName = ${buildName},
				runName = ${runName});

			JSONTestray.addCaseResult(
				buildName = ${buildName},
				caseName = ${caseName},
				caseResultName = ${caseResultName},
				componentName = ${componentName},
				runName = ${runName});

			JSONTestray.addTask(
				buildName = ${buildName},
				key = "INANALYSIS",
				statusTask = "In Analysis",
				taskName = ${taskName});

			JSONTestray.addSubtask(
				key = "OPEN",
				messageError = "Failed prior to running test",
				score = 3,
				statusSubtask = "Open",
				subtaskName = "Subtask_1",
				subtaskNumber = 1,
				taskName = ${taskName});

			JSONTestray.addSubtask(
				key = "OPEN",
				score = 3,
				statusSubtask = "Open",
				subtaskName = "Subtask_2",
				subtaskNumber = 2,
				taskName = ${taskName});
		}

		task ("Go to Testray Site") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});
		}

		task ("Go to Task") {
			TestrayTestflow.goToTestflow();

			Testray.clickTableEntry(tableEntry = "Task_1");
		}
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		task ("Delete task, routine, component, case type, factor category and project via API, Testray Site and Client Extensions") {
			JSONTestrayAPI.deleteObjectViaAPI(
				object = "tasks",
				objectName = ${taskName});

			JSONTestrayAPI.deleteObjectViaAPI(
				object = "routines",
				objectName = ${routineName});

			JSONTestrayAPI.deleteObjectViaAPI(
				object = "components",
				objectName = ${componentName});

			JSONTestrayAPI.deleteObjectViaAPI(
				object = "casetypes",
				objectName = ${caseType});

			JSONTestrayAPI.deleteObjectViaAPI(
				object = "factorcategories",
				objectName = "Category 1");

			JSONTestrayAPI.deleteProject(projectName = ${projectName});

			Testray.testrayApisTearDown();
		}

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Story ID: LPS-173522 | Test Summary: Verify if as an Administrator I should be able to filter subtasks by assignee"
	@priority = 4
	test AdminCanFilterSubtasksByAssignee {
		task ("Given that subtask 1 is assigned to user 'User User'") {
			TestrayTestflow.assignUsers(
				rowOption = "Assign and Begin Analysis",
				tableEntry = "Subtask_1",
				userName = "User User");
		}

		task ("And that subtask 2 is assigned to user 'Test'") {
			TestrayTestflow.assignUsers(
				rowOption = "Assign and Begin Analysis",
				tableEntry = "Subtask_2",
				userName = "Test Test");
		}

		task ("When the user select the user 'User User' in the filter") {
			TestrayFilter.filterResults(
				fieldType = "select",
				selectFieldLabel = "Assignee",
				selectValue = "User");
		}

		task ("Then can see only user 'User User' in the table") {
			Testray.viewTableEntryList(listEntry = "User User");
		}

		task ("And do not see the user Test in the table") {
			Testray.viewTableEntryListNotPresent(listEntry = "Test Test");
		}
	}

	@description = "Story ID: LPS-173522 | Test Summary: Verify if as an Administrator I should be able to filter subtasks by errors"
	@priority = 3
	test AdminCanFilterSubtasksByError {
		task ("Given that the user has two subtasks different in the table") {
			Testray.viewTableEntryList(listEntry = "Subtask_1,Subtask_2");
		}

		task ("When the user filter the subtask in the filter by error") {
			TestrayFilter.filterResults(
				fieldType = "input",
				inputFieldLabel = "Errors",
				inputValue = "Failed prior to running test");
		}

		task ("Then the user see only subtask 1 with error in the table") {
			Testray.viewTableEntryList(listEntry = "Failed prior to running test");
		}

		task ("And do not see the subtask 2 without error in the table") {
			Testray.viewTableEntryListNotPresent(listEntry = "Subtask_2");
		}
	}

	@description = "Story ID: LPS-173522 | Test Summary: Verify if as an Administrator I should be able to filter subtasks by name"
	@priority = 3
	test AdminCanFilterSubtasksByName {
		task ("Given that the user has two subtasks different in the table") {
			Testray.viewTableEntryList(listEntry = "Subtask_1,Subtask_2");
		}

		task ("When the user select the subtask 2 in the filter by name") {
			TestrayFilter.filterResults(
				fieldType = "input",
				inputFieldLabel = "Subtask Name",
				inputValue = "Subtask_2");
		}

		task ("Then the user see only subtask 2 in the table") {
			Testray.viewTableEntryList(listEntry = "Subtask_2");
		}

		task ("And do not see the subtask 1 in the table") {
			Testray.viewTableEntryListNotPresent(listEntry = "Subtask_1");
		}
	}

	@description = "Story ID: LPS-173522 | Test Summary: Verify if as an Administrator I should be able to filter subtask using multiple filtering options"
	@priority = 4
	test AdminCanFilterSubtaskWithMultipleOptions {
		task ("Given that subtask 1 is assigned to user 'User User'") {
			TestrayTestflow.assignUsers(
				rowOption = "Assign and Begin Analysis",
				tableEntry = "Subtask_1",
				userName = "User User");
		}

		task ("And that subtask 2 is assigned to user Test Test") {
			TestrayTestflow.assignUsers(
				rowOption = "Assign and Begin Analysis",
				tableEntry = "Subtask_2",
				userName = "Test Test");
		}

		task ("And that subtask 2 is completed with blocked") {
			TestrayTestflow.editStatusByRightClick(
				comment = "button does not work",
				issues = "LPS-166191",
				selectStatus = "Blocked",
				tableEntry = "Subtask_2");
		}

		task ("When the user filter multiple options by: Assignee, user and status in the filter") {
			TestrayFilter.filterResults(
				checkboxFieldLabel = "Status",
				checkboxValue = "Complete",
				fieldType = "checkbox,input,select",
				inputFieldLabel = "Subtask Name",
				inputValue = "Subtask_2",
				selectFieldLabel = "Assignee",
				selectValue = "Test");
		}

		task ("Then can see only user 'User User' and complete status in the table") {
			Testray.viewTableEntryList(listEntry = "Test Test");

			TestrayTestflow.assertStatus(
				label = "Subtasks",
				status = "Complete");
		}

		task ("And do not see the Subtask_2 and user test test in the table") {
			Testray.viewTableEntryListNotPresent(listEntry = "User User,Subtask_1");
		}
	}

	@description = "Story ID: LPS-173522 | Test Summary: Verify if as an Administrator I should not see subtask that don't exist when I try filtering for them"
	@priority = 3
	test AdminCanNotFilterForNonExistentSubtask {
		task ("Given that the user has two subtasks that existent in the table") {
			Testray.viewTableEntryList(listEntry = "Subtask_1,Subtask_2");
		}

		task ("When filtering a subtask by his non-existent name") {
			TestrayFilter.filterResults(
				fieldType = "input",
				inputFieldLabel = "Subtask Name",
				inputValue = "Subtask_3");
		}

		task ("Then the user is not present in the subtask table") {
			Testray.viewTableEntryListNotPresent(listEntry = "Subtask_3");
		}
	}

	@description = "Story ID: LPS-173522 | Test Summary: Verify that can search for a field"
	@priority = 2
	test AdminCanSearchForField {
		task ("When the user searches for a field called Assignee") {
			TestrayFilter.clickFilter();

			ScrollWebElementIntoView(
				key_tableEntry = "Subtask_1",
				locator1 = "Testray#TABLE_ENTRY");

			TestrayFilter.searchFilter(filterName = "Assignee");
		}

		task ("Then the user can see the field label called Assignee") {
			AssertElementPresent(
				locator1 = "Select#SELECT_FIELD_LABEL",
				selectFieldLabel = "Assignee");
		}

		task ("When the user searches for a field that does not exist") {
			TestrayFilter.searchFilter(filterName = "Assignee 2");
		}

		task ("Then the user can no more see the label called Assignee in the filter") {
			AssertElementNotPresent(
				locator1 = "Select#SELECT_FIELD_LABEL",
				selectFieldLabel = "Assignee 2");
		}
	}

}