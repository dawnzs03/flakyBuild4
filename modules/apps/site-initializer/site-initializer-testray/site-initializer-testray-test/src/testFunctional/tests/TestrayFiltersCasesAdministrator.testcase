@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-163118=true";
	property osgi.modules.includes = "site-initializer-testray";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Testray";

	var caseType = "Case Type 1";
	var componentName = "Component 1";
	var projectName = "Project 1";
	var teamName = "Team 1";
	var testSiteName = "Testray 2";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Testray Site") {
			HeadlessSite.addSite(
				siteName = ${testSiteName},
				templateName = "Testray",
				templateType = "Site Initializer");
		}

		task ("create project, team, component and case via API") {
			JSONTestray.addProject(
				projectDescription = "Project Description 1",
				projectName = ${projectName});

			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addComponent(
				componentName = ${componentName},
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addCaseType(caseType = ${caseType});

			JSONTestray.addCases(
				caseName = "Case 1",
				caseType = ${caseType},
				componentName = ${componentName},
				description = "Description 1",
				priority = 5,
				projectName = ${projectName},
				steps = "Steps 1");

			JSONTestray.addCases(
				caseName = "Case 2",
				caseType = ${caseType},
				componentName = ${componentName},
				description = "Description 2",
				priority = 4,
				projectName = ${projectName},
				steps = "Steps 2");
		}

		task ("Go to the Cases tab") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(quantity = 150);

			Testray.clickTableEntry(tableEntry = ${projectName});

			Navigator.gotoNavTab(navTab = "Cases");
		}
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		task ("Delete case type and project via API, Testray Site and Client Extensions") {
			JSONTestrayAPI.deleteObjectViaAPI(
				object = "casetypes",
				objectName = ${caseType});

			JSONTestrayAPI.deleteProject(projectName = ${projectName});

			Testray.testrayApisTearDown();
		}

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Story ID: LPS-173517 | Test Summary: Verify if as an Administrator I should be able to filter the case by case name"
	@priority = 4
	test AdminCanFilterCaseByCaseName {
		task ("When the user filter a case by name") {
			TestrayFilter.filterResults(
				fieldType = "input",
				inputFieldLabel = "Case Name",
				inputValue = "Case 1");
		}

		task ("Then can see the filters apply in the list by name") {
			Testray.viewTableEntryList(listEntry = "Case 1");

			Testray.viewTableEntryListNotPresent(listEntry = "Case 2");
		}
	}

	@description = "Story ID: LPS-173517 | Test Summary: Verify if as an Administrator I should be able to filter the case by case type"
	@priority = 3
	test AdminCanFilterCaseByCaseType {
		task ("When the user filter a case by case type") {
			TestrayFilter.selectColumns(listColumn = "Case Type");

			TestrayFilter.filterResults(
				fieldType = "multiSelect",
				multiSelectFieldLabel = "Case Type",
				multiSelectValue = "Case Type 1,Batch");
		}

		task ("Then can see the case type selected") {
			Testray.viewTableEntryList(listEntry = "Case Type 1");

			Testray.viewTableEntryListNotPresent(listEntry = "Batch");
		}
	}

	@description = "Story ID: LPS-173517 | Test Summary: Verify if as an Administrator I should be able to filter the case by component"
	@priority = 3
	test AdminCanFilterCaseByComponent {
		task ("When the user filter a case by component") {
			TestrayFilter.filterResults(
				fieldType = "multiSelect",
				multiSelectFieldLabel = "Component",
				multiSelectValue = "Component 1");
		}

		task ("Then can see the component selected") {
			Testray.viewTableEntryList(listEntry = "Component 1");
		}
	}

	@description = "Story ID: LPS-173517 | Test Summary: Verify if as an Administrator I should be able to filter the case by description"
	@priority = 2
	test AdminCanFilterCaseByDescription {
		task ("Given the user selects the description column") {
			TestrayFilter.selectColumns(listColumn = "Description");
		}

		task ("When the user filter a case by description") {
			TestrayFilter.filterResults(
				fieldType = "textArea",
				textAreaFieldLabel = "description",
				textAreaValue = "Description 1");
		}

		task ("Then can see the filters apply in the list by description") {
			Testray.viewTableEntryList(listEntry = "5,Case 1,Description 1");

			Testray.viewTableEntryListNotPresent(listEntry = "Description 2");
		}
	}

	@description = "Story ID: LPS-173517 | Test Summary: Verify if as an Administrator I should be able to filter the case by priority"
	@priority = 3
	test AdminCanFilterCaseByPriority {
		task ("When the user filter a case by priority") {
			TestrayFilter.filterResults(
				fieldType = "select",
				selectFieldLabel = "Priority",
				selectValue = 4);
		}

		task ("Then can see the filters apply in the list by priority") {
			Testray.viewTableEntryList(listEntry = "4,Case 2");

			Testray.viewTableEntryListNotPresent(listEntry = "Case 1");
		}
	}

	@description = "Story ID: LPS-173517 | Test Summary: Verify if as an Administrator I should be able to filter the case by steps"
	@priority = 2
	test AdminCanFilterCaseBySteps {
		task ("When the user filter a case by steps") {
			TestrayFilter.filterResults(
				fieldType = "textArea",
				textAreaFieldLabel = "steps",
				textAreaValue = "Steps 1");
		}

		task ("Then can see the filters apply in the list by steps") {
			Testray.viewTableEntryList(listEntry = "5,Case 1");

			Testray.viewTableEntryListNotPresent(listEntry = "Case 2");
		}
	}

	@description = "Story ID: LPS-173517 | Test Summary: Verify if as an Administrator I should be able to filter the case by team"
	@priority = 3
	test AdminCanFilterCaseByTeam {
		task ("When the user filter a case by team") {
			TestrayFilter.selectColumns(listColumn = "Team");

			TestrayFilter.filterResults(
				fieldType = "multiSelect",
				multiSelectFieldLabel = "Team",
				multiSelectValue = "Team 1");
		}

		task ("Then can see the team selected") {
			Testray.viewTableEntryList(listEntry = "Team 1");
		}
	}

	@description = "Story ID: LPS-173517 | Test Summary: Verify if as an Administrator I should be able to filter case using multiple filtering options"
	@priority = 4
	test AdminCanFilterCasesWithMultipleOptions {
		task ("Given that the user selects the columns") {
			TestrayFilter.selectColumns(listColumn = "Case Type,Team,Description");
		}

		task ("When the user filter a case by multiple options") {
			TestrayFilter.filterResults(
				fieldType = "input,select,textArea",
				inputFieldLabel = "Case Name",
				inputValue = "Case 1",
				selectFieldLabel = "Priority",
				selectValue = 5,
				textAreaFieldLabel = "description",
				textAreaValue = "Description 1");
		}

		task ("Then can see the multiple options in the table") {
			Testray.viewTableEntryList(listEntry = "Case 1,Case Type 1,Description 1,5");

			Testray.viewTableEntryListNotPresent(listEntry = "Case 2");
		}
	}

	@description = "Story ID: LPS-173517 | Test Summary: Verify if as an Administrator I should not see case that don't exist when I try filtering for them"
	@priority = 3
	test AdminCanFilterForNonexistentCase {
		task ("When the user filters a case by its non-existent name") {
			TestrayFilter.filterResults(
				fieldType = "input",
				inputFieldLabel = "Case Name",
				inputValue = "Case 3");
		}

		task ("Then can not see the case in the list") {
			Testray.viewTableEntryListNotPresent(listEntry = "Case 3");
		}
	}

	@description = "Story ID: LPS-173517 | Test Summary: Verify if as an Administrator I should be able to filter the filter options"
	@priority = 2
	test AdminCanFilterOptionsToFilter {
		task ("When the user search filter called priority") {
			TestrayFilter.clickFilter();

			TestrayFilter.searchFilter(filterName = "Priority");
		}

		task ("Then can see the label called priority") {
			AssertElementPresent(
				locator1 = "Select#SELECT_FIELD_LABEL",
				selectFieldLabel = "Priority");
		}

		task ("When change the filter search to case name") {
			TestrayFilter.searchFilter(filterName = "Case Name");
		}

		task ("Then can not see the label called priority anymore") {
			AssertElementNotPresent(
				locator1 = "Select#SELECT_FIELD_LABEL",
				selectFieldLabel = "Priority");
		}
	}

	@description = "Story ID: LPS-176898 | Test Summary: Verify that can clean the filter results"
	@priority = 2
	test CanClearFilterResults {
		task ("When the user filters a case by its non-existent name") {
			TestrayFilter.filterResults(
				fieldType = "input",
				inputFieldLabel = "Case Name",
				inputValue = "Test");
		}

		task ("And can not see the cases in the list") {
			Testray.viewTableEntryListNotPresent(listEntry = "Case 1,Case 2");
		}

		task ("When the user clear the filters") {
			TestrayFilter.clearFilterResults();
		}

		task ("Then can see the cases in the list again") {
			Testray.viewTableEntryList(listEntry = "Case 1,Case 2");
		}
	}

	@description = "Story ID: LPS-176898 | Test Summary: Verify that can clear the filter results with the close button"
	@priority = 2
	test CanClearFilterWithCloseButton {
		task ("When the user filters a filter by its non-existent name") {
			TestrayFilter.clickFilter();

			TestrayFilter.searchFilter(filterName = "TestTest");

			AssertElementPresent(locator1 = "TestrayFilter#MESSAGE_NO_RESULTS");
		}

		task ("Then can clear the filter results using the Clear button and the message is no longer displayed") {
			Click(locator1 = "Button#CLEAR");

			AssertElementNotPresent(locator1 = "TestrayFilter#MESSAGE_NO_RESULTS");
		}
	}

	@description = "Story ID: LPS-177202 | Test Summary: Verify that the user can pin filters"
	@priority = 3
	test CanPinFilterResults {
		task ("Given that can see two different cases in the table") {
			Testray.viewTableEntryList(listEntry = "Case 1,Case 2");
		}

		task ("And that the user filter a case") {
			TestrayFilter.filterResults(
				fieldType = "input",
				inputFieldLabel = "Case Name",
				inputValue = "Case 1");
		}

		task ("When the user pin a result in the filter") {
			WaitForElementPresent(
				key_tableEntry = "Case 1",
				locator1 = "Testray#TABLE_ENTRY");

			TestrayFilter.pinResult();

			Refresh();
		}

		task ("Then the user see only case 1 pinned in the table") {
			Testray.viewTableEntryList(listEntry = "Case 1");
		}

		task ("And not see the case 2 in the table") {
			Testray.viewTableEntryListNotPresent(listEntry = "Case 2");
		}
	}

	@description = "Story ID: LPS-177202 | Test Summary: Verify that the user can unpin filters"
	@priority = 3
	test CanUnpinFilterResults {
		task ("Given that can see two different cases in the table") {
			Testray.viewTableEntryList(listEntry = "Case 1,Case 2");
		}

		task ("And that the user filter a case") {
			TestrayFilter.filterResults(
				fieldType = "input",
				inputFieldLabel = "Case Name",
				inputValue = "Case 1");
		}

		task ("When the user pin and unpin a result in the filter") {
			TestrayFilter.pinResult();

			TestrayFilter.unpinResult();

			Refresh();
		}

		task ("Then the user see the two cases unpinned in the table") {
			Testray.viewTableEntryList(listEntry = "Case 1,Case 2");
		}
	}

	@description = "Story ID: LPS-177202 | Test Summary: Verify that the error message appears when pining without selected filters"
	@priority = 2
	test CanViewMessageError {
		task ("When the user pin a result without pinning") {
			WaitForElementPresent(
				key_tableEntry = "Case 1",
				locator1 = "Testray#TABLE_ENTRY");

			Click.javaScriptClick(
				key_title = "pin",
				locator1 = "Button#ANY_TITLE");
		}

		task ("Then the user see the error message") {
			Alert.viewErrorMessage(errorMessage = "You must select one or more filters before pinning.");
		}
	}

}