@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-163118=true${line.separator}feature.flag.LPS-154672=true";
	property osgi.modules.includes = "site-initializer-testray";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Testray";

	var buildName = "Build 1";
	var caseName = "Case 1";
	var caseResultName = "case result 1";
	var caseType = "Case Type 1";
	var componentName = "Component 1";
	var environmentFactorsName = "Environment Factors 1";
	var productVersion = "1.2";
	var projectName = "Project 1";
	var routineName = "Routine 1";
	var runName = "Option 1";
	var taskName = "Task_1";
	var teamName = "Team 1";
	var testSiteName = "Testray 2";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Testray Site") {
			HeadlessSite.addSite(
				siteName = ${testSiteName},
				templateName = "Testray",
				templateType = "Site Initializer");
		}

		task ("create project, routine, team, component, case, case type, enviroment factor, product version, build, category, option, run, case result, task and subtask via API") {
			JSONTestray.addProject(
				projectDescription = "Project Description 1",
				projectName = ${projectName});

			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addComponent(
				componentName = ${componentName},
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addRoutine(
				projectName = ${projectName},
				routineName = ${routineName});

			JSONTestray.addCaseType(caseType = ${caseType});

			JSONTestray.addCases(
				caseName = ${caseName},
				caseType = ${caseType},
				componentName = ${componentName},
				projectName = ${projectName});

			JSONTestray.addEnvironmentFactors(environmentFactorsName = ${environmentFactorsName});

			JSONTestray.addProductVersion(
				productVersion = ${productVersion},
				projectName = ${projectName});

			JSONTestray.addBuild(
				buildName = ${buildName},
				productVersion = ${productVersion},
				projectName = ${projectName},
				routineName = ${routineName});

			JSONTestray.addRun(
				buildName = ${buildName},
				runName = ${runName});

			JSONTestray.addCaseResult(
				buildName = ${buildName},
				caseName = ${caseName},
				caseResultName = ${caseResultName},
				componentName = ${componentName},
				runName = ${runName});

			JSONTestray.addTask(
				buildName = ${buildName},
				key = "INANALYSIS",
				statusTask = "In Analysis",
				taskName = ${taskName});

			JSONTestray.addSubtask(
				key = "OPEN",
				score = 3,
				statusSubtask = "Open",
				subtaskName = "Subtask_1",
				subtaskNumber = 1,
				taskName = ${taskName});

			JSONTestray.addSubtask(
				key = "OPEN",
				score = 3,
				statusSubtask = "Open",
				subtaskName = "Subtask_2",
				subtaskNumber = 2,
				taskName = ${taskName});
		}

		task ("Go to Testray Site") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});
		}

		task ("Go to Task") {
			TestrayTestflow.goToTestflow();
		}
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		task ("Delete subtask, task, routine, case type, factor category and project via API") {
			JSONTestrayAPI.deleteObjectViaAPI(
				object = "subtasks",
				objectName = "Subtask_1");

			JSONTestrayAPI.deleteObjectViaAPI(
				object = "subtasks",
				objectName = "Subtask_2");

			JSONTestrayAPI.deleteObjectViaAPI(
				object = "tasks",
				objectName = ${taskName});

			JSONTestrayAPI.deleteObjectViaAPI(
				object = "routines",
				objectName = ${routineName});

			JSONTestrayAPI.deleteObjectViaAPI(
				object = "casetypes",
				objectName = ${caseType});

			JSONTestrayAPI.deleteObjectViaAPI(
				object = "factorcategories",
				objectName = "Category 1");

			JSONTestrayAPI.deleteProject(projectName = ${projectName});
		}

		task ("Testray Site and Client Extensions") {
			Testray.testrayApisTearDown();
		}

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Story ID: LPS-164985 | Test Summary: Verify that can go to the build associated with a task from the sidebar"
	@priority = 3
	test AdminCanGoToBuildFromTheSidebar {
		task ("Given that the user reanalyze a task") {
			Testray.clickTableEntry(tableEntry = "Task_1");

			TestrayTestflow.reanalyzeTask();

			Refresh();
		}

		task ("When the user click in the build from the sidebar") {
			Click(
				key_subtaskName = ${buildName},
				locator1 = "TestraySubtask#SUBTASK_SIDEBAR");
		}

		task ("Then the user can be redirected to the build page") {
			TestrayDropdown.assertBreadcrumbTitle(text = ${buildName});
		}
	}

	@description = "Story ID: LPS-164985 | Test Summary: Verify that can go to the Subtask from the sidebar"
	@priority = 3
	test AdminCanGoToSubtaskFromTheSidebar {
		task ("Given that the user reanalyze a task") {
			Testray.clickTableEntry(tableEntry = "Task_1");

			TestrayTestflow.reanalyzeTask();
		}

		task ("And the user assign a subtask") {
			Testray.clickTableEntry(tableEntry = "Subtask_1");

			TestrayTestflow.assignUsers(
				assignButton = "Assign and Begin Analysis",
				userName = "Test Test");

			TestrayTestflow.goToTestflow();

			Refresh();
		}

		task ("When the user click in the subtask from the sidebar") {
			TestrayManage.clickOptionSidebar(optionSidebar = "Subtask_1");
		}

		task ("Then the user can be redirected to the subtask page") {
			TestrayDropdown.assertBreadcrumbTitle(text = "Subtask_1");
		}
	}

	@description = "Story ID: LPS-164985 | Test Summary: Verify that can go to the task from the sidebar"
	@priority = 3
	test AdminCanGoToTaskFromTheSidebar {
		task ("Given that the user reanalyze a task") {
			Testray.clickTableEntry(tableEntry = "Task_1");

			TestrayTestflow.reanalyzeTask();

			TestrayTestflow.goToTestflow();

			Refresh();
		}

		task ("When the user click in the task from the sidebar") {
			TestrayManage.clickOptionSidebar(optionSidebar = ${taskName});
		}

		task ("Then the user can be redirected to the task page") {
			TestrayDropdown.assertBreadcrumbTitle(text = ${taskName});
		}
	}

	@description = "Story ID: LPS-164985 | Test Summary: Verify that can see the details of a re-examined subtask in the sidebar"
	@priority = 3
	test AdminCanSeeSubtaskReexaminedInSidebar {
		task ("Given that the user reanalyze a task") {
			Testray.clickTableEntry(tableEntry = "Task_1");

			TestrayTestflow.reanalyzeTask();
		}

		task ("And the user assign two subtasks") {
			Testray.clickTableEntry(tableEntry = "Subtask_1");

			TestrayTestflow.assignUsers(
				assignButton = "Assign and Begin Analysis",
				userName = "Test Test");

			Testray.clickBreadcrumb(text = ${taskName});

			Testray.clickTableEntry(tableEntry = "Subtask_2");

			TestrayTestflow.assignUsers(
				assignButton = "Assign and Begin Analysis",
				userName = "Test Test");
		}

		task ("And the user complete the subtask") {
			TestrayTestflow.editStatus(
				button = "Complete",
				selectStatus = "Passed");
		}

		task ("When the user reanalyze the subtask") {
			TestrayTestflow.assignUsers(
				assignButton = "Assign and Reanalyze",
				userName = "Test Test");
		}

		task ("Then the subtask should appear on the sidebar") {
			Refresh();

			TestraySubtask.viewSubtaskSidebar(listsubtaskName = "Subtask_1,Subtask_2");
		}
	}

}