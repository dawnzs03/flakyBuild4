@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-163118=true";
	property osgi.modules.includes = "site-initializer-testray";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Testray";

	var buildName = "Build 1";
	var caseName = "Case 1";
	var caseResultName = "case result 1";
	var caseType = "Case Type 1";
	var componentName = "Component 1";
	var environmentFactorsName = "Environment Factors 1";
	var productVersion = "1.2";
	var projectName = "Project 1";
	var routineName = "Routine 1";
	var teamName = "Team 1";
	var runName = "Option 1";
	var testSiteName = "Testray 2";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Testray Site") {
			HeadlessSite.addSite(
				siteName = ${testSiteName},
				templateName = "Testray",
				templateType = "Site Initializer");
		}

		task ("create project, routine, team, component, case, case type, enviroment factor, build, category, option, run and case result via API") {
			JSONTestray.addProject(
				projectDescription = "Project Description 1",
				projectName = ${projectName});

			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addComponent(
				componentName = ${componentName},
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addRoutine(
				projectName = ${projectName},
				routineName = ${routineName});

			JSONTestray.addCaseType(caseType = ${caseType});

			JSONTestray.addCases(
				caseName = ${caseName},
				caseType = ${caseType},
				componentName = ${componentName},
				projectName = ${projectName});

			JSONTestray.addEnvironmentFactors(environmentFactorsName = ${environmentFactorsName});

			JSONTestray.addProductVersion(
				productVersion = ${productVersion},
				projectName = ${projectName});

			JSONTestray.addBuild(
				buildName = ${buildName},
				productVersion = ${productVersion},
				projectName = ${projectName},
				routineName = ${routineName});

			JSONTestray.addRun(
				buildName = ${buildName},
				runName = ${runName});

			JSONTestray.addCaseResult(
				buildName = ${buildName},
				caseName = ${caseName},
				caseResultName = ${caseResultName},
				componentName = ${componentName},
				runName = ${runName});
		}

		task ("Go to Testray 2 and change the pagination") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(quantity = 150);
		}
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		task ("Delete case type, factor category and project via API, Testray Site and Client Extensions") {
			JSONTestrayAPI.deleteObjectViaAPI(
				object = "casetypes",
				objectName = ${caseType});

			JSONTestrayAPI.deleteObjectViaAPI(
				object = "factorcategories",
				objectName = "Category 1");

			JSONTestrayAPI.deleteProject(projectName = ${projectName});

			Testray.testrayApisTearDown();
		}

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Story ID: LPS-157164 | Test Summary: Verify if as an Administrator I am able to Assign Tests directly to me through the context menu"
	@priority = 3
	test AdminCanAssignTestsDirectlyThroughTheContextMenu {
		task ("Given that the user goes to the case results") {
			Testray.clickTableEntry(tableEntry = ${projectName});

			Testray.clickTableEntry(tableEntry = ${routineName});

			Testray.clickTableEntry(tableEntry = ${buildName});
		}

		task ("When the user assigns himself a case results") {
			TestrayManage.selectTableRowOption(
				rowOption = "Assign to Me",
				tableEntry = ${caseName});
		}

		task ("Then the user name appears") {
			TestrayTestflow.userAvatarPresent();
		}
	}

	@description = "Story ID: LPS-157164 | Test Summary: Verify if as an Administrator I am able to Delete Results"
	@priority = 5
	test AdminCanDeleteResults {
		task ("Given that the user goes to the case results") {
			Testray.clickTableEntry(tableEntry = ${projectName});

			Testray.clickTableEntry(tableEntry = ${routineName});

			Testray.clickTableEntry(tableEntry = ${buildName});
		}

		task ("When the user delete a case results") {
			Testray.deleteItem(itemName = ${caseName});
		}

		task ("Then the Case Results should not be displayed anymore") {
			Testray.viewTableEntryListNotPresent(listEntry = ${caseName});
		}
	}

	@description = "Story ID: LPS-157164 | Test Summary: Verify if as an Administrator I am able to execute Tests and mark them as Failed"
	@priority = 4
	test AdminCanExecuteTestsAndMarkThemAsFailed {
		task ("Given that the user goes to the case results") {
			Testray.clickTableEntry(tableEntry = ${projectName});

			Testray.clickTableEntry(tableEntry = ${routineName});

			Testray.clickTableEntry(tableEntry = ${buildName});
		}

		task ("And the user assigns the results of a case") {
			TestrayTestflow.assignUsers(
				rowOption = "Assign",
				tableEntry = ${caseName},
				userName = "Test Test");

			Testray.clickTableEntry(tableEntry = ${caseName});
		}

		task ("When editing the test as Failed") {
			TestrayTestflow.editStatus(
				button = "Complete Test",
				issues = "LPS-111111",
				selectStatus = "Failed");
		}

		task ("Then the Failed status appears in the list") {
			TestrayTestflow.assertStatus(
				label = "Test Details",
				status = "Failed");
		}
	}

	@description = "Story ID: LPS-157164 | Test Summary: Verify if as an Administrator I am able to Quick Edit Tests"
	@priority = 4
	test AdminCanQuickEditTests {
		task ("Given that the user goes to the case results") {
			Testray.clickTableEntry(tableEntry = ${projectName});

			Testray.clickTableEntry(tableEntry = ${routineName});

			Testray.clickTableEntry(tableEntry = ${buildName});

			Testray.clickTableEntry(tableEntry = ${caseName});
		}

		task ("And the user assigns the results of a case") {
			Button.click(button = "Assign to Me");
		}

		task ("When editing the test as Test Fix") {
			TestrayTestflow.editStatus(
				button = "Complete Test",
				comment = "button does not work",
				issues = "LPS-111111",
				selectStatus = "Test Fix");
		}

		task ("Then the Test Fix status appears in the list") {
			TestrayTestflow.assertStatus(
				label = "Test Details",
				status = "Test Fix");
		}
	}

	@description = "Story ID: LPS-157164 | Test Summary: Verify if as an Administrator I am able to Reopen Tests"
	@priority = 3
	test AdminCanReopenTests {
		task ("Given that the user goes to the case results") {
			Testray.clickTableEntry(tableEntry = ${projectName});

			Testray.clickTableEntry(tableEntry = ${routineName});

			Testray.clickTableEntry(tableEntry = ${buildName});

			Testray.clickTableEntry(tableEntry = ${caseName});
		}

		task ("And the user assigns the results of a case") {
			TestrayTestflow.assignUsers(
				assignButton = "Assign",
				userName = "Test Test");
		}

		task ("And the user edit test as Blocked") {
			TestrayTestflow.editStatus(
				button = "Complete Test",
				comment = "button does not work",
				issues = "LPS-111111",
				selectStatus = "Blocked");
		}

		task ("When the user reopen test") {
			Button.click(button = "Reopen Test");
		}

		task ("Then the in progress status appears in the list") {
			TestrayTestflow.assertStatus(
				label = "Test Details",
				status = "In Progress");
		}
	}

	@description = "Story ID: LPS-157164 | Test Summary: Verify if as an Administrator I am able to reset Tests"
	@priority = 4
	test AdminCanResetTests {
		task ("Given that the user goes to the case results") {
			Testray.clickTableEntry(tableEntry = ${projectName});

			Testray.clickTableEntry(tableEntry = ${routineName});

			Testray.clickTableEntry(tableEntry = ${buildName});

			Testray.clickTableEntry(tableEntry = ${caseName});
		}

		task ("And the user assigns the results of a case") {
			Button.click(button = "Assign to Me");
		}

		task ("When the user reset test") {
			Button.click(button = "Reset Test");
		}

		task ("Then the Untested status appears in the list") {
			TestrayTestflow.assertStatus(
				label = "Test Details",
				status = "Untested");
		}
	}

	@description = "Story ID: LPS-170820 | Test Summary: Verify that, as an Administrator, I should be able to see all the Problem Lists in the tables"
	@priority = 4
	test AdminCanSeeIssuesInAllTables {
		task ("Given that the user goes to the case results") {
			Testray.clickTableEntry(tableEntry = ${projectName});

			Testray.clickTableEntry(tableEntry = ${routineName});

			Testray.clickTableEntry(tableEntry = ${buildName});
		}

		task ("And the user assigns the results of a case") {
			TestrayTestflow.assignUsers(
				rowOption = "Assign",
				tableEntry = ${caseName},
				userName = "Test Test");
		}

		task ("When the user edit test as Failed with issue") {
			Testray.clickTableEntry(tableEntry = ${caseName});

			TestrayTestflow.editStatus(
				button = "Complete Test",
				issues = "LPS-111222",
				selectStatus = "Failed");
		}

		task ("Then the issue appears in the table in case result") {
			TestrayResults.assertIssue(
				issue = "LPS-111222",
				label = "Dates");
		}

		task ("And the issue appears in the table in case history") {
			Navigator.gotoNavTab(navTab = "History");

			TestrayResults.assertIssue(
				issue = "LPS-111222",
				label = "Test History");
		}

		task ("And the issue appears in the table in build history") {
			Testray.clickBreadcrumb(text = "Build 1");

			TestrayResults.assertIssue(
				issue = "LPS-111222",
				label = "Details");

			TestrayResults.assertIssue(
				issue = "LPS-111222",
				label = "Tests");
		}

		task ("And the issue appears in the table in test history") {
			Testray.clickTableEntry(tableEntry = ${caseName});

			Click(
				key_text = "View Case",
				locator1 = "Link#ANY");

			TestrayResults.assertIssue(
				issue = "LPS-111222",
				label = "Details");

			TestrayResults.assertIssue(
				issue = "LPS-111222",
				label = "Test History");
		}
	}

	@description = "Story ID: LPS-157164 | Test Summary: Verify if as an Administrator I am able to Unassign Tests"
	@priority = 3
	test AdminCanUnassignTests {
		task ("Given that the user goes to the case results") {
			Testray.clickTableEntry(tableEntry = ${projectName});

			Testray.clickTableEntry(tableEntry = ${routineName});

			Testray.clickTableEntry(tableEntry = ${buildName});

			Testray.clickTableEntry(tableEntry = ${caseName});
		}

		task ("And the user assigns the results of a case") {
			Button.click(button = "Assign to Me");
		}

		task ("And the user edit test as Failed") {
			TestrayTestflow.editStatus(
				button = "Complete Test",
				issues = "LPS-111222",
				selectStatus = "Failed");
		}

		task ("When the user unassigns himself a case results") {
			Button.click(button = "Unassign Myself");
		}

		task ("Then the user name does not appears in the list") {
			TestrayTestflow.userAvatarNotPresent();
		}
	}

	@description = "Story ID: LPS-157164 | Test Summary: Verify if as an Administrator I am able to Unassign Tests through the context menu"
	@priority = 2
	test AdminCanUnassignTestsThroughTheContextMenu {
		task ("Given that the user goes to the case results") {
			Testray.clickTableEntry(tableEntry = ${projectName});

			Testray.clickTableEntry(tableEntry = ${routineName});

			Testray.clickTableEntry(tableEntry = ${buildName});
		}

		task ("And the user assigns the results of a case") {
			TestrayManage.selectTableRowOption(
				rowOption = "Assign to Me",
				tableEntry = ${caseName});
		}

		task ("When the user unassigns himself a case results by context menu") {
			TestrayManage.selectTableRowOption(
				rowOption = "Unassign Myself",
				tableEntry = ${caseName});
		}

		task ("Then the user name does not appears in the list") {
			TestrayTestflow.userAvatarNotPresent();
		}
	}

	@description = "Story ID: LPS-157164 | Test Summary: Verify if as an Administrator I am able to verify the accuracy of the Case Result Metrics Card"
	@priority = 4
	test AdminCanVerifyTheAccuracyOfTheCaseResultMetricsCard {
		task ("Given that the user goes to the case results") {
			Testray.clickTableEntry(tableEntry = ${projectName});

			Testray.clickTableEntry(tableEntry = ${routineName});

			Testray.clickTableEntry(tableEntry = ${buildName});
		}

		task ("Then can view the total test in case results metrics") {
			TestrayResults.assertGraphValue(number = 1);
		}
	}

	@description = "Story ID: LPS-157164 | Test Summary: Verify if as an Administrator I am able to view Results grouped by Component"
	@priority = 3
	test AdminCanViewResultsGroupedByComponent {
		task ("Given that the user goes to the case results page") {
			Testray.clickTableEntry(tableEntry = ${projectName});

			Testray.clickTableEntry(tableEntry = ${routineName});

			Testray.clickTableEntry(tableEntry = ${buildName});
		}

		task ("When the user goes to the 'components' tab") {
			Navigator.gotoNavTab(navTab = "Components");

			ScrollWebElementIntoView(
				key_tableEntry = ${componentName},
				locator1 = "Testray#TABLE_ENTRY");

			Testray.changePagination(quantity = 150);
		}

		task ("The user sees the results grouped by component") {
			Testray.viewTableEntryList(listEntry = ${componentName});
		}
	}

	@description = "Story ID: LPS-157164 | Test Summary: Verify if as an Administrator I am able to view Results grouped by Team"
	@priority = 3
	test AdminCanViewResultsGroupedByTeam {
		task ("Given that the user goes to the case results") {
			Testray.clickTableEntry(tableEntry = ${projectName});

			Testray.clickTableEntry(tableEntry = ${routineName});

			Testray.clickTableEntry(tableEntry = ${buildName});
		}

		task ("When the user goes to the 'teams' tab") {
			Navigator.gotoNavTab(navTab = "Teams");

			Testray.changePagination(quantity = 150);
		}

		task ("The user sees the results grouped by team") {
			Testray.viewTableEntryList(listEntry = ${teamName});
		}
	}

}