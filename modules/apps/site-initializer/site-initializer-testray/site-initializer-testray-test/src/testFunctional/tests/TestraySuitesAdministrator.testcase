@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-163118=true";
	property osgi.modules.includes = "site-initializer-testray";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Testray";

	var caseName = "Case 1";
	var caseType = "Case Type 1";
	var componentName = "Component 1";
	var projectName = "Project 1";
	var suiteName = "Suite 1";
	var teamName = "Team 1";
	var testSiteName = "Testray 2";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Testray Site") {
			HeadlessSite.addSite(
				siteName = ${testSiteName},
				templateName = "Testray",
				templateType = "Site Initializer");
		}

		task ("Given that a Testray project are created via API") {
			JSONTestray.addProject(
				projectDescription = "Project Description 1",
				projectName = ${projectName});
		}
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		task ("Delete project via API, Testray Site and Client Extensions") {
			JSONTestrayAPI.deleteProject(projectName = ${projectName});

			Testray.testrayApisTearDown();
		}

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Story ID: LPS-159467 | Test Summary: Verify that as an Administrator I can delete a smart suite"
	@priority = 5
	test AdminCanDeleteSmartSuite {
		task ("Given that I add a new Testray component and requirement") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(quantity = 150);

			TestrayManage.selectTableRowOption(
				rowOption = "Manage Components",
				tableEntry = ${projectName});

			TestrayManage.createComponent(componentName = "Component 1");

			Testray.closeModal(modalTitle = "Components - Project 1");

			Testray.clickTableEntry(tableEntry = ${projectName});

			Navigator.gotoNavTab(navTab = "Requirements");

			TestrayRequirements.addRequirement(
				componentId = "Component 1",
				linkTitle = "Requirement Link Title",
				linkURL = "https://www.google.com",
				requirementDescription = "Requirement Description",
				requirementName = "Requirement Summary");
		}

		task ("And I add a smart suite") {
			Navigator.gotoNavTab(navTab = "Suites");

			TestraySuites.addSuite(
				caseType = "Manual Test",
				mainComponent = "Component 1",
				priorityNumber = 3,
				smartSuite = "true",
				suiteDescription = "Suite Description",
				suiteName = ${suiteName});
		}

		task ("When the smart suite is deleted") {
			Testray.deleteItem(itemName = ${suiteName});
		}

		task ("Then I should be able to assert that the suite is no longer shown") {
			Testray.viewTableEntryListNotPresent(listEntry = ${suiteName});
		}
	}

	@description = "Story ID: LPS-159467 | Test Summary: Verify if as an Administrator I am able delete a suite"
	@priority = 5
	test AdminCanDeleteSuite {
		task ("Given that I add a new Testray Suite via API") {
			JSONTestray.addSuite(suiteName = ${suiteName});
		}

		task ("And I go to the Testray Suite page") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(quantity = 150);

			Testray.clickTableEntry(tableEntry = ${projectName});

			Navigator.gotoNavTab(navTab = "Suites");
		}

		task ("When I delete the newly created suite") {
			Testray.deleteItem(itemName = ${suiteName});
		}

		task ("Then I should be able to assert that the Testray Suite is no longer displayed") {
			Testray.viewTableEntryListNotPresent(listEntry = ${suiteName});
		}
	}

	@description = "Story ID: LPS-159467 | Test Summary: Verify if as an Administrator I am able to design Suites"
	@priority = 4
	test AdminCanDesignSuite {
		task ("Given that a Testray team, component, case type and case are created via API") {
			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addComponent(
				componentName = ${componentName},
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addCaseType(caseType = ${caseType});

			JSONTestray.addCases(
				caseName = ${caseName},
				caseType = ${caseType},
				componentName = ${componentName},
				projectName = ${projectName});
		}

		task ("And I go to the Testray Suite page") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(quantity = 150);

			Testray.clickTableEntry(tableEntry = ${projectName});

			Navigator.gotoNavTab(navTab = "Suites");
		}

		task ("When I add a Testray Suite with a Case") {
			TestraySuites.addSuite(
				caseList = ${caseName},
				suiteDescription = "Suite Description",
				suiteName = ${suiteName});
		}

		task ("Then I should be able to assert that the selected case is displayed in the suite details") {
			Testray.clickTableEntry(tableEntry = ${suiteName});

			Testray.viewTableEntryList(listEntry = ${caseName});
		}

		task ("Delete the case type") {
			JSONTestrayAPI.deleteObjectViaAPI(
				object = "casetypes",
				objectName = ${caseType});
		}
	}

	@description = "Story ID: LPS-159467 | Test Summary: Verify that as an Administrator I can edit and update a smart suite"
	@priority = 5
	test AdminCanEditSmartSuite {
		task ("Given that I add a new Testray component and requirement") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(quantity = 150);

			TestrayManage.selectTableRowOption(
				rowOption = "Manage Teams",
				tableEntry = ${projectName});

			TestrayManage.createTeam(teamName = ${teamName});

			Testray.closeModal(modalTitle = "Teams - Project 1");

			TestrayManage.selectTableRowOption(
				rowOption = "Manage Components",
				tableEntry = ${projectName});

			TestrayManage.createComponent(
				componentName = "Component 1",
				teamName = ${teamName});

			Testray.closeModal(modalTitle = "Components - Project 1");

			Testray.clickTableEntry(tableEntry = ${projectName});

			Navigator.gotoNavTab(navTab = "Requirements");

			TestrayRequirements.addRequirement(
				componentId = "Component 1",
				linkTitle = "Requirement Link Title",
				linkURL = "https://www.google.com",
				requirementDescription = "Requirement Description",
				requirementName = "Requirement Summary");
		}

		task ("And I add a smart suite") {
			Navigator.gotoNavTab(navTab = "Suites");

			TestraySuites.addSuite(
				caseType = "Manual Test",
				mainComponent = "Component 1",
				priorityNumber = 3,
				smartSuite = "true",
				subComponent = "Component 1",
				suiteDescription = "Suite Description",
				suiteName = ${suiteName},
				teamName = ${teamName});
		}

		task ("When the user edits the created smart suite") {
			TestraySuites.editSmartSuite(
				caseType = "Cucumber",
				priorityNumber = 5,
				requirementName = "Requirement Summary",
				smartSuite = "true",
				suiteDescription = "Suite Description Edited",
				tableEntry = ${suiteName});
		}

		task ("Then the case parameters are presented with details edited") {
			Testray.clickTableEntry(tableEntry = ${suiteName});

			TestraySuites.verifyCaseParametersInSuite(
				caseType = "Manual Test, Cucumber",
				components = "Component 1",
				priority = "3, 5",
				requirements = "Requirement Summary",
				subComponents = "Component 1");
		}
	}

	@description = "Story ID: LPS-159467 | Test Summary: Verify if as an Administrator I am able to edit suites"
	@priority = 5
	test AdminCanEditSuite {
		task ("Given that I add a new suite") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(quantity = 150);

			Testray.clickTableEntry(tableEntry = ${projectName});

			Navigator.gotoNavTab(navTab = "Suites");

			TestraySuites.addSuite(
				suiteDescription = "Suite Description",
				suiteName = ${suiteName});
		}

		task ("When I edit the newly created suite") {
			TestrayManage.selectTableRowOption(
				rowOption = "Edit",
				tableEntry = ${suiteName});

			TestraySuites.editSuite(
				newDescription = "Suite Description Edited",
				newName = "Suite Edited");
		}

		task ("Then I should be able to assert the new information") {
			Testray.viewTableEntryList(listEntry = "Suite Description Edited,Suite Edited,Static");
		}
	}

	@description = "Story ID: LPS-159467 | Test Summary: Verify if as an Administrator I should not be able to add a duplicate Suites"
	@priority = 3
	test AdminCanNotAddDuplicateSuites {
		task ("Given that I add a new Testray Suite via API") {
			JSONTestray.addSuite(suiteName = ${suiteName});
		}

		task ("And I go to the Testray Suite page") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(quantity = 150);

			Testray.clickTableEntry(tableEntry = ${projectName});

			Navigator.gotoNavTab(navTab = "Suites");
		}

		task ("When I try to add an existing Suite") {
			TestraySuites.addSuite(
				suiteDescription = "Suite Description",
				suiteName = ${suiteName});
		}

		task ("Then I should be able to assert the error message") {
			Alert.viewErrorMessage(errorMessage = "The Suite name already exists");
		}
	}

	@description = "Story ID: LPS-177839 | Test Summary: Verify if as an Administrator when I search for a Suite that does not exist the system should not return that suite"
	@priority = 3
	test AdminCanNotSearchSuiteNonExistent {
		task ("Given that suite are created via API") {
			JSONTestray.addSuite(suiteName = ${suiteName});
		}

		task ("And go to the suite page") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(quantity = 150);

			Testray.clickTableEntry(tableEntry = ${projectName});

			Navigator.gotoNavTab(navTab = "Suites");
		}

		task ("When the user search suite non existent") {
			TestrayFilter.filterResults(
				fieldType = "input",
				inputFieldLabel = "Suite Name",
				inputValue = "Suite 3");
		}

		task ("Then not see the suite 3 in the table") {
			Testray.viewTableEntryListNotPresent(listEntry = "Suite 3");
		}
	}

	@description = "Story ID: LPS-177839 | Test Summary: Verify if as an Administrator when I search for a Suite the system should return that suite"
	@priority = 4
	test AdminCanSearchSuite {
		task ("Given that two suite are created via API") {
			JSONTestray.addSuite(suiteName = ${suiteName});

			JSONTestray.addSuite(suiteName = "Suite 2");
		}

		task ("And go to the tab suite") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(quantity = 150);

			Testray.clickTableEntry(tableEntry = ${projectName});

			Navigator.gotoNavTab(navTab = "Suites");
		}

		task ("And confirm that there are two suites in the table") {
			Testray.viewTableEntryList(listEntry = "${suiteName},Suite 2");
		}

		task ("When the user filter suite 1") {
			TestrayFilter.filterResults(
				fieldType = "input",
				inputFieldLabel = "Suite Name",
				inputValue = ${suiteName});
		}

		task ("Then the user see only suite 1 in the table") {
			Testray.viewTableEntryList(listEntry = ${suiteName});
		}

		task ("And do not see the suite 2 in the table") {
			Testray.viewTableEntryListNotPresent(listEntry = "Suite 2");
		}
	}

	@description = "Story ID: LPS-159467 | Test Summary: Verify that the user can not create a suite if all the required fields are not filled in"
	@priority = 2
	test AdminCanViewRequiredField {
		task ("Given I go to the Testray Suite page") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(quantity = 150);

			Testray.clickTableEntry(tableEntry = ${projectName});

			Navigator.gotoNavTab(navTab = "Suites");
		}

		task ("When I try to add an untitled Testray Suite") {
			TestraySuites.addSuite();
		}

		task ("Then I should be able to assert the error message") {
			Testray.viewErrorMessage(
				fieldLabel = "Name",
				warningMessage = "name is a required field");
		}
	}

}