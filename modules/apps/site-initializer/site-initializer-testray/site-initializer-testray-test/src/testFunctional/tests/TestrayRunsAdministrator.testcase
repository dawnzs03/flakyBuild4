@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-163118=true";
	property osgi.modules.includes = "site-initializer-testray";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Testray";

	var buildName = "Build 1";
	var caseName = "Case 1";
	var caseType = "Case Type 1";
	var componentName = "Component 1";
	var environmentFactorsName = "Environment Factors 1";
	var productVersion = "1.2";
	var projectName = "Project 1";
	var routineName = "Routine 1";
	var runName = "Option 1";
	var teamName = "Team 1";
	var testSiteName = "Testray 2";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Testray Site") {
			HeadlessSite.addSite(
				siteName = ${testSiteName},
				templateName = "Testray",
				templateType = "Site Initializer");
		}

		task ("Create project, team, component, routine, case type, case, environment factor, product version and build via API") {
			JSONTestray.addProject(
				projectDescription = "Project Description 1",
				projectName = ${projectName});

			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addComponent(
				componentName = ${componentName},
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addRoutine(
				projectName = ${projectName},
				routineName = ${routineName});

			JSONTestray.addCaseType(caseType = ${caseType});

			JSONTestray.addCases(
				caseName = ${caseName},
				caseType = ${caseType},
				componentName = ${componentName},
				projectName = ${projectName});

			JSONTestray.addEnvironmentFactors(environmentFactorsName = ${environmentFactorsName});

			JSONTestray.addProductVersion(
				productVersion = ${productVersion},
				projectName = ${projectName});

			JSONTestray.addBuild(
				buildName = ${buildName},
				productVersion = ${productVersion},
				projectName = ${projectName},
				routineName = ${routineName});
		}

		task ("Then I go to Site Testray 2") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(quantity = 150);
		}
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		task ("Delete case type, factor category and project via API, Testray Site and Client Extensions") {
			JSONTestrayAPI.deleteObjectViaAPI(
				object = "casetypes",
				objectName = ${caseType});

			JSONTestrayAPI.deleteObjectViaAPI(
				object = "factorcategories",
				objectName = "Category 1");

			JSONTestrayAPI.deleteProject(projectName = ${projectName});

			Testray.testrayApisTearDown();
		}

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Story ID: LPS-162434 | Test Summary: Verify if as an Administrator I should be able to add and delete a Run"
	@priority = 5
	test AdminCanAddAndDeleteRun {
		task ("Given that I go to the run page") {
			Testray.clickTableEntry(tableEntry = ${projectName});

			Testray.clickTableEntry(tableEntry = ${routineName});

			Testray.clickTableEntry(tableEntry = ${buildName});

			Navigator.gotoNavTab(navTab = "Runs");
		}

		task ("And create a run") {
			TestrayRun.addRun(
				categoryField = "Category 1",
				listOption = ${runName});
		}

		task ("When I delete a run") {
			Testray.deleteItem(itemName = ${runName});
		}

		task ("Then I should be assert to say that the run no longer appears in the list") {
			Testray.viewTableEntryListNotPresent(listEntry = ${runName});
		}
	}

	@description = "Story ID: LPS-162434 | Test Summary: Verify if as an Administrator I should be able to edit a Run"
	@priority = 5
	test AdminCanEditRun {
		task ("Given that a category and options is created") {
			TestrayDropdown.selectOptionSidebar(
				buttonOption = "Manage",
				menuItem = "Categories");

			TestrayManage.createNewCategory(category = "Category 2");

			TestrayDropdown.selectOptionSidebar(
				buttonOption = "Manage",
				menuItem = "Options");

			TestrayManage.createNewOption(
				category = "Category 1",
				option = "Option 2");

			TestrayManage.createNewOption(
				category = "Category 2",
				option = "Option 3");

			Testray.closeModal(modalTitle = "Options");
		}

		task ("And I create the build") {
			Testray.clickTableEntry(tableEntry = ${projectName});

			Testray.clickTableEntry(tableEntry = ${routineName});

			Testray.kebabMenuOption(kebabOption = "Select Default Environment Factors");

			Testray.selectDefaultEnvironmentFactors(
				arrowDirection = "Right",
				firstOption = "Option 1",
				listCategory = "Category 2",
				secondOption = "Option 3");

			TestrayBuild.addBuildViaUI(
				buildFieldName = "Build 2",
				caseList = ${caseName},
				dropdownItem = "New Build",
				productVersionOption = ${productVersion},
				routine = ${routineName});
		}

		task ("And I go to the run page") {
			Testray.clickTableEntry(tableEntry = "Build 2");

			Navigator.gotoNavTab(navTab = "Runs");

			Testray.viewTableEntryList(listEntry = ${runName});
		}

		task ("When I edit a run") {
			TestrayRun.editRun(
				firstOption = "Option 2",
				tableEntry = ${runName});
		}

		task ("Then I should be assert to say that the option has been edited") {
			Testray.viewTableEntryList(listEntry = "Option 2");
		}

		task ("Delete the object") {
			JSONTestrayAPI.deleteObjectViaAPI(
				object = "factorcategories",
				objectName = "Category 2");
		}
	}

	@description = "Story ID: LPS-162434 | Test Summary: Verify if as an Administrator I should not be able to add a duplicate run"
	@ignore = "true"
	@priority = 5
	test AdminCanNotAddDuplicateRun {

		// TODO LPS-160591 AdminCanNotAddDuplicateRun pending implementation

	}

	@description = "Story ID: LPS-162434 | Test Summary: Verify if as an administrator I should not be allowed to add runs with identical environments"
	@ignore = "true"
	@priority = 4
	test AdminCanNotAddRunWithIdenticalEnvironments {

		// TODO LPS-160592 AdminCanNotAddRunWithIdenticalEnvironments pending implementation

	}

}