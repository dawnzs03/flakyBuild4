@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-163118=true";
	property osgi.modules.includes = "site-initializer-testray";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Testray";

	var buildName = "Build 1";
	var caseName = "Case 1";
	var caseResultName = "case result 1";
	var caseType = "Case Type 1";
	var componentName = "Component 1";
	var environmentFactorsName = "Environment Factors 1";
	var productVersion = "1.2";
	var projectName = "Project 1";
	var routineName = "Routine 1";
	var runName = "Option 1";
	var teamName = "Team 1";
	var testSiteName = "Testray 2";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Testray Site") {
			HeadlessSite.addSite(
				siteName = ${testSiteName},
				templateName = "Testray",
				templateType = "Site Initializer");
		}

		task ("create project, routine, team, component, case, case type, enviroment factor, product version, build, category, option, run and case result via API") {
			JSONTestray.addProject(
				projectDescription = "Project Description 1",
				projectName = ${projectName});

			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = "Team 1");

			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = "Team 2");

			JSONTestray.addComponent(
				componentName = ${componentName},
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addRoutine(
				projectName = ${projectName},
				routineName = "Routine 1");

			JSONTestray.addCaseType(caseType = ${caseType});

			JSONTestray.addCases(
				caseName = "Case 1",
				caseType = "Case Type 1",
				componentName = ${componentName},
				projectName = ${projectName});

			JSONTestray.addCases(
				caseName = "Case 2",
				caseType = "Case Type 1",
				componentName = ${componentName},
				priority = 5,
				projectName = ${projectName});

			JSONTestray.addEnvironmentFactors(environmentFactorsName = ${environmentFactorsName});

			JSONTestray.addProductVersion(
				productVersion = "7.0",
				projectName = ${projectName});

			JSONTestray.addProductVersion(
				productVersion = "1.2",
				projectName = ${projectName});

			JSONTestray.addBuild(
				buildName = "Build 1",
				productVersion = "7.0",
				projectName = ${projectName},
				routineName = "Routine 1");

			JSONTestray.addRun(
				buildName = "Build 1",
				runName = "Run 1");

			JSONTestray.addRun(
				buildName = "Build 1",
				runName = "Run 2");

			JSONTestray.addCaseResult(
				buildName = "Build 1",
				caseName = "Case 1",
				caseResultName = "case result 1",
				componentName = ${componentName},
				runName = "Run 1");

			JSONTestray.addCaseResult(
				buildName = "Build 1",
				caseName = "Case 2",
				caseResultName = "case result 2",
				componentName = ${componentName},
				runName = "Run 2");
		}

		task ("Go to the build page") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(quantity = 150);

			Testray.clickTableEntry(tableEntry = ${projectName});

			Testray.clickTableEntry(tableEntry = ${routineName});

			Testray.clickTableEntry(tableEntry = ${buildName});
		}
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		task ("Delete product version, routine, case type, factor categorie and project via API, Testray Site and Client Extensions") {
			JSONTestrayAPI.deleteObjectViaAPI(
				object = "productversions",
				objectName = "1.2");

			JSONTestrayAPI.deleteObjectViaAPI(
				object = "productversions",
				objectName = "7.0");

			JSONTestrayAPI.deleteObjectViaAPI(
				object = "routines",
				objectName = "Routine 1");

			JSONTestrayAPI.deleteObjectViaAPI(
				object = "casetypes",
				objectName = "Case Type 1");

			JSONTestrayAPI.deleteObjectViaAPI(
				object = "factorcategories",
				objectName = "Category 1");

			JSONTestrayAPI.deleteProject(projectName = ${projectName});

			Testray.testrayApisTearDown();
		}

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Story ID: LPS-162623 | Test Summary: Verify if as an Administrator I am able to filter the cases Tab in a Run Comparison Result by case name"
	@priority = 3
	test AdminCanFilterCasesTabInRunComparisonResultByCaseName {
		task ("Given that the user select two runs for compare runs") {
			Navigator.gotoNavTab(navTab = "Runs");

			TestrayManage.selectTableRowOption(
				rowOption = "Select Run A",
				tableEntry = "Run 1");

			TestrayManage.selectTableRowOption(
				rowOption = "Select Run B",
				tableEntry = "Run 2");

			TestrayCompareRuns.goToCompareRuns(button = "Compare Runs");

			Navigator.gotoNavTab(navTab = "Cases");
		}

		task ("And that the user has two cases different in the table") {
			Testray.viewTableEntryList(listEntry = "Case 1,Case 2");
		}

		task ("When the user filter a compare runs by case name") {
			TestrayFilter.filterResults(
				fieldType = "input",
				inputFieldLabel = "Case Name",
				inputValue = "Case 1");
		}

		task ("Then the user see case 1 in the table") {
			Testray.viewTableEntryList(listEntry = "Case 1");
		}

		task ("And do not see case 2 in the table") {
			Testray.viewTableEntryListNotPresent(listEntry = "Case 2");
		}
	}

	@description = "Story ID: LPS-162623 | Test Summary: Verify if as an Administrator I am able to filter the cases Tab in a Run Comparison Result by priority"
	@priority = 3
	test AdminCanFilterDetailsTabInRunComparisonResultByPriority {
		task ("Given that the user select two runs for compare runs") {
			Navigator.gotoNavTab(navTab = "Runs");

			TestrayManage.selectTableRowOption(
				rowOption = "Select Run A",
				tableEntry = "Run 1");

			TestrayManage.selectTableRowOption(
				rowOption = "Select Run B",
				tableEntry = "Run 2");
		}

		task ("And that the user has two priority different in the table") {
			TestrayCompareRuns.goToCompareRuns(button = "Compare Runs");

			Navigator.gotoNavTab(navTab = "Cases");

			Testray.viewTableEntryList(listEntry = "3,5");
		}

		task ("When the user filter a compare runs by priority") {
			TestrayFilter.filterResults(
				fieldType = "select",
				selectFieldLabel = "Priority",
				selectValue = 3);
		}

		task ("Then the user see priority 3 in the table") {
			Testray.viewTableEntryList(listEntry = 3);
		}

		task ("And do not see priority 5 in the table") {
			Testray.viewTableEntryListNotPresent(listEntry = 5);
		}
	}

}