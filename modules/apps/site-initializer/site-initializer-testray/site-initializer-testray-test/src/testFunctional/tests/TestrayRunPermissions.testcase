@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-163118=true";
	property osgi.modules.includes = "site-initializer-testray";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Testray";

	var buildName = "Build 1";
	var caseName = "Case 1";
	var caseType = "Case Type 1";
	var componentName = "Component 1";
	var environmentFactorsName = "Environment Factors 1";
	var productVersion = "1.2";
	var projectName = "Project 1";
	var routineName = "Routine 1";
	var runName = "Option 1";
	var teamName = "Team 1";
	var testSiteName = "Testray 2";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Testray Site") {
			HeadlessSite.addSite(
				siteName = ${testSiteName},
				templateName = "Testray",
				templateType = "Site Initializer");
		}

		task ("Create project, team, component, routine, case type, case, environment factor, product version, build and run via API") {
			JSONTestray.addProject(
				projectDescription = "Project Description 1",
				projectName = ${projectName});

			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addComponent(
				componentName = ${componentName},
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addRoutine(
				projectName = ${projectName},
				routineName = ${routineName});

			JSONTestray.addCaseType(caseType = ${caseType});

			JSONTestray.addCases(
				caseName = ${caseName},
				caseType = ${caseType},
				componentName = ${componentName},
				projectName = ${projectName});

			JSONTestray.addEnvironmentFactors(environmentFactorsName = ${environmentFactorsName});

			JSONTestray.addProductVersion(
				productVersion = ${productVersion},
				projectName = ${projectName});

			JSONTestray.addBuild(
				buildName = ${buildName},
				productVersion = ${productVersion},
				projectName = ${projectName},
				routineName = ${routineName});

			JSONTestray.addRun(
				buildName = ${buildName},
				runName = ${runName});
		}
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		task ("Logout And Login with test user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "test test");
		}

		task ("Delete case type, factor category and project via API, Testray Site and Client Extensions") {
			JSONTestrayAPI.deleteObjectViaAPI(
				object = "casetypes",
				objectName = ${caseType});

			JSONTestrayAPI.deleteObjectViaAPI(
				object = "factorcategories",
				objectName = "Category 1");

			JSONTestrayAPI.deleteProject(projectName = ${projectName});

			Testray.testrayApisTearDown();
		}

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Story ID: LPS-178270 | Test Summary: Verify that the User with the 'Testray Analyst' role should not be able to create the run"
	@priority = 3
	test AssertAnalystRoleCanNotCreateRun {
		task ("Given that the user login with the Testray Analyst role") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "analyst@testray.com",
				userLoginFullName = "Analyst User");

			Navigator.openSiteURL(siteName = "Testray 2");
		}

		task ("When the user go to the run page") {
			Testray.changePagination(quantity = 150);

			Testray.clickTableEntry(tableEntry = ${projectName});

			Testray.clickTableEntry(tableEntry = ${routineName});

			Testray.clickTableEntry(tableEntry = ${buildName});

			Navigator.gotoNavTab(navTab = "Runs");
		}

		task ("Then the user can not create run") {
			AssertElementNotPresent(locator1 = "Button#PLUS");
		}
	}

	@description = "Story ID: LPS-178270 | Test Summary: Verify that the User with the 'Testray Analyst' role should not be able to delete the run"
	@priority = 3
	test AssertAnalystRoleCanNotDeleteRun {
		task ("Given that the user login with the Testray Analyst role") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "analyst@testray.com",
				userLoginFullName = "Analyst User");

			Navigator.openSiteURL(siteName = "Testray 2");
		}

		task ("And the user go to the run page") {
			Testray.changePagination(quantity = 150);

			Testray.clickTableEntry(tableEntry = ${projectName});

			Testray.clickTableEntry(tableEntry = ${routineName});

			Testray.clickTableEntry(tableEntry = ${buildName});

			Navigator.gotoNavTab(navTab = "Runs");
		}

		task ("When right click in run") {
			RightClick.rightClick(
				key_tableEntry = ${runName},
				locator1 = "Testray#TABLE_ENTRY");
		}

		task ("Then the user can not delete the run") {
			MenuItem.viewNotPresent(menuItem = "Delete");
		}
	}

	@description = "Story ID: LPS-178270 | Test Summary: Verify that the User with the 'Testray Analyst' role should not be able to edit the run"
	@priority = 3
	test AssertAnalystRoleCanNotEditRun {
		task ("Given that the user login with the Testray Analyst role") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "analyst@testray.com",
				userLoginFullName = "Analyst User");

			Navigator.openSiteURL(siteName = "Testray 2");
		}

		task ("And the user go to the run page") {
			Testray.changePagination(quantity = 150);

			Testray.clickTableEntry(tableEntry = ${projectName});

			Testray.clickTableEntry(tableEntry = ${routineName});

			Testray.clickTableEntry(tableEntry = ${buildName});

			Navigator.gotoNavTab(navTab = "Runs");
		}

		task ("When right click in run") {
			RightClick.rightClick(
				key_tableEntry = ${runName},
				locator1 = "Testray#TABLE_ENTRY");
		}

		task ("Then the user can not edit the run") {
			MenuItem.viewNotPresent(menuItem = "Select Environment Factors");
		}
	}

	@description = "Story ID: LPS-178270 | Test Summary: Verify that the User with the 'Testray Lead' role should be able to create the run"
	@priority = 4
	test AssertLeadRoleCanCreateRun {
		task ("Given that the user login with the Testray Lead role") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "lead@testray.com",
				userLoginFullName = "Lead User");

			Navigator.openSiteURL(siteName = "Testray 2");
		}

		task ("And the user go to the run page") {
			Testray.changePagination(quantity = 150);

			Testray.clickTableEntry(tableEntry = ${projectName});

			Testray.clickTableEntry(tableEntry = ${routineName});

			Testray.clickTableEntry(tableEntry = ${buildName});

			Navigator.gotoNavTab(navTab = "Runs");
		}

		task ("When the user add a run") {
			TestrayRun.addRun(
				categoryField = "Category 1",
				listOption = ${runName});
		}

		task ("Then can see the run in the table") {
			Testray.viewTableEntryList(listEntry = ${runName});
		}
	}

	@description = "Story ID: LPS-178270 | Test Summary: Verify that the User with the 'Testray Lead' role should be able to delete the run"
	@priority = 4
	test AssertLeadRoleCanDeleteRun {
		task ("Given that the user login with the Testray Lead role") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "lead@testray.com",
				userLoginFullName = "Lead User");

			Navigator.openSiteURL(siteName = "Testray 2");
		}

		task ("And the user go to the run page") {
			Testray.changePagination(quantity = 150);

			Testray.clickTableEntry(tableEntry = ${projectName});

			Testray.clickTableEntry(tableEntry = ${routineName});

			Testray.clickTableEntry(tableEntry = ${buildName});

			Navigator.gotoNavTab(navTab = "Runs");
		}

		task ("When the user delete the run") {
			Testray.deleteItem(itemName = ${runName});
		}

		task ("Then the user can not see the run in the table") {
			Testray.viewTableEntryListNotPresent(listEntry = ${runName});
		}
	}

	@description = "Story ID: LPS-178270 | Test Summary: Verify that the User with the 'Testray User' role should not be able to create the run"
	@priority = 3
	test AssertUserRoleCanNotCreateRun {
		task ("Given that the user login with the Testray User role") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "user@testray.com",
				userLoginFullName = "User User");

			Navigator.openSiteURL(siteName = "Testray 2");
		}

		task ("When the user go to the run page") {
			Testray.changePagination(quantity = 150);

			Testray.clickTableEntry(tableEntry = ${projectName});

			Testray.clickTableEntry(tableEntry = ${routineName});

			Testray.clickTableEntry(tableEntry = ${buildName});

			Navigator.gotoNavTab(navTab = "Runs");
		}

		task ("Then the user can not create run") {
			AssertElementNotPresent(locator1 = "Button#PLUS");
		}
	}

	@description = "Story ID: LPS-178270 | Test Summary: Verify that the User with the 'Testray User' role should not be able to delete the run"
	@priority = 3
	test AssertUserRoleCanNotDeleteRun {
		task ("Given that the user login with the Testray User role") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "user@testray.com",
				userLoginFullName = "User User");

			Navigator.openSiteURL(siteName = "Testray 2");
		}

		task ("And the user go to the run page") {
			Testray.changePagination(quantity = 150);

			Testray.clickTableEntry(tableEntry = ${projectName});

			Testray.clickTableEntry(tableEntry = ${routineName});

			Testray.clickTableEntry(tableEntry = ${buildName});

			Navigator.gotoNavTab(navTab = "Runs");
		}

		task ("When right click in run") {
			RightClick.rightClick(
				key_tableEntry = ${runName},
				locator1 = "Testray#TABLE_ENTRY");
		}

		task ("Then the user can not delete the run") {
			MenuItem.viewNotPresent(menuItem = "Delete");
		}
	}

	@description = "Story ID: LPS-178270 | Test Summary: Verify that the User with the 'Testray User' role should not be able to edit the run"
	@priority = 3
	test AssertUserRoleCanNotEditRun {
		task ("Given that the user login with the Testray User role") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "user@testray.com",
				userLoginFullName = "User User");

			Navigator.openSiteURL(siteName = "Testray 2");
		}

		task ("And the user go to the run page") {
			Testray.changePagination(quantity = 150);

			Testray.clickTableEntry(tableEntry = ${projectName});

			Testray.clickTableEntry(tableEntry = ${routineName});

			Testray.clickTableEntry(tableEntry = ${buildName});

			Navigator.gotoNavTab(navTab = "Runs");
		}

		task ("When right click in run") {
			RightClick.rightClick(
				key_tableEntry = ${runName},
				locator1 = "Testray#TABLE_ENTRY");
		}

		task ("Then the user can not edit the run") {
			MenuItem.viewNotPresent(menuItem = "Select Environment Factors");
		}
	}

}