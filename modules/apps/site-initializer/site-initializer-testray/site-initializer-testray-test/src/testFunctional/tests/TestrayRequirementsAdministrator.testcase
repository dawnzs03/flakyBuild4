@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-163118=true";
	property osgi.modules.includes = "site-initializer-testray";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Testray";

	var caseName = "Case 1";
	var caseType = "Case Type 1";
	var componentName = "Component 1";
	var projectName = "Project 1";
	var requirementName = "Requirement Summary";
	var teamName = "Team 1";
	var testSiteName = "Testray 2";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Testray Site") {
			HeadlessSite.addSite(
				siteName = ${testSiteName},
				templateName = "Testray",
				templateType = "Site Initializer");
		}

		task ("Create project, team, component and case type via API") {
			JSONTestray.addProject(
				projectDescription = "Project Description 1",
				projectName = ${projectName});

			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addComponent(
				componentName = ${componentName},
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addCaseType(caseType = ${caseType});
		}
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		task ("Delete case type and project via API, Testray Site and Client Extensions") {
			JSONTestrayAPI.deleteObjectViaAPI(
				object = "casetypes",
				objectName = ${caseType});

			JSONTestrayAPI.deleteProject(projectName = ${projectName});

			Testray.testrayApisTearDown();
		}

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Story ID: LPS-160751 | Test Summary: Verify if as an Administrator, I should be able to delete Requirements"
	@priority = 5
	test AdminCanDeleteRequirements {
		task ("Given that I create a new 'Requirement' via API") {
			JSONTestray.addRequirement(
				componentName = ${componentName},
				linkTitle = "The front page of the internet",
				projectName = ${projectName},
				requirementName = ${requirementName});
		}

		task ("And I go to the Requirements page") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(quantity = 150);

			Testray.clickTableEntry(tableEntry = ${projectName});

			Navigator.gotoNavTab(navTab = "Requirements");
		}

		task ("When I delete a requirement") {
			Testray.deleteItem(itemName = ${requirementName});
		}

		task ("Then I assert that Requirement is not shown in the list") {
			Testray.viewTableEntryListNotPresent(listEntry = ${requirementName});
		}
	}

	@description = "Story ID: LPS-160751 | Test Summary: Verify if as an Administrator, I should be able to edit Requirements"
	@priority = 5
	test AdminCanEditRequirements {
		task ("Given that a team, component and requirement are created via API") {
			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = "Team 2");

			JSONTestray.addComponent(
				componentName = "Component Edited",
				projectName = ${projectName},
				teamName = "Team 2");

			JSONTestray.addRequirement(
				componentName = ${componentName},
				linkTitle = "The front page of the internet",
				projectName = ${projectName},
				requirementName = ${requirementName});
		}

		task ("And I go to the Requirements page") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(quantity = 150);

			Testray.clickTableEntry(tableEntry = ${projectName});

			Navigator.gotoNavTab(navTab = "Requirements");
		}

		task ("When I edit a requirement") {
			TestrayManage.selectTableRowOption(
				rowOption = "Edit",
				tableEntry = ${requirementName});

			TestrayRequirements.editRequirement(
				componentId = "Component Edited",
				linkTitle = "The page edited",
				linkURL = "https://reddit.com",
				newName = "Requirement Summary Edited");
		}

		task ("Then the requirement is displayed with the new infos") {
			Testray.viewTableEntryList(listEntry = "The page edited,Component Edited,Requirement Summary Edited,Team 2");
		}
	}

	@description = "Story ID: LPS-160751 | Test Summary: Verify if as an Administrator, I should be able to link and unlink a Case to a Requirement"
	@priority = 3
	test AdminCanLinkAndUnlinkCaseToRequirement {
		task ("Given that a case, case type and requirement are created via API") {
			JSONTestray.addCases(
				caseName = ${caseName},
				caseType = ${caseType},
				componentName = ${componentName},
				projectName = ${projectName});

			JSONTestray.addRequirement(
				componentName = ${componentName},
				linkTitle = "The front page of the internet",
				projectName = ${projectName},
				requirementName = ${requirementName});
		}

		task ("And I go to the newly created requirement") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(quantity = 150);

			Testray.clickTableEntry(tableEntry = ${projectName});

			Navigator.gotoNavTab(navTab = "Requirements");

			Testray.clickTableEntry(tableEntry = "Requirement Summary");
		}

		task ("When I link a case to the requirement and assert that it is present") {
			Testray.selectCheckboxOptions(
				buttonText = "Select Cases",
				checkboxNameList = ${caseName},
				linkText = "Link Cases");

			Testray.viewTableEntryList(listEntry = "3,${caseName},${componentName}");
		}

		task ("And I go to requirements and unlink the case") {
			Testray.selectCheckboxOptions(
				buttonText = "Select Cases",
				linkText = "Link Cases",
				uncheckboxNameList = ${caseName});
		}

		task ("Then I assert that the case is not displayed on the Requirements page") {
			Testray.viewTableEntryListNotPresent(listEntry = "3,${caseName},${componentName}");
		}
	}

	@description = "Story ID: LPS-160751 | Test Summary: Verify that the user can not create a requirement if all the required fields are not filled in"
	@priority = 2
	test AdminCanViewRequiredField {
		task ("Given that I go to the requirement page") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(quantity = 150);

			Testray.clickTableEntry(tableEntry = ${projectName});

			Navigator.gotoNavTab(navTab = "Requirements");
		}

		task ("When I try to create a requirement without filling out the required fields") {
			TestrayRequirements.addRequirement();
		}

		task ("Then a required field message appears") {
			Testray.viewErrorMessage(
				fieldLabel = "Summary",
				warningMessage = "summary is a required field");

			Testray.viewErrorMessage(
				fieldLabel = "Link URL",
				warningMessage = "linkURL is a required field");

			Testray.viewErrorMessage(
				fieldLabel = "Link Title",
				warningMessage = "linkTitle is a required field");
		}
	}

}