@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-163118=true";
	property osgi.modules.includes = "site-initializer-testray";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Testray";

	var buildName = "Build 1";
	var caseName = "Case 1";
	var caseResultName = "case result 1";
	var caseType = "Case Type 1";
	var componentName = "Component 1";
	var environmentFactorsName = "Environment Factors 1";
	var productVersion = "1.2";
	var projectName = "Project 1";
	var routineName = "Routine 1";
	var runName = "Option 1";
	var teamName = "Team 1";
	var testSiteName = "Testray 2";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Testray Site") {
			HeadlessSite.addSite(
				siteName = ${testSiteName},
				templateName = "Testray",
				templateType = "Site Initializer");
		}

		task ("create project, routine, team, component, case, case type, enviroment factor, product version, build, category, option, run and case result via API") {
			JSONTestray.addProject(
				projectDescription = "Project Description 1",
				projectName = ${projectName});

			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = "Team 1");

			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = "Team 2");

			JSONTestray.addComponent(
				componentName = ${componentName},
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addRoutine(
				projectName = ${projectName},
				routineName = "Routine 1");

			JSONTestray.addRoutine(
				projectName = ${projectName},
				routineName = "Routine 2");

			JSONTestray.addCaseType(caseType = ${caseType});

			JSONTestray.addCases(
				caseName = "Case 1",
				caseType = ${caseType},
				componentName = ${componentName},
				projectName = ${projectName});

			JSONTestray.addCaseType(caseType = "Case Type 2");

			JSONTestray.addCases(
				caseName = "Case 2",
				caseType = "Case Type 2",
				componentName = ${componentName},
				projectName = ${projectName});

			JSONTestray.addEnvironmentFactors(environmentFactorsName = ${environmentFactorsName});

			JSONTestray.addProductVersion(
				productVersion = "7.0",
				projectName = ${projectName});

			JSONTestray.addProductVersion(
				productVersion = "1.2",
				projectName = ${projectName});

			JSONTestray.addBuild(
				buildName = "Build 1",
				productVersion = "7.0",
				projectName = ${projectName},
				routineName = "Routine 1");

			JSONTestray.addBuild(
				buildName = "Build 2",
				productVersion = "1.2",
				projectName = ${projectName},
				routineName = "Routine 2");

			JSONTestray.addRun(
				buildName = "Build 1",
				runName = "Run 1");

			JSONTestray.addRun(
				buildName = "Build 2",
				runName = "Run 2");

			JSONTestray.addCaseResult(
				buildName = "Build 1",
				caseName = "Case 1",
				caseResultName = "case result 1",
				componentName = ${componentName},
				messageError = "Failed to run on CI",
				runName = "Run 1");

			JSONTestray.addCaseResult(
				buildName = "Build 2",
				caseName = "Case 1",
				caseResultName = "case result 2",
				componentName = ${componentName},
				messageError = "Aborted prior to running test",
				runName = "Run 2");
		}

		task ("Go to build page") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(quantity = 150);

			Testray.clickTableEntry(tableEntry = ${projectName});

			Testray.clickTableEntry(tableEntry = ${routineName});

			Testray.clickTableEntry(tableEntry = ${buildName});
		}
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		task ("Delete product version, routine, case type, factor category and project via API, Testray Site and Client Extensions") {
			JSONTestrayAPI.deleteObjectViaAPI(
				object = "productversions",
				objectName = "1.2");

			JSONTestrayAPI.deleteObjectViaAPI(
				object = "productversions",
				objectName = "7.0");

			JSONTestrayAPI.deleteObjectViaAPI(
				object = "routines",
				objectName = "Routine 1");

			JSONTestrayAPI.deleteObjectViaAPI(
				object = "routines",
				objectName = "Routine 2");

			JSONTestrayAPI.deleteObjectViaAPI(
				object = "casetypes",
				objectName = "Case Type 1");

			JSONTestrayAPI.deleteObjectViaAPI(
				object = "casetypes",
				objectName = "Case Type 2");

			JSONTestrayAPI.deleteObjectViaAPI(
				object = "factorcategories",
				objectName = "Category 1");

			JSONTestrayAPI.deleteProject(projectName = ${projectName});

			Testray.testrayApisTearDown();
		}

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Story ID: LPS-173525 | Test Summary: Verify if as an Administrator I should be able to filter case results by assignee"
	@priority = 3
	test AdminCanFilterByAssignee {
		task ("Given that the user assign to me a case result") {
			Testray.clickTableEntry(tableEntry = "Case 1");

			Button.click(button = "Assign to Me");
		}

		task ("When the user filter a case result by assign") {
			Navigator.gotoNavTab(navTab = "History");

			TestrayFilter.filterResults(
				fieldType = "select",
				selectFieldLabel = "Assignee",
				selectValue = "Test");
		}

		task ("Then the user sees routine 1 that has been assigned to the user") {
			Testray.viewTableEntryList(listEntry = "Routine 1");
		}

		task ("And the user can see user avatar in the table") {
			Navigator.gotoNavTab(navTab = "Result");

			TestrayTestflow.userAvatarPresent();
		}
	}

	@description = "Story ID: LPS-173525 | Test Summary: Verify if as an Administrator I should be able to filter case results by issues"
	@priority = 3
	test AdminCanFilterByIssue {
		task ("Given that the user add a issue in the case result") {
			Testray.clickTableEntry(tableEntry = "Case 1");

			Button.click(button = "Assign to Me");

			TestrayTestflow.editStatus(
				button = "Complete Test",
				comment = "button does not work",
				issues = "LPS-123456",
				selectStatus = "Test Fix");

			Navigator.gotoNavTab(navTab = "History");
		}

		task ("When the user filter a issue") {
			TestrayFilter.filterResults(
				fieldType = "textArea",
				textAreaFieldLabel = "issues",
				textAreaValue = "LPS-123456");
		}

		task ("Then the user can see the issue in the table") {
			Testray.viewTableEntryList(listEntry = "LPS-123456");
		}
	}

	@description = "Story ID: LPS-173525 | Test Summary: Verify if as an Administrator I should be able to filter case results by product version name"
	@priority = 2
	test AdminCanFilterByProductVersionName {
		task ("Given that the user has two product version different in the table") {
			Testray.clickTableEntry(tableEntry = "Case 1");

			Navigator.gotoNavTab(navTab = "History");

			Testray.viewTableEntryList(listEntry = "7.0,1.2");
		}

		task ("When the user filter a product version by name") {
			TestrayFilter.filterResults(
				fieldType = "multiSelect",
				multiSelectFieldLabel = "Product Version Name",
				multiSelectValue = "7.0");
		}

		task ("Then the user see only product version 7.0 in the table") {
			Testray.viewTableEntryList(listEntry = "7.0");
		}

		task ("And do not see the product version 1.2 in the table") {
			Testray.viewTableEntryListNotPresent(listEntry = "1.2");
		}
	}

	@description = "Story ID: LPS-173525 | Test Summary: Verify if as an Administrator I should be able to filter case results by routine"
	@priority = 3
	test AdminCanFilterByRoutine {
		task ("Given that the user has two routine different in the table") {
			Testray.clickTableEntry(tableEntry = "Case 1");

			Navigator.gotoNavTab(navTab = "History");

			Testray.viewTableEntryList(listEntry = "Routine 1,Routine 2");
		}

		task ("When the user select a routine called routine 1 in the filter") {
			TestrayFilter.filterResults(
				fieldType = "select",
				selectFieldLabel = "Routines",
				selectValue = "Routine 1");
		}

		task ("Then the user see only the routine 1 in the table") {
			Testray.viewTableEntryList(listEntry = "Routine 1");
		}

		task ("And do not see Routine 2 in the table") {
			Testray.viewTableEntryListNotPresent(listEntry = "Routine 2");
		}
	}

	@description = "Story ID: LPS-173525 | Test Summary: Verify if as an Administrator I should be able to filter case results by status"
	@priority = 3
	test AdminCanFilterByStatus {
		task ("Given that the user complete a test with passed status") {
			Testray.clickTableEntry(tableEntry = "Case 1");

			Button.click(button = "Assign to Me");

			TestrayTestflow.editStatus(
				button = "Complete Test",
				selectStatus = "Passed");
		}

		task ("When the user filter a case result with passed status") {
			Navigator.gotoNavTab(navTab = "History");

			TestrayFilter.filterResults(
				checkboxFieldLabel = "Status",
				checkboxValue = "Passed",
				fieldType = "checkbox");
		}

		task ("Then the user see passed status in the table") {
			Testray.viewTableEntryList(listEntry = "Passed");
		}
	}

	@description = "Story ID: LPS-173525 | Test Summary: Verify if as an Administrator I should be able to filter case results by environment"
	@priority = 3
	test AdminCanFilterCaseHistoryByEnvironment {
		task ("Given that the user has two enviroments different in the table") {
			Testray.clickTableEntry(tableEntry = "Case 1");

			Navigator.gotoNavTab(navTab = "History");

			Testray.viewTableEntryList(listEntry = "Run 1,Run 2");
		}

		task ("When the user filter a case result by enviroment") {
			TestrayFilter.filterResults(
				fieldType = "input",
				inputFieldLabel = "Environment",
				inputValue = "Run 1");
		}

		task ("Then the user see only the run 1 in the table") {
			Testray.viewTableEntryList(listEntry = "Run 1");
		}

		task ("And do not see run 2 in the table") {
			Testray.viewTableEntryListNotPresent(listEntry = "Run 2");
		}
	}

	@description = "Story ID: LPS-173525 | Test Summary: Verify if as an Administrator I should be able to filter case results by error"
	@priority = 4
	test AdminCanFilterCaseHistoryByError {
		task ("Given that the user has two case result with errors different in the table") {
			Testray.clickTableEntry(tableEntry = "Case 1");

			Navigator.gotoNavTab(navTab = "History");

			Testray.viewTableEntryList(listEntry = "Failed to run on CI,Aborted prior to running test");
		}

		task ("When the user filter the case result by error") {
			TestrayFilter.filterResults(
				fieldType = "textArea",
				textAreaFieldLabel = "errors",
				textAreaValue = "Failed to run on CI");
		}

		task ("Then the user see only case result 1 with error in the table") {
			Testray.viewTableEntryList(listEntry = "Failed to run on CI");
		}

		task ("And do not see the case result 2 with error in the table") {
			Testray.viewTableEntryListNotPresent(listEntry = "Aborted prior to running test");
		}
	}

	@description = "Story ID: LPS-173525 | Test Summary: Verify if as an Administrator I should be able to filter case results by team"
	@priority = 3
	test AdminCanFilterCaseHistoryTeam {
		task ("Given that the user go to case history tab") {
			Testray.clickTableEntry(tableEntry = "Case 1");

			Navigator.gotoNavTab(navTab = "History");
		}

		task ("When the user filter a case result history by team") {
			TestrayFilter.filterResults(
				fieldType = "multiSelect",
				multiSelectFieldLabel = "Team",
				multiSelectValue = "Team 1");
		}

		task ("Then the user see only Team 1 with two runs in the table") {
			Testray.viewTableEntryList(listEntry = "Run 1,Run 2");
		}
	}

	@description = "Story ID: LPS-173525 | Test Summary: Verify if as an Administrator I should be able to filter the filter options"
	@priority = 2
	test AdminCanFilterOptionsToFilter {
		task ("When the user searches for a field called routine") {
			Testray.clickTableEntry(tableEntry = "Case 1");

			Navigator.gotoNavTab(navTab = "History");

			TestrayFilter.clickFilter();

			TestrayFilter.searchFilter(filterName = "Routines");
		}

		task ("Then the user can see the field label called routine") {
			AssertElementPresent(
				locator1 = "Select#SELECT_FIELD_LABEL",
				selectFieldLabel = "Routines");
		}

		task ("And the user no more see the field called assigne in the filter") {
			AssertElementNotPresent(
				locator1 = "Select#SELECT_FIELD_LABEL",
				selectFieldLabel = "Assignee");
		}
	}

	@description = "Story ID: LPS-173525 | Test Summary: Verify if as an Administrator I should be able to filter case results using multiple filtering options"
	@priority = 4
	test AdminCanFilterWithMultipleOptions {
		task ("Given that the user complete a test with passed status") {
			Testray.clickTableEntry(tableEntry = "Case 1");

			Button.click(button = "Assign to Me");

			TestrayTestflow.editStatus(
				button = "Complete Test",
				selectStatus = "Passed");
		}

		task ("When the user filter a case result history with multiple options") {
			Testray.clickBreadcrumb(text = ${buildName});

			Testray.clickTableEntry(tableEntry = "Case 1");

			Navigator.gotoNavTab(navTab = "History");

			TestrayFilter.filterResults(
				checkboxFieldLabel = "Status",
				checkboxValue = "Passed",
				fieldType = "checkbox,select,textArea,multiSelect",
				multiSelectFieldLabel = "Product Version Name",
				multiSelectValue = "7.0",
				selectFieldLabel = "Assignee",
				selectValue = "Test",
				textAreaFieldLabel = "errors",
				textAreaValue = "Failed to run on CI");
		}

		task ("Then the user see only the error, run and product version in the table") {
			Testray.viewTableEntryList(listEntry = "Run 1,7.0,Failed to run on CI");
		}

		task ("And do not see Case 2 in the table") {
			Testray.viewTableEntryListNotPresent(listEntry = "Run 2");
		}
	}

	@description = "Story ID: LPS-173525 | Test Summary: Verify if as an Administrator I should not see case results that don't exist when I try filtering for them"
	@priority = 3
	test AdminCanNotFilterForNonExistentCaseResult {
		task ("Given that the user filter a case result history existent") {
			Testray.clickTableEntry(tableEntry = "Case 1");

			Navigator.gotoNavTab(navTab = "History");

			TestrayFilter.filterResults(
				fieldType = "input",
				inputFieldLabel = "Environment",
				inputValue = "Run");
		}

		task ("And can see the Run 1 and 2 in the list and not see Run 3") {
			Testray.viewTableEntryList(listEntry = "Run 1,Run 2");

			Testray.viewTableEntryListNotPresent(listEntry = "Run 3");
		}

		task ("When the user filter a Run by its non-existent name") {
			Refresh();

			TestrayFilter.filterResults(
				fieldType = "input",
				inputFieldLabel = "Environment",
				inputValue = "Run 3");
		}

		task ("Then can not see the run 3 in the list") {
			Testray.viewTableEntryListNotPresent(listEntry = "Run 3");
		}

		task ("And can see message no results found") {
			TestrayFilter.assertNoResultsFound();
		}
	}

}