@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-163118=true";
	property osgi.modules.includes = "site-initializer-testray";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Testray";

	var categoryName = "Category 1";
	var environmentFactorsName = "Environment Factors 1";
	var optionsName = "Option 1";
	var projectName = "Project 1";
	var routineName = "Routine 1";
	var testSiteName = "Testray 2";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Testray Site") {
			HeadlessSite.addSite(
				siteName = ${testSiteName},
				templateName = "Testray",
				templateType = "Site Initializer");
		}
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		task ("Delete factor category via API, Testray Site and Client Extensions") {
			JSONTestrayAPI.deleteObjectViaAPI(
				object = "factorcategories",
				objectName = "Category 1");

			Testray.testrayApisTearDown();
		}

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Story ID: LPS-159465 | Test Summary: Verify if As an Administrator I should be able to add and delete a Factor Option"
	@priority = 5
	test AdminCanAddAndDeleteFactorOption {
		task ("Given I create a new 'Category' via API") {
			JSONTestray.addFactorCategory(categoryName = ${categoryName});
		}

		task ("When I create a new Option") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			TestrayDropdown.selectOptionSidebar(
				buttonOption = "Manage",
				menuItem = "Options");

			TestrayManage.createNewOption(
				category = ${categoryName},
				option = ${optionsName});

			Testray.changePagination(
				modal = "true",
				quantity = 150);

			Testray.pageNumberNavigationModal(pageNumber = 2);

			Testray.viewTableEntryList(listEntry = ${optionsName});
		}

		task ("Then I should be able to delete the newly created option") {
			Testray.checkSuccessAlertAppearsAndDisappears();

			Testray.deleteItem(itemName = ${optionsName});

			Testray.checkSuccessAlertAppearsAndDisappears();

			Testray.viewTableEntryListNotPresent(listEntry = ${optionsName});
		}
	}

	@description = "Story ID: LPS-146939 | Test Summary: Verify if as an Administrator I am able to add Factor Categories"
	@priority = 5
	test AdminCanAddCategory {
		task ("When I create a new Category") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			TestrayDropdown.selectOptionSidebar(
				buttonOption = "Manage",
				menuItem = "Categories");

			TestrayManage.createNewCategory(category = ${categoryName});
		}

		task ("Then I assert that the Category was created") {
			Testray.viewTableEntryList(listEntry = ${categoryName});
		}
	}

	@description = "Story ID: LPS-159465 | Test Summary: Verify if as an Administrator I am able to add Options"
	@priority = 5
	test AdminCanAddOptions {
		task ("Given I create a new 'Category' via API") {
			JSONTestray.addFactorCategory(categoryName = ${categoryName});
		}

		task ("When I go to Options under Manage Sidebar and add a new Option") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			TestrayDropdown.selectOptionSidebar(
				buttonOption = "Manage",
				menuItem = "Options");

			TestrayManage.createNewOption(
				category = ${categoryName},
				option = ${optionsName});
		}

		task ("Then I should be able to see the created Option") {
			Testray.changePagination(
				modal = "true",
				quantity = 150);

			Testray.pageNumberNavigationModal(pageNumber = 2);

			Testray.viewTableEntryList(listEntry = ${optionsName});
		}
	}

	@description = "Story ID: LPS-146939 | Test Summary: Verify if as an Administrator I am able to configure Default Environment Factors for a Routine"
	@priority = 3
	test AdminCanConfigureDefaultEnvironmentFactorsForRoutine {
		task ("Given I create a new 'Project', a new 'Routine' and new 'Environment Factors' via API") {
			JSONTestray.addProject(
				projectDescription = "Project Description 1",
				projectName = ${projectName});

			JSONTestray.addRoutine(
				projectName = ${projectName},
				routineName = ${routineName});

			JSONTestray.addEnvironmentFactors(environmentFactorsName = ${environmentFactorsName});
		}

		task ("When I go to the Routine page") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(quantity = 150);

			Testray.clickTableEntry(tableEntry = ${projectName});

			Testray.clickTableEntry(tableEntry = ${routineName});
		}

		task ("Then I assert affirm the Enviroment Factor created") {
			Testray.kebabMenuOption(kebabOption = "Select Default Environment Factors");

			Testray.verifySpecificEnvironmentFactors(
				listCategory = ${categoryName},
				listOption = ${optionsName});
		}

		task ("Delete the project") {
			JSONTestrayAPI.deleteProject(projectName = ${projectName});
		}
	}

	@description = "Story ID: LPS-146939 | Test Summary: Verify if as an Administrator I am able to delete Factor Categories"
	@priority = 5
	test AdminCanDeleteCategory {
		task ("Given I create a new 'Category' via API") {
			JSONTestray.addFactorCategory(categoryName = ${categoryName});

			ApplicationsMenu.gotoSite(site = ${testSiteName});
		}

		task ("When I delete newly created category") {
			TestrayManage.deleteCategory(categoryName = ${categoryName});
		}

		task ("Then I assert that the Category was deleted") {
			Testray.viewTableEntryListNotPresent(listEntry = ${categoryName});
		}
	}

	@description = "Story ID: LPS-146939 | Test Summary: Verify if as an Administrator I am able to edit Factor Categories"
	@priority = 5
	test AdminCanEditFactorCategories {
		task ("Given I create a new 'Category' via API") {
			JSONTestray.addFactorCategory(categoryName = ${categoryName});
		}

		task ("When I go to manage system Categories") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			TestrayDropdown.selectOptionSidebar(
				buttonOption = "Manage",
				menuItem = "Categories");
		}

		task ("And I edit the category") {
			TestrayManage.editCategory(
				newName = "Category Edited",
				tableEntry = ${categoryName});
		}

		task ("Then I should be able to say that the category title has been edited") {
			Testray.viewTableEntryList(listEntry = "Category Edited");
		}

		task ("Delete object") {
			JSONTestrayAPI.deleteObjectViaAPI(
				object = "factorcategories",
				objectName = "Category Edited");
		}
	}

	@description = "Story ID: LPS-159465 | Test Summary: Verify if as an Administrator I am able to edit the Option by changing the Category"
	@priority = 4
	test AdminCanEditOptionChangingCategory {
		task ("Given I create a new 'Category' via API") {
			JSONTestray.addFactorCategory(categoryName = ${categoryName});
		}

		task ("When I create a new Option and a new category") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			TestrayDropdown.selectOptionSidebar(
				buttonOption = "Manage",
				menuItem = "Categories");

			TestrayManage.createNewCategory(category = "Category 2");

			TestrayDropdown.selectOptionSidebar(
				buttonOption = "Manage",
				menuItem = "Options");

			TestrayManage.createNewOption(
				category = ${categoryName},
				option = ${optionsName});

			Testray.checkSuccessAlertAppearsAndDisappears();
		}

		task ("And then I edit it") {
			Testray.changePagination(
				modal = "true",
				quantity = 150);

			Testray.pageNumberNavigationModal(pageNumber = 2);

			TestrayManage.editOption(
				category = "Category 2",
				newName = "Option Edited",
				tableEntry = ${optionsName});
		}

		task ("Then I should be able to say that the title of the option has changed") {
			Testray.viewTableEntryList(listEntry = "Category 2,Option Edited");

			Testray.viewTableEntryListNotPresent(listEntry = ${categoryName});
		}

		task ("Delete object") {
			JSONTestrayAPI.deleteObjectViaAPI(
				object = "factorcategories",
				objectName = "Category 2");
		}
	}

	@description = "Story ID: LPS-165582 | Test Summary: Verify if As an Administrator I should not be able to add a duplicate Factor Category"
	@priority = 3
	test AdminCanNotAddDuplicateFactorCategory {
		task ("Given I create a new 'Category' via API") {
			JSONTestray.addFactorCategory(categoryName = ${categoryName});
		}

		task ("When I try to add a new category with an existing title") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			TestrayDropdown.selectOptionSidebar(
				buttonOption = "Manage",
				menuItem = "Categories");

			TestrayManage.createNewCategory(category = ${categoryName});
		}

		task ("Then an error message is displayed") {
			Alert.viewErrorMessage(errorMessage = "The Category name already exists");
		}
	}

	@description = "Story ID: LPS-165582 | Test Summary: Verify if As an Administrator I should not be able to add a duplicate Factor Options"
	@priority = 3
	test AdminCanNotAddDuplicateFactorOptions {
		task ("Given I create a new 'Category' via API") {
			JSONTestray.addFactorCategory(categoryName = ${categoryName});
		}

		task ("When I try the new duplicate Options") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			TestrayDropdown.selectOptionSidebar(
				buttonOption = "Manage",
				menuItem = "Options");

			TestrayManage.createNewOption(
				category = ${categoryName},
				option = ${optionsName});

			TestrayManage.createNewOption(
				category = ${categoryName},
				option = ${optionsName});
		}

		task ("Then an error message is displayed") {
			Alert.viewErrorMessage(errorMessage = "The Option name already exists");
		}
	}

	@description = "Story ID: LPS-159465 | Test Summary: Verify that the user can not create a options if all the required fields are not filled in"
	@priority = 2
	test AdminCanViewRequiredField {
		task ("Given I try to create Options without a title") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			TestrayDropdown.selectOptionSidebar(
				buttonOption = "Manage",
				menuItem = "Options");

			TestrayManage.createNewOption(
				category = "",
				option = "");
		}

		task ("Then I assert that a required field message is displayed") {
			Testray.viewErrorMessage(
				fieldLabel = "Name",
				warningMessage = "This field is required.");

			Testray.viewErrorMessage(
				fieldLabel = "Type",
				warningMessage = "This field is required.");
		}
	}

	@description = "Story ID: LPS-159465 | Test Summary: Verify if as an Administrator I can see the warning message 'This field is required' when trying to save without a name in Category"
	@priority = 2
	test AdminCanViewWarningMessage {
		task ("Given I try to create Category without a title") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			TestrayDropdown.selectOptionSidebar(
				buttonOption = "Manage",
				menuItem = "Categories");

			TestrayManage.createNewCategory();
		}

		task ("Then I assert that a required field message is displayed") {
			Testray.viewErrorMessage(
				fieldLabel = "Name",
				warningMessage = "name is a required field");
		}
	}

}