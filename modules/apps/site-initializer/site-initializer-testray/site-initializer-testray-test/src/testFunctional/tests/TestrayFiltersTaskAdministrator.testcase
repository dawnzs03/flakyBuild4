@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-163118=true";
	property osgi.modules.includes = "site-initializer-testray";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Testray";

	var buildName = "Build 1";
	var caseName = "Case 1";
	var caseResultName = "case result 1";
	var caseType = "Case Type 1";
	var componentName = "Component 1";
	var environmentFactorsName = "Environment Factors 1";
	var productVersion = "1.2";
	var projectName = "Project 1";
	var routineName = "Routine 1";
	var runName = "Option 1";
	var taskName = "Task_1";
	var teamName = "Team 1";
	var testSiteName = "Testray 2";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Testray Site") {
			HeadlessSite.addSite(
				siteName = ${testSiteName},
				templateName = "Testray",
				templateType = "Site Initializer");
		}

		task ("create project, routine, team, component, case, case type, enviroment factor, product version, build, category, option, run, case result, task and subtask via API") {
			JSONTestray.addProject(
				projectDescription = "Project Description 1",
				projectName = ${projectName});

			JSONTestray.addProject(
				projectDescription = "Project Description 1",
				projectName = "Project 2");

			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addTeam(
				projectName = "Project 2",
				teamName = "Team 2");

			JSONTestray.addComponent(
				componentName = ${componentName},
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addComponent(
				componentName = "Component 2",
				projectName = "Project 2",
				teamName = "Team 2");

			JSONTestray.addRoutine(
				projectName = ${projectName},
				routineName = ${routineName});

			JSONTestray.addRoutine(
				projectName = "Project 2",
				routineName = "Routine 2");

			JSONTestray.addCaseType(caseType = ${caseType});

			JSONTestray.addCases(
				caseName = ${caseName},
				caseType = ${caseType},
				componentName = ${componentName},
				projectName = ${projectName});

			JSONTestray.addCases(
				caseName = "Case 2",
				caseType = ${caseType},
				componentName = "Component 2",
				projectName = "Project 2");

			JSONTestray.addEnvironmentFactors(environmentFactorsName = ${environmentFactorsName});

			JSONTestray.addProductVersion(
				productVersion = ${productVersion},
				projectName = ${projectName});

			JSONTestray.addProductVersion(
				productVersion = "1.3",
				projectName = "Project 2");

			JSONTestray.addBuild(
				buildName = ${buildName},
				productVersion = ${productVersion},
				projectName = ${projectName},
				routineName = ${routineName});

			JSONTestray.addBuild(
				buildName = "Build 2",
				productVersion = "1.3",
				projectName = "Project 2",
				routineName = "Routine 2");

			JSONTestray.addRun(
				buildName = ${buildName},
				runName = ${runName});

			JSONTestray.addRun(
				buildName = "Build 2",
				runName = "Option 2");

			JSONTestray.addCaseResult(
				buildName = ${buildName},
				caseName = ${caseName},
				caseResultName = ${caseResultName},
				componentName = ${componentName},
				runName = ${runName});

			JSONTestray.addCaseResult(
				buildName = "Build 2",
				caseName = "Case 2",
				caseResultName = "case result 2",
				componentName = "Component 2",
				runName = "Option 2");

			JSONTestray.addTask(
				buildName = ${buildName},
				key = "INANALYSIS",
				statusTask = "In Analysis",
				taskName = ${taskName});

			JSONTestray.addTask(
				buildName = "Build 2",
				key = "INANALYSIS",
				statusTask = "In Analysis",
				taskName = "Task_2");

			JSONTestray.addSubtask(
				key = "OPEN",
				score = 3,
				statusSubtask = "Open",
				subtaskName = "Subtask_1",
				subtaskNumber = 1,
				taskName = ${taskName});

			JSONTestray.addSubtask(
				key = "OPEN",
				score = 4,
				statusSubtask = "Open",
				subtaskName = "Subtask_2",
				subtaskNumber = 2,
				taskName = ${taskName});
		}

		task ("Go to Testray Site") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});
		}

		task ("Go to Task") {
			TestrayTestflow.goToTestflow();
		}
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		task ("Delete subtask, task, routine, case type, factor category and project via API, Testray Site and Client Extensions") {
			JSONTestrayAPI.deleteObjectViaAPI(
				object = "subtasks",
				objectName = "Subtask_1");

			JSONTestrayAPI.deleteObjectViaAPI(
				object = "subtasks",
				objectName = "Subtask_2");

			JSONTestrayAPI.deleteObjectViaAPI(
				object = "tasks",
				objectName = ${taskName});

			JSONTestrayAPI.deleteObjectViaAPI(
				object = "tasks",
				objectName = "Task_2");

			JSONTestrayAPI.deleteObjectViaAPI(
				object = "routines",
				objectName = ${routineName});

			JSONTestrayAPI.deleteObjectViaAPI(
				object = "routines",
				objectName = "Routine 2");

			JSONTestrayAPI.deleteObjectViaAPI(
				object = "casetypes",
				objectName = ${caseType});

			JSONTestrayAPI.deleteObjectViaAPI(
				object = "factorcategories",
				objectName = "Category 1");

			JSONTestrayAPI.deleteProject(projectName = ${projectName});

			JSONTestrayAPI.deleteProject(projectName = "Project 2");

			Testray.testrayApisTearDown();
		}

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Story ID: LPS-173521 | Test Summary: Verify if as an Administrator I should be able to filter tasks by assignee"
	@priority = 3
	test AdminCanFilterTasksByAssignee {
		task ("Given that task 1 is assigned as 'User'") {
			Testray.clickTableEntry(tableEntry = "Task_1");

			Testray.selectUsers(userNameList = "User User");
		}

		task ("And that task 2 is assigned as 'Test'") {
			TestrayTestflow.goToTestflow();

			Testray.clickTableEntry(tableEntry = "Task_2");

			Testray.selectUsers(userNameList = "Test Test");

			TestrayTestflow.goToTestflow();
		}

		task ("When the user select 'User' in the filter") {
			TestrayFilter.filterResults(
				fieldType = "select",
				selectFieldLabel = "Assignee",
				selectValue = "User");
		}

		task ("Then can see only task 1 with 'User' in the table") {
			Testray.viewTableEntryList(listEntry = "Task_1");
		}

		task ("And do not see the task 2 with 'Test' in the table") {
			Testray.viewTableEntryListNotPresent(listEntry = "Task_2");
		}
	}

	@description = "Story ID: LPS-173521 | Test Summary: Verify if as an Administrator I should be able to filter tasks by build name"
	@priority = 3
	test AdminCanFilterTasksByBuildName {
		task ("Given that the user has two build different in the table") {
			Testray.viewTableEntryList(listEntry = "Build 1,Build 2");
		}

		task ("When the user select the build 2 in the filter by name") {
			TestrayFilter.filterResults(
				fieldType = "input",
				inputFieldLabel = "Build Name",
				inputValue = "Build 2");
		}

		task ("Then the user see only build 2 in the table") {
			Testray.viewTableEntryList(listEntry = "Build 2");
		}

		task ("And do not see the build 1 in the table") {
			Testray.viewTableEntryListNotPresent(listEntry = "Build 1");
		}
	}

	@description = "Story ID: LPS-173521 | Test Summary: Verify if as an Administrator I should be able to filter tasks by project name"
	@priority = 4
	test AdminCanFilterTasksByProjectName {
		task ("Given that the user has two project different in the table") {
			Testray.viewTableEntryList(listEntry = "Project 1,Project 2");
		}

		task ("When the user select the project 2 in the filter") {
			TestrayFilter.filterResults(
				fieldType = "multiSelect",
				multiSelectFieldLabel = "Project Name",
				multiSelectValue = "Project 2");
		}

		task ("Then the user see only project 2 in the table") {
			Testray.viewTableEntryList(listEntry = "Project 2");
		}

		task ("And do not see the project 1 in the table") {
			Testray.viewTableEntryListNotPresent(listEntry = "Project 1");
		}
	}

	@description = "Story ID: LPS-173521 | Test Summary: Verify if as an Administrator I should be able to filter tasks by routine name"
	@priority = 3
	test AdminCanFilterTasksByRoutineName {
		task ("Given that the user has two routine different in the table") {
			Testray.viewTableEntryList(listEntry = "Routine 1,Routine 2");
		}

		task ("When the user select the routine 2 in the filter") {
			TestrayFilter.filterResults(
				fieldType = "multiSelect",
				multiSelectFieldLabel = "Routine Name",
				multiSelectValue = "Routine 2");
		}

		task ("Then the user see only routine 2 in the table") {
			Testray.viewTableEntryList(listEntry = "Routine 2");
		}

		task ("And do not see the routine 1 in the table") {
			Testray.viewTableEntryListNotPresent(listEntry = "Routine 1");
		}
	}

	@description = "Story ID: LPS-173521 | Test Summary: Verify if as an Administrator I should be able to filter tasks by status"
	@priority = 4
	test AdminCanFilterTasksByStatus {
		task ("Given that task 1 is assigned to user Test Test") {
			Testray.clickTableEntry(tableEntry = "Task_1");

			Testray.selectUsers(userNameList = "Test Test");
		}

		task ("And that task 1 is abandoned") {
			Button.click(button = "Abandon");

			TestrayTestflow.goToTestflow();
		}

		task ("When the user filter task by status in the filter") {
			TestrayFilter.filterResults(
				checkboxFieldLabel = "Status",
				checkboxValue = "Abandoned",
				fieldType = "checkbox");
		}

		task ("Then can see only abandoned status in the table") {
			TestrayTestflow.assertStatus(
				label = "Tasks",
				status = "Abandoned");
		}

		task ("And do not see the complete status in the table") {
			Testray.viewTableEntryListNotPresent(listEntry = "Complete");
		}
	}

	@description = "Story ID: LPS-173521 | Test Summary: Verify if as an Administrator I should be able to filter tasks by task name"
	@priority = 3
	test AdminCanFilterTasksByTaskName {
		task ("Given that the user has two tasks different in the table") {
			Testray.viewTableEntryList(listEntry = "Task_1,Task_2");
		}

		task ("When the user filter task by task name") {
			TestrayFilter.filterResults(
				fieldType = "input",
				inputFieldLabel = "Task Name",
				inputValue = "Task_2");
		}

		task ("Then can see the Task_2 in the table") {
			Testray.viewTableEntryList(listEntry = "Task_2");
		}

		task ("And do not see the Task_1 in the table") {
			Testray.viewTableEntryListNotPresent(listEntry = "Task_1");
		}
	}

	@description = "Story ID: LPS-173521 | Test Summary: Verify if as an Administrator I should be able to filter task using multiple filtering options"
	@priority = 4
	test AdminCanFilterTaskWithMultipleOptions {
		task ("Given that task 1 is assigned as 'User'") {
			Testray.clickTableEntry(tableEntry = "Task_1");

			Testray.selectUsers(userNameList = "User User");
		}

		task ("And that task 2 is assigned as 'Test'") {
			TestrayTestflow.goToTestflow();

			Testray.clickTableEntry(tableEntry = "Task_2");

			Testray.selectUsers(userNameList = "Test Test");
		}

		task ("And that task 2 is completed") {
			Button.click(button = "Complete");

			TestrayTestflow.goToTestflow();
		}

		task ("When the user filter multiple options by: task name, build name and status in the filter") {
			TestrayFilter.filterResults(
				checkboxFieldLabel = "Status",
				checkboxValue = "Complete",
				fieldType = "checkbox,input",
				inputFieldLabel = "Task Name",
				inputValue = "Task_2");
		}

		task ("Then can see only build 2 and complete status in the table") {
			Testray.viewTableEntryList(listEntry = "Build 2");

			TestrayTestflow.assertStatus(
				label = "Tasks",
				status = "Complete");
		}

		task ("And do not see the Task_1 and build 1 in the table") {
			Testray.viewTableEntryListNotPresent(listEntry = "Build 1,Task_1");
		}
	}

	@description = "Story ID: LPS-173521 | Test Summary: Verify if as an Administrator I should not see task that don't exist when I try filtering for them"
	@priority = 3
	test AdminCanNotFilterForNonExistentTask {
		task ("Given that the user has two tasks that existent in the table") {
			Testray.viewTableEntryList(listEntry = "Task_1,Task_2");
		}

		task ("When filtering a task by his non-existent name") {
			TestrayFilter.filterResults(
				fieldType = "input",
				inputFieldLabel = "Task Name",
				inputValue = "Task_3");
		}

		task ("Then the user is not present in the task table") {
			Testray.viewTableEntryListNotPresent(listEntry = "Task_3");
		}
	}

	@description = "Story ID: LPS-173521 | Test Summary: Verify if as an User I should be able to search by a filter"
	@priority = 2
	test CanSearchByFilter {
		task ("When the user searches for a field called Assignee") {
			TestrayFilter.clickFilter();

			TestrayFilter.searchFilter(filterName = "Assignee");
		}

		task ("Then the user can see the field label called Assignee") {
			AssertElementPresent(
				locator1 = "Select#SELECT_FIELD_LABEL",
				selectFieldLabel = "Assignee");
		}

		task ("When the user searches for a field that does not exist") {
			TestrayFilter.searchFilter(filterName = "Assignee 2");
		}

		task ("Then the user can no more see the label called Assignee in the filter") {
			AssertElementNotPresent(
				locator1 = "Select#SELECT_FIELD_LABEL",
				selectFieldLabel = "Assignee 2");
		}
	}

}