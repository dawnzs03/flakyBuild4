@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-163118=true";
	property osgi.modules.includes = "site-initializer-testray";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Testray";

	var caseName = "Case 1";
	var caseType = "Case Type 1";
	var componentName = "Component 1";
	var projectName = "Project 1";
	var suiteName = "Suite 1";
	var teamName = "Team 1";
	var testSiteName = "Testray 2";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Testray Site") {
			HeadlessSite.addSite(
				siteName = ${testSiteName},
				templateName = "Testray",
				templateType = "Site Initializer");
		}

		task ("Create project, team, component, case type and case via API") {
			JSONTestray.addProject(
				projectDescription = "Project Description 1",
				projectName = ${projectName});

			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addComponent(
				componentName = ${componentName},
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addCaseType(caseType = ${caseType});

			JSONTestray.addCases(
				caseName = ${caseName},
				caseType = ${caseType},
				componentName = ${componentName},
				projectName = ${projectName});
		}

		task ("Create a suite via UI") {
			ApplicationsMenu.gotoSite(site = ${testSiteName});

			Testray.changePagination(quantity = 150);

			Testray.clickTableEntry(tableEntry = ${projectName});

			Navigator.gotoNavTab(navTab = "Suites");

			TestraySuites.addSuite(
				caseList = ${caseName},
				suiteDescription = "Suite Description",
				suiteName = ${suiteName});
		}
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		task ("Logout And Login with test user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "test test");
		}

		task ("Delete case type and project via API, Testray Site and Client Extensions") {
			JSONTestrayAPI.deleteObjectViaAPI(
				object = "casetypes",
				objectName = ${caseType});

			JSONTestrayAPI.deleteProject(projectName = ${projectName});

			Testray.testrayApisTearDown();
		}

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Story ID: LPS-182630 | Test Summary: Verify that the User with the 'Testray Analyst' role should not be able to delete the suite case"
	@priority = 3
	test AssertAnalystRoleCanNotDeleteSuiteCase {
		task ("Given that the user login with the Testray Analyst role") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "analyst@testray.com",
				userLoginFullName = "Analyst User");

			Navigator.openSiteURL(siteName = "Testray 2");

			Testray.changePagination(quantity = 150);

			Testray.clickTableEntry(tableEntry = ${projectName});

			Navigator.gotoNavTab(navTab = "Suites");

			Testray.clickTableEntry(tableEntry = ${suiteName});
		}

		task ("When the user right click in suite case") {
			RightClick.rightClick(
				key_tableEntry = ${caseName},
				locator1 = "Testray#TABLE_ENTRY");
		}

		task ("Then the user can not delete the suite case") {
			MenuItem.viewNotPresent(menuItem = "Delete");
		}
	}

	@description = "Story ID: LPS-182630 | Test Summary: Verify that the User with the 'Testray Analyst' role should not be able to edit the suite case"
	@priority = 3
	test AssertAnalystRoleCanNotEditSuiteCase {
		task ("Given that the user login with the Testray Analyst role") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "analyst@testray.com",
				userLoginFullName = "Analyst User");

			Navigator.openSiteURL(siteName = "Testray 2");

			Testray.changePagination(quantity = 150);

			Testray.clickTableEntry(tableEntry = ${projectName});

			Navigator.gotoNavTab(navTab = "Suites");

			Testray.clickTableEntry(tableEntry = ${suiteName});
		}

		task ("When the user right click in suite case") {
			RightClick.rightClick(
				key_tableEntry = ${caseName},
				locator1 = "Testray#TABLE_ENTRY");
		}

		task ("Then the user can not edit the suite case") {
			MenuItem.viewNotPresent(menuItem = "Edit");
		}
	}

	@description = "Story ID: LPS-182630 | Test Summary: Verify that the User with the 'Testray Lead' role should be able to delete the suite case"
	@priority = 4
	test AssertLeadRoleCanDeleteSuiteCase {
		task ("Given that the user login with the Testray Lead role") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "lead@testray.com",
				userLoginFullName = "Lead User");

			Navigator.openSiteURL(siteName = "Testray 2");
		}

		task ("And the user go to suite case") {
			Testray.changePagination(quantity = 150);

			Testray.clickTableEntry(tableEntry = ${projectName});

			Navigator.gotoNavTab(navTab = "Suites");

			Testray.clickTableEntry(tableEntry = ${suiteName});
		}

		task ("When the user delete the suite case") {
			Testray.deleteItem(itemName = ${caseName});
		}

		task ("Then the user can not see the suite case in the table") {
			Testray.viewTableEntryListNotPresent(listEntry = ${caseName});
		}
	}

	@description = "Story ID: LPS-182630 | Test Summary: Verify that the User with the 'Testray Lead' role should be able to edit the suite case"
	@priority = 4
	test AssertLeadRoleCanEditSuiteCase {
		task ("Given that the user login with the Testray Lead role") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "lead@testray.com",
				userLoginFullName = "Lead User");

			Navigator.openSiteURL(siteName = "Testray 2");
		}

		task ("And the user go to suite case") {
			Testray.changePagination(quantity = 150);

			Testray.clickTableEntry(tableEntry = ${projectName});

			Navigator.gotoNavTab(navTab = "Suites");

			Testray.clickTableEntry(tableEntry = ${suiteName});
		}

		task ("When the user edit the suite case") {
			TestrayManage.selectTableRowOption(
				rowOption = "Edit",
				tableEntry = ${caseName});

			TestrayCases.editCases(
				caseType = "Case Type 1",
				component = "Component 1",
				description = "Case Description",
				duration = 30,
				newName = "Case Edited",
				priority = 3,
				steps = "http://test.edit.com");
		}

		task ("Then the user can see the suite case edited in the table") {
			Testray.viewTableEntryList(listEntry = "Case Edited");
		}
	}

	@description = "Story ID: LPS-182630 | Test Summary: Verify that the User with the 'Testray User' role should not be able to delete the suite case"
	@priority = 3
	test AssertUserRoleCanNotDeleteSuiteCase {
		task ("Given that the user login with the Testray User role") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "user@testray.com",
				userLoginFullName = "User User");

			Navigator.openSiteURL(siteName = "Testray 2");
		}

		task ("And the user go to suite case") {
			Testray.changePagination(quantity = 150);

			Testray.clickTableEntry(tableEntry = ${projectName});

			Navigator.gotoNavTab(navTab = "Suites");

			Testray.clickTableEntry(tableEntry = ${suiteName});
		}

		task ("When the user right click in suite case") {
			RightClick.rightClick(
				key_tableEntry = ${caseName},
				locator1 = "Testray#TABLE_ENTRY");
		}

		task ("Then the user can not delete the suite case") {
			MenuItem.viewNotPresent(menuItem = "Delete");
		}
	}

	@description = "Story ID: LPS-182630 | Test Summary: Verify that the User with the 'Testray User' role should not be able to edit the suite case"
	@priority = 3
	test AssertUserRoleCanNotEditSuiteCase {
		task ("Given that the user login with the Testray User role") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "user@testray.com",
				userLoginFullName = "User User");

			Navigator.openSiteURL(siteName = "Testray 2");
		}

		task ("And the user go to suite case") {
			Testray.changePagination(quantity = 150);

			Testray.clickTableEntry(tableEntry = ${projectName});

			Navigator.gotoNavTab(navTab = "Suites");

			Testray.clickTableEntry(tableEntry = ${suiteName});
		}

		task ("When the user right click in suite case") {
			RightClick.rightClick(
				key_tableEntry = ${caseName},
				locator1 = "Testray#TABLE_ENTRY");
		}

		task ("Then the user can not edit the suite case") {
			MenuItem.viewNotPresent(menuItem = "Edit");
		}
	}

}