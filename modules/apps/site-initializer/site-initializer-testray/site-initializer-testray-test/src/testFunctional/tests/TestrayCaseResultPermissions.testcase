@component-name = "portal-solutions"
definition {

	property custom.properties = "feature.flag.LPS-163118=true";
	property osgi.modules.includes = "site-initializer-testray";
	property portal.release = "false";
	property portal.upstream = "true";
	property release.feature.flags.disable.DISABLE_PRIVATE_LAYOUTS = "true";
	property testray.main.component.name = "Site Initializer Testray";

	var buildName = "Build 1";
	var caseName = "Case 1";
	var caseResultName = "case result 1";
	var caseType = "Case Type 1";
	var componentName = "Component 1";
	var environmentFactorsName = "Environment Factors 1";
	var productVersion = "1.2";
	var projectName = "Project 1";
	var routineName = "Routine 1";
	var runName = "Option 1";
	var teamName = "Team 1";
	var testSiteName = "Testray 2";

	setUp {
		task ("Set up instance and sign in") {
			TestCase.setUpPortalInstance();

			User.firstLoginPG();
		}

		task ("Create a new Testray Site") {
			HeadlessSite.addSite(
				siteName = ${testSiteName},
				templateName = "Testray",
				templateType = "Site Initializer");
		}

		task ("Create project, team, component, routine, case type, case, environment factor, product version, build, run and case result via API") {
			JSONTestray.addProject(
				projectDescription = "Project Description 1",
				projectName = ${projectName});

			JSONTestray.addTeam(
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addComponent(
				componentName = ${componentName},
				projectName = ${projectName},
				teamName = ${teamName});

			JSONTestray.addRoutine(
				projectName = ${projectName},
				routineName = ${routineName});

			JSONTestray.addCaseType(caseType = ${caseType});

			JSONTestray.addCases(
				caseName = ${caseName},
				caseType = ${caseType},
				componentName = ${componentName},
				projectName = ${projectName});

			JSONTestray.addEnvironmentFactors(environmentFactorsName = ${environmentFactorsName});

			JSONTestray.addProductVersion(
				productVersion = ${productVersion},
				projectName = ${projectName});

			JSONTestray.addBuild(
				buildName = ${buildName},
				productVersion = ${productVersion},
				projectName = ${projectName},
				routineName = ${routineName});

			JSONTestray.addRun(
				buildName = ${buildName},
				runName = ${runName});

			JSONTestray.addCaseResult(
				buildName = ${buildName},
				caseName = ${caseName},
				caseResultName = ${caseResultName},
				componentName = ${componentName},
				runName = ${runName});
		}
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		task ("Logout And Login with test user") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "test@liferay.com",
				userLoginFullName = "test test");
		}

		task ("Delete case type, factor category and project via API, Testray Site and Client Extensions") {
			JSONTestrayAPI.deleteObjectViaAPI(
				object = "casetypes",
				objectName = ${caseType});

			JSONTestrayAPI.deleteObjectViaAPI(
				object = "factorcategories",
				objectName = "Category 1");

			JSONTestrayAPI.deleteProject(projectName = ${projectName});

			Testray.testrayApisTearDown();
		}

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Story ID: LPS-178256 | Test Summary: Verify that the User with the 'Testray Analyst' role should be able to delete the case result"
	@priority = 3
	test AssertAnalystRoleCanDeleteCaseResult {
		task ("Given that the user login with the Testray Analyst role") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "analyst@testray.com",
				userLoginFullName = "Analyst User");

			Navigator.openSiteURL(siteName = "Testray 2");
		}

		task ("And the user go to case result page") {
			Testray.changePagination(quantity = 150);

			Testray.clickTableEntry(tableEntry = ${projectName});

			Testray.clickTableEntry(tableEntry = ${routineName});

			Testray.clickTableEntry(tableEntry = ${buildName});
		}

		task ("When the user delete the case result") {
			Testray.deleteItem(itemName = ${caseName});
		}

		task ("Then the Case Results should not be displayed anymore") {
			Testray.viewTableEntryListNotPresent(listEntry = ${caseName});
		}
	}

	@description = "Story ID: LPS-178256 | Test Summary: Verify that the User with the 'Testray Analyst' role should be able to edit the case result"
	@priority = 3
	test AssertAnalystRoleCanEditCaseResult {
		task ("Given that the user login with the Testray Analyst role") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "analyst@testray.com",
				userLoginFullName = "Analyst User");

			Navigator.openSiteURL(siteName = "Testray 2");
		}

		task ("And the user go to case result page") {
			Testray.changePagination(quantity = 150);

			Testray.clickTableEntry(tableEntry = ${projectName});

			Testray.clickTableEntry(tableEntry = ${routineName});

			Testray.clickTableEntry(tableEntry = ${buildName});

			Testray.clickTableEntry(tableEntry = ${caseName});

			Button.click(button = "Assign to Me");
		}

		task ("When the user edit the case result") {
			TestrayTestflow.editStatus(
				button = "Complete Test",
				comment = "button does not work",
				issues = "LPS-111111",
				selectStatus = "Test Fix");
		}

		task ("Then the user can see Case Results edited with test fix") {
			TestrayTestflow.assertStatus(
				label = "Test Details",
				status = "Test Fix");
		}
	}

	@description = "Story ID: LPS-178256 | Test Summary: Verify that the User with the 'Testray Lead' role should be able to delete the case result"
	@priority = 3
	test AssertLeadRoleCanDeleteCaseResult {
		task ("Given that the user login with the Testray Lead role") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "lead@testray.com",
				userLoginFullName = "Lead User");

			Navigator.openSiteURL(siteName = "Testray 2");
		}

		task ("And the user go to case result page") {
			Testray.changePagination(quantity = 150);

			Testray.clickTableEntry(tableEntry = ${projectName});

			Testray.clickTableEntry(tableEntry = ${routineName});

			Testray.clickTableEntry(tableEntry = ${buildName});
		}

		task ("When the user delete the case result") {
			Testray.deleteItem(itemName = ${caseName});
		}

		task ("Then the Case Results should not be displayed anymore") {
			Testray.viewTableEntryListNotPresent(listEntry = ${caseName});
		}
	}

	@description = "Story ID: LPS-178256 | Test Summary: Verify that the User with the 'Testray Lead' role should be able to edit the case result"
	@priority = 3
	test AssertLeadRoleCanEditCaseResult {
		task ("Given that the user login with the Testray Lead role") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "lead@testray.com",
				userLoginFullName = "Lead User");

			Navigator.openSiteURL(siteName = "Testray 2");
		}

		task ("And the user go to case result page") {
			Testray.changePagination(quantity = 150);

			Testray.clickTableEntry(tableEntry = ${projectName});

			Testray.clickTableEntry(tableEntry = ${routineName});

			Testray.clickTableEntry(tableEntry = ${buildName});

			Testray.clickTableEntry(tableEntry = ${caseName});

			Button.click(button = "Assign to Me");
		}

		task ("When the user edit the case result") {
			TestrayTestflow.editStatus(
				button = "Complete Test",
				comment = "button does not work",
				issues = "LPS-111111",
				selectStatus = "Test Fix");
		}

		task ("Then the user can see Case Results edited with test fix") {
			TestrayTestflow.assertStatus(
				label = "Test Details",
				status = "Test Fix");
		}
	}

	@description = "Story ID: LPS-178256 | Test Summary: Verify that the User with the 'Testray User' role should not be able to delete the case result"
	@priority = 2
	test AssertUserRoleCanNotDeleteCaseResult {
		task ("Given that the user login with the Testray User role") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "user@testray.com",
				userLoginFullName = "User User");

			Navigator.openSiteURL(siteName = "Testray 2");
		}

		task ("And the user go to case result page") {
			Testray.changePagination(quantity = 150);

			Testray.clickTableEntry(tableEntry = ${projectName});

			Testray.clickTableEntry(tableEntry = ${routineName});

			Testray.clickTableEntry(tableEntry = ${buildName});
		}

		task ("When the user right click in case result") {
			RightClick.rightClick(
				key_tableEntry = ${caseName},
				locator1 = "Testray#TABLE_ENTRY");
		}

		task ("Then the user can not delete the case result") {
			MenuItem.viewNotPresent(menuItem = "Delete");
		}
	}

	@description = "Story ID: LPS-178256 | Test Summary: Verify that the User with the 'Testray User' role should not be able to edit the case result"
	@priority = 2
	test AssertUserRoleCanNotEditCaseResult {
		task ("Given that the user login with the Testray User role") {
			User.logoutAndLoginPG(
				userLoginEmailAddress = "user@testray.com",
				userLoginFullName = "User User");

			Navigator.openSiteURL(siteName = "Testray 2");
		}

		task ("And the user go to case result page") {
			Testray.changePagination(quantity = 150);

			Testray.clickTableEntry(tableEntry = ${projectName});

			Testray.clickTableEntry(tableEntry = ${routineName});

			Testray.clickTableEntry(tableEntry = ${buildName});
		}

		task ("When the user right click in case result") {
			RightClick.rightClick(
				key_tableEntry = ${caseName},
				locator1 = "Testray#TABLE_ENTRY");
		}

		task ("Then the user can not edit the case result") {
			MenuItem.viewNotPresent(menuItem = "Assign to Me");
		}
	}

}