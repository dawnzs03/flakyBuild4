/**
 * SPDX-FileCopyrightText: (c) 2000 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */

package com.liferay.dynamic.data.mapping.form.field.type.internal.checkbox.multiple;

import com.liferay.dynamic.data.mapping.form.field.type.DDMFormFieldValueAccessor;
import com.liferay.dynamic.data.mapping.form.field.type.constants.DDMFormFieldTypeConstants;
import com.liferay.dynamic.data.mapping.form.field.type.internal.util.DDMFormFieldValueUtil;
import com.liferay.dynamic.data.mapping.storage.DDMFormFieldValue;
import com.liferay.petra.string.CharPool;
import com.liferay.petra.string.StringBundler;
import com.liferay.petra.string.StringPool;
import com.liferay.portal.kernel.json.JSONArray;
import com.liferay.portal.kernel.json.JSONException;
import com.liferay.portal.kernel.json.JSONFactory;
import com.liferay.portal.kernel.log.Log;
import com.liferay.portal.kernel.log.LogFactoryUtil;
import com.liferay.portal.kernel.util.Validator;

import java.util.Locale;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.osgi.service.component.annotations.Component;
import org.osgi.service.component.annotations.Reference;

/**
 * @author Dylan Rebelak
 */
@Component(
	property = "ddm.form.field.type.name=" + DDMFormFieldTypeConstants.CHECKBOX_MULTIPLE,
	service = DDMFormFieldValueAccessor.class
)
public class CheckboxMultipleDDMFormFieldValueAccessor
	implements DDMFormFieldValueAccessor<JSONArray> {

	@Override
	public JSONArray[] getArrayGenericType() {
		return new JSONArray[0];
	}

	@Override
	public JSONArray getValue(
		DDMFormFieldValue ddmFormFieldValue, Locale locale) {

		return DDMFormFieldValueUtil.getOptionsValuesJSONArray(
			ddmFormFieldValue, locale);
	}

	@Override
	public JSONArray getValueForEvaluation(
		DDMFormFieldValue ddmFormFieldValue, Locale locale) {

		JSONArray optionsValuesJSONArray =
			DDMFormFieldValueUtil.getOptionsValuesJSONArray(
				ddmFormFieldValue, locale);

		if (ddmFormFieldValue.getDDMFormValues() == null) {
			return optionsValuesJSONArray;
		}

		for (int i = 0; i < optionsValuesJSONArray.length(); i++) {
			Matcher matcher = _autoGeneratedIDPattern.matcher(
				optionsValuesJSONArray.getString(i));

			if (matcher.matches()) {
				return DDMFormFieldValueUtil.createJSONArray(
					StringBundler.concat(
						StringPool.OPEN_BRACKET,
						DDMFormFieldValueUtil.getOptionsLabels(
							ddmFormFieldValue, locale),
						StringPool.CLOSE_BRACKET));
			}
		}

		return optionsValuesJSONArray;
	}

	@Override
	public boolean isEmpty(DDMFormFieldValue ddmFormFieldValue, Locale locale) {
		JSONArray jsonArray = getValue(ddmFormFieldValue, locale);

		if (jsonArray.length() > 0) {
			return false;
		}

		return true;
	}

	@Override
	public Object map(Object value) {
		if (Validator.isNull(value)) {
			return value;
		}

		try {
			JSONArray jsonArray = jsonFactory.createJSONArray(value.toString());

			StringBundler sb = new StringBundler((jsonArray.length() * 2) - 1);

			for (int i = 0; i < jsonArray.length(); i++) {
				sb.append(jsonArray.get(i));

				if (i < (jsonArray.length() - 1)) {
					sb.append(CharPool.COMMA);
				}
			}

			return sb.toString();
		}
		catch (JSONException jsonException) {
			if (_log.isDebugEnabled()) {
				_log.debug("Unable to parse JSON array", jsonException);
			}

			return StringPool.BLANK;
		}
	}

	@Reference
	protected JSONFactory jsonFactory;

	private static final Log _log = LogFactoryUtil.getLog(
		CheckboxMultipleDDMFormFieldValueAccessor.class);

	private static final Pattern _autoGeneratedIDPattern = Pattern.compile(
		"^[\\D]+[\\d]{8}$");

}