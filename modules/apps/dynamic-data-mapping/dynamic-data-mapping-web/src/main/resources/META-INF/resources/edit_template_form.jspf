<%--
/**
 * SPDX-FileCopyrightText: (c) 2000 Liferay, Inc. https://liferay.com
 * SPDX-License-Identifier: LGPL-2.1-or-later OR LicenseRef-Liferay-DXP-EULA-2.0.0-2023-06
 */
--%>

<%
String namespace = liferayPortletResponse.getNamespace();

if (Validator.isNotNull(portletResourceNamespace)) {
	namespace = portletResourceNamespace;
}

if (Validator.isNull(script)) {
	script = structure.getDefinition();
}

String fieldsJSONArrayString = String.valueOf(_getFormTemplateFieldsJSONArray(structure, script));
%>

<aui:input name="language" type="hidden" value="json" />
<aui:input name="scriptContent" type="hidden" />

<aui:script>
	function <portlet:namespace />attachValueChange(formBuilder) {
		var modeInput = document.getElementById('<portlet:namespace />mode');

		if (modeInput) {
			modeInput.addEventListener('change', (event) => {
				<portlet:namespace />toggleMode(formBuilder, event.target.value);
			});
		}
	}

	Liferay.on('<portlet:namespace />formBuilderLoaded', (event) => {
		var formBuilder = event.formBuilder;

		<portlet:namespace />attachValueChange(formBuilder);

		<portlet:namespace />toggleMode(
			formBuilder,
			'<%= HtmlUtil.escape(mode) %>'
		);
	});

	function <portlet:namespace />setFieldsHiddenAttributes(
		formBuilder,
		mode,
		item,
		index
	) {
		var hiddenAttributesMap = formBuilder.MAP_HIDDEN_FIELD_ATTRS;
		var hiddenAttributes =
			hiddenAttributesMap[item.get('type')] || hiddenAttributesMap.DEFAULT;
		var without = function (array) {
			var elems = Array.from(arguments).slice(1);

			elems.forEach((value) => {
				array = array.filter((elem) => {
					return elem != value;
				});
			});

			return array;
		};

		if (mode === '<%= DDMTemplateConstants.TEMPLATE_MODE_EDIT %>') {
			hiddenAttributes = without(hiddenAttributes, 'readOnly');
		}

		item.set('hiddenAttributes', hiddenAttributes);
	}

	function <portlet:namespace />toggleMode(formBuilder, mode) {
		var modeEdit = mode === '<%= DDMTemplateConstants.TEMPLATE_MODE_EDIT %>';

		formBuilder.set('allowRemoveRequiredFields', modeEdit);

		var setFieldsHiddenAttributes = <portlet:namespace />setFieldsHiddenAttributes.bind(
			this,
			formBuilder,
			mode
		);
		formBuilder.get('fields')._items.forEach(setFieldsHiddenAttributes);
		formBuilder.get('availableFields').forEach(setFieldsHiddenAttributes);

		var editingField = formBuilder.editingField;

		if (editingField) {
			formBuilder.propertyList.set(
				'data',
				formBuilder.getFieldProperties(editingField, true)
			);
		}
	}

	window['<%= HtmlUtil.escapeJS(namespace) %>getAvailableFields'] = function (
		A,
		FormBuilder
	) {

		<%
		JSONArray structureJSONArray = _getFormTemplateFieldsJSONArray(structure, structure.getDefinition());
		%>

		var availableFields = <%= structureJSONArray.toString() %>;

		availableFields.forEach((item, index) => {
			item.iconClass = FormBuilder.DEFAULT_ICON_CLASS;
		});

		return availableFields.concat(FormBuilder.AVAILABLE_FIELDS.DDM_TEMPLATE);
	};
</aui:script>

<%@ include file="/form_builder.jspf" %>