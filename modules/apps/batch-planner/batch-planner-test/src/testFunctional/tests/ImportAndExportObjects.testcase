@component-name = "portal-batch-planner"
definition {

	property custom.properties = "feature.flag.COMMERCE-8087=true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.main.component.name = "Import/Export";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginPG();
	}

	tearDown {
		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		ObjectAdmin.deleteAllCustomObjectsViaAPI();

		BatchPlanner.batchPlannerTearDown();

		Picklist.deletePicklistViaAPI(picklistName = "customPicklist");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@description = "Ignored due to LPS-191607"
	@ignore = "true"
	@priority = 3
	test DownloadSampleFileOfTheCustomObject {
		task ("Given a custom object is published") {
			ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "student",
				en_US_plural_label = "students",
				name = "Student",
				requiredStringFieldName = "name");
		}

		task ("And Given object entry is created") {
			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "students",
				name = "Jessica");
		}

		task ("And Given I create an import file task with custom object as the entity type") {
			ImportExport.openImportExportAdmin();

			ImportExport.gotoImport();

			ImportExport.selectEntity(entityType = "C_Student (v1_0 - Liferay Object REST)");
		}

		task ("When I download a sample file of this entity") {
			Click.clickAt(locator1 = "ImportExport#SAMPLE_FILE_DOWNLOAD_BUTTON");
		}

		task ("Then the sample file download successfully") {
			var sampleFileName = TestCase.getDownloadedTempFileName(fileNamePattern = "objectentry-*.csv");

			ImportExport.assertFileContent(
				comparisonFileName = "json_objectEntry_export.txt",
				fileName = ${sampleFileName});
		}
	}

	@priority = 4
	test ExportCustomObjectEntryWithManyToManyRelationship {
		property portal.acceptance = "true";

		task ("Given two custom objects published") {
			ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "university",
				en_US_plural_label = "universities",
				name = "University",
				requiredStringFieldName = "name");

			ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "subject",
				en_US_plural_label = "subjects",
				name = "Subject",
				requiredStringFieldName = "name");
		}

		task ("And Given manyToMany releationship has been set between them") {
			ObjectDefinitionAPI.createRelationshipWithObjectDefinitionNames(
				childObjectName = "Subject",
				deletionType = "cascade",
				name = "universitiesSubjects",
				parentObjectName = "University",
				type = "manyToMany");
		}

		task ("And Given one entry related to antoher one") {
			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "universities",
				name = "Oxford");

			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "subjects",
				name = "Math");

			ObjectDefinitionAPI.relateObjectEntriesByName(
				child_plural_label = "subjects",
				childEntryName = "Math",
				parent_plural_label = "universities",
				parentEntryName = "Oxford",
				relationshipName = "universitiesSubjects");
		}

		task ("When user export custom object as entity type") {
			ImportExport.openImportExportAdmin();

			ImportExport.exportFile(
				entityType = "C_Subject (v1_0 - Liferay Object REST)",
				exportFields = "Attribute Code",
				exportFileFormat = "JSON");
		}

		task ("Then zip file contains related file type export successfully") {
			ImportExport.unzipDownloadedExportFile();

			BatchEngine.assertExportedFileContainsCorrectObject(
				expectedValue = "Math",
				fileName = "export.json",
				jsonObject = "$..[0]name");
		}
	}

	@priority = 4
	test ExportCustomObjectEntryWithOneToManyRelationship {
		property portal.acceptance = "true";

		task ("Given two custom objects published") {
			ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "university",
				en_US_plural_label = "universities",
				name = "University",
				requiredStringFieldName = "name");

			ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "student",
				en_US_plural_label = "students",
				name = "Student",
				requiredStringFieldName = "name");
		}

		task ("And Given oneToMany releationship has been set between them") {
			ObjectDefinitionAPI.createRelationshipWithObjectDefinitionNames(
				childObjectName = "Student",
				deletionType = "cascade",
				name = "universityStudents",
				parentObjectName = "University",
				type = "oneToMany");
		}

		task ("And Given one entry related to antoher one") {
			var universityEntryId = ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "universities",
				name = "Oxford");

			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "students",
				name = "Pearl");

			ObjectDefinitionAPI.relateObjectEntriesByName(
				child_plural_label = "students",
				childEntryName = "Pearl",
				parent_plural_label = "universities",
				parentEntryName = "Oxford",
				relationshipName = "universityStudents");
		}

		task ("When user export custom object as entity type") {
			ImportExport.openImportExportAdmin();

			ImportExport.exportFile(
				entityType = "C_Student (v1_0 - Liferay Object REST)",
				exportFields = "Attribute Code",
				exportFileFormat = "JSON");
		}

		task ("Then zip file contains related file type export successfully") {
			ImportExport.unzipDownloadedExportFile();

			BatchEngine.assertExportedFileContainsCorrectObject(
				expectedValue = "Pearl",
				fileName = "export.json",
				jsonObject = "$..[0]name");
		}
	}

	@priority = 4
	test ExportCustomObjectWithAllFieldTypesMapped {
		property portal.acceptance = "true";

		task ("Given a custom object with all kinds of field type is publushed") {
			Picklist.addPicklistViaAPI(picklistName = "customPicklist");

			Picklist.addPicklistItemViaAPI(
				itemKey = "distance1",
				itemName = "distance1",
				picklistName = "customPicklist");

			var picklistId = JSONObject.getPicklistId(picklistName = "customPicklist");

			ObjectDefinitionAPI.createObjectDefinitionWithAllKindsOfFieldTypes(
				en_US_label = "student",
				en_US_plural_label = "students",
				objectDefinitionName = "Student",
				picklistId = ${picklistId},
				requiredStringFieldName = "name");
		}

		task ("And Given object entry is created") {
			var studentEntryId = CustomObjectAPI.createObjectEntryWithAllFields(
				customBooleanValue = "true",
				customLongTextValue = "This is a custom LongText field",
				customPicklistValue = "distance1",
				customPrecisionDecimalValue = "12.55",
				en_US_plural_label = "students",
				entryId = ${studentEntryId},
				requiredFieldLabel = "name",
				requiredFieldValue = "Jessica");

			ObjectAdmin.selectAttachmentFileInObjectEntryViaUI(
				fileName = "Document_3.png",
				key_entry = ${studentEntryId},
				label = "student",
				objectName = "Student");
		}

		task ("When user export custom object with all attributes codes selected") {
			ImportExport.openImportExportAdmin();

			ImportExport.exportFile(
				entityType = "C_Student (v1_0 - Liferay Object REST)",
				exportFields = "name,creator,customAttachment,customBoolean,customLongText,customPicklist,customPrecisionDecimal,",
				exportFileFormat = "JSON");
		}

		task ("Then the zip file contains a related file type export successfully") {
			var filePath = TestCase.getDependenciesDirPath(fileName = "json_objectEntry_export.txt");
			var response = ObjectDefinitionAPI.getObjectEntries(en_US_plural_label = "students");
			var userId = JSONUserAPI._getUserIdByEmailAddress(userEmailAddress = "test@liferay.com");
			var attachmenId = JSONPathUtil.getProperty(
				property = "$.items..customAttachment.id",
				response = ${response});
			var attachmenHref = JSONPathUtil.getProperty(
				property = "$.items..customAttachment.link.href",
				response = ${response});

			FileUtil.replaceStringInFile(${filePath}, 20123, ${userId});

			FileUtil.replaceStringInFile(${filePath}, 36105, ${attachmenId});

			FileUtil.replaceStringInFile(${filePath}, "/documents/36568/36570/Document_3.png", ${attachmenHref});

			ImportExport.assertFileContent(
				comparisonFileName = "json_objectEntry_export.txt",
				fileName = "export.json");
		}
	}

	@priority = 4
	test ExportCustomObjectWithObjectEntry {
		property portal.acceptance = "true";

		task ("Given a custom object is published") {
			ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "student",
				en_US_plural_label = "students",
				name = "Student",
				requiredStringFieldName = "name");
		}

		task ("And Given object entry is created") {
			ObjectDefinitionAPI.createObjectEntryWithName(
				en_US_plural_label = "students",
				name = "Jessica");
		}

		task ("When user export custom object as entity type and map attribute codes") {
			ImportExport.openImportExportAdmin();

			ImportExport.exportFile(
				entityType = "C_Student (v1_0 - Liferay Object REST)",
				exportFields = "Attribute Code",
				exportFileFormat = "JSON");
		}

		task ("Then the zip file contains a related file type export successfully") {
			ImportExport.unzipDownloadedExportFile();

			BatchEngine.assertExportedFileContainsCorrectObject(
				expectedValue = "Jessica",
				fileName = "export.json",
				jsonObject = "$..[0]name");
		}
	}

	@priority = 3
	test ExportCustomObjectWithoutObjectEntry {
		task ("Given a custom object is published") {
			ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "student",
				en_US_plural_label = "students",
				name = "Student",
				requiredStringFieldName = "name");
		}

		task ("When user export custom object with all attribute codes selected") {
			ImportExport.openImportExportAdmin();

			ImportExport.exportFile(
				entityType = "C_Student (v1_0 - Liferay Object REST)",
				exportFields = "Attribute Code",
				exportFileFormat = "JSON");
		}

		task ("Then the zip file contains a related file type export successfully") {
			ImportExport.unzipDownloadedExportFile();
		}

		task ("And Then no error in server console") {
			AssertConsoleTextNotPresent(value1 = "HTTP 404");
		}
	}

	@priority = 3
	test SaveCustomObjectEntityTypeAsTemplate {
		task ("Given a custom object is published") {
			ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "student",
				en_US_plural_label = "students",
				name = "Student",
				requiredStringFieldName = "name");
		}

		task ("And Given several attribute codes are selected in export wizard") {
			ImportExport.openImportExportAdmin();

			ImportExport.gotoExport();
		}

		task ("When save as template with a template name") {
			ImportExport.configureExport(
				entityType = "C_Student (v1_0 - Liferay Object REST)",
				exportFields = "Attribute Code",
				exportFileFormat = "JSON");

			ImportExport.saveAsTemplate(templateName = "Template Name");
		}

		task ("Then the template saved successfully") {
			ImportExport.openImportExportAdmin();

			Navigator.gotoNavTab(navTab = "Templates");

			LexiconEntry.viewEntryName(rowEntry = "Template Name");
		}
	}

	@description = "Ignored due to LPS-189103"
	@ignore = "true"
	@priority = 3
	test SaveImportCustomObjectAsTemplate {
		task ("And Given I create an import task with custom objects") {
			ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "student",
				en_US_plural_label = "students",
				name = "Student",
				requiredStringFieldName = "name");

			ImportExport.openImportExportAdmin();

			ImportExport.importFile(
				entityType = "C_Student (v1_0 - Liferay Object REST)",
				fieldMappings = "name:Student Name,externalReferenceCode:External Reference Code",
				fileName = "csv_student_import.csv",
				noExport = "true");
		}

		task ("When save as template with a template name") {
			ImportExport.saveAsTemplate(templateName = "Template Name");
		}

		task ("Then the template saved successfully") {
			ImportExport.openImportExportAdmin();

			Navigator.gotoNavTab(navTab = "Templates");

			LexiconEntry.viewEntryName(rowEntry = "Template Name");
		}
	}

	@priority = 4
	test SelectCustomObjectAsEntityType {
		property portal.acceptance = "true";

		task ("Given a custom object is published") {
			ObjectDefinitionAPI.createAndPublishObjectDefinition(
				en_US_label = "student",
				en_US_plural_label = "students",
				name = "Student",
				requiredStringFieldName = "name");
		}

		task ("When select the custom object as the entity type to export") {
			ImportExport.openImportExportAdmin();

			ImportExport.gotoExport();

			ImportExport.selectEntity(entityType = "C_Student (v1_0 - Liferay Object REST)");
		}

		task ("Then no error in server console") {
			AssertConsoleTextNotPresent(value1 = "HTTP 404");
		}
	}

}