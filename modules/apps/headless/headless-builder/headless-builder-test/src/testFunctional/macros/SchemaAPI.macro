definition {

	macro _curlAPISchema {
		if (isSet(virtualHost)) {
			if (!(isSet(port))) {
				var port = 8080;
			}

			var portalURL = "http://${virtualHost}:${port}";
		}
		else {
			var portalURL = JSONCompany.getPortalURL();
		}

		var api = "headless-builder/schemas";

		if (isSet(requestSchemaId) && isSet(endpointId)) {
			var api = "${api}/${requestSchemaId}/requestAPISchemaToAPIEndpoints/${endpointId}";
		}

		if (isSet(responseSchemaId) && isSet(endpointId)) {
			var api = "${api}/${responseSchemaId}/responseAPISchemaToAPIEndpoints/${endpointId}";
		}

		var curl = '''
			${portalURL}/o/${api} \
				-u test@liferay.com:test \
				-H Content-Type: application/json
		''';

		return ${curl};
	}

	macro createAPISchema {
		Variables.assertDefined(parameterList = "${mainObjectDefinitionERC},${name},${apiApplicationId}");

		var curl = SchemaAPI._curlAPISchema(virtualHost = ${virtualHost});
		var body = '''
			-d {
				"mainObjectDefinitionERC": "${mainObjectDefinitionERC}",
				"name": "${name}",
				"r_apiApplicationToAPISchemas_c_apiApplicationId": ${apiApplicationId}
			}
		''';

		var curl = StringUtil.add(${curl}, " \ ${body}", "");

		var response = JSONCurlUtil.post(${curl});

		return ${response};
	}

	macro createNAPISchemas {
		Variables.assertDefined(parameterList = "${numberOfSchemas},${mainObjectDefinitionERC},${name},${apiApplicationId}");

		var i = 0;

		while (${i} != ${numberOfSchemas}) {
			var i = ${i} + 1;

			SchemaAPI.createAPISchema(
				apiApplicationId = ${apiApplicationId},
				mainObjectDefinitionERC = ${mainObjectDefinitionERC},
				name = "${name}${i}");
		}
	}

	macro getAPISchemas {
		var curl = SchemaAPI._curlAPISchema(virtualHost = ${virtualHost});

		var response = JSONCurlUtil.get(${curl});

		return ${response};
	}

	macro relateRequestSchemaToEndpointByIds {
		Variables.assertDefined(parameterList = "${requestSchemaId},${endpointId}");

		var curl = SchemaAPI._curlAPISchema(
			endpointId = ${endpointId},
			requestSchemaId = ${requestSchemaId});

		var response = JSONCurlUtil.put(${curl});

		var schemaId = JSONUtil.getWithJSONPath(${response}, "$.r_requestAPISchemaToAPIEndpoints_c_apiSchemaId");

		TestUtils.assertEquals(
			actual = ${schemaId},
			expected = ${requestSchemaId});
	}

	macro relateResponseSchemaToEndpointByIds {
		Variables.assertDefined(parameterList = "${responseSchemaId},${endpointId}");

		var curl = SchemaAPI._curlAPISchema(
			endpointId = ${endpointId},
			responseSchemaId = ${responseSchemaId});

		var response = JSONCurlUtil.put(${curl});

		var schemaId = JSONUtil.getWithJSONPath(${response}, "$.r_responseAPISchemaToAPIEndpoints_c_apiSchemaId");

		TestUtils.assertEquals(
			actual = ${schemaId},
			expected = ${responseSchemaId});
	}

}