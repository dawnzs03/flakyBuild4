@component-name = "portal-headless"
definition {

	property custom.properties = "${line.separator}feature.flag.LPS-167253=true${line.separator}feature.flag.LPS-178642=true";
	property portal.release = "true";
	property portal.upstream = "true";
	property testray.component.names = "Object";
	property testray.main.component.name = "Headless Builder";

	setUp {
		TestCase.setUpPortalInstance();

		User.firstLoginUI();

		SearchAdministration.executeReindex();
	}

	tearDown {
		ApplicationAPI.deleteAllAPIApplication();

		var testLiferayVirtualInstance = PropsUtil.get("test.liferay.virtual.instance");

		if (${testLiferayVirtualInstance} == "true") {
			PortalInstances.tearDownCP();
		}
	}

	@priority = 4
	test CanChangeApiApplicationStatus {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given API application with applicationStatus 'unpublished', baseURL 'my-app', and title 'My App' created") {
			var response = ApplicationAPI.createAPIApplication(
				baseURL = "my-app",
				status = "unpublished",
				title = "My APP");
		}

		task ("When in ‘headless-builder/applications’ I request putAPIApplication with ${aPIApplicationId}, applicationStatus 'published', baseURL 'my-app', and title 'My App'") {
			var applicationId = JSONPathUtil.getIdValue(response = ${response});

			APIExplorer.navigateToOpenAPI(
				api = "headless-builder",
				version = "applications");

			APIExplorer.executeAPIMethod(
				method = "putAPIApplication",
				parameter = "aPIApplicationId",
				requestBody = "{\"applicationStatus\": \"published\", \"baseURL\": \"my-app\", \"title\": \"My App\"}",
				service = "APIApplication",
				value = ${applicationId});
		}

		task ("Then applicationStatus value is changed to 'published'") {
			var response = ApplicationAPI.getAPIApplications();

			var applicationStatus = JSONUtil.getWithJSONPath(${response}, "$..applicationStatus.key");

			TestUtils.assertEquals(
				actual = ${applicationStatus},
				expected = "published");
		}
	}

	@priority = 5
	test CanCreateApiApplicationWithValidBaseUrl {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("When I send request to post API application baseURL 'my-app-1234', and title 'My App'") {
			APIExplorer.navigateToOpenAPI(
				api = "headless-builder",
				version = "applications");

			APIExplorer.executeAPIMethod(
				method = "postAPIApplication",
				requestBody = "{\"baseURL\": \"my-app-1234\", \"title\": \"My App\"}",
				service = "APIApplication");
		}

		task ("Then API application is created") {
			AssertTextEquals(
				locator1 = "OpenAPI#RESPONSE_CODE",
				method = "postAPIApplication",
				value1 = 200);

			AssertTextEquals.assertPartialText(
				locator1 = "OpenAPI#RESPONSE_BODY",
				method = "postAPIApplication",
				value1 = "\"key\": \"unpublished\"");
		}
	}

	@priority = 5
	test CanCreateUnpublishedApiApplication {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("When in ‘headless-builder/applications’ I request postAPIApplication with applicationStatus 'unpublished', baseURL 'my-app', and title 'My App'") {
			APIExplorer.navigateToOpenAPI(
				api = "headless-builder",
				version = "applications");

			APIExplorer.executeAPIMethod(
				method = "postAPIApplication",
				requestBody = "{\"applicationStatus\": \"unpublished\", \"baseURL\": \"my-app\", \"title\": \"My App\"}",
				service = "APIApplication");
		}

		task ("Then API application is created") {
			var response = ApplicationAPI.getAPIApplications();

			var totcalCount = JSONUtil.getWithJSONPath(${response}, "$..totalCount");

			TestUtils.assertEquals(
				actual = ${totcalCount},
				expected = 1);
		}
	}

	@priority = 5
	test CanDeleteApiApplication {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given API application with baseURL 'my-app', and title 'My App' created") {
			var response = ApplicationAPI.createAPIApplication(
				baseURL = "my-app",
				status = "published",
				title = "My APP");
		}

		task ("When I request deleteAPIApplication with ${aPIApplicationId}") {
			var applicationId = JSONPathUtil.getIdValue(response = ${response});

			APIExplorer.navigateToOpenAPI(
				api = "headless-builder",
				version = "applications");

			APIExplorer.executeAPIMethod(
				method = "deleteAPIApplication",
				parameter = "aPIApplicationId",
				service = "APIApplication",
				value = ${applicationId});
		}

		task ("Then API application is deleted") {
			AssertTextEquals(
				locator1 = "OpenAPI#RESPONSE_CODE",
				method = "deleteAPIApplication",
				value1 = 204);

			var response = ApplicationAPI.getAPIApplications();

			var totalCount = JSONUtil.getWithJSONPath(${response}, "$..totalCount");

			TestUtils.assertEquals(
				actual = ${totalCount},
				expected = 0);
		}
	}

	@priority = 5
	test CannotCreateApiApplicationWithInvalidBaseUrl {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("When I create API application baseURL 'my app 1234', and title 'My App'") {
			APIExplorer.navigateToOpenAPI(
				api = "headless-builder",
				version = "applications");

			APIExplorer.executeAPIMethod(
				method = "postAPIApplication",
				requestBody = "{\"baseURL\": \"my app 1234\", \"title\": \"My App\"}",
				service = "APIApplication");
		}

		task ("Then status code 400 with an error message 'Base URL can have a maximum of 255 alphanumeric characters.'") {
			AssertTextEquals(
				locator1 = "OpenAPI#RESPONSE_CODE",
				method = "postAPIApplication",
				value1 = 400);

			AssertTextEquals.assertPartialText(
				locator1 = "OpenAPI#RESPONSE_BODY",
				method = "postAPIApplication",
				value1 = "Base URL can have a maximum of 255 alphanumeric characters.");
		}

		task ("And Then API application is not created") {
			var response = ApplicationAPI.getAPIApplications();

			var totalCount = JSONUtil.getWithJSONPath(${response}, "$..totalCount");

			TestUtils.assertEquals(
				actual = ${totalCount},
				expected = 0);
		}
	}

	@priority = 4
	test CannotModifyApiApplicationWithInvalidStatusValue {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("Given API application with applicationStatus 'unpublished', baseURL 'my-app', and title 'My App' created") {
			var response = ApplicationAPI.createAPIApplication(
				baseURL = "my-app",
				status = "unpublished",
				title = "My APP");
		}

		task ("When in ‘headless-builder/applications’ I request putAPIApplication with {aPIApplicationId}, applicationStatus 'string', baseURL 'my-app', and title 'My App'") {
			var applicationId = JSONPathUtil.getIdValue(response = ${response});

			APIExplorer.navigateToOpenAPI(
				api = "headless-builder",
				version = "applications");

			APIExplorer.executeAPIMethod(
				method = "putAPIApplication",
				parameter = "aPIApplicationId",
				requestBody = "{\"applicationStatus\": \"String\", \"baseURL\": \"my-app\", \"title\": \"My App\"}",
				service = "APIApplication",
				value = ${applicationId});
		}

		task ("Then I receive an error 'Object field name \"applicationStatus\" is not mapped to a valid list type entry'") {
			AssertTextEquals.assertPartialText(
				locator1 = "OpenAPI#RESPONSE_BODY",
				method = "putAPIApplication",
				value1 = "Object field name \\"applicationStatus\\" is not mapped to a valid list type entry");

			AssertTextEquals(
				locator1 = "OpenAPI#RESPONSE_CODE",
				method = "putAPIApplication",
				value1 = 400);
		}
	}

	@priority = 5
	test CanSeeApiApplicationSchema {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("When I navigate to OpenAPI of 'headless-builder/applications' application") {
			APIExplorer.navigateToOpenAPI(
				api = "headless-builder",
				version = "applications");
		}

		task ("Then I can see schema of APIApplication object") {
			AssertElementPresent(
				locator1 = "OpenAPI#SCHEMA_ENTITY",
				schema = "APIApplication");
		}
	}

	@priority = 5
	test CanSeeApiApplicationSchemaFields {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("When I navigate to OpenAPI of 'headless-builder/applications' application") {
			APIExplorer.navigateToOpenAPI(
				api = "headless-builder",
				version = "applications");
		}

		task ("Then the fields applicationStatus*, baseURL*, description, title*, version are present") {
			APIExplorer.assertSchemaFieldsPresent(
				schemaEntity = "APIApplication",
				schemaFields = "applicationStatus*,baseURL*,description,title*,version");
		}
	}

	@priority = 5
	test CanSeeApiApplicationSchemaNestedFields {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("When I navigate to OpenAPI of 'headless-builder/applications'") {
			APIExplorer.navigateToOpenAPI(
				api = "headless-builder",
				version = "applications");
		}

		task ("Then the nestedFields of one-to-many relationships apiApplicationToAPISchemas and apiApplicationToAPIEndpoints are present in the schema") {
			APIExplorer.assertSchemaFieldsPresent(
				schemaEntity = "APIApplication",
				schemaFields = "apiApplicationToAPISchemas,apiApplicationToAPIEndpoints");
		}
	}

	@priority = 5
	test CanSeeApiEndpointSchema {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("When I navigate to OpenAPI 'headless-builder/endpoints' application") {
			APIExplorer.navigateToOpenAPI(
				api = "headless-builder",
				version = "endpoints");
		}

		task ("Then I can see schema of APIEndpoint object") {
			AssertElementPresent(
				locator1 = "OpenAPI#SCHEMA_ENTITY",
				schema = "APIEndpoint");
		}
	}

	@priority = 5
	test CanSeeApiEndpointSchemaFields {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("When I navigate to OpenAPI 'headless-builder/endpoints' application") {
			APIExplorer.navigateToOpenAPI(
				api = "headless-builder",
				version = "endpoints");
		}

		task ("Then the fields httpMethod*, name*, path*, scope* are present in the APIEndpoint schema") {
			APIExplorer.assertSchemaFieldsPresent(
				schemaEntity = "APIEndpoint",
				schemaFields = "httpMethod*,name*,path*,scope*");
		}
	}

	@priority = 5
	test CanSeeApiEndpointSchemaNestedFields {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("When I navigate to OpenAPI 'headless-builder/endpoints' application") {
			APIExplorer.navigateToOpenAPI(
				api = "headless-builder",
				version = "endpoints");
		}

		task ("Then the nestedFields of one-to-many relationships apiApplicationToAPIEndpoints, requestAPISchemaToAPIEndpoints, responseAPISchemaToAPIEndpoints are present in the schema") {
			APIExplorer.assertSchemaFieldsPresent(
				schemaEntity = "APIEndpoint",
				schemaFields = "apiApplicationToAPIEndpoints,requestAPISchemaToAPIEndpoints,responseAPISchemaToAPIEndpoints");
		}
	}

	@priority = 5
	test CanSeeApiPropertySchema {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("When I navigate to OpenAPI 'headless-builder/properties'") {
			APIExplorer.navigateToOpenAPI(
				api = "headless-builder",
				version = "properties");
		}

		task ("Then I can see schema of APIProperty object") {
			AssertElementPresent(
				locator1 = "OpenAPI#SCHEMA_ENTITY",
				schema = "APIProperty");
		}
	}

	@priority = 5
	test CanSeeApiPropertySchemaFields {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("When I navigate to OpenAPI 'headless-builder/properties'") {
			APIExplorer.navigateToOpenAPI(
				api = "headless-builder",
				version = "properties");
		}

		task ("Then the fields description, name*, objectFieldERC*, objectRelationshipNames, parentAPIPropertyERC are present in the APIProperty schema") {
			APIExplorer.assertSchemaFieldsPresent(
				schemaEntity = "APIProperty",
				schemaFields = "description,name*,objectFieldERC*,objectRelationshipNames,parentAPIPropertyERC");
		}
	}

	@priority = 5
	test CanSeeApiPropertySchemaNestedFields {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("When I navigate to OpenAPI 'headless-builder/properties' application") {
			APIExplorer.navigateToOpenAPI(
				api = "headless-builder",
				version = "properties");
		}

		task ("Then the nestedFields of many-to-many self relationship apiPropertiesToAPIProperties is present in the schema") {
			APIExplorer.assertSchemaFieldsPresent(
				schemaEntity = "APIProperty",
				schemaFields = "apiPropertiesToAPIProperties");
		}
	}

	@priority = 5
	test CanSeeApiSchemaSchema {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("When I navigate to OpenAPI 'headless-builder/schemas'") {
			APIExplorer.navigateToOpenAPI(
				api = "headless-builder",
				version = "schemas");
		}

		task ("Then I can see schema of APISchema object") {
			AssertElementPresent(
				locator1 = "OpenAPI#SCHEMA_ENTITY",
				schema = "APISchema");
		}
	}

	@priority = 5
	test CanSeeApiSchemaSchemaFields {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("When I navigate to OpenAPI 'headless-builder/schemas' application") {
			APIExplorer.navigateToOpenAPI(
				api = "headless-builder",
				version = "schemas");
		}

		task ("Then the fields description, mainObjectDefinitionERC, name* are present in the schema") {
			APIExplorer.assertSchemaFieldsPresent(
				schemaEntity = "APISchema",
				schemaFields = "description,mainObjectDefinitionERC,name*");
		}
	}

	@priority = 5
	test CanSeeApiSchemaSchemaNestedFields {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("When I navigate to OpenAPI 'headless-builder/schemas' application") {
			APIExplorer.navigateToOpenAPI(
				api = "headless-builder",
				version = "schemas");
		}

		task ("Then the nestedFields of one-to-many relationships apiSchemaToAPIProperties and responseAPISchemaToAPIEndpoints are present in the schema") {
			APIExplorer.assertSchemaFieldsPresent(
				schemaEntity = "APISchema",
				schemaFields = "apiSchemaToAPIProperties,responseAPISchemaToAPIEndpoints");
		}
	}

	@priority = 5
	test CanSeeHeadlessBuilderApplications {
		property portal.acceptance = "true";
		property test.liferay.virtual.instance = "false";
		property test.run.type = "single";

		task ("When I navigate to OpenAPI Explorer") {
			APIExplorer.navigateToOpenAPI();
		}

		task ("Then I can see ‘headless-builder/applications’, 'headless-builder/endpoints', 'headless-builder/filters', 'headless-builder/properties', 'headless-builder/schemas', and 'headless-builder/sorts' on the REST Applications list") {
			for (var restApplication : list "headless-builder/applications,headless-builder/endpoints,headless-builder/filters,headless-builder/properties,headless-builder/schemas,headless-builder/sorts") {
				AssertElementPresent(
					locator1 = "Button#BUTTON_WITH_VALUE",
					value = ${restApplication});
			}
		}
	}

}